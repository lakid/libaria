/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global;
        if (jobj)
          jthis_ = ((weak_global_ || !mem_own) ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj));
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0) {
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon((void **) &jenv_, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread((void **) &jenv_, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.peek();
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  static jclass jclass_AriaJavaJNI = NULL;
  static jmethodID director_methids[204];
}

#include "Aria.h"
#include "ArGPSConnector.h"
#include "ArSystemStatus.h"
#include "ArMD5Calculator.h"
/*#include "SwigTestClass.h"*/
#include "wrapper_ExtraClasses.h"
#include "wrapper_Functors.h"

#include <cstddef>


#include "wrapper_Functors.h"


struct ArJoyVec3f { double x, y, z; };
struct ArJoyVec3i { int x, y, z; };


#include <stdexcept>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< ArPoseWithTime >::const_reference std_vector_Sl_ArPoseWithTime_Sg__get(std::vector< ArPoseWithTime > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_ArPoseWithTime_Sg__set(std::vector< ArPoseWithTime > *self,int i,std::vector< ArPoseWithTime >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< ArSensorReading >::const_reference std_vector_Sl_ArSensorReading_Sg__get(std::vector< ArSensorReading > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_ArSensorReading_Sg__set(std::vector< ArSensorReading > *self,int i,std::vector< ArSensorReading >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include <list>
#include <stdexcept>

SWIGINTERN std::list< ArMapObject * >::const_reference std_list_Sl_ArMapObject_Sm__Sg__get(std::list< ArMapObject * > *self,int i){
                int size = int(self->size());
                int j;
                if (i>=0 && i<size) {
                    std::list<ArMapObject *>::const_iterator p;  
                    p=self->begin(); 
                    for (j=0; j<i; j++) {p++;}
                    return (*p);   
                }
                else
                    throw std::out_of_range("list index out of range");
            }
SWIGINTERN std::list< ArFunctor * >::const_reference std_list_Sl_ArFunctor_Sm__Sg__get(std::list< ArFunctor * > *self,int i){
                int size = int(self->size());
                int j;
                if (i>=0 && i<size) {
                    std::list<ArFunctor *>::const_iterator p;  
                    p=self->begin(); 
                    for (j=0; j<i; j++) {p++;}
                    return (*p);   
                }
                else
                    throw std::out_of_range("list index out of range");
            }
SWIGINTERN std::list< ArPose >::const_reference std_list_Sl_ArPose_Sg__get(std::list< ArPose > *self,int i){
                int size = int(self->size());
                int j;
                if (i>=0 && i<size) {
                    std::list<ArPose>::const_iterator p;  
                    p=self->begin(); 
                    for (j=0; j<i; j++) {p++;}
                    return (*p);   
                }
                else
                    throw std::out_of_range("list index out of range");
            }
SWIGINTERN std::list< ArPose * >::const_reference std_list_Sl_ArPose_Sm__Sg__get(std::list< ArPose * > *self,int i){
                int size = int(self->size());
                int j;
                if (i>=0 && i<size) {
                    std::list<ArPose *>::const_iterator p;  
                    p=self->begin(); 
                    for (j=0; j<i; j++) {p++;}
                    return (*p);   
                }
                else
                    throw std::out_of_range("list index out of range");
            }
SWIGINTERN std::list< ArPoseWithTime >::const_reference std_list_Sl_ArPoseWithTime_Sg__get(std::list< ArPoseWithTime > *self,int i){
                int size = int(self->size());
                int j;
                if (i>=0 && i<size) {
                    std::list<ArPoseWithTime>::const_iterator p;  
                    p=self->begin(); 
                    for (j=0; j<i; j++) {p++;}
                    return (*p);   
                }
                else
                    throw std::out_of_range("list index out of range");
            }
SWIGINTERN std::list< ArPoseWithTime * >::const_reference std_list_Sl_ArPoseWithTime_Sm__Sg__get(std::list< ArPoseWithTime * > *self,int i){
                int size = int(self->size());
                int j;
                if (i>=0 && i<size) {
                    std::list<ArPoseWithTime *>::const_iterator p;  
                    p=self->begin(); 
                    for (j=0; j<i; j++) {p++;}
                    return (*p);   
                }
                else
                    throw std::out_of_range("list index out of range");
            }
SWIGINTERN std::list< ArRangeDevice * >::const_reference std_list_Sl_ArRangeDevice_Sm__Sg__get(std::list< ArRangeDevice * > *self,int i){
                int size = int(self->size());
                int j;
                if (i>=0 && i<size) {
                    std::list<ArRangeDevice *>::const_iterator p;  
                    p=self->begin(); 
                    for (j=0; j<i; j++) {p++;}
                    return (*p);   
                }
                else
                    throw std::out_of_range("list index out of range");
            }
SWIGINTERN std::list< ArArgumentBuilder * >::const_reference std_list_Sl_ArArgumentBuilder_Sm__Sg__get(std::list< ArArgumentBuilder * > *self,int i){
                int size = int(self->size());
                int j;
                if (i>=0 && i<size) {
                    std::list<ArArgumentBuilder *>::const_iterator p;  
                    p=self->begin(); 
                    for (j=0; j<i; j++) {p++;}
                    return (*p);   
                }
                else
                    throw std::out_of_range("list index out of range");
            }
SWIGINTERN std::list< ArLineSegment >::const_reference std_list_Sl_ArLineSegment_Sg__get(std::list< ArLineSegment > *self,int i){
                int size = int(self->size());
                int j;
                if (i>=0 && i<size) {
                    std::list<ArLineSegment>::const_iterator p;  
                    p=self->begin(); 
                    for (j=0; j<i; j++) {p++;}
                    return (*p);   
                }
                else
                    throw std::out_of_range("list index out of range");
            }
SWIGINTERN std::list< ArLineSegment * >::const_reference std_list_Sl_ArLineSegment_Sm__Sg__get(std::list< ArLineSegment * > *self,int i){
                int size = int(self->size());
                int j;
                if (i>=0 && i<size) {
                    std::list<ArLineSegment *>::const_iterator p;  
                    p=self->begin(); 
                    for (j=0; j<i; j++) {p++;}
                    return (*p);   
                }
                else
                    throw std::out_of_range("list index out of range");
            }

#include <map>
#include <algorithm>
#include <stdexcept>

SWIGINTERN ArPose const &std_map_Sl_int_Sc_ArPose_Sg__get(std::map< int,ArPose > *self,int const &key){
                std::map<int,ArPose >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_int_Sc_ArPose_Sg__set(std::map< int,ArPose > *self,int const &key,ArPose const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_int_Sc_ArPose_Sg__del(std::map< int,ArPose > *self,int const &key){
                std::map<int,ArPose >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_int_Sc_ArPose_Sg__has_key(std::map< int,ArPose > *self,int const &key){
                std::map<int,ArPose >::iterator i = self->find(key);
                return i != self->end();
            }

#include <string>

SWIGINTERN void ArAction_setActionRobot(ArAction *self,ArRobot *robot){
    self->ArAction::setRobot(robot);
  }
SWIGINTERN ArJoyVec3f ArJoyHandler_getDoubles__SWIG_2(ArJoyHandler *self){
    ArJoyVec3f r;
    self->getDoubles(&r.x, &r.y, &r.z);
    return r;
  }
SWIGINTERN ArJoyVec3i ArJoyHandler_getAdjusted__SWIG_2(ArJoyHandler *self){
    ArJoyVec3i r;
    self->getAdjusted(&r.x, &r.y, &r.z);
    return r;
  }
SWIGINTERN ArJoyVec3i ArJoyHandler_getUnfiltered__SWIG_2(ArJoyHandler *self){
    ArJoyVec3i r;
    self->getUnfiltered(&r.x, &r.y, &r.z);
    return r;
  }
SWIGINTERN ArJoyVec3i ArJoyHandler_getSpeeds__SWIG_1(ArJoyHandler *self){
    ArJoyVec3i r;
    self->getSpeeds(&r.x, &r.y, &r.z);
    return r;
  }

typedef struct {
                                                                                                     
      ArNMEAParser::MessageVector* message;
                                                                                                  
      ArTime timeParseStarted;
    } ArNMEAParser_Message;


SWIGINTERN std::string ArSocket_read__SWIG_2(ArSocket *self,size_t len,unsigned int msWait){
    char *buf = (char*)malloc(len);
    int n = self->read(buf, len, msWait);
    if(n <= 0) {
      free(buf);
      return "";
    }
    std::string s(buf, n);
    free(buf);
    return s;
  }
SWIGINTERN bool ArSocket_write__SWIG_1(ArSocket *self,std::string s){ 
    return self->write( (void*)(s.c_str()), (size_t)(s.length())); 
  }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "AriaJava_wrap.h"

SwigDirector_ArFunctor::SwigDirector_ArFunctor(JNIEnv *jenv) : ArFunctor(), Swig::Director(jenv) {
}

SwigDirector_ArFunctor::~SwigDirector_ArFunctor() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ArFunctor::invoke() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArFunctor::invoke.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[0], swigjobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

char const *SwigDirector_ArFunctor::getName() {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return ArFunctor::getName();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[1], swigjobj);
    if (jenv->ExceptionOccurred()) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

void SwigDirector_ArFunctor::setName(char const *name) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  
  if (!swig_override[2]) {
    ArFunctor::setName(name);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[2], swigjobj, jname);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArFunctor::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "invoke", "()V", NULL 
    },
    {
      "getName", "()Ljava/lang/String;", NULL 
    },
    {
      "setName", "(Ljava/lang/String;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/mobilerobots/Aria/ArFunctor");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ArRetFunctor_VoidP::SwigDirector_ArRetFunctor_VoidP(JNIEnv *jenv) : ArRetFunctor< void * >(), Swig::Director(jenv) {
}

SwigDirector_ArRetFunctor_VoidP::~SwigDirector_ArRetFunctor_VoidP() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ArRetFunctor_VoidP::invoke() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    ArRetFunctor< void * >::invoke();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[3], swigjobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

char const *SwigDirector_ArRetFunctor_VoidP::getName() {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return ArFunctor::getName();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[4], swigjobj);
    if (jenv->ExceptionOccurred()) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

void SwigDirector_ArRetFunctor_VoidP::setName(char const *name) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  
  if (!swig_override[2]) {
    ArFunctor::setName(name);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[5], swigjobj, jname);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void * SwigDirector_ArRetFunctor_VoidP::invokeR() {
  void *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArRetFunctor< void * >::invokeR.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[6], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = *(void **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArRetFunctor_VoidP::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "invoke", "()V", NULL 
    },
    {
      "getName", "()Ljava/lang/String;", NULL 
    },
    {
      "setName", "(Ljava/lang/String;)V", NULL 
    },
    {
      "invokeR", "()Lcom/mobilerobots/Aria/SWIGTYPE_p_void;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/mobilerobots/Aria/ArRetFunctor_VoidP");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ArRetFunctor_Bool::SwigDirector_ArRetFunctor_Bool(JNIEnv *jenv) : ArRetFunctor< bool >(), Swig::Director(jenv) {
}

SwigDirector_ArRetFunctor_Bool::~SwigDirector_ArRetFunctor_Bool() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ArRetFunctor_Bool::invoke() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    ArRetFunctor< bool >::invoke();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[7], swigjobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

char const *SwigDirector_ArRetFunctor_Bool::getName() {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return ArFunctor::getName();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[8], swigjobj);
    if (jenv->ExceptionOccurred()) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

void SwigDirector_ArRetFunctor_Bool::setName(char const *name) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  
  if (!swig_override[2]) {
    ArFunctor::setName(name);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[9], swigjobj, jname);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_ArRetFunctor_Bool::invokeR() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArRetFunctor< bool >::invokeR.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[10], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArRetFunctor_Bool::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "invoke", "()V", NULL 
    },
    {
      "getName", "()Ljava/lang/String;", NULL 
    },
    {
      "setName", "(Ljava/lang/String;)V", NULL 
    },
    {
      "invokeR", "()Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/mobilerobots/Aria/ArRetFunctor_Bool");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ArFunctor1_ArRobotPacketP::SwigDirector_ArFunctor1_ArRobotPacketP(JNIEnv *jenv) : ArFunctor1< ArRobotPacket * >(), Swig::Director(jenv) {
}

SwigDirector_ArFunctor1_ArRobotPacketP::~SwigDirector_ArFunctor1_ArRobotPacketP() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ArFunctor1_ArRobotPacketP::invoke() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArFunctor1< ArRobotPacket * >::invoke.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[11], swigjobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

char const *SwigDirector_ArFunctor1_ArRobotPacketP::getName() {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return ArFunctor::getName();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[12], swigjobj);
    if (jenv->ExceptionOccurred()) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

void SwigDirector_ArFunctor1_ArRobotPacketP::setName(char const *name) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  
  if (!swig_override[2]) {
    ArFunctor::setName(name);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[13], swigjobj, jname);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArFunctor1_ArRobotPacketP::invoke(ArRobotPacket *p1) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jp1 = 0 ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArFunctor1< ArRobotPacket * >::invoke.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArRobotPacket **)&jp1) = (ArRobotPacket *) p1; 
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[14], swigjobj, jp1);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArFunctor1_ArRobotPacketP::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "invoke", "()V", NULL 
    },
    {
      "getName", "()Ljava/lang/String;", NULL 
    },
    {
      "setName", "(Ljava/lang/String;)V", NULL 
    },
    {
      "invoke", "(Lcom/mobilerobots/Aria/ArRobotPacket;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/mobilerobots/Aria/ArFunctor1_ArRobotPacketP");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ArRetFunctor_Int::SwigDirector_ArRetFunctor_Int(JNIEnv *jenv) : ArRetFunctor< int >(), Swig::Director(jenv) {
}

SwigDirector_ArRetFunctor_Int::~SwigDirector_ArRetFunctor_Int() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ArRetFunctor_Int::invoke() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    ArRetFunctor< int >::invoke();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[15], swigjobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

char const *SwigDirector_ArRetFunctor_Int::getName() {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return ArFunctor::getName();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[16], swigjobj);
    if (jenv->ExceptionOccurred()) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

void SwigDirector_ArRetFunctor_Int::setName(char const *name) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  
  if (!swig_override[2]) {
    ArFunctor::setName(name);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[17], swigjobj, jname);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

int SwigDirector_ArRetFunctor_Int::invokeR() {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArRetFunctor< int >::invokeR.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[18], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArRetFunctor_Int::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "invoke", "()V", NULL 
    },
    {
      "getName", "()Ljava/lang/String;", NULL 
    },
    {
      "setName", "(Ljava/lang/String;)V", NULL 
    },
    {
      "invokeR", "()I", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/mobilerobots/Aria/ArRetFunctor_Int");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ArRetFunctor_Double::SwigDirector_ArRetFunctor_Double(JNIEnv *jenv) : ArRetFunctor< double >(), Swig::Director(jenv) {
}

SwigDirector_ArRetFunctor_Double::~SwigDirector_ArRetFunctor_Double() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ArRetFunctor_Double::invoke() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    ArRetFunctor< double >::invoke();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[19], swigjobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

char const *SwigDirector_ArRetFunctor_Double::getName() {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return ArFunctor::getName();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[20], swigjobj);
    if (jenv->ExceptionOccurred()) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

void SwigDirector_ArRetFunctor_Double::setName(char const *name) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  
  if (!swig_override[2]) {
    ArFunctor::setName(name);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[21], swigjobj, jname);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

double SwigDirector_ArRetFunctor_Double::invokeR() {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArRetFunctor< double >::invokeR.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[22], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArRetFunctor_Double::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "invoke", "()V", NULL 
    },
    {
      "getName", "()Ljava/lang/String;", NULL 
    },
    {
      "setName", "(Ljava/lang/String;)V", NULL 
    },
    {
      "invokeR", "()D", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/mobilerobots/Aria/ArRetFunctor_Double");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ArRetFunctor_UnsignedInt::SwigDirector_ArRetFunctor_UnsignedInt(JNIEnv *jenv) : ArRetFunctor< unsigned int >(), Swig::Director(jenv) {
}

SwigDirector_ArRetFunctor_UnsignedInt::~SwigDirector_ArRetFunctor_UnsignedInt() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ArRetFunctor_UnsignedInt::invoke() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    ArRetFunctor< unsigned int >::invoke();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[23], swigjobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

char const *SwigDirector_ArRetFunctor_UnsignedInt::getName() {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return ArFunctor::getName();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[24], swigjobj);
    if (jenv->ExceptionOccurred()) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

void SwigDirector_ArRetFunctor_UnsignedInt::setName(char const *name) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  
  if (!swig_override[2]) {
    ArFunctor::setName(name);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[25], swigjobj, jname);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

unsigned int SwigDirector_ArRetFunctor_UnsignedInt::invokeR() {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArRetFunctor< unsigned int >::invokeR.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[26], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = (unsigned int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArRetFunctor_UnsignedInt::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "invoke", "()V", NULL 
    },
    {
      "getName", "()Ljava/lang/String;", NULL 
    },
    {
      "setName", "(Ljava/lang/String;)V", NULL 
    },
    {
      "invokeR", "()J", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/mobilerobots/Aria/ArRetFunctor_UnsignedInt");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ArRetFunctor1_Double_ArPoseWithTime::SwigDirector_ArRetFunctor1_Double_ArPoseWithTime(JNIEnv *jenv) : ArRetFunctor1< double,ArPoseWithTime >(), Swig::Director(jenv) {
}

SwigDirector_ArRetFunctor1_Double_ArPoseWithTime::~SwigDirector_ArRetFunctor1_Double_ArPoseWithTime() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ArRetFunctor1_Double_ArPoseWithTime::invoke() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    ArRetFunctor< double >::invoke();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[27], swigjobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

char const *SwigDirector_ArRetFunctor1_Double_ArPoseWithTime::getName() {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return ArFunctor::getName();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[28], swigjobj);
    if (jenv->ExceptionOccurred()) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

void SwigDirector_ArRetFunctor1_Double_ArPoseWithTime::setName(char const *name) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  
  if (!swig_override[2]) {
    ArFunctor::setName(name);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[29], swigjobj, jname);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

double SwigDirector_ArRetFunctor1_Double_ArPoseWithTime::invokeR() {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArRetFunctor1< double,ArPoseWithTime >::invokeR.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[30], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

double SwigDirector_ArRetFunctor1_Double_ArPoseWithTime::invokeR(ArPoseWithTime p1) {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jp1  ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArRetFunctor1< double,ArPoseWithTime >::invokeR.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jp1 = 0;
    *((ArPoseWithTime **)&jp1) = &p1; 
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[31], swigjobj, jp1);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArRetFunctor1_Double_ArPoseWithTime::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "invoke", "()V", NULL 
    },
    {
      "getName", "()Ljava/lang/String;", NULL 
    },
    {
      "setName", "(Ljava/lang/String;)V", NULL 
    },
    {
      "invokeR", "()D", NULL 
    },
    {
      "invokeR", "(Lcom/mobilerobots/Aria/ArPoseWithTime;)D", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/mobilerobots/Aria/ArRetFunctor1_Double_ArPoseWithTime");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 5; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP::SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP(JNIEnv *jenv) : ArRetFunctor1< bool,ArRobotPacket * >(), Swig::Director(jenv) {
}

SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP::~SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP::invoke() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    ArRetFunctor< bool >::invoke();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[32], swigjobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

char const *SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP::getName() {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return ArFunctor::getName();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[33], swigjobj);
    if (jenv->ExceptionOccurred()) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

void SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP::setName(char const *name) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  
  if (!swig_override[2]) {
    ArFunctor::setName(name);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[34], swigjobj, jname);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP::invokeR() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArRetFunctor1< bool,ArRobotPacket * >::invokeR.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[35], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP::invokeR(ArRobotPacket *p1) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jp1 = 0 ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArRetFunctor1< bool,ArRobotPacket * >::invokeR.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArRobotPacket **)&jp1) = (ArRobotPacket *) p1; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[36], swigjobj, jp1);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "invoke", "()V", NULL 
    },
    {
      "getName", "()Ljava/lang/String;", NULL 
    },
    {
      "setName", "(Ljava/lang/String;)V", NULL 
    },
    {
      "invokeR", "()Z", NULL 
    },
    {
      "invokeR", "(Lcom/mobilerobots/Aria/ArRobotPacket;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/mobilerobots/Aria/ArRetFunctor1_Bool_ArRobotPacketP");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 5; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder::SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder(JNIEnv *jenv) : ArRetFunctor1< bool,ArArgumentBuilder >(), Swig::Director(jenv) {
}

SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder::~SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder::invoke() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    ArRetFunctor< bool >::invoke();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[37], swigjobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

char const *SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder::getName() {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return ArFunctor::getName();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[38], swigjobj);
    if (jenv->ExceptionOccurred()) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

void SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder::setName(char const *name) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  
  if (!swig_override[2]) {
    ArFunctor::setName(name);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[39], swigjobj, jname);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder::invokeR() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArRetFunctor1< bool,ArArgumentBuilder >::invokeR.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[40], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder::invokeR(ArArgumentBuilder p1) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jp1  ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArRetFunctor1< bool,ArArgumentBuilder >::invokeR.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jp1 = 0;
    *((ArArgumentBuilder **)&jp1) = &p1; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[41], swigjobj, jp1);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "invoke", "()V", NULL 
    },
    {
      "getName", "()Ljava/lang/String;", NULL 
    },
    {
      "setName", "(Ljava/lang/String;)V", NULL 
    },
    {
      "invokeR", "()Z", NULL 
    },
    {
      "invokeR", "(Lcom/mobilerobots/Aria/ArArgumentBuilder;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/mobilerobots/Aria/ArRetFunctor1_Bool_ArgumentBuilder");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 5; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP::SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP(JNIEnv *jenv) : ArRetFunctor1< bool,ArArgumentBuilder * >(), Swig::Director(jenv) {
}

SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP::~SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP::invoke() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    ArRetFunctor< bool >::invoke();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[42], swigjobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

char const *SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP::getName() {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return ArFunctor::getName();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[43], swigjobj);
    if (jenv->ExceptionOccurred()) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

void SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP::setName(char const *name) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  
  if (!swig_override[2]) {
    ArFunctor::setName(name);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[44], swigjobj, jname);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP::invokeR() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArRetFunctor1< bool,ArArgumentBuilder * >::invokeR.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[45], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP::invokeR(ArArgumentBuilder *p1) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jp1 = 0 ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArRetFunctor1< bool,ArArgumentBuilder * >::invokeR.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArArgumentBuilder **)&jp1) = (ArArgumentBuilder *) p1; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[46], swigjobj, jp1);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "invoke", "()V", NULL 
    },
    {
      "getName", "()Ljava/lang/String;", NULL 
    },
    {
      "setName", "(Ljava/lang/String;)V", NULL 
    },
    {
      "invokeR", "()Z", NULL 
    },
    {
      "invokeR", "(Lcom/mobilerobots/Aria/ArArgumentBuilder;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/mobilerobots/Aria/ArRetFunctor1_Bool_ArgumentBuilderP");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 5; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ArRetFunctor1_VoidP_VoidP::SwigDirector_ArRetFunctor1_VoidP_VoidP(JNIEnv *jenv) : ArRetFunctor1< void *,void * >(), Swig::Director(jenv) {
}

SwigDirector_ArRetFunctor1_VoidP_VoidP::~SwigDirector_ArRetFunctor1_VoidP_VoidP() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ArRetFunctor1_VoidP_VoidP::invoke() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    ArRetFunctor< void * >::invoke();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[47], swigjobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

char const *SwigDirector_ArRetFunctor1_VoidP_VoidP::getName() {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return ArFunctor::getName();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[48], swigjobj);
    if (jenv->ExceptionOccurred()) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

void SwigDirector_ArRetFunctor1_VoidP_VoidP::setName(char const *name) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  
  if (!swig_override[2]) {
    ArFunctor::setName(name);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[49], swigjobj, jname);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void * SwigDirector_ArRetFunctor1_VoidP_VoidP::invokeR() {
  void *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArRetFunctor1< void *,void * >::invokeR.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[50], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = *(void **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void * SwigDirector_ArRetFunctor1_VoidP_VoidP::invokeR(void *p1) {
  void *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jp1 = 0 ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArRetFunctor1< void *,void * >::invokeR.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((void **)&jp1) = (void *) p1; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[51], swigjobj, jp1);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = *(void **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArRetFunctor1_VoidP_VoidP::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "invoke", "()V", NULL 
    },
    {
      "getName", "()Ljava/lang/String;", NULL 
    },
    {
      "setName", "(Ljava/lang/String;)V", NULL 
    },
    {
      "invokeR", "()Lcom/mobilerobots/Aria/SWIGTYPE_p_void;", NULL 
    },
    {
      "invokeR", "(Lcom/mobilerobots/Aria/SWIGTYPE_p_void;)Lcom/mobilerobots/Aria/SWIGTYPE_p_void;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/mobilerobots/Aria/ArRetFunctor1_VoidP_VoidP");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 5; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ArAction::SwigDirector_ArAction(JNIEnv *jenv, char const *name, char const *description) : ArAction(name, description), Swig::Director(jenv) {
}

SwigDirector_ArAction::~SwigDirector_ArAction() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_ArAction::isActive() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return ArAction::isActive();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[52], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArAction::activate() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    ArAction::activate();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[53], swigjobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArAction::deactivate() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    ArAction::deactivate();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[54], swigjobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

ArActionDesired *SwigDirector_ArAction::fire(ArActionDesired currentDesired) {
  ArActionDesired *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jcurrentDesired  ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArAction::fire.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcurrentDesired = 0;
    *((ArActionDesired **)&jcurrentDesired) = &currentDesired; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[55], swigjobj, jcurrentDesired);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = *(ArActionDesired **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArAction::setRobot(ArRobot *robot) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jrobot = 0 ;
  
  if (!swig_override[4]) {
    ArAction::setRobot(robot);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArRobot **)&jrobot) = (ArRobot *) robot; 
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[56], swigjobj, jrobot);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

int SwigDirector_ArAction::getNumArgs() const {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    return ArAction::getNumArgs();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[57], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

ArArg *SwigDirector_ArAction::getArg(int number) {
  ArArg *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jnumber  ;
  
  if (!swig_override[6]) {
    return ArAction::getArg(number);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jnumber = (jint) number;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[58], swigjobj, jnumber);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = *(ArArg **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

char const *SwigDirector_ArAction::getName() const {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[7]) {
    return ArAction::getName();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[59], swigjobj);
    if (jenv->ExceptionOccurred()) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

char const *SwigDirector_ArAction::getDescription() const {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[8]) {
    return ArAction::getDescription();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[60], swigjobj);
    if (jenv->ExceptionOccurred()) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

ArActionDesired *SwigDirector_ArAction::getDesired() {
  ArActionDesired *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[9]) {
    return ArAction::getDesired();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[61], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = *(ArActionDesired **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

ArActionDesired const *SwigDirector_ArAction::getDesired() const {
  ArActionDesired *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[10]) {
    return ArAction::getDesired();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[62], swigjobj);
    if (jenv->ExceptionOccurred()) return (ArActionDesired const *)c_result;
    c_result = *(ArActionDesired **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (ArActionDesired const *)c_result;
}

void SwigDirector_ArAction::log(bool verbose) const {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jverbose  ;
  
  if (!swig_override[11]) {
    ArAction::log(verbose);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jverbose = (jboolean) verbose;
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[63], swigjobj, jverbose);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArAction::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "isActive", "()Z", NULL 
    },
    {
      "activate", "()V", NULL 
    },
    {
      "deactivate", "()V", NULL 
    },
    {
      "fire", "(Lcom/mobilerobots/Aria/ArActionDesired;)Lcom/mobilerobots/Aria/ArActionDesired;", NULL 
    },
    {
      "setRobot", "(Lcom/mobilerobots/Aria/ArRobot;)V", NULL 
    },
    {
      "getNumArgs", "()I", NULL 
    },
    {
      "getArg", "(I)Lcom/mobilerobots/Aria/ArArg;", NULL 
    },
    {
      "getName", "()Ljava/lang/String;", NULL 
    },
    {
      "getDescription", "()Ljava/lang/String;", NULL 
    },
    {
      "getDesired", "()Lcom/mobilerobots/Aria/ArActionDesired;", NULL 
    },
    {
      "getDesired", "()Lcom/mobilerobots/Aria/ArActionDesired;", NULL 
    },
    {
      "log", "(Z)V", NULL 
    },
    {
      "log", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/mobilerobots/Aria/ArAction");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 13; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ArMap::SwigDirector_ArMap(JNIEnv *jenv, char const *baseDirectory, bool addToGlobalConfig, char const *configSection, char const *configParam, char const *configDesc, bool ignoreEmptyFileName, ArPriority::Priority priority, char const *tempDirectory, int configProcessFilePriority) : ArMap(baseDirectory, addToGlobalConfig, configSection, configParam, configDesc, ignoreEmptyFileName, priority, tempDirectory, configProcessFilePriority), Swig::Director(jenv) {
}

SwigDirector_ArMap::SwigDirector_ArMap(JNIEnv *jenv, ArMap const &other) : ArMap(other), Swig::Director(jenv) {
}

SwigDirector_ArMap::~SwigDirector_ArMap() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


int SwigDirector_ArMap::getInfoCount() const {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return ArMap::getInfoCount();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[65], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::list< std::string > SwigDirector_ArMap::getInfoNames() const {
  SwigValueWrapper< std::list< std::string > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::list< std::string > *argp ;
  
  if (!swig_override[1]) {
    return ArMap::getInfoNames();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[66], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    argp = *(std::list< std::string > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::list< std::string >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::list< ArArgumentBuilder * > *SwigDirector_ArMap::getInfo(char const *infoName) {
  std::list< ArArgumentBuilder * > *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jinfoName = 0 ;
  
  if (!swig_override[2]) {
    return ArMap::getInfo(infoName);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jinfoName = 0;
    if (infoName) {
      jinfoName = jenv->NewStringUTF((const char *)infoName);
      if (!jinfoName) return c_result;
    }
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[67], swigjobj, jinfoName);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = *(std::list< ArArgumentBuilder * > **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::list< ArArgumentBuilder * > *SwigDirector_ArMap::getInfo(int infoType) {
  std::list< ArArgumentBuilder * > *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jinfoType  ;
  
  if (!swig_override[3]) {
    return ArMap::getInfo(infoType);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jinfoType = (jint) infoType;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[68], swigjobj, jinfoType);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = *(std::list< ArArgumentBuilder * > **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::list< ArArgumentBuilder * > *SwigDirector_ArMap::getMapInfo() {
  std::list< ArArgumentBuilder * > *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    return ArMap::getMapInfo();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[69], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = *(std::list< ArArgumentBuilder * > **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ArMap::setInfo(char const *infoName, std::list< ArArgumentBuilder * > const *infoList, ArMapChangeDetails *changeDetails) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jinfoName = 0 ;
  jlong jinfoList = 0 ;
  jlong jchangeDetails = 0 ;
  
  if (!swig_override[5]) {
    return ArMap::setInfo(infoName,infoList,changeDetails);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jinfoName = 0;
    if (infoName) {
      jinfoName = jenv->NewStringUTF((const char *)infoName);
      if (!jinfoName) return c_result;
    }
    *((std::list< ArArgumentBuilder * > **)&jinfoList) = (std::list< ArArgumentBuilder * > *) infoList; 
    *((ArMapChangeDetails **)&jchangeDetails) = (ArMapChangeDetails *) changeDetails; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[70], swigjobj, jinfoName, jinfoList, jchangeDetails);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ArMap::setInfo(int infoType, std::list< ArArgumentBuilder * > const *infoList, ArMapChangeDetails *changeDetails) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jinfoType  ;
  jlong jinfoList = 0 ;
  jlong jchangeDetails = 0 ;
  
  if (!swig_override[7]) {
    return ArMap::setInfo(infoType,infoList,changeDetails);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jinfoType = (jint) infoType;
    *((std::list< ArArgumentBuilder * > **)&jinfoList) = (std::list< ArArgumentBuilder * > *) infoList; 
    *((ArMapChangeDetails **)&jchangeDetails) = (ArMapChangeDetails *) changeDetails; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[72], swigjobj, jinfoType, jinfoList, jchangeDetails);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ArMap::setMapInfo(std::list< ArArgumentBuilder * > const *mapInfo, ArMapChangeDetails *changeDetails) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmapInfo = 0 ;
  jlong jchangeDetails = 0 ;
  
  if (!swig_override[9]) {
    return ArMap::setMapInfo(mapInfo,changeDetails);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((std::list< ArArgumentBuilder * > **)&jmapInfo) = (std::list< ArArgumentBuilder * > *) mapInfo; 
    *((ArMapChangeDetails **)&jchangeDetails) = (ArMapChangeDetails *) changeDetails; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[74], swigjobj, jmapInfo, jchangeDetails);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArMap::writeInfoToFunctor(ArFunctor1< char const * > *functor, char const *endOfLineChars) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfunctor = 0 ;
  jstring jendOfLineChars = 0 ;
  
  if (!swig_override[11]) {
    ArMap::writeInfoToFunctor(functor,endOfLineChars);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArFunctor1< char const * > **)&jfunctor) = (ArFunctor1< char const * > *) functor; 
    jendOfLineChars = 0;
    if (endOfLineChars) {
      jendOfLineChars = jenv->NewStringUTF((const char *)endOfLineChars);
      if (!jendOfLineChars) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[76], swigjobj, jfunctor, jendOfLineChars);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

char const *SwigDirector_ArMap::getInfoName(int infoType) {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jinfoType  ;
  
  if (!swig_override[12]) {
    return ArMap::getInfoName(infoType);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jinfoType = (jint) infoType;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[77], swigjobj, jinfoType);
    if (jenv->ExceptionOccurred()) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

void SwigDirector_ArMap::clear() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[13]) {
    ArMap::clear();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[78], swigjobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_ArMap::set(ArMapInterface *other) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jother = 0 ;
  
  if (!swig_override[14]) {
    return ArMap::set(other);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArMapInterface **)&jother) = (ArMapInterface *) other; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[79], swigjobj, jother);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

ArMapInterface *SwigDirector_ArMap::clone() {
  ArMapInterface *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[15]) {
    return ArMap::clone();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[80], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = *(ArMapInterface **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::list< std::string > SwigDirector_ArMap::getScanTypes() const {
  SwigValueWrapper< std::list< std::string > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::list< std::string > *argp ;
  
  if (!swig_override[16]) {
    return ArMap::getScanTypes();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[81], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    argp = *(std::list< std::string > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::list< std::string >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ArMap::setScanTypes(std::list< std::string > const &scanTypeList) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jscanTypeList = 0 ;
  
  if (!swig_override[17]) {
    return ArMap::setScanTypes(scanTypeList);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(std::list< std::string > **)&jscanTypeList = (std::list< std::string > *) &scanTypeList; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[82], swigjobj, jscanTypeList);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_ArMap::lock() {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[18]) {
    return ArMap::lock();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[83], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_ArMap::tryLock() {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[19]) {
    return ArMap::tryLock();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[84], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_ArMap::unlock() {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[20]) {
    return ArMap::unlock();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[85], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArMap::mapChanged() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[21]) {
    ArMap::mapChanged();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[86], swigjobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArMap::addMapChangedCB(ArFunctor *functor, ArListPos::Pos position) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfunctor = 0 ;
  jint jposition  ;
  
  if (!swig_override[22]) {
    ArMapInterface::addMapChangedCB(functor,position);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArFunctor **)&jfunctor) = (ArFunctor *) functor; 
    jposition = (jint) position;
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[87], swigjobj, jfunctor, jposition);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArMap::addMapChangedCB(ArFunctor *functor, int position) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfunctor = 0 ;
  jint jposition  ;
  
  if (!swig_override[23]) {
    ArMap::addMapChangedCB(functor,position);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArFunctor **)&jfunctor) = (ArFunctor *) functor; 
    jposition = (jint) position;
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[88], swigjobj, jfunctor, jposition);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArMap::remMapChangedCB(ArFunctor *functor) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfunctor = 0 ;
  
  if (!swig_override[25]) {
    ArMap::remMapChangedCB(functor);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArFunctor **)&jfunctor) = (ArFunctor *) functor; 
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[90], swigjobj, jfunctor);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArMap::addPreMapChangedCB(ArFunctor *functor, ArListPos::Pos position) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfunctor = 0 ;
  jint jposition  ;
  
  if (!swig_override[26]) {
    ArMapInterface::addPreMapChangedCB(functor,position);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArFunctor **)&jfunctor) = (ArFunctor *) functor; 
    jposition = (jint) position;
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[91], swigjobj, jfunctor, jposition);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArMap::addPreMapChangedCB(ArFunctor *functor, int position) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfunctor = 0 ;
  jint jposition  ;
  
  if (!swig_override[27]) {
    ArMap::addPreMapChangedCB(functor,position);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArFunctor **)&jfunctor) = (ArFunctor *) functor; 
    jposition = (jint) position;
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[92], swigjobj, jfunctor, jposition);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArMap::remPreMapChangedCB(ArFunctor *functor) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfunctor = 0 ;
  
  if (!swig_override[29]) {
    ArMap::remPreMapChangedCB(functor);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArFunctor **)&jfunctor) = (ArFunctor *) functor; 
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[94], swigjobj, jfunctor);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArMap::setMapChangedLogLevel(ArLog::LogLevel level) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jlevel  ;
  
  if (!swig_override[30]) {
    ArMap::setMapChangedLogLevel(level);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jlevel = (jint) level;
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[95], swigjobj, jlevel);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

ArLog::LogLevel SwigDirector_ArMap::getMapChangedLogLevel() {
  ArLog::LogLevel c_result = SwigValueInit< ArLog::LogLevel >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[31]) {
    return ArMap::getMapChangedLogLevel();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[96], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = (ArLog::LogLevel)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArMap::writeToFunctor(ArFunctor1< char const * > *functor, char const *endOfLineChars) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfunctor = 0 ;
  jstring jendOfLineChars = 0 ;
  
  if (!swig_override[32]) {
    ArMap::writeToFunctor(functor,endOfLineChars);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArFunctor1< char const * > **)&jfunctor) = (ArFunctor1< char const * > *) functor; 
    jendOfLineChars = 0;
    if (endOfLineChars) {
      jendOfLineChars = jenv->NewStringUTF((const char *)endOfLineChars);
      if (!jendOfLineChars) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[97], swigjobj, jfunctor, jendOfLineChars);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArMap::writeObjectsToFunctor(ArFunctor1< char const * > *functor, char const *endOfLineChars, bool isOverrideAsSingleScan, char const *maxCategory) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfunctor = 0 ;
  jstring jendOfLineChars = 0 ;
  jboolean jisOverrideAsSingleScan  ;
  jstring jmaxCategory = 0 ;
  
  if (!swig_override[33]) {
    ArMap::writeObjectsToFunctor(functor,endOfLineChars,isOverrideAsSingleScan,maxCategory);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArFunctor1< char const * > **)&jfunctor) = (ArFunctor1< char const * > *) functor; 
    jendOfLineChars = 0;
    if (endOfLineChars) {
      jendOfLineChars = jenv->NewStringUTF((const char *)endOfLineChars);
      if (!jendOfLineChars) return ;
    }
    jisOverrideAsSingleScan = (jboolean) isOverrideAsSingleScan;
    jmaxCategory = 0;
    if (maxCategory) {
      jmaxCategory = jenv->NewStringUTF((const char *)maxCategory);
      if (!jmaxCategory) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[98], swigjobj, jfunctor, jendOfLineChars, jisOverrideAsSingleScan, jmaxCategory);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArMap::addPreWriteFileCB(ArFunctor *functor, ArListPos::Pos position) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfunctor = 0 ;
  jint jposition  ;
  
  if (!swig_override[36]) {
    ArMap::addPreWriteFileCB(functor,position);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArFunctor **)&jfunctor) = (ArFunctor *) functor; 
    jposition = (jint) position;
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[101], swigjobj, jfunctor, jposition);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArMap::remPreWriteFileCB(ArFunctor *functor) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfunctor = 0 ;
  
  if (!swig_override[38]) {
    ArMap::remPreWriteFileCB(functor);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArFunctor **)&jfunctor) = (ArFunctor *) functor; 
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[103], swigjobj, jfunctor);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArMap::addPostWriteFileCB(ArFunctor *functor, ArListPos::Pos position) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfunctor = 0 ;
  jint jposition  ;
  
  if (!swig_override[39]) {
    ArMap::addPostWriteFileCB(functor,position);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArFunctor **)&jfunctor) = (ArFunctor *) functor; 
    jposition = (jint) position;
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[104], swigjobj, jfunctor, jposition);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArMap::remPostWriteFileCB(ArFunctor *functor) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfunctor = 0 ;
  
  if (!swig_override[41]) {
    ArMap::remPostWriteFileCB(functor);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArFunctor **)&jfunctor) = (ArFunctor *) functor; 
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[106], swigjobj, jfunctor);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_ArMap::getMapId(ArMapId *mapIdOut, bool isInternalCall) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmapIdOut = 0 ;
  jboolean jisInternalCall  ;
  
  if (!swig_override[42]) {
    return ArMap::getMapId(mapIdOut,isInternalCall);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArMapId **)&jmapIdOut) = (ArMapId *) mapIdOut; 
    jisInternalCall = (jboolean) isInternalCall;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[107], swigjobj, jmapIdOut, jisInternalCall);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ArMap::calculateChecksum(unsigned char *md5DigestBuffer, size_t md5DigestBufferLen) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmd5DigestBuffer = 0 ;
  jlong jmd5DigestBufferLen  ;
  
  if (!swig_override[44]) {
    return ArMap::calculateChecksum(md5DigestBuffer,md5DigestBufferLen);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((unsigned char **)&jmd5DigestBuffer) = (unsigned char *) md5DigestBuffer; 
    jmd5DigestBufferLen = (jlong) md5DigestBufferLen;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[109], swigjobj, jmd5DigestBuffer, jmd5DigestBufferLen);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

char const *SwigDirector_ArMap::getBaseDirectory() const {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[45]) {
    return ArMap::getBaseDirectory();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[110], swigjobj);
    if (jenv->ExceptionOccurred()) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

void SwigDirector_ArMap::setBaseDirectory(char const *baseDirectory) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jbaseDirectory = 0 ;
  
  if (!swig_override[46]) {
    ArMap::setBaseDirectory(baseDirectory);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbaseDirectory = 0;
    if (baseDirectory) {
      jbaseDirectory = jenv->NewStringUTF((const char *)baseDirectory);
      if (!jbaseDirectory) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[111], swigjobj, jbaseDirectory);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

char const *SwigDirector_ArMap::getTempDirectory() const {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[47]) {
    return ArMap::getTempDirectory();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[112], swigjobj);
    if (jenv->ExceptionOccurred()) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

void SwigDirector_ArMap::setTempDirectory(char const *tempDirectory) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jtempDirectory = 0 ;
  
  if (!swig_override[48]) {
    ArMap::setTempDirectory(tempDirectory);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtempDirectory = 0;
    if (tempDirectory) {
      jtempDirectory = jenv->NewStringUTF((const char *)tempDirectory);
      if (!jtempDirectory) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[113], swigjobj, jtempDirectory);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_ArMap::createRealFileName(char const *fileName) {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jfileName = 0 ;
  
  if (!swig_override[49]) {
    return ArMap::createRealFileName(fileName);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jfileName = 0;
    if (fileName) {
      jfileName = jenv->NewStringUTF((const char *)fileName);
      if (!jfileName) return c_result;
    }
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[114], swigjobj, jfileName);
    if (jenv->ExceptionOccurred()) return c_result;
    if(!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

char const *SwigDirector_ArMap::getFileName() const {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[50]) {
    return ArMap::getFileName();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[115], swigjobj);
    if (jenv->ExceptionOccurred()) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

void SwigDirector_ArMap::setSourceFileName(char const *sourceName, char const *fileName, bool isInternalCall) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jsourceName = 0 ;
  jstring jfileName = 0 ;
  jboolean jisInternalCall  ;
  
  if (!swig_override[51]) {
    ArMap::setSourceFileName(sourceName,fileName,isInternalCall);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsourceName = 0;
    if (sourceName) {
      jsourceName = jenv->NewStringUTF((const char *)sourceName);
      if (!jsourceName) return ;
    }
    jfileName = 0;
    if (fileName) {
      jfileName = jenv->NewStringUTF((const char *)fileName);
      if (!jfileName) return ;
    }
    jisInternalCall = (jboolean) isInternalCall;
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[116], swigjobj, jsourceName, jfileName, jisInternalCall);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_ArMap::refresh() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[53]) {
    return ArMap::refresh();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[118], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArMap::setIgnoreEmptyFileName(bool ignore) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jignore  ;
  
  if (!swig_override[54]) {
    ArMap::setIgnoreEmptyFileName(ignore);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jignore = (jboolean) ignore;
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[119], swigjobj, jignore);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_ArMap::getIgnoreEmptyFileName() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[55]) {
    return ArMap::getIgnoreEmptyFileName();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[120], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArMap::setIgnoreCase(bool ignoreCase) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jignoreCase  ;
  
  if (!swig_override[56]) {
    ArMap::setIgnoreCase(ignoreCase);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jignoreCase = (jboolean) ignoreCase;
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[121], swigjobj, jignoreCase);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_ArMap::getIgnoreCase() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[58]) {
    return ArMap::getIgnoreCase();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[123], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

ArMapInfoInterface *SwigDirector_ArMap::getInactiveInfo() {
  ArMapInfoInterface *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[59]) {
    return ArMap::getInactiveInfo();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[124], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = *(ArMapInfoInterface **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

ArMapObjectsInterface *SwigDirector_ArMap::getInactiveObjects() {
  ArMapObjectsInterface *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[60]) {
    return ArMap::getInactiveObjects();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[125], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = *(ArMapObjectsInterface **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

ArMapObjectsInterface *SwigDirector_ArMap::getChildObjects() {
  ArMapObjectsInterface *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[61]) {
    return ArMap::getChildObjects();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[126], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = *(ArMapObjectsInterface **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

ArArgumentBuilder *SwigDirector_ArMap::findMapObjectParams(char const *mapObjectName) {
  ArArgumentBuilder *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jmapObjectName = 0 ;
  
  if (!swig_override[62]) {
    return ArMap::findMapObjectParams(mapObjectName);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jmapObjectName = 0;
    if (mapObjectName) {
      jmapObjectName = jenv->NewStringUTF((const char *)mapObjectName);
      if (!jmapObjectName) return c_result;
    }
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[127], swigjobj, jmapObjectName);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = *(ArArgumentBuilder **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ArMap::setMapObjectParams(char const *mapObjectName, ArArgumentBuilder *params, ArMapChangeDetails *changeDetails) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jmapObjectName = 0 ;
  jlong jparams = 0 ;
  jlong jchangeDetails = 0 ;
  
  if (!swig_override[63]) {
    return ArMap::setMapObjectParams(mapObjectName,params,changeDetails);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jmapObjectName = 0;
    if (mapObjectName) {
      jmapObjectName = jenv->NewStringUTF((const char *)mapObjectName);
      if (!jmapObjectName) return c_result;
    }
    *((ArArgumentBuilder **)&jparams) = (ArArgumentBuilder *) params; 
    *((ArMapChangeDetails **)&jchangeDetails) = (ArMapChangeDetails *) changeDetails; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[128], swigjobj, jmapObjectName, jparams, jchangeDetails);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::list< ArArgumentBuilder * > *SwigDirector_ArMap::getRemainder() {
  std::list< ArArgumentBuilder * > *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[65]) {
    return ArMap::getRemainder();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[130], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = *(std::list< ArArgumentBuilder * > **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArMap::setQuiet(bool isQuiet) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jisQuiet  ;
  
  if (!swig_override[66]) {
    ArMap::setQuiet(isQuiet);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jisQuiet = (jboolean) isQuiet;
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[131], swigjobj, jisQuiet);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_ArMap::parseLine(char *line) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jline = 0 ;
  
  if (!swig_override[67]) {
    return ArMap::parseLine(line);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jline = 0;
    if (line) {
      jline = jenv->NewStringUTF((const char *)line);
      if (!jline) return c_result;
    }
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[132], swigjobj, jline);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArMap::parsingComplete() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[68]) {
    ArMap::parsingComplete();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[133], swigjobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_ArMap::isLoadingDataStarted() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[69]) {
    return ArMap::isLoadingDataStarted();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[134], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ArMap::isLoadingLinesAndDataStarted() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[70]) {
    return ArMap::isLoadingLinesAndDataStarted();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[135], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

char const *SwigDirector_ArMap::getDisplayString(char const *scanType) {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jscanType = 0 ;
  
  if (!swig_override[71]) {
    return ArMap::getDisplayString(scanType);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jscanType = 0;
    if (scanType) {
      jscanType = jenv->NewStringUTF((const char *)scanType);
      if (!jscanType) return (char const *)c_result;
    }
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[136], swigjobj, jscanType);
    if (jenv->ExceptionOccurred()) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

std::vector< ArPose > *SwigDirector_ArMap::getPoints(char const *scanType) {
  std::vector< ArPose > *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jscanType = 0 ;
  
  if (!swig_override[73]) {
    return ArMap::getPoints(scanType);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jscanType = 0;
    if (scanType) {
      jscanType = jenv->NewStringUTF((const char *)scanType);
      if (!jscanType) return c_result;
    }
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[138], swigjobj, jscanType);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = *(std::vector< ArPose > **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

ArPose SwigDirector_ArMap::getMinPose(char const *scanType) {
  ArPose c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jscanType = 0 ;
  ArPose *argp ;
  
  if (!swig_override[75]) {
    return ArMap::getMinPose(scanType);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jscanType = 0;
    if (scanType) {
      jscanType = jenv->NewStringUTF((const char *)scanType);
      if (!jscanType) return c_result;
    }
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[140], swigjobj, jscanType);
    if (jenv->ExceptionOccurred()) return c_result;
    argp = *(ArPose **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type ArPose");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

ArPose SwigDirector_ArMap::getMaxPose(char const *scanType) {
  ArPose c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jscanType = 0 ;
  ArPose *argp ;
  
  if (!swig_override[77]) {
    return ArMap::getMaxPose(scanType);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jscanType = 0;
    if (scanType) {
      jscanType = jenv->NewStringUTF((const char *)scanType);
      if (!jscanType) return c_result;
    }
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[142], swigjobj, jscanType);
    if (jenv->ExceptionOccurred()) return c_result;
    argp = *(ArPose **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type ArPose");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_ArMap::getNumPoints(char const *scanType) {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jscanType = 0 ;
  
  if (!swig_override[79]) {
    return ArMap::getNumPoints(scanType);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jscanType = 0;
    if (scanType) {
      jscanType = jenv->NewStringUTF((const char *)scanType);
      if (!jscanType) return c_result;
    }
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[144], swigjobj, jscanType);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ArMap::isSortedPoints(char const *scanType) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jscanType = 0 ;
  
  if (!swig_override[81]) {
    return ArMap::isSortedPoints(scanType);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jscanType = 0;
    if (scanType) {
      jscanType = jenv->NewStringUTF((const char *)scanType);
      if (!jscanType) return c_result;
    }
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[146], swigjobj, jscanType);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArMap::setPoints(std::vector< ArPose > const *points, char const *scanType, bool isSortedPoints, ArMapChangeDetails *changeDetails) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpoints = 0 ;
  jstring jscanType = 0 ;
  jboolean jisSortedPoints  ;
  jlong jchangeDetails = 0 ;
  
  if (!swig_override[83]) {
    ArMap::setPoints(points,scanType,isSortedPoints,changeDetails);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((std::vector< ArPose > **)&jpoints) = (std::vector< ArPose > *) points; 
    jscanType = 0;
    if (scanType) {
      jscanType = jenv->NewStringUTF((const char *)scanType);
      if (!jscanType) return ;
    }
    jisSortedPoints = (jboolean) isSortedPoints;
    *((ArMapChangeDetails **)&jchangeDetails) = (ArMapChangeDetails *) changeDetails; 
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[148], swigjobj, jpoints, jscanType, jisSortedPoints, jchangeDetails);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::vector< ArLineSegment > *SwigDirector_ArMap::getLines(char const *scanType) {
  std::vector< ArLineSegment > *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jscanType = 0 ;
  
  if (!swig_override[87]) {
    return ArMap::getLines(scanType);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jscanType = 0;
    if (scanType) {
      jscanType = jenv->NewStringUTF((const char *)scanType);
      if (!jscanType) return c_result;
    }
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[152], swigjobj, jscanType);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = *(std::vector< ArLineSegment > **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

ArPose SwigDirector_ArMap::getLineMinPose(char const *scanType) {
  ArPose c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jscanType = 0 ;
  ArPose *argp ;
  
  if (!swig_override[89]) {
    return ArMap::getLineMinPose(scanType);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jscanType = 0;
    if (scanType) {
      jscanType = jenv->NewStringUTF((const char *)scanType);
      if (!jscanType) return c_result;
    }
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[154], swigjobj, jscanType);
    if (jenv->ExceptionOccurred()) return c_result;
    argp = *(ArPose **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type ArPose");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

ArPose SwigDirector_ArMap::getLineMaxPose(char const *scanType) {
  ArPose c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jscanType = 0 ;
  ArPose *argp ;
  
  if (!swig_override[91]) {
    return ArMap::getLineMaxPose(scanType);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jscanType = 0;
    if (scanType) {
      jscanType = jenv->NewStringUTF((const char *)scanType);
      if (!jscanType) return c_result;
    }
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[156], swigjobj, jscanType);
    if (jenv->ExceptionOccurred()) return c_result;
    argp = *(ArPose **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type ArPose");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_ArMap::getNumLines(char const *scanType) {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jscanType = 0 ;
  
  if (!swig_override[93]) {
    return ArMap::getNumLines(scanType);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jscanType = 0;
    if (scanType) {
      jscanType = jenv->NewStringUTF((const char *)scanType);
      if (!jscanType) return c_result;
    }
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[158], swigjobj, jscanType);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ArMap::isSortedLines(char const *scanType) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jscanType = 0 ;
  
  if (!swig_override[95]) {
    return ArMap::isSortedLines(scanType);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jscanType = 0;
    if (scanType) {
      jscanType = jenv->NewStringUTF((const char *)scanType);
      if (!jscanType) return c_result;
    }
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[160], swigjobj, jscanType);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArMap::setLines(std::vector< ArLineSegment > const *lines, char const *scanType, bool isSortedLines, ArMapChangeDetails *changeDetails) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jlines = 0 ;
  jstring jscanType = 0 ;
  jboolean jisSortedLines  ;
  jlong jchangeDetails = 0 ;
  
  if (!swig_override[97]) {
    ArMap::setLines(lines,scanType,isSortedLines,changeDetails);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((std::vector< ArLineSegment > **)&jlines) = (std::vector< ArLineSegment > *) lines; 
    jscanType = 0;
    if (scanType) {
      jscanType = jenv->NewStringUTF((const char *)scanType);
      if (!jscanType) return ;
    }
    jisSortedLines = (jboolean) isSortedLines;
    *((ArMapChangeDetails **)&jchangeDetails) = (ArMapChangeDetails *) changeDetails; 
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[162], swigjobj, jlines, jscanType, jisSortedLines, jchangeDetails);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

int SwigDirector_ArMap::getResolution(char const *scanType) {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jscanType = 0 ;
  
  if (!swig_override[101]) {
    return ArMap::getResolution(scanType);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jscanType = 0;
    if (scanType) {
      jscanType = jenv->NewStringUTF((const char *)scanType);
      if (!jscanType) return c_result;
    }
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[166], swigjobj, jscanType);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArMap::setResolution(int resolution, char const *scanType, ArMapChangeDetails *changeDetails) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jresolution  ;
  jstring jscanType = 0 ;
  jlong jchangeDetails = 0 ;
  
  if (!swig_override[103]) {
    ArMap::setResolution(resolution,scanType,changeDetails);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresolution = (jint) resolution;
    jscanType = 0;
    if (scanType) {
      jscanType = jenv->NewStringUTF((const char *)scanType);
      if (!jscanType) return ;
    }
    *((ArMapChangeDetails **)&jchangeDetails) = (ArMapChangeDetails *) changeDetails; 
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[168], swigjobj, jresolution, jscanType, jchangeDetails);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArMap::writeScanToFunctor(ArFunctor1< char const * > *functor, char const *endOfLineChars, char const *scanType) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfunctor = 0 ;
  jstring jendOfLineChars = 0 ;
  jstring jscanType = 0 ;
  
  if (!swig_override[106]) {
    ArMap::writeScanToFunctor(functor,endOfLineChars,scanType);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArFunctor1< char const * > **)&jfunctor) = (ArFunctor1< char const * > *) functor; 
    jendOfLineChars = 0;
    if (endOfLineChars) {
      jendOfLineChars = jenv->NewStringUTF((const char *)endOfLineChars);
      if (!jendOfLineChars) return ;
    }
    jscanType = 0;
    if (scanType) {
      jscanType = jenv->NewStringUTF((const char *)scanType);
      if (!jscanType) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[171], swigjobj, jfunctor, jendOfLineChars, jscanType);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArMap::writePointsToFunctor(ArFunctor2< int,std::vector< ArPose > * > *functor, char const *scanType, ArFunctor1< char const * > *keywordFunctor) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfunctor = 0 ;
  jstring jscanType = 0 ;
  jlong jkeywordFunctor = 0 ;
  
  if (!swig_override[108]) {
    ArMap::writePointsToFunctor(functor,scanType,keywordFunctor);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArFunctor2< int,std::vector< ArPose > * > **)&jfunctor) = (ArFunctor2< int,std::vector< ArPose > * > *) functor; 
    jscanType = 0;
    if (scanType) {
      jscanType = jenv->NewStringUTF((const char *)scanType);
      if (!jscanType) return ;
    }
    *((ArFunctor1< char const * > **)&jkeywordFunctor) = (ArFunctor1< char const * > *) keywordFunctor; 
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[173], swigjobj, jfunctor, jscanType, jkeywordFunctor);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArMap::writeLinesToFunctor(ArFunctor2< int,std::vector< ArLineSegment > * > *functor, char const *scanType, ArFunctor1< char const * > *keywordFunctor) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfunctor = 0 ;
  jstring jscanType = 0 ;
  jlong jkeywordFunctor = 0 ;
  
  if (!swig_override[111]) {
    ArMap::writeLinesToFunctor(functor,scanType,keywordFunctor);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArFunctor2< int,std::vector< ArLineSegment > * > **)&jfunctor) = (ArFunctor2< int,std::vector< ArLineSegment > * > *) functor; 
    jscanType = 0;
    if (scanType) {
      jscanType = jenv->NewStringUTF((const char *)scanType);
      if (!jscanType) return ;
    }
    *((ArFunctor1< char const * > **)&jkeywordFunctor) = (ArFunctor1< char const * > *) keywordFunctor; 
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[176], swigjobj, jfunctor, jscanType, jkeywordFunctor);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_ArMap::addToFileParser(ArFileParser *fileParser) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfileParser = 0 ;
  
  if (!swig_override[114]) {
    return ArMap::addToFileParser(fileParser);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArFileParser **)&jfileParser) = (ArFileParser *) fileParser; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[179], swigjobj, jfileParser);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ArMap::remFromFileParser(ArFileParser *fileParser) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfileParser = 0 ;
  
  if (!swig_override[115]) {
    return ArMap::remFromFileParser(fileParser);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArFileParser **)&jfileParser) = (ArFileParser *) fileParser; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[180], swigjobj, jfileParser);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ArMap::readDataPoint(char *line) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jline = 0 ;
  
  if (!swig_override[116]) {
    return ArMap::readDataPoint(line);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jline = 0;
    if (line) {
      jline = jenv->NewStringUTF((const char *)line);
      if (!jline) return c_result;
    }
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[181], swigjobj, jline);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ArMap::readLineSegment(char *line) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jline = 0 ;
  
  if (!swig_override[117]) {
    return ArMap::readLineSegment(line);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jline = 0;
    if (line) {
      jline = jenv->NewStringUTF((const char *)line);
      if (!jline) return c_result;
    }
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[182], swigjobj, jline);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArMap::loadDataPoint(double x, double y) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jx  ;
  jdouble jy  ;
  
  if (!swig_override[118]) {
    ArMap::loadDataPoint(x,y);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jdouble) x;
    jy = (jdouble) y;
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[183], swigjobj, jx, jy);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArMap::loadLineSegment(double x1, double y1, double x2, double y2) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jx1  ;
  jdouble jy1  ;
  jdouble jx2  ;
  jdouble jy2  ;
  
  if (!swig_override[119]) {
    ArMap::loadLineSegment(x1,y1,x2,y2);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx1 = (jdouble) x1;
    jy1 = (jdouble) y1;
    jx2 = (jdouble) x2;
    jy2 = (jdouble) y2;
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[184], swigjobj, jx1, jy1, jx2, jy2);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

ArMapObject *SwigDirector_ArMap::findFirstMapObject(char const *name, char const *type, bool isIncludeWithHeading) {
  ArMapObject *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  jstring jtype = 0 ;
  jboolean jisIncludeWithHeading  ;
  
  if (!swig_override[120]) {
    return ArMap::findFirstMapObject(name,type,isIncludeWithHeading);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return c_result;
    }
    jtype = 0;
    if (type) {
      jtype = jenv->NewStringUTF((const char *)type);
      if (!jtype) return c_result;
    }
    jisIncludeWithHeading = (jboolean) isIncludeWithHeading;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[185], swigjobj, jname, jtype, jisIncludeWithHeading);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = *(ArMapObject **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

ArMapObject *SwigDirector_ArMap::findMapObject(char const *name, char const *type, bool isIncludeWithHeading) {
  ArMapObject *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  jstring jtype = 0 ;
  jboolean jisIncludeWithHeading  ;
  
  if (!swig_override[122]) {
    return ArMap::findMapObject(name,type,isIncludeWithHeading);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return c_result;
    }
    jtype = 0;
    if (type) {
      jtype = jenv->NewStringUTF((const char *)type);
      if (!jtype) return c_result;
    }
    jisIncludeWithHeading = (jboolean) isIncludeWithHeading;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[187], swigjobj, jname, jtype, jisIncludeWithHeading);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = *(ArMapObject **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::list< ArMapObject * > SwigDirector_ArMap::findMapObjectsOfType(char const *type, bool isIncludeWithHeading) {
  std::list< ArMapObject * > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jtype = 0 ;
  jboolean jisIncludeWithHeading  ;
  std::list< ArMapObject * > *argp ;
  
  if (!swig_override[125]) {
    return ArMap::findMapObjectsOfType(type,isIncludeWithHeading);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtype = 0;
    if (type) {
      jtype = jenv->NewStringUTF((const char *)type);
      if (!jtype) return c_result;
    }
    jisIncludeWithHeading = (jboolean) isIncludeWithHeading;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[190], swigjobj, jtype, jisIncludeWithHeading);
    if (jenv->ExceptionOccurred()) return c_result;
    argp = *(std::list< ArMapObject * > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::list< ArMapObject * >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::list< ArMapObject * > *SwigDirector_ArMap::getMapObjects() {
  std::list< ArMapObject * > *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[127]) {
    return ArMap::getMapObjects();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[192], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = *(std::list< ArMapObject * > **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArMap::setMapObjects(std::list< ArMapObject * > const *mapObjects, bool isSortedObjects, ArMapChangeDetails *changeDetails) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmapObjects = 0 ;
  jboolean jisSortedObjects  ;
  jlong jchangeDetails = 0 ;
  
  if (!swig_override[128]) {
    ArMap::setMapObjects(mapObjects,isSortedObjects,changeDetails);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((std::list< ArMapObject * > **)&jmapObjects) = (std::list< ArMapObject * > *) mapObjects; 
    jisSortedObjects = (jboolean) isSortedObjects;
    *((ArMapChangeDetails **)&jchangeDetails) = (ArMapChangeDetails *) changeDetails; 
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[193], swigjobj, jmapObjects, jisSortedObjects, jchangeDetails);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArMap::writeObjectListToFunctor(ArFunctor1< char const * > *functor, char const *endOfLineChars) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfunctor = 0 ;
  jstring jendOfLineChars = 0 ;
  
  if (!swig_override[131]) {
    ArMap::writeObjectListToFunctor(functor,endOfLineChars);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArFunctor1< char const * > **)&jfunctor) = (ArFunctor1< char const * > *) functor; 
    jendOfLineChars = 0;
    if (endOfLineChars) {
      jendOfLineChars = jenv->NewStringUTF((const char *)endOfLineChars);
      if (!jendOfLineChars) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[196], swigjobj, jfunctor, jendOfLineChars);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_ArMap::hasOriginLatLongAlt() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[132]) {
    return ArMap::hasOriginLatLongAlt();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[197], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

ArPose SwigDirector_ArMap::getOriginLatLong() {
  ArPose c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  ArPose *argp ;
  
  if (!swig_override[133]) {
    return ArMap::getOriginLatLong();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[198], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    argp = *(ArPose **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type ArPose");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

double SwigDirector_ArMap::getOriginAltitude() {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[134]) {
    return ArMap::getOriginAltitude();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[199], swigjobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArMap::setOriginLatLongAlt(bool hasOriginLatLong, ArPose const &originLatLong, double altitude, ArMapChangeDetails *changeDetails) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jhasOriginLatLong  ;
  jlong joriginLatLong = 0 ;
  jdouble jaltitude  ;
  jlong jchangeDetails = 0 ;
  
  if (!swig_override[135]) {
    ArMap::setOriginLatLongAlt(hasOriginLatLong,originLatLong,altitude,changeDetails);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jhasOriginLatLong = (jboolean) hasOriginLatLong;
    *(ArPose **)&joriginLatLong = (ArPose *) &originLatLong; 
    jaltitude = (jdouble) altitude;
    *((ArMapChangeDetails **)&jchangeDetails) = (ArMapChangeDetails *) changeDetails; 
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[200], swigjobj, jhasOriginLatLong, joriginLatLong, jaltitude, jchangeDetails);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArMap::writeSupplementToFunctor(ArFunctor1< char const * > *functor, char const *endOfLineChars) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfunctor = 0 ;
  jstring jendOfLineChars = 0 ;
  
  if (!swig_override[137]) {
    ArMap::writeSupplementToFunctor(functor,endOfLineChars);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArFunctor1< char const * > **)&jfunctor) = (ArFunctor1< char const * > *) functor; 
    jendOfLineChars = 0;
    if (endOfLineChars) {
      jendOfLineChars = jenv->NewStringUTF((const char *)endOfLineChars);
      if (!jendOfLineChars) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[202], swigjobj, jfunctor, jendOfLineChars);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_ArMap::writeFile(char const *fileName) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jfileName = 0 ;
  
  if (!swig_override[138]) {
    return ArMap::writeFile(fileName);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jfileName = 0;
    if (fileName) {
      jfileName = jenv->NewStringUTF((const char *)fileName);
      if (!jfileName) return c_result;
    }
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_AriaJavaJNI, Swig::director_methids[203], swigjobj, jfileName);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ArMap::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getInfoCount", "()I", NULL 
    },
    {
      "getInfoNames", "()Lcom/mobilerobots/Aria/SWIGTYPE_p_std__listT_std__string_t;", NULL 
    },
    {
      "getInfo", "(Ljava/lang/String;)Lcom/mobilerobots/Aria/ArArgumentBuilderPtrList;", NULL 
    },
    {
      "getInfo", "(I)Lcom/mobilerobots/Aria/ArArgumentBuilderPtrList;", NULL 
    },
    {
      "getMapInfo", "()Lcom/mobilerobots/Aria/ArArgumentBuilderPtrList;", NULL 
    },
    {
      "setInfo", "(Ljava/lang/String;Lcom/mobilerobots/Aria/ArArgumentBuilderPtrList;Lcom/mobilerobots/Aria/SWIGTYPE_p_ArMapChangeDetails;)Z", NULL 
    },
    {
      "setInfo", "(Ljava/lang/String;Lcom/mobilerobots/Aria/ArArgumentBuilderPtrList;)Z", NULL 
    },
    {
      "setInfo", "(ILcom/mobilerobots/Aria/ArArgumentBuilderPtrList;Lcom/mobilerobots/Aria/SWIGTYPE_p_ArMapChangeDetails;)Z", NULL 
    },
    {
      "setInfo", "(ILcom/mobilerobots/Aria/ArArgumentBuilderPtrList;)Z", NULL 
    },
    {
      "setMapInfo", "(Lcom/mobilerobots/Aria/ArArgumentBuilderPtrList;Lcom/mobilerobots/Aria/SWIGTYPE_p_ArMapChangeDetails;)Z", NULL 
    },
    {
      "setMapInfo", "(Lcom/mobilerobots/Aria/ArArgumentBuilderPtrList;)Z", NULL 
    },
    {
      "writeInfoToFunctor", "(Lcom/mobilerobots/Aria/ArFunctor1_CString;Ljava/lang/String;)V", NULL 
    },
    {
      "getInfoName", "(I)Ljava/lang/String;", NULL 
    },
    {
      "clear", "()V", NULL 
    },
    {
      "set", "(Lcom/mobilerobots/Aria/ArMapInterface;)Z", NULL 
    },
    {
      "cloneMap", "()Lcom/mobilerobots/Aria/ArMapInterface;", NULL 
    },
    {
      "getScanTypes", "()Lcom/mobilerobots/Aria/SWIGTYPE_p_std__listT_std__string_t;", NULL 
    },
    {
      "setScanTypes", "(Lcom/mobilerobots/Aria/SWIGTYPE_p_std__listT_std__string_t;)Z", NULL 
    },
    {
      "lock", "()I", NULL 
    },
    {
      "tryLock", "()I", NULL 
    },
    {
      "unlock", "()I", NULL 
    },
    {
      "mapChanged", "()V", NULL 
    },
    {
      "addMapChangedCBPos", "(Lcom/mobilerobots/Aria/ArFunctor;Lcom/mobilerobots/Aria/ArListPos$Pos;)V", NULL 
    },
    {
      "addMapChangedCB", "(Lcom/mobilerobots/Aria/ArFunctor;I)V", NULL 
    },
    {
      "addMapChangedCB", "(Lcom/mobilerobots/Aria/ArFunctor;)V", NULL 
    },
    {
      "remMapChangedCB", "(Lcom/mobilerobots/Aria/ArFunctor;)V", NULL 
    },
    {
      "addPreMapChangedCBPos", "(Lcom/mobilerobots/Aria/ArFunctor;Lcom/mobilerobots/Aria/ArListPos$Pos;)V", NULL 
    },
    {
      "addPreMapChangedCB", "(Lcom/mobilerobots/Aria/ArFunctor;I)V", NULL 
    },
    {
      "addPreMapChangedCB", "(Lcom/mobilerobots/Aria/ArFunctor;)V", NULL 
    },
    {
      "remPreMapChangedCB", "(Lcom/mobilerobots/Aria/ArFunctor;)V", NULL 
    },
    {
      "setMapChangedLogLevel", "(Lcom/mobilerobots/Aria/ArLog$LogLevel;)V", NULL 
    },
    {
      "getMapChangedLogLevel", "()Lcom/mobilerobots/Aria/ArLog$LogLevel;", NULL 
    },
    {
      "writeToFunctor", "(Lcom/mobilerobots/Aria/ArFunctor1_CString;Ljava/lang/String;)V", NULL 
    },
    {
      "writeObjectsToFunctor", "(Lcom/mobilerobots/Aria/ArFunctor1_CString;Ljava/lang/String;ZLjava/lang/String;)V", NULL 
    },
    {
      "writeObjectsToFunctor", "(Lcom/mobilerobots/Aria/ArFunctor1_CString;Ljava/lang/String;Z)V", NULL 
    },
    {
      "writeObjectsToFunctor", "(Lcom/mobilerobots/Aria/ArFunctor1_CString;Ljava/lang/String;)V", NULL 
    },
    {
      "addPreWriteFileCB", "(Lcom/mobilerobots/Aria/ArFunctor;Lcom/mobilerobots/Aria/ArListPos$Pos;)V", NULL 
    },
    {
      "addPreWriteFileCB", "(Lcom/mobilerobots/Aria/ArFunctor;)V", NULL 
    },
    {
      "remPreWriteFileCB", "(Lcom/mobilerobots/Aria/ArFunctor;)V", NULL 
    },
    {
      "addPostWriteFileCB", "(Lcom/mobilerobots/Aria/ArFunctor;Lcom/mobilerobots/Aria/ArListPos$Pos;)V", NULL 
    },
    {
      "addPostWriteFileCB", "(Lcom/mobilerobots/Aria/ArFunctor;)V", NULL 
    },
    {
      "remPostWriteFileCB", "(Lcom/mobilerobots/Aria/ArFunctor;)V", NULL 
    },
    {
      "getMapId", "(Lcom/mobilerobots/Aria/ArMapId;Z)Z", NULL 
    },
    {
      "getMapId", "(Lcom/mobilerobots/Aria/ArMapId;)Z", NULL 
    },
    {
      "calculateChecksum", "(Lcom/mobilerobots/Aria/SWIGTYPE_p_unsigned_char;J)Z", NULL 
    },
    {
      "getBaseDirectory", "()Ljava/lang/String;", NULL 
    },
    {
      "setBaseDirectory", "(Ljava/lang/String;)V", NULL 
    },
    {
      "getTempDirectory", "()Ljava/lang/String;", NULL 
    },
    {
      "setTempDirectory", "(Ljava/lang/String;)V", NULL 
    },
    {
      "createRealFileName", "(Ljava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "getFileName", "()Ljava/lang/String;", NULL 
    },
    {
      "setSourceFileName", "(Ljava/lang/String;Ljava/lang/String;Z)V", NULL 
    },
    {
      "setSourceFileName", "(Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "refresh", "()Z", NULL 
    },
    {
      "setIgnoreEmptyFileName", "(Z)V", NULL 
    },
    {
      "getIgnoreEmptyFileName", "()Z", NULL 
    },
    {
      "setIgnoreCase", "(Z)V", NULL 
    },
    {
      "setIgnoreCase", "()V", NULL 
    },
    {
      "getIgnoreCase", "()Z", NULL 
    },
    {
      "getInactiveInfo", "()Lcom/mobilerobots/Aria/ArMapInfoInterface;", NULL 
    },
    {
      "getInactiveObjects", "()Lcom/mobilerobots/Aria/ArMapObjectsInterface;", NULL 
    },
    {
      "getChildObjects", "()Lcom/mobilerobots/Aria/ArMapObjectsInterface;", NULL 
    },
    {
      "findMapObjectParams", "(Ljava/lang/String;)Lcom/mobilerobots/Aria/ArArgumentBuilder;", NULL 
    },
    {
      "setMapObjectParams", "(Ljava/lang/String;Lcom/mobilerobots/Aria/ArArgumentBuilder;Lcom/mobilerobots/Aria/SWIGTYPE_p_ArMapChangeDetails;)Z", NULL 
    },
    {
      "setMapObjectParams", "(Ljava/lang/String;Lcom/mobilerobots/Aria/ArArgumentBuilder;)Z", NULL 
    },
    {
      "getRemainder", "()Lcom/mobilerobots/Aria/ArArgumentBuilderPtrList;", NULL 
    },
    {
      "setQuiet", "(Z)V", NULL 
    },
    {
      "parseLine", "(Ljava/lang/String;)Z", NULL 
    },
    {
      "parsingComplete", "()V", NULL 
    },
    {
      "isLoadingDataStarted", "()Z", NULL 
    },
    {
      "isLoadingLinesAndDataStarted", "()Z", NULL 
    },
    {
      "getDisplayString", "(Ljava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "getDisplayString", "()Ljava/lang/String;", NULL 
    },
    {
      "getPoints", "(Ljava/lang/String;)Lcom/mobilerobots/Aria/SWIGTYPE_p_std__vectorT_ArPose_t;", NULL 
    },
    {
      "getPoints", "()Lcom/mobilerobots/Aria/SWIGTYPE_p_std__vectorT_ArPose_t;", NULL 
    },
    {
      "getMinPose", "(Ljava/lang/String;)Lcom/mobilerobots/Aria/ArPose;", NULL 
    },
    {
      "getMinPose", "()Lcom/mobilerobots/Aria/ArPose;", NULL 
    },
    {
      "getMaxPose", "(Ljava/lang/String;)Lcom/mobilerobots/Aria/ArPose;", NULL 
    },
    {
      "getMaxPose", "()Lcom/mobilerobots/Aria/ArPose;", NULL 
    },
    {
      "getNumPoints", "(Ljava/lang/String;)I", NULL 
    },
    {
      "getNumPoints", "()I", NULL 
    },
    {
      "isSortedPoints", "(Ljava/lang/String;)Z", NULL 
    },
    {
      "isSortedPoints", "()Z", NULL 
    },
    {
      "setPoints", "(Lcom/mobilerobots/Aria/SWIGTYPE_p_std__vectorT_ArPose_t;Ljava/lang/String;ZLcom/mobilerobots/Aria/SWIGTYPE_p_ArMapChangeDetails;)V", NULL 
    },
    {
      "setPoints", "(Lcom/mobilerobots/Aria/SWIGTYPE_p_std__vectorT_ArPose_t;Ljava/lang/String;Z)V", NULL 
    },
    {
      "setPoints", "(Lcom/mobilerobots/Aria/SWIGTYPE_p_std__vectorT_ArPose_t;Ljava/lang/String;)V", NULL 
    },
    {
      "setPoints", "(Lcom/mobilerobots/Aria/SWIGTYPE_p_std__vectorT_ArPose_t;)V", NULL 
    },
    {
      "getLines", "(Ljava/lang/String;)Lcom/mobilerobots/Aria/SWIGTYPE_p_std__vectorT_ArLineSegment_t;", NULL 
    },
    {
      "getLines", "()Lcom/mobilerobots/Aria/SWIGTYPE_p_std__vectorT_ArLineSegment_t;", NULL 
    },
    {
      "getLineMinPose", "(Ljava/lang/String;)Lcom/mobilerobots/Aria/ArPose;", NULL 
    },
    {
      "getLineMinPose", "()Lcom/mobilerobots/Aria/ArPose;", NULL 
    },
    {
      "getLineMaxPose", "(Ljava/lang/String;)Lcom/mobilerobots/Aria/ArPose;", NULL 
    },
    {
      "getLineMaxPose", "()Lcom/mobilerobots/Aria/ArPose;", NULL 
    },
    {
      "getNumLines", "(Ljava/lang/String;)I", NULL 
    },
    {
      "getNumLines", "()I", NULL 
    },
    {
      "isSortedLines", "(Ljava/lang/String;)Z", NULL 
    },
    {
      "isSortedLines", "()Z", NULL 
    },
    {
      "setLines", "(Lcom/mobilerobots/Aria/SWIGTYPE_p_std__vectorT_ArLineSegment_t;Ljava/lang/String;ZLcom/mobilerobots/Aria/SWIGTYPE_p_ArMapChangeDetails;)V", NULL 
    },
    {
      "setLines", "(Lcom/mobilerobots/Aria/SWIGTYPE_p_std__vectorT_ArLineSegment_t;Ljava/lang/String;Z)V", NULL 
    },
    {
      "setLines", "(Lcom/mobilerobots/Aria/SWIGTYPE_p_std__vectorT_ArLineSegment_t;Ljava/lang/String;)V", NULL 
    },
    {
      "setLines", "(Lcom/mobilerobots/Aria/SWIGTYPE_p_std__vectorT_ArLineSegment_t;)V", NULL 
    },
    {
      "getResolution", "(Ljava/lang/String;)I", NULL 
    },
    {
      "getResolution", "()I", NULL 
    },
    {
      "setResolution", "(ILjava/lang/String;Lcom/mobilerobots/Aria/SWIGTYPE_p_ArMapChangeDetails;)V", NULL 
    },
    {
      "setResolution", "(ILjava/lang/String;)V", NULL 
    },
    {
      "setResolution", "(I)V", NULL 
    },
    {
      "writeScanToFunctor", "(Lcom/mobilerobots/Aria/ArFunctor1_CString;Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "writeScanToFunctor", "(Lcom/mobilerobots/Aria/ArFunctor1_CString;Ljava/lang/String;)V", NULL 
    },
    {
      "writePointsToFunctor", "(Lcom/mobilerobots/Aria/SWIGTYPE_p_ArFunctor2T_int_std__vectorT_ArPose_t_p_t;Ljava/lang/String;Lcom/mobilerobots/Aria/ArFunctor1_CString;)V", NULL 
    },
    {
      "writePointsToFunctor", "(Lcom/mobilerobots/Aria/SWIGTYPE_p_ArFunctor2T_int_std__vectorT_ArPose_t_p_t;Ljava/lang/String;)V", NULL 
    },
    {
      "writePointsToFunctor", "(Lcom/mobilerobots/Aria/SWIGTYPE_p_ArFunctor2T_int_std__vectorT_ArPose_t_p_t;)V", NULL 
    },
    {
      "writeLinesToFunctor", "(Lcom/mobilerobots/Aria/SWIGTYPE_p_ArFunctor2T_int_std__vectorT_ArLineSegment_t_p_t;Ljava/lang/String;Lcom/mobilerobots/Aria/ArFunctor1_CString;)V", NULL 
    },
    {
      "writeLinesToFunctor", "(Lcom/mobilerobots/Aria/SWIGTYPE_p_ArFunctor2T_int_std__vectorT_ArLineSegment_t_p_t;Ljava/lang/String;)V", NULL 
    },
    {
      "writeLinesToFunctor", "(Lcom/mobilerobots/Aria/SWIGTYPE_p_ArFunctor2T_int_std__vectorT_ArLineSegment_t_p_t;)V", NULL 
    },
    {
      "addToFileParser", "(Lcom/mobilerobots/Aria/ArFileParser;)Z", NULL 
    },
    {
      "remFromFileParser", "(Lcom/mobilerobots/Aria/ArFileParser;)Z", NULL 
    },
    {
      "readDataPoint", "(Ljava/lang/String;)Z", NULL 
    },
    {
      "readLineSegment", "(Ljava/lang/String;)Z", NULL 
    },
    {
      "loadDataPoint", "(DD)V", NULL 
    },
    {
      "loadLineSegment", "(DDDD)V", NULL 
    },
    {
      "findFirstMapObject", "(Ljava/lang/String;Ljava/lang/String;Z)Lcom/mobilerobots/Aria/ArMapObject;", NULL 
    },
    {
      "findFirstMapObject", "(Ljava/lang/String;Ljava/lang/String;)Lcom/mobilerobots/Aria/ArMapObject;", NULL 
    },
    {
      "findMapObject", "(Ljava/lang/String;Ljava/lang/String;Z)Lcom/mobilerobots/Aria/ArMapObject;", NULL 
    },
    {
      "findMapObject", "(Ljava/lang/String;Ljava/lang/String;)Lcom/mobilerobots/Aria/ArMapObject;", NULL 
    },
    {
      "findMapObject", "(Ljava/lang/String;)Lcom/mobilerobots/Aria/ArMapObject;", NULL 
    },
    {
      "findMapObjectsOfType", "(Ljava/lang/String;Z)Lcom/mobilerobots/Aria/ArMapObjectPtrList;", NULL 
    },
    {
      "findMapObjectsOfType", "(Ljava/lang/String;)Lcom/mobilerobots/Aria/ArMapObjectPtrList;", NULL 
    },
    {
      "getMapObjects", "()Lcom/mobilerobots/Aria/ArMapObjectPtrList;", NULL 
    },
    {
      "setMapObjects", "(Lcom/mobilerobots/Aria/ArMapObjectPtrList;ZLcom/mobilerobots/Aria/SWIGTYPE_p_ArMapChangeDetails;)V", NULL 
    },
    {
      "setMapObjects", "(Lcom/mobilerobots/Aria/ArMapObjectPtrList;Z)V", NULL 
    },
    {
      "setMapObjects", "(Lcom/mobilerobots/Aria/ArMapObjectPtrList;)V", NULL 
    },
    {
      "writeObjectListToFunctor", "(Lcom/mobilerobots/Aria/ArFunctor1_CString;Ljava/lang/String;)V", NULL 
    },
    {
      "hasOriginLatLongAlt", "()Z", NULL 
    },
    {
      "getOriginLatLong", "()Lcom/mobilerobots/Aria/ArPose;", NULL 
    },
    {
      "getOriginAltitude", "()D", NULL 
    },
    {
      "setOriginLatLongAlt", "(ZLcom/mobilerobots/Aria/ArPose;DLcom/mobilerobots/Aria/SWIGTYPE_p_ArMapChangeDetails;)V", NULL 
    },
    {
      "setOriginLatLongAlt", "(ZLcom/mobilerobots/Aria/ArPose;D)V", NULL 
    },
    {
      "writeSupplementToFunctor", "(Lcom/mobilerobots/Aria/ArFunctor1_CString;Ljava/lang/String;)V", NULL 
    },
    {
      "writeFile", "(Ljava/lang/String;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/mobilerobots/Aria/ArMap");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 139; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArPoseWithTimeVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< ArPoseWithTime > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< ArPoseWithTime > *)new std::vector< ArPoseWithTime >();
  *(std::vector< ArPoseWithTime > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArPoseWithTimeVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< ArPoseWithTime >::size_type arg1 ;
  std::vector< ArPoseWithTime > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< ArPoseWithTime >::size_type)jarg1; 
  result = (std::vector< ArPoseWithTime > *)new std::vector< ArPoseWithTime >(arg1);
  *(std::vector< ArPoseWithTime > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseWithTimeVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  std::vector< ArPoseWithTime >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ArPoseWithTime > **)&jarg1; 
  result = ((std::vector< ArPoseWithTime > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseWithTimeVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  std::vector< ArPoseWithTime >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ArPoseWithTime > **)&jarg1; 
  result = ((std::vector< ArPoseWithTime > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseWithTimeVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  std::vector< ArPoseWithTime >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ArPoseWithTime > **)&jarg1; 
  arg2 = (std::vector< ArPoseWithTime >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseWithTimeVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ArPoseWithTime > **)&jarg1; 
  result = (bool)((std::vector< ArPoseWithTime > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseWithTimeVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ArPoseWithTime > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseWithTimeVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  std::vector< ArPoseWithTime >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< ArPoseWithTime > **)&jarg1; 
  arg2 = *(std::vector< ArPoseWithTime >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ArPoseWithTime >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< ArPoseWithTime >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseWithTimeVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  int arg2 ;
  std::vector< ArPoseWithTime >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ArPoseWithTime > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ArPoseWithTime >::value_type *) &std_vector_Sl_ArPoseWithTime_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< ArPoseWithTime >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseWithTimeVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  int arg2 ;
  std::vector< ArPoseWithTime >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< ArPoseWithTime > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< ArPoseWithTime >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ArPoseWithTime >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_ArPoseWithTime_Sg__set(arg1,arg2,(ArPoseWithTime const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArPoseWithTimeVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< ArPoseWithTime > *arg1 = (std::vector< ArPoseWithTime > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< ArPoseWithTime > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSensorReadingVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< ArSensorReading > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< ArSensorReading > *)new std::vector< ArSensorReading >();
  *(std::vector< ArSensorReading > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSensorReadingVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< ArSensorReading >::size_type arg1 ;
  std::vector< ArSensorReading > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< ArSensorReading >::size_type)jarg1; 
  result = (std::vector< ArSensorReading > *)new std::vector< ArSensorReading >(arg1);
  *(std::vector< ArSensorReading > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReadingVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  std::vector< ArSensorReading >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ArSensorReading > **)&jarg1; 
  result = ((std::vector< ArSensorReading > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReadingVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  std::vector< ArSensorReading >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ArSensorReading > **)&jarg1; 
  result = ((std::vector< ArSensorReading > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReadingVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  std::vector< ArSensorReading >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ArSensorReading > **)&jarg1; 
  arg2 = (std::vector< ArSensorReading >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReadingVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ArSensorReading > **)&jarg1; 
  result = (bool)((std::vector< ArSensorReading > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReadingVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ArSensorReading > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReadingVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  std::vector< ArSensorReading >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< ArSensorReading > **)&jarg1; 
  arg2 = *(std::vector< ArSensorReading >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ArSensorReading >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< ArSensorReading >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReadingVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  int arg2 ;
  std::vector< ArSensorReading >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ArSensorReading > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ArSensorReading >::value_type *) &std_vector_Sl_ArSensorReading_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< ArSensorReading >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReadingVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  int arg2 ;
  std::vector< ArSensorReading >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< ArSensorReading > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< ArSensorReading >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ArSensorReading >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_ArSensorReading_Sg__set(arg1,arg2,(ArSensorReading const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArSensorReadingVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< ArSensorReading > *arg1 = (std::vector< ArSensorReading > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< ArSensorReading > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1DoubleVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< double > *)new std::vector< double >();
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1DoubleVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< double >::size_type arg1 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< double >::size_type)jarg1; 
  result = (std::vector< double > *)new std::vector< double >(arg1);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_DoubleVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_DoubleVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_DoubleVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_DoubleVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = (bool)((std::vector< double > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_DoubleVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_DoubleVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  std::vector< double >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  temp2 = (std::vector< double >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_DoubleVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_DoubleVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  std::vector< double >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< double >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1DoubleVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapObjectPtrList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< ArMapObject * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< ArMapObject * > *)new std::list< ArMapObject * >();
  *(std::list< ArMapObject * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjectPtrList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< ArMapObject * > *arg1 = (std::list< ArMapObject * > *) 0 ;
  std::list< ArMapObject * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArMapObject * > **)&jarg1; 
  result = ((std::list< ArMapObject * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjectPtrList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< ArMapObject * > *arg1 = (std::list< ArMapObject * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArMapObject * > **)&jarg1; 
  result = (bool)((std::list< ArMapObject * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjectPtrList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< ArMapObject * > *arg1 = (std::list< ArMapObject * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArMapObject * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjectPtrList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< ArMapObject * > *arg1 = (std::list< ArMapObject * > *) 0 ;
  std::list< ArMapObject * >::value_type *arg2 = 0 ;
  std::list< ArMapObject * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< ArMapObject * > **)&jarg1; 
  temp2 = *(std::list< ArMapObject * >::value_type *)&jarg2;
  arg2 = &temp2; 
  (arg1)->push_back((std::list< ArMapObject * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjectPtrList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::list< ArMapObject * > *arg1 = (std::list< ArMapObject * > *) 0 ;
  int arg2 ;
  std::list< ArMapObject * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArMapObject * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::list< ArMapObject * >::value_type *) &std_list_Sl_ArMapObject_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::list< ArMapObject * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArMapObjectPtrList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< ArMapObject * > *arg1 = (std::list< ArMapObject * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< ArMapObject * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArFunctorPtrList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< ArFunctor * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< ArFunctor * > *)new std::list< ArFunctor * >();
  *(std::list< ArFunctor * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFunctorPtrList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< ArFunctor * > *arg1 = (std::list< ArFunctor * > *) 0 ;
  std::list< ArFunctor * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArFunctor * > **)&jarg1; 
  result = ((std::list< ArFunctor * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFunctorPtrList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< ArFunctor * > *arg1 = (std::list< ArFunctor * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArFunctor * > **)&jarg1; 
  result = (bool)((std::list< ArFunctor * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFunctorPtrList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< ArFunctor * > *arg1 = (std::list< ArFunctor * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArFunctor * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFunctorPtrList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< ArFunctor * > *arg1 = (std::list< ArFunctor * > *) 0 ;
  std::list< ArFunctor * >::value_type *arg2 = 0 ;
  std::list< ArFunctor * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< ArFunctor * > **)&jarg1; 
  temp2 = *(std::list< ArFunctor * >::value_type *)&jarg2;
  arg2 = &temp2; 
  (arg1)->push_back((std::list< ArFunctor * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFunctorPtrList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::list< ArFunctor * > *arg1 = (std::list< ArFunctor * > *) 0 ;
  int arg2 ;
  std::list< ArFunctor * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArFunctor * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::list< ArFunctor * >::value_type *) &std_list_Sl_ArFunctor_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::list< ArFunctor * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArFunctorPtrList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< ArFunctor * > *arg1 = (std::list< ArFunctor * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< ArFunctor * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArPoseList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< ArPose > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< ArPose > *)new std::list< ArPose >();
  *(std::list< ArPose > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< ArPose > *arg1 = (std::list< ArPose > *) 0 ;
  std::list< ArPose >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArPose > **)&jarg1; 
  result = ((std::list< ArPose > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< ArPose > *arg1 = (std::list< ArPose > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArPose > **)&jarg1; 
  result = (bool)((std::list< ArPose > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< ArPose > *arg1 = (std::list< ArPose > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArPose > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< ArPose > *arg1 = (std::list< ArPose > *) 0 ;
  std::list< ArPose >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< ArPose > **)&jarg1; 
  arg2 = *(std::list< ArPose >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< ArPose >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::list< ArPose >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::list< ArPose > *arg1 = (std::list< ArPose > *) 0 ;
  int arg2 ;
  std::list< ArPose >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArPose > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::list< ArPose >::value_type *) &std_list_Sl_ArPose_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::list< ArPose >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArPoseList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< ArPose > *arg1 = (std::list< ArPose > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< ArPose > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArPosePtrList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< ArPose * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< ArPose * > *)new std::list< ArPose * >();
  *(std::list< ArPose * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPosePtrList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< ArPose * > *arg1 = (std::list< ArPose * > *) 0 ;
  std::list< ArPose * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArPose * > **)&jarg1; 
  result = ((std::list< ArPose * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPosePtrList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< ArPose * > *arg1 = (std::list< ArPose * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArPose * > **)&jarg1; 
  result = (bool)((std::list< ArPose * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPosePtrList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< ArPose * > *arg1 = (std::list< ArPose * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArPose * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPosePtrList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< ArPose * > *arg1 = (std::list< ArPose * > *) 0 ;
  std::list< ArPose * >::value_type *arg2 = 0 ;
  std::list< ArPose * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< ArPose * > **)&jarg1; 
  temp2 = *(std::list< ArPose * >::value_type *)&jarg2;
  arg2 = &temp2; 
  (arg1)->push_back((std::list< ArPose * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPosePtrList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::list< ArPose * > *arg1 = (std::list< ArPose * > *) 0 ;
  int arg2 ;
  std::list< ArPose * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArPose * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::list< ArPose * >::value_type *) &std_list_Sl_ArPose_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::list< ArPose * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArPosePtrList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< ArPose * > *arg1 = (std::list< ArPose * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< ArPose * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArPoseWithTimeList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< ArPoseWithTime > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< ArPoseWithTime > *)new std::list< ArPoseWithTime >();
  *(std::list< ArPoseWithTime > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseWithTimeList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< ArPoseWithTime > *arg1 = (std::list< ArPoseWithTime > *) 0 ;
  std::list< ArPoseWithTime >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArPoseWithTime > **)&jarg1; 
  result = ((std::list< ArPoseWithTime > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseWithTimeList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< ArPoseWithTime > *arg1 = (std::list< ArPoseWithTime > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArPoseWithTime > **)&jarg1; 
  result = (bool)((std::list< ArPoseWithTime > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseWithTimeList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< ArPoseWithTime > *arg1 = (std::list< ArPoseWithTime > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArPoseWithTime > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseWithTimeList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< ArPoseWithTime > *arg1 = (std::list< ArPoseWithTime > *) 0 ;
  std::list< ArPoseWithTime >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< ArPoseWithTime > **)&jarg1; 
  arg2 = *(std::list< ArPoseWithTime >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< ArPoseWithTime >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::list< ArPoseWithTime >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseWithTimeList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::list< ArPoseWithTime > *arg1 = (std::list< ArPoseWithTime > *) 0 ;
  int arg2 ;
  std::list< ArPoseWithTime >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArPoseWithTime > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::list< ArPoseWithTime >::value_type *) &std_list_Sl_ArPoseWithTime_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::list< ArPoseWithTime >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArPoseWithTimeList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< ArPoseWithTime > *arg1 = (std::list< ArPoseWithTime > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< ArPoseWithTime > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArPoseWithTimePtrList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< ArPoseWithTime * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< ArPoseWithTime * > *)new std::list< ArPoseWithTime * >();
  *(std::list< ArPoseWithTime * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseWithTimePtrList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< ArPoseWithTime * > *arg1 = (std::list< ArPoseWithTime * > *) 0 ;
  std::list< ArPoseWithTime * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArPoseWithTime * > **)&jarg1; 
  result = ((std::list< ArPoseWithTime * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseWithTimePtrList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< ArPoseWithTime * > *arg1 = (std::list< ArPoseWithTime * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArPoseWithTime * > **)&jarg1; 
  result = (bool)((std::list< ArPoseWithTime * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseWithTimePtrList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< ArPoseWithTime * > *arg1 = (std::list< ArPoseWithTime * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArPoseWithTime * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseWithTimePtrList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< ArPoseWithTime * > *arg1 = (std::list< ArPoseWithTime * > *) 0 ;
  std::list< ArPoseWithTime * >::value_type *arg2 = 0 ;
  std::list< ArPoseWithTime * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< ArPoseWithTime * > **)&jarg1; 
  temp2 = *(std::list< ArPoseWithTime * >::value_type *)&jarg2;
  arg2 = &temp2; 
  (arg1)->push_back((std::list< ArPoseWithTime * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseWithTimePtrList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::list< ArPoseWithTime * > *arg1 = (std::list< ArPoseWithTime * > *) 0 ;
  int arg2 ;
  std::list< ArPoseWithTime * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArPoseWithTime * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::list< ArPoseWithTime * >::value_type *) &std_list_Sl_ArPoseWithTime_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::list< ArPoseWithTime * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArPoseWithTimePtrList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< ArPoseWithTime * > *arg1 = (std::list< ArPoseWithTime * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< ArPoseWithTime * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRangeDevicePtrList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< ArRangeDevice * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< ArRangeDevice * > *)new std::list< ArRangeDevice * >();
  *(std::list< ArRangeDevice * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevicePtrList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< ArRangeDevice * > *arg1 = (std::list< ArRangeDevice * > *) 0 ;
  std::list< ArRangeDevice * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArRangeDevice * > **)&jarg1; 
  result = ((std::list< ArRangeDevice * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevicePtrList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< ArRangeDevice * > *arg1 = (std::list< ArRangeDevice * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArRangeDevice * > **)&jarg1; 
  result = (bool)((std::list< ArRangeDevice * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevicePtrList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< ArRangeDevice * > *arg1 = (std::list< ArRangeDevice * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArRangeDevice * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevicePtrList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< ArRangeDevice * > *arg1 = (std::list< ArRangeDevice * > *) 0 ;
  std::list< ArRangeDevice * >::value_type *arg2 = 0 ;
  std::list< ArRangeDevice * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< ArRangeDevice * > **)&jarg1; 
  temp2 = *(std::list< ArRangeDevice * >::value_type *)&jarg2;
  arg2 = &temp2; 
  (arg1)->push_back((std::list< ArRangeDevice * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevicePtrList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::list< ArRangeDevice * > *arg1 = (std::list< ArRangeDevice * > *) 0 ;
  int arg2 ;
  std::list< ArRangeDevice * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArRangeDevice * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::list< ArRangeDevice * >::value_type *) &std_list_Sl_ArRangeDevice_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::list< ArRangeDevice * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRangeDevicePtrList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< ArRangeDevice * > *arg1 = (std::list< ArRangeDevice * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< ArRangeDevice * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArgumentBuilderPtrList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< ArArgumentBuilder * > *)new std::list< ArArgumentBuilder * >();
  *(std::list< ArArgumentBuilder * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilderPtrList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< ArArgumentBuilder * > *arg1 = (std::list< ArArgumentBuilder * > *) 0 ;
  std::list< ArArgumentBuilder * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArArgumentBuilder * > **)&jarg1; 
  result = ((std::list< ArArgumentBuilder * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilderPtrList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< ArArgumentBuilder * > *arg1 = (std::list< ArArgumentBuilder * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArArgumentBuilder * > **)&jarg1; 
  result = (bool)((std::list< ArArgumentBuilder * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilderPtrList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< ArArgumentBuilder * > *arg1 = (std::list< ArArgumentBuilder * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArArgumentBuilder * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilderPtrList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< ArArgumentBuilder * > *arg1 = (std::list< ArArgumentBuilder * > *) 0 ;
  std::list< ArArgumentBuilder * >::value_type *arg2 = 0 ;
  std::list< ArArgumentBuilder * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< ArArgumentBuilder * > **)&jarg1; 
  temp2 = *(std::list< ArArgumentBuilder * >::value_type *)&jarg2;
  arg2 = &temp2; 
  (arg1)->push_back((std::list< ArArgumentBuilder * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilderPtrList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::list< ArArgumentBuilder * > *arg1 = (std::list< ArArgumentBuilder * > *) 0 ;
  int arg2 ;
  std::list< ArArgumentBuilder * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArArgumentBuilder * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::list< ArArgumentBuilder * >::value_type *) &std_list_Sl_ArArgumentBuilder_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::list< ArArgumentBuilder * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArArgumentBuilderPtrList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< ArArgumentBuilder * > *arg1 = (std::list< ArArgumentBuilder * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< ArArgumentBuilder * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLineSegmentList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< ArLineSegment > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< ArLineSegment > *)new std::list< ArLineSegment >();
  *(std::list< ArLineSegment > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegmentList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< ArLineSegment > *arg1 = (std::list< ArLineSegment > *) 0 ;
  std::list< ArLineSegment >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArLineSegment > **)&jarg1; 
  result = ((std::list< ArLineSegment > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegmentList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< ArLineSegment > *arg1 = (std::list< ArLineSegment > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArLineSegment > **)&jarg1; 
  result = (bool)((std::list< ArLineSegment > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegmentList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< ArLineSegment > *arg1 = (std::list< ArLineSegment > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArLineSegment > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegmentList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< ArLineSegment > *arg1 = (std::list< ArLineSegment > *) 0 ;
  std::list< ArLineSegment >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< ArLineSegment > **)&jarg1; 
  arg2 = *(std::list< ArLineSegment >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< ArLineSegment >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::list< ArLineSegment >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegmentList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::list< ArLineSegment > *arg1 = (std::list< ArLineSegment > *) 0 ;
  int arg2 ;
  std::list< ArLineSegment >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArLineSegment > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::list< ArLineSegment >::value_type *) &std_list_Sl_ArLineSegment_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::list< ArLineSegment >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArLineSegmentList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< ArLineSegment > *arg1 = (std::list< ArLineSegment > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< ArLineSegment > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLineSegmentPtrList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< ArLineSegment * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< ArLineSegment * > *)new std::list< ArLineSegment * >();
  *(std::list< ArLineSegment * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegmentPtrList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< ArLineSegment * > *arg1 = (std::list< ArLineSegment * > *) 0 ;
  std::list< ArLineSegment * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArLineSegment * > **)&jarg1; 
  result = ((std::list< ArLineSegment * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegmentPtrList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< ArLineSegment * > *arg1 = (std::list< ArLineSegment * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArLineSegment * > **)&jarg1; 
  result = (bool)((std::list< ArLineSegment * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegmentPtrList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< ArLineSegment * > *arg1 = (std::list< ArLineSegment * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArLineSegment * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegmentPtrList_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< ArLineSegment * > *arg1 = (std::list< ArLineSegment * > *) 0 ;
  std::list< ArLineSegment * >::value_type *arg2 = 0 ;
  std::list< ArLineSegment * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< ArLineSegment * > **)&jarg1; 
  temp2 = *(std::list< ArLineSegment * >::value_type *)&jarg2;
  arg2 = &temp2; 
  (arg1)->push_back((std::list< ArLineSegment * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegmentPtrList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::list< ArLineSegment * > *arg1 = (std::list< ArLineSegment * > *) 0 ;
  int arg2 ;
  std::list< ArLineSegment * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< ArLineSegment * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::list< ArLineSegment * >::value_type *) &std_list_Sl_ArLineSegment_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::list< ArLineSegment * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArLineSegmentPtrList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< ArLineSegment * > *arg1 = (std::list< ArLineSegment * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< ArLineSegment * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1IntArPoseMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< int,ArPose > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< int,ArPose > *)new std::map< int,ArPose >();
  *(std::map< int,ArPose > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1IntArPoseMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,ArPose > *arg1 = 0 ;
  std::map< int,ArPose > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,ArPose > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int,ArPose > const & reference is null");
    return 0;
  } 
  result = (std::map< int,ArPose > *)new std::map< int,ArPose >((std::map< int,ArPose > const &)*arg1);
  *(std::map< int,ArPose > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_IntArPoseMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,ArPose > *arg1 = (std::map< int,ArPose > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,ArPose > **)&jarg1; 
  result = (unsigned int)((std::map< int,ArPose > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_IntArPoseMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< int,ArPose > *arg1 = (std::map< int,ArPose > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,ArPose > **)&jarg1; 
  result = (bool)((std::map< int,ArPose > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_IntArPoseMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< int,ArPose > *arg1 = (std::map< int,ArPose > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,ArPose > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_IntArPoseMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::map< int,ArPose > *arg1 = (std::map< int,ArPose > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  ArPose *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,ArPose > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    result = (ArPose *) &std_map_Sl_int_Sc_ArPose_Sg__get(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(ArPose **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_IntArPoseMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::map< int,ArPose > *arg1 = (std::map< int,ArPose > *) 0 ;
  int *arg2 = 0 ;
  ArPose *arg3 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::map< int,ArPose > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(ArPose **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose const & reference is null");
    return ;
  } 
  std_map_Sl_int_Sc_ArPose_Sg__set(arg1,(int const &)*arg2,(ArPose const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_IntArPoseMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::map< int,ArPose > *arg1 = (std::map< int,ArPose > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,ArPose > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    std_map_Sl_int_Sc_ArPose_Sg__del(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_IntArPoseMap_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::map< int,ArPose > *arg1 = (std::map< int,ArPose > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,ArPose > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_ArPose_Sg__has_key(arg1,(int const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1IntArPoseMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< int,ArPose > *arg1 = (std::map< int,ArPose > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< int,ArPose > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArListPos_1FIRST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArListPos::Pos result;
  
  (void)jenv;
  (void)jcls;
  result = (ArListPos::Pos)ArListPos::FIRST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArListPos_1LAST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArListPos::Pos result;
  
  (void)jenv;
  (void)jcls;
  result = (ArListPos::Pos)ArListPos::LAST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArListPos(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArListPos *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArListPos *)new ArListPos();
  *(ArListPos **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArListPos(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArListPos *arg1 = (ArListPos *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArListPos **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArTypes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArTypes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArTypes *)new ArTypes();
  *(ArTypes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArTypes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArTypes *arg1 = (ArTypes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArTypes **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI__1GNU_1SOURCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_M_1PI_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double) 3.1415927;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1BIT0_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArUtil::BITS result;
  
  (void)jenv;
  (void)jcls;
  result = (ArUtil::BITS)ArUtil::BIT0;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1BIT1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArUtil::BITS result;
  
  (void)jenv;
  (void)jcls;
  result = (ArUtil::BITS)ArUtil::BIT1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1BIT2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArUtil::BITS result;
  
  (void)jenv;
  (void)jcls;
  result = (ArUtil::BITS)ArUtil::BIT2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1BIT3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArUtil::BITS result;
  
  (void)jenv;
  (void)jcls;
  result = (ArUtil::BITS)ArUtil::BIT3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1BIT4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArUtil::BITS result;
  
  (void)jenv;
  (void)jcls;
  result = (ArUtil::BITS)ArUtil::BIT4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1BIT5_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArUtil::BITS result;
  
  (void)jenv;
  (void)jcls;
  result = (ArUtil::BITS)ArUtil::BIT5;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1BIT6_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArUtil::BITS result;
  
  (void)jenv;
  (void)jcls;
  result = (ArUtil::BITS)ArUtil::BIT6;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1BIT7_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArUtil::BITS result;
  
  (void)jenv;
  (void)jcls;
  result = (ArUtil::BITS)ArUtil::BIT7;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1BIT8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArUtil::BITS result;
  
  (void)jenv;
  (void)jcls;
  result = (ArUtil::BITS)ArUtil::BIT8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1BIT9_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArUtil::BITS result;
  
  (void)jenv;
  (void)jcls;
  result = (ArUtil::BITS)ArUtil::BIT9;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1BIT10_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArUtil::BITS result;
  
  (void)jenv;
  (void)jcls;
  result = (ArUtil::BITS)ArUtil::BIT10;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1BIT11_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArUtil::BITS result;
  
  (void)jenv;
  (void)jcls;
  result = (ArUtil::BITS)ArUtil::BIT11;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1BIT12_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArUtil::BITS result;
  
  (void)jenv;
  (void)jcls;
  result = (ArUtil::BITS)ArUtil::BIT12;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1BIT13_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArUtil::BITS result;
  
  (void)jenv;
  (void)jcls;
  result = (ArUtil::BITS)ArUtil::BIT13;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1BIT14_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArUtil::BITS result;
  
  (void)jenv;
  (void)jcls;
  result = (ArUtil::BITS)ArUtil::BIT14;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1BIT15_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArUtil::BITS result;
  
  (void)jenv;
  (void)jcls;
  result = (ArUtil::BITS)ArUtil::BIT15;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1sleep(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  ArUtil::sleep(arg1);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1getTime(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)ArUtil::getTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1findMin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)ArUtil::findMin(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1findMax_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)ArUtil::findMax(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1findMin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)ArUtil::findMin(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1findMax_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)ArUtil::findMax(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1sizeFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (long)ArUtil::sizeFile((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1findFile(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)ArUtil::findFile((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1appendSlash_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (size_t)jarg2; 
  ArUtil::appendSlash(arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1appendSlash_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  ArUtil::appendSlash(*arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1fixSlashes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (size_t)jarg2; 
  ArUtil::fixSlashes(arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1fixSlashes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  ArUtil::fixSlashes(*arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1fixSlashesForward(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (size_t)jarg2; 
  ArUtil::fixSlashesForward(arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1fixSlashesBackward(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (size_t)jarg2; 
  ArUtil::fixSlashesBackward(arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jchar JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1getSlash(JNIEnv *jenv, jclass jcls) {
  jchar jresult = 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  result = (char)ArUtil::getSlash();
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1addDirectories(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3, jstring jarg4) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (size_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  ArUtil::addDirectories(arg1,arg2,(char const *)arg3,(char const *)arg4);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1strcmp_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)ArUtil::strcmp((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1strcasecmp_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)ArUtil::strcasecmp((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1strSuffixCmp(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)ArUtil::strSuffixCmp((char const *)arg1,(char const *)arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1strSuffixCaseCmp(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)ArUtil::strSuffixCaseCmp((char const *)arg1,(char const *)arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1strcasequotecmp(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)ArUtil::strcasequotecmp((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1escapeSpaces(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (size_t)jarg3; 
  ArUtil::escapeSpaces(arg1,(char const *)arg2,arg3);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1stripQuotes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  result = (bool)ArUtil::stripQuotes(arg1,(char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1stripQuotes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1; 
  result = (bool)ArUtil::stripQuotes(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1fixBadCharacters_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = (std::string *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (bool)ArUtil::fixBadCharacters(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1fixBadCharacters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = (std::string *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)ArUtil::fixBadCharacters(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1lower(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (size_t)jarg3; 
  ArUtil::lower(arg1,(char const *)arg2,arg3);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1isOnlyAlphaNumeric(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)ArUtil::isOnlyAlphaNumeric((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1isOnlyNumeric(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)ArUtil::isOnlyNumeric((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1isStrEmpty(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)ArUtil::isStrEmpty((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1isStrInList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)ArUtil::isStrInList((char const *)arg1,(std::list< std::string > const &)*arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1isStrInList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return 0;
  } 
  result = (bool)ArUtil::isStrInList((char const *)arg1,(std::list< std::string > const &)*arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1atof(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jdouble jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (double)ArUtil::atof((char const *)arg1);
  jresult = (jdouble)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1convertBool(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (char *)ArUtil::convertBool(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1writeToFile(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  char *arg1 = (char *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = *(FILE **)&jarg2; 
  ArUtil::writeToFile((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1getStringFromFile(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  result = (bool)ArUtil::getStringFromFile((char const *)arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1getStringFromRegistry(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5) {
  jboolean jresult = 0 ;
  ArUtil::REGKEY arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArUtil::REGKEY)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (int)jarg5; 
  result = (bool)ArUtil::getStringFromRegistry(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1findFirstStringInRegistry(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (bool)ArUtil::findFirstStringInRegistry((char const *)arg1,(char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM1_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArUtil::COM1 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM1, (const char *)arg1);
    } else {
      ArUtil::COM1 = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM1_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArUtil::COM1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM2_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArUtil::COM2 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM2, (const char *)arg1);
    } else {
      ArUtil::COM2 = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM2_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArUtil::COM2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM3_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArUtil::COM3 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM3, (const char *)arg1);
    } else {
      ArUtil::COM3 = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM3_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArUtil::COM3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM4_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArUtil::COM4 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM4, (const char *)arg1);
    } else {
      ArUtil::COM4 = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM4_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArUtil::COM4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM5_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArUtil::COM5 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM5, (const char *)arg1);
    } else {
      ArUtil::COM5 = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM5_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArUtil::COM5;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM6_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArUtil::COM6 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM6, (const char *)arg1);
    } else {
      ArUtil::COM6 = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM6_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArUtil::COM6;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM7_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArUtil::COM7 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM7, (const char *)arg1);
    } else {
      ArUtil::COM7 = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM7_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArUtil::COM7;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM8_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArUtil::COM8 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM8, (const char *)arg1);
    } else {
      ArUtil::COM8 = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM8_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArUtil::COM8;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM9_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArUtil::COM9 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM9, (const char *)arg1);
    } else {
      ArUtil::COM9 = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM9_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArUtil::COM9;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM10_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArUtil::COM10 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM10, (const char *)arg1);
    } else {
      ArUtil::COM10 = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM10_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArUtil::COM10;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM11_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArUtil::COM11 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM11, (const char *)arg1);
    } else {
      ArUtil::COM11 = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArUtil::COM11;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM12_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArUtil::COM12 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM12, (const char *)arg1);
    } else {
      ArUtil::COM12 = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArUtil::COM12;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM13_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArUtil::COM13 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM13, (const char *)arg1);
    } else {
      ArUtil::COM13 = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArUtil::COM13;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM14_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArUtil::COM14 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM14, (const char *)arg1);
    } else {
      ArUtil::COM14 = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArUtil::COM14;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM15_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArUtil::COM15 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM15, (const char *)arg1);
    } else {
      ArUtil::COM15 = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM15_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArUtil::COM15;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM16_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArUtil::COM16 = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::COM16, (const char *)arg1);
    } else {
      ArUtil::COM16 = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1COM16_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArUtil::COM16;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1TRUESTRING_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArUtil::TRUESTRING = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::TRUESTRING, (const char *)arg1);
    } else {
      ArUtil::TRUESTRING = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1TRUESTRING_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArUtil::TRUESTRING;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1FALSESTRING_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArUtil::FALSESTRING = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArUtil::FALSESTRING, (const char *)arg1);
    } else {
      ArUtil::FALSESTRING = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1FALSESTRING_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArUtil::FALSESTRING;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1putCurrentYearInString(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (size_t)jarg2; 
  ArUtil::putCurrentYearInString(arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1putCurrentMonthInString(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (size_t)jarg2; 
  ArUtil::putCurrentMonthInString(arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1putCurrentDayInString(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (size_t)jarg2; 
  ArUtil::putCurrentDayInString(arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1putCurrentHourInString(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (size_t)jarg2; 
  ArUtil::putCurrentHourInString(arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1putCurrentMinuteInString(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (size_t)jarg2; 
  ArUtil::putCurrentMinuteInString(arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1putCurrentSecondInString(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (size_t)jarg2; 
  ArUtil::putCurrentSecondInString(arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1parseTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool arg3 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(bool **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = ArUtil::parseTime((char const *)arg1,arg2,arg3);
  *(time_t **)&jresult = new time_t((const time_t &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1parseTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(bool **)&jarg2; 
  result = ArUtil::parseTime((char const *)arg1,arg2);
  *(time_t **)&jresult = new time_t((const time_t &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1parseTime_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = ArUtil::parseTime((char const *)arg1);
  *(time_t **)&jresult = new time_t((const time_t &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1localtime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  time_t *arg1 = (time_t *) 0 ;
  tm *arg2 = (tm *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(time_t **)&jarg1; 
  arg2 = *(tm **)&jarg2; 
  result = (bool)ArUtil::localtime((time_t const *)arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1localtime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  tm *arg1 = (tm *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tm **)&jarg1; 
  result = (bool)ArUtil::localtime(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1matchCase(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (bool)ArUtil::matchCase((char const *)arg1,(char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1getDirectory(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  result = (bool)ArUtil::getDirectory((char const *)arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1getFileName(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  result = (bool)ArUtil::getFileName((char const *)arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1changeFileTimestamp(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(time_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)ArUtil::changeFileTimestamp((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1fopen_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  FILE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (FILE *)ArUtil::fopen((char const *)arg1,(char const *)arg2,arg3);
  *(FILE **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1fopen_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  FILE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (FILE *)ArUtil::fopen((char const *)arg1,(char const *)arg2);
  *(FILE **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1open_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)ArUtil::open((char const *)arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1open_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (int)ArUtil::open((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1open_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3, jboolean jarg4) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  mode_t arg3 ;
  bool arg4 ;
  mode_t *argp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  argp3 = *(mode_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mode_t");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  result = (int)ArUtil::open((char const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1open_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  mode_t arg3 ;
  mode_t *argp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  argp3 = *(mode_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mode_t");
    return 0;
  }
  arg3 = *argp3; 
  result = (int)ArUtil::open((char const *)arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1creat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  mode_t arg2 ;
  bool arg3 ;
  mode_t *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(mode_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mode_t");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (int)ArUtil::creat((char const *)arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1creat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  mode_t arg2 ;
  mode_t *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(mode_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mode_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)ArUtil::creat((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1popen_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  FILE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (FILE *)ArUtil::popen((char const *)arg1,(char const *)arg2,arg3);
  *(FILE **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1popen_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  FILE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (FILE *)ArUtil::popen((char const *)arg1,(char const *)arg2);
  *(FILE **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1setFileCloseOnExec_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  int arg1 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  ArUtil::setFileCloseOnExec(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1setFileCloseOnExec_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  ArUtil::setFileCloseOnExec(arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1setFileCloseOnExec_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  FILE *arg1 = (FILE *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  ArUtil::setFileCloseOnExec(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1setFileCloseOnExec_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FILE *arg1 = (FILE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  ArUtil::setFileCloseOnExec(arg1);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1floatIsNormal(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jboolean jresult = 0 ;
  double arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (bool)ArUtil::floatIsNormal(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1secToMSec(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  double arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (double)ArUtil::secToMSec(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1mSecToSec(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  double arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (double)ArUtil::mSecToSec(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1metersToFeet(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  double arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (double)ArUtil::metersToFeet(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1feetToMeters(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  double arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (double)ArUtil::feetToMeters(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1atoi_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(bool **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)ArUtil::atoi((char const *)arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1atoi_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(bool **)&jarg2; 
  result = (int)ArUtil::atoi((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUtil_1atoi_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (int)ArUtil::atoi((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArUtil(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArUtil *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArUtil *)new ArUtil();
  *(ArUtil **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArUtil(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArUtil *arg1 = (ArUtil *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArUtil **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1epsilon(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)ArMath::epsilon();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1addAngle(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)ArMath::addAngle(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1subAngle(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)ArMath::subAngle(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1fixAngle(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  double arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (double)ArMath::fixAngle(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1degToRad(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  double arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (double)ArMath::degToRad(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1radToDeg(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  double arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (double)ArMath::radToDeg(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1cos(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  double arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (double)ArMath::cos(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1sin(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  double arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (double)ArMath::sin(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1tan(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  double arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (double)ArMath::tan(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1atan2(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)ArMath::atan2(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1angleBetween(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)ArMath::angleBetween(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1fabs(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  double arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (double)ArMath::fabs(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1roundInt(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jint jresult = 0 ;
  double arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (int)ArMath::roundInt(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1roundShort(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jshort jresult = 0 ;
  double arg1 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (short)ArMath::roundShort(arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1pointRotate(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdoubleArray jarg2, jdouble jarg3) {
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  double temp1 ;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = &temp1; 
  }
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg2 = &temp2; 
  }
  arg3 = (double)jarg3; 
  ArMath::pointRotate(arg1,arg2,arg3);
  {
    jdouble jvalue = (jdouble)temp1;
    jenv->SetDoubleArrayRegion(jarg1, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp2;
    jenv->SetDoubleArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1random(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  result = (long)ArMath::random();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1getRandMax(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  result = (long)ArMath::getRandMax();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1randomInRange(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  long arg1 ;
  long arg2 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  arg2 = (long)jarg2; 
  result = (long)ArMath::randomInRange(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1distanceBetween(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)ArMath::distanceBetween(arg1,arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1squaredDistanceBetween(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)ArMath::squaredDistanceBetween(arg1,arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1log2(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  double arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (double)ArMath::log2(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1isNan_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jboolean jresult = 0 ;
  double arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (bool)ArMath::isNan(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1isNan_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jboolean jresult = 0 ;
  float arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (bool)ArMath::isNan(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1isFinite_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jboolean jresult = 0 ;
  float arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (bool)ArMath::isFinite(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1isFinite_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jboolean jresult = 0 ;
  double arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (bool)ArMath::isFinite(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1compareFloats_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)ArMath::compareFloats(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMath_1compareFloats_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jboolean jresult = 0 ;
  double arg1 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)ArMath::compareFloats(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMath(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArMath *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArMath *)new ArMath();
  *(ArMath **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArMath(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArMath *arg1 = (ArMath *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArMath **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  ArPose *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArPose *)new ArPose(arg1,arg2,arg3);
  *(ArPose **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  ArPose *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArPose *)new ArPose(arg1,arg2);
  *(ArPose **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArPose_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  ArPose *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (ArPose *)new ArPose(arg1);
  *(ArPose **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArPose_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArPose *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArPose *)new ArPose();
  *(ArPose **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArPose_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArPose *arg1 = 0 ;
  ArPose *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPose **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose const & reference is null");
    return 0;
  } 
  result = (ArPose *)new ArPose((ArPose const &)*arg1);
  *(ArPose **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArPose(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArPose *arg1 = (ArPose *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArPose **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPose_1setPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  ArPose *arg1 = (ArPose *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPose **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setPose(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPose_1setPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArPose *arg1 = (ArPose *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPose **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setPose(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPose_1setPose_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArPose *arg1 = (ArPose *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArPose **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setPose(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPose_1setX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArPose *arg1 = (ArPose *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPose **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setX(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPose_1setY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArPose *arg1 = (ArPose *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPose **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setY(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPose_1setTh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArPose *arg1 = (ArPose *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPose **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTh(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPose_1setThRad(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArPose *arg1 = (ArPose *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPose **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setThRad(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPose_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArPose *arg1 = (ArPose *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPose **)&jarg1; 
  result = (double)((ArPose const *)arg1)->getX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPose_1getY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArPose *arg1 = (ArPose *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPose **)&jarg1; 
  result = (double)((ArPose const *)arg1)->getY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPose_1getTh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArPose *arg1 = (ArPose *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPose **)&jarg1; 
  result = (double)((ArPose const *)arg1)->getTh();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPose_1getThRad(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArPose *arg1 = (ArPose *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPose **)&jarg1; 
  result = (double)((ArPose const *)arg1)->getThRad();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPose_1getPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  ArPose *arg1 = (ArPose *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double temp2 ;
  double temp3 ;
  double temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPose **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg2 = &temp2; 
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg3 = &temp3; 
  }
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg4 = &temp4; 
  }
  ((ArPose const *)arg1)->getPose(arg2,arg3,arg4);
  {
    jdouble jvalue = (jdouble)temp2;
    jenv->SetDoubleArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp3;
    jenv->SetDoubleArrayRegion(jarg3, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp4;
    jenv->SetDoubleArrayRegion(jarg4, 0, 1, &jvalue);
  }
  
  
  
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPose_1getPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3) {
  ArPose *arg1 = (ArPose *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double temp2 ;
  double temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPose **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg2 = &temp2; 
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg3 = &temp3; 
  }
  ((ArPose const *)arg1)->getPose(arg2,arg3);
  {
    jdouble jvalue = (jdouble)temp2;
    jenv->SetDoubleArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp3;
    jenv->SetDoubleArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPose_1findDistanceTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  ArPose *arg1 = (ArPose *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArPose **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg2 = *argp2; 
  result = (double)((ArPose const *)arg1)->findDistanceTo(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPose_1squaredFindDistanceTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  ArPose *arg1 = (ArPose *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArPose **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg2 = *argp2; 
  result = (double)((ArPose const *)arg1)->squaredFindDistanceTo(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPose_1findAngleTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  ArPose *arg1 = (ArPose *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArPose **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg2 = *argp2; 
  result = (double)((ArPose const *)arg1)->findAngleTo(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPose_1log(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArPose *arg1 = (ArPose *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPose **)&jarg1; 
  ((ArPose const *)arg1)->log();
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPose_1distanceBetween(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  ArPose arg1 ;
  ArPose arg2 ;
  ArPose *argp1 ;
  ArPose *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(ArPose **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg2 = *argp2; 
  result = (double)ArPose::distanceBetween(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArTime *)new ArTime();
  *(ArTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArTime *arg1 = 0 ;
  ArTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTime **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArTime const & reference is null");
    return 0;
  } 
  result = (ArTime *)new ArTime((ArTime const &)*arg1);
  *(ArTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArTime *arg1 = (ArTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArTime **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1mSecSince_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ArTime *arg1 = (ArTime *) 0 ;
  ArTime arg2 ;
  ArTime *argp2 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArTime **)&jarg1; 
  argp2 = *(ArTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return 0;
  }
  arg2 = *argp2; 
  result = (long)((ArTime const *)arg1)->mSecSince(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1mSecSinceLL_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArTime *arg1 = (ArTime *) 0 ;
  ArTime arg2 ;
  ArTime *argp2 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArTime **)&jarg1; 
  argp2 = *(ArTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return 0;
  }
  arg2 = *argp2; 
  result = (long long)((ArTime const *)arg1)->mSecSinceLL(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1secSince_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ArTime *arg1 = (ArTime *) 0 ;
  ArTime arg2 ;
  ArTime *argp2 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArTime **)&jarg1; 
  argp2 = *(ArTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return 0;
  }
  arg2 = *argp2; 
  result = (long)((ArTime const *)arg1)->secSince(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1secSinceLL_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArTime *arg1 = (ArTime *) 0 ;
  ArTime arg2 ;
  ArTime *argp2 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArTime **)&jarg1; 
  argp2 = *(ArTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return 0;
  }
  arg2 = *argp2; 
  result = (long long)((ArTime const *)arg1)->secSinceLL(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1mSecTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArTime *arg1 = (ArTime *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTime **)&jarg1; 
  result = (long)((ArTime const *)arg1)->mSecTo();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1mSecToLL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArTime *arg1 = (ArTime *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTime **)&jarg1; 
  result = (long long)((ArTime const *)arg1)->mSecToLL();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1secTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArTime *arg1 = (ArTime *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTime **)&jarg1; 
  result = (long)((ArTime const *)arg1)->secTo();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1secToLL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArTime *arg1 = (ArTime *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTime **)&jarg1; 
  result = (long long)((ArTime const *)arg1)->secToLL();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1mSecSince_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArTime *arg1 = (ArTime *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTime **)&jarg1; 
  result = (long)((ArTime const *)arg1)->mSecSince();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1mSecSinceLL_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArTime *arg1 = (ArTime *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTime **)&jarg1; 
  result = (long long)((ArTime const *)arg1)->mSecSinceLL();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1secSince_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArTime *arg1 = (ArTime *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTime **)&jarg1; 
  result = (long)((ArTime const *)arg1)->secSince();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1secSinceLL_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArTime *arg1 = (ArTime *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTime **)&jarg1; 
  result = (long long)((ArTime const *)arg1)->secSinceLL();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1isBefore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArTime *arg1 = (ArTime *) 0 ;
  ArTime arg2 ;
  ArTime *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArTime **)&jarg1; 
  argp2 = *(ArTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((ArTime const *)arg1)->isBefore(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1isAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArTime *arg1 = (ArTime *) 0 ;
  ArTime arg2 ;
  ArTime *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArTime **)&jarg1; 
  argp2 = *(ArTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((ArTime const *)arg1)->isAt(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1isAfter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArTime *arg1 = (ArTime *) 0 ;
  ArTime arg2 ;
  ArTime *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArTime **)&jarg1; 
  argp2 = *(ArTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((ArTime const *)arg1)->isAfter(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1setToNow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTime *arg1 = (ArTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTime **)&jarg1; 
  (arg1)->setToNow();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1addMSec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArTime *arg1 = (ArTime *) 0 ;
  long arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTime **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (bool)(arg1)->addMSec(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1addMSecLL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArTime *arg1 = (ArTime *) 0 ;
  long long arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTime **)&jarg1; 
  arg2 = (long long)jarg2; 
  result = (bool)(arg1)->addMSecLL(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1setSec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArTime *arg1 = (ArTime *) 0 ;
  unsigned long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTime **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  (arg1)->setSec(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1setMSec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArTime *arg1 = (ArTime *) 0 ;
  unsigned long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTime **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  (arg1)->setMSec(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1getSec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArTime *arg1 = (ArTime *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTime **)&jarg1; 
  result = (unsigned long)((ArTime const *)arg1)->getSec();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1getMSec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArTime *arg1 = (ArTime *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTime **)&jarg1; 
  result = (unsigned long)((ArTime const *)arg1)->getMSec();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1setSecLL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  ArTime *arg1 = (ArTime *) 0 ;
  unsigned long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTime **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  (arg1)->setSecLL(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1setMSecLL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  ArTime *arg1 = (ArTime *) 0 ;
  unsigned long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTime **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  (arg1)->setMSecLL(arg2);
}


SWIGEXPORT jobject JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1getSecLL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  ArTime *arg1 = (ArTime *) 0 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTime **)&jarg1; 
  result = (unsigned long long)((ArTime const *)arg1)->getSecLL();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1getMSecLL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  ArTime *arg1 = (ArTime *) 0 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTime **)&jarg1; 
  result = (unsigned long long)((ArTime const *)arg1)->getMSecLL();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1log_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArTime *arg1 = (ArTime *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTime **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  ((ArTime const *)arg1)->log((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1log_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTime *arg1 = (ArTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTime **)&jarg1; 
  ((ArTime const *)arg1)->log();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTime_1usingMonotonicClock(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)ArTime::usingMonotonicClock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArPoseWithTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  ArTime arg4 ;
  ArTime *argp4 ;
  ArPoseWithTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  argp4 = *(ArTime **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return 0;
  }
  arg4 = *argp4; 
  result = (ArPoseWithTime *)new ArPoseWithTime(arg1,arg2,arg3,arg4);
  *(ArPoseWithTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArPoseWithTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  ArPoseWithTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArPoseWithTime *)new ArPoseWithTime(arg1,arg2,arg3);
  *(ArPoseWithTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArPoseWithTime_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  ArPoseWithTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArPoseWithTime *)new ArPoseWithTime(arg1,arg2);
  *(ArPoseWithTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArPoseWithTime_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  ArPoseWithTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (ArPoseWithTime *)new ArPoseWithTime(arg1);
  *(ArPoseWithTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArPoseWithTime_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArPoseWithTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArPoseWithTime *)new ArPoseWithTime();
  *(ArPoseWithTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArPoseWithTime_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArPose *arg1 = 0 ;
  ArPoseWithTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPose **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose const & reference is null");
    return 0;
  } 
  result = (ArPoseWithTime *)new ArPoseWithTime((ArPose const &)*arg1);
  *(ArPoseWithTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArPoseWithTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArPoseWithTime *arg1 = (ArPoseWithTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArPoseWithTime **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseWithTime_1setTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArPoseWithTime *arg1 = (ArPoseWithTime *) 0 ;
  ArTime arg2 ;
  ArTime *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArPoseWithTime **)&jarg1; 
  argp2 = *(ArTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setTime(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseWithTime_1setTimeToNow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArPoseWithTime *arg1 = (ArPoseWithTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPoseWithTime **)&jarg1; 
  (arg1)->setTimeToNow();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseWithTime_1getTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArPoseWithTime *arg1 = (ArPoseWithTime *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPoseWithTime **)&jarg1; 
  result = ((ArPoseWithTime const *)arg1)->getTime();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSectors_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  ArSectors *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (ArSectors *)new ArSectors(arg1);
  *(ArSectors **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSectors_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArSectors *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArSectors *)new ArSectors();
  *(ArSectors **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArSectors(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArSectors *arg1 = (ArSectors *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArSectors **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSectors_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSectors *arg1 = (ArSectors *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSectors **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSectors_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArSectors *arg1 = (ArSectors *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSectors **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->update(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSectors_1didAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSectors *arg1 = (ArSectors *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSectors **)&jarg1; 
  result = (bool)((ArSectors const *)arg1)->didAll();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLine_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArLine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArLine *)new ArLine();
  *(ArLine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLine_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  ArLine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArLine *)new ArLine(arg1,arg2,arg3);
  *(ArLine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLine_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  ArLine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArLine *)new ArLine(arg1,arg2,arg3,arg4);
  *(ArLine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArLine(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArLine *arg1 = (ArLine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArLine **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLine_1newParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  ArLine *arg1 = (ArLine *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLine **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->newParameters(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLine_1newParametersFromEndpoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  ArLine *arg1 = (ArLine *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLine **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->newParametersFromEndpoints(arg2,arg3,arg4,arg5);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLine_1getA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLine *arg1 = (ArLine *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLine **)&jarg1; 
  result = (double)((ArLine const *)arg1)->getA();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLine_1getB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLine *arg1 = (ArLine *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLine **)&jarg1; 
  result = (double)((ArLine const *)arg1)->getB();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLine_1getC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLine *arg1 = (ArLine *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLine **)&jarg1; 
  result = (double)((ArLine const *)arg1)->getC();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLine_1intersects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArLine *arg1 = (ArLine *) 0 ;
  ArLine *arg2 = (ArLine *) 0 ;
  ArPose *arg3 = (ArPose *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArLine **)&jarg1; 
  arg2 = *(ArLine **)&jarg2; 
  arg3 = *(ArPose **)&jarg3; 
  result = (bool)((ArLine const *)arg1)->intersects((ArLine const *)arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLine_1makeLinePerp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArLine *arg1 = (ArLine *) 0 ;
  ArPose *arg2 = (ArPose *) 0 ;
  ArLine *arg3 = (ArLine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArLine **)&jarg1; 
  arg2 = *(ArPose **)&jarg2; 
  arg3 = *(ArLine **)&jarg3; 
  ((ArLine const *)arg1)->makeLinePerp((ArPose const *)arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLine_1getPerpDist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  ArLine *arg1 = (ArLine *) 0 ;
  ArPose *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLine **)&jarg1; 
  arg2 = *(ArPose **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose const & reference is null");
    return 0;
  } 
  result = (double)((ArLine const *)arg1)->getPerpDist((ArPose const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLine_1getPerpSquaredDist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  ArLine *arg1 = (ArLine *) 0 ;
  ArPose *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLine **)&jarg1; 
  arg2 = *(ArPose **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose const & reference is null");
    return 0;
  } 
  result = (double)((ArLine const *)arg1)->getPerpSquaredDist((ArPose const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLine_1getPerpPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArLine *arg1 = (ArLine *) 0 ;
  ArPose *arg2 = 0 ;
  ArPose *arg3 = (ArPose *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArLine **)&jarg1; 
  arg2 = *(ArPose **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose const & reference is null");
    return 0;
  } 
  arg3 = *(ArPose **)&jarg3; 
  result = (bool)((ArLine const *)arg1)->getPerpPoint((ArPose const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLineSegment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArPose arg1 ;
  ArPose arg2 ;
  ArPose *argp1 ;
  ArPose *argp2 ;
  ArLineSegment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(ArPose **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArLineSegment *)new ArLineSegment(arg1,arg2);
  *(ArLineSegment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArLineSegment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArLineSegment **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegment_1newEndPoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineSegment **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->newEndPoints(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegment_1newEndPoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArPose *arg2 = 0 ;
  ArPose *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArLineSegment **)&jarg1; 
  arg2 = *(ArPose **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose const & reference is null");
    return ;
  } 
  arg3 = *(ArPose **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose const & reference is null");
    return ;
  } 
  (arg1)->newEndPoints((ArPose const &)*arg2,(ArPose const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegment_1getEndPoint1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineSegment **)&jarg1; 
  result = ((ArLineSegment const *)arg1)->getEndPoint1();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegment_1getEndPoint2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineSegment **)&jarg1; 
  result = ((ArLineSegment const *)arg1)->getEndPoint2();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegment_1intersects_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArLine *arg2 = (ArLine *) 0 ;
  ArPose *arg3 = (ArPose *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArLineSegment **)&jarg1; 
  arg2 = *(ArLine **)&jarg2; 
  arg3 = *(ArPose **)&jarg3; 
  result = (bool)((ArLineSegment const *)arg1)->intersects((ArLine const *)arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegment_1intersects_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArLineSegment *arg2 = (ArLineSegment *) 0 ;
  ArPose *arg3 = (ArPose *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArLineSegment **)&jarg1; 
  arg2 = *(ArLineSegment **)&jarg2; 
  arg3 = *(ArPose **)&jarg3; 
  result = (bool)((ArLineSegment const *)arg1)->intersects(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegment_1getPerpPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArPose *arg2 = (ArPose *) 0 ;
  ArPose *arg3 = (ArPose *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArLineSegment **)&jarg1; 
  arg2 = *(ArPose **)&jarg2; 
  arg3 = *(ArPose **)&jarg3; 
  result = (bool)((ArLineSegment const *)arg1)->getPerpPoint((ArPose const *)arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegment_1getPerpDist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArPose *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLineSegment **)&jarg1; 
  arg2 = *(ArPose **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose const & reference is null");
    return 0;
  } 
  result = (double)((ArLineSegment const *)arg1)->getPerpDist((ArPose const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegment_1getPerpSquaredDist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArPose *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLineSegment **)&jarg1; 
  arg2 = *(ArPose **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose const & reference is null");
    return 0;
  } 
  result = (double)((ArLineSegment const *)arg1)->getPerpSquaredDist((ArPose const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegment_1getDistToLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArPose *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLineSegment **)&jarg1; 
  arg2 = *(ArPose **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose const & reference is null");
    return 0;
  } 
  result = (double)((ArLineSegment const *)arg1)->getDistToLine((ArPose const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegment_1getLengthOf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineSegment **)&jarg1; 
  result = (double)((ArLineSegment const *)arg1)->getLengthOf();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegment_1getMidPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineSegment **)&jarg1; 
  result = ((ArLineSegment const *)arg1)->getMidPoint();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegment_1getX1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineSegment **)&jarg1; 
  result = (double)((ArLineSegment const *)arg1)->getX1();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegment_1getY1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineSegment **)&jarg1; 
  result = (double)((ArLineSegment const *)arg1)->getY1();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegment_1getX2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineSegment **)&jarg1; 
  result = (double)((ArLineSegment const *)arg1)->getX2();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegment_1getY2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineSegment **)&jarg1; 
  result = (double)((ArLineSegment const *)arg1)->getY2();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegment_1getA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineSegment **)&jarg1; 
  result = (double)((ArLineSegment const *)arg1)->getA();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegment_1getB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineSegment **)&jarg1; 
  result = (double)((ArLineSegment const *)arg1)->getB();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegment_1getC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineSegment **)&jarg1; 
  result = (double)((ArLineSegment const *)arg1)->getC();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegment_1linePointIsInSegment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArPose *arg2 = (ArPose *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLineSegment **)&jarg1; 
  arg2 = *(ArPose **)&jarg2; 
  result = (bool)((ArLineSegment const *)arg1)->linePointIsInSegment(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineSegment_1getLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLineSegment *arg1 = (ArLineSegment *) 0 ;
  ArLine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineSegment **)&jarg1; 
  result = (ArLine *)((ArLineSegment const *)arg1)->getLine();
  *(ArLine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRunningAverage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  ArRunningAverage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (ArRunningAverage *)new ArRunningAverage(arg1);
  *(ArRunningAverage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRunningAverage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRunningAverage *arg1 = (ArRunningAverage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRunningAverage **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRunningAverage_1getAverage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRunningAverage *arg1 = (ArRunningAverage *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRunningAverage **)&jarg1; 
  result = (double)((ArRunningAverage const *)arg1)->getAverage();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRunningAverage_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRunningAverage *arg1 = (ArRunningAverage *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRunningAverage **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->add(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRunningAverage_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRunningAverage *arg1 = (ArRunningAverage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRunningAverage **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRunningAverage_1getNumToAverage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRunningAverage *arg1 = (ArRunningAverage *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRunningAverage **)&jarg1; 
  result = ((ArRunningAverage const *)arg1)->getNumToAverage();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRunningAverage_1setNumToAverage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRunningAverage *arg1 = (ArRunningAverage *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRunningAverage **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setNumToAverage(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRunningAverage_1setUseRootMeanSquare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRunningAverage *arg1 = (ArRunningAverage *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRunningAverage **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseRootMeanSquare(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRunningAverage_1getUseRootMeanSquare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRunningAverage *arg1 = (ArRunningAverage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRunningAverage **)&jarg1; 
  result = (bool)(arg1)->getUseRootMeanSquare();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRunningAverage_1getCurrentNumAveraged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRunningAverage *arg1 = (ArRunningAverage *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRunningAverage **)&jarg1; 
  result = (arg1)->getCurrentNumAveraged();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRootMeanSquareCalculator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRootMeanSquareCalculator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRootMeanSquareCalculator *)new ArRootMeanSquareCalculator();
  *(ArRootMeanSquareCalculator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRootMeanSquareCalculator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRootMeanSquareCalculator *arg1 = (ArRootMeanSquareCalculator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRootMeanSquareCalculator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRootMeanSquareCalculator_1getRootMeanSquare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRootMeanSquareCalculator *arg1 = (ArRootMeanSquareCalculator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRootMeanSquareCalculator **)&jarg1; 
  result = (double)((ArRootMeanSquareCalculator const *)arg1)->getRootMeanSquare();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRootMeanSquareCalculator_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArRootMeanSquareCalculator *arg1 = (ArRootMeanSquareCalculator *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRootMeanSquareCalculator **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->add(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRootMeanSquareCalculator_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRootMeanSquareCalculator *arg1 = (ArRootMeanSquareCalculator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRootMeanSquareCalculator **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRootMeanSquareCalculator_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArRootMeanSquareCalculator *arg1 = (ArRootMeanSquareCalculator *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRootMeanSquareCalculator **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRootMeanSquareCalculator_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRootMeanSquareCalculator *arg1 = (ArRootMeanSquareCalculator *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRootMeanSquareCalculator **)&jarg1; 
  result = (char *)(arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRootMeanSquareCalculator_1getCurrentNumAveraged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRootMeanSquareCalculator *arg1 = (ArRootMeanSquareCalculator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRootMeanSquareCalculator **)&jarg1; 
  result = (arg1)->getCurrentNumAveraged();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArStrCaseCmpOp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArStrCaseCmpOp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArStrCaseCmpOp *)new ArStrCaseCmpOp();
  *(ArStrCaseCmpOp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArStrCaseCmpOp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArStrCaseCmpOp *arg1 = (ArStrCaseCmpOp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArStrCaseCmpOp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArPoseCmpOp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArPoseCmpOp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArPoseCmpOp *)new ArPoseCmpOp();
  *(ArPoseCmpOp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArPoseCmpOp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArPoseCmpOp *arg1 = (ArPoseCmpOp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArPoseCmpOp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLineSegmentCmpOp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArLineSegmentCmpOp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArLineSegmentCmpOp *)new ArLineSegmentCmpOp();
  *(ArLineSegmentCmpOp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArLineSegmentCmpOp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArLineSegmentCmpOp *arg1 = (ArLineSegmentCmpOp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArLineSegmentCmpOp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPriority_1BASIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArPriority::Priority result;
  
  (void)jenv;
  (void)jcls;
  result = (ArPriority::Priority)ArPriority::BASIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPriority_1FIRST_1PRIORITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArPriority::Priority result;
  
  (void)jenv;
  (void)jcls;
  result = (ArPriority::Priority)ArPriority::FIRST_PRIORITY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPriority_1INTERMEDIATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArPriority::Priority result;
  
  (void)jenv;
  (void)jcls;
  result = (ArPriority::Priority)ArPriority::INTERMEDIATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPriority_1TRIVIAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArPriority::Priority result;
  
  (void)jenv;
  (void)jcls;
  result = (ArPriority::Priority)ArPriority::TRIVIAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPriority_1ADVANCED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArPriority::Priority result;
  
  (void)jenv;
  (void)jcls;
  result = (ArPriority::Priority)ArPriority::ADVANCED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPriority_1LAST_1PRIORITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArPriority::Priority result;
  
  (void)jenv;
  (void)jcls;
  result = (ArPriority::Priority)ArPriority::LAST_PRIORITY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPriority_1PRIORITY_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArPriority::PRIORITY_COUNT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPriority_1getPriorityName(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  ArPriority::Priority arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArPriority::Priority)jarg1; 
  result = (char *)ArPriority::getPriorityName(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPriority_1getPriorityFromName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ArPriority::Priority result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(bool **)&jarg2; 
  result = (ArPriority::Priority)ArPriority::getPriorityFromName((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPriority_1getPriorityFromName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArPriority::Priority result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArPriority::Priority)ArPriority::getPriorityFromName((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArPriority(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArPriority *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArPriority *)new ArPriority();
  *(ArPriority **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArPriority(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArPriority *arg1 = (ArPriority *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArPriority **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArStringInfoHolder(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArTypes::UByte2 arg2 ;
  ArFunctor2< char *,ArTypes::UByte2 > *arg3 = (ArFunctor2< char *,ArTypes::UByte2 > *) 0 ;
  ArStringInfoHolder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ArTypes::UByte2)jarg2; 
  arg3 = *(ArFunctor2< char *,ArTypes::UByte2 > **)&jarg3; 
  result = (ArStringInfoHolder *)new ArStringInfoHolder((char const *)arg1,arg2,arg3);
  *(ArStringInfoHolder **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArStringInfoHolder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArStringInfoHolder *arg1 = (ArStringInfoHolder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArStringInfoHolder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoHolder_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArStringInfoHolder *arg1 = (ArStringInfoHolder *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArStringInfoHolder **)&jarg1; 
  result = (char *)(arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoHolder_1getMaxLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArStringInfoHolder *arg1 = (ArStringInfoHolder *) 0 ;
  ArTypes::UByte2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArStringInfoHolder **)&jarg1; 
  result = (ArTypes::UByte2)(arg1)->getMaxLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoHolder_1getFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArStringInfoHolder *arg1 = (ArStringInfoHolder *) 0 ;
  ArFunctor2< char *,ArTypes::UByte2 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArStringInfoHolder **)&jarg1; 
  result = (ArFunctor2< char *,ArTypes::UByte2 > *)(arg1)->getFunctor();
  *(ArFunctor2< char *,ArTypes::UByte2 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoHolderFunctions_1intWrapper(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  char *arg1 = (char *) 0 ;
  ArTypes::UByte2 arg2 ;
  ArRetFunctor< int > *arg3 = (ArRetFunctor< int > *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (ArTypes::UByte2)jarg2; 
  arg3 = *(ArRetFunctor< int > **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  ArStringInfoHolderFunctions::intWrapper(arg1,arg2,arg3,(char const *)arg4);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoHolderFunctions_1doubleWrapper(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  char *arg1 = (char *) 0 ;
  ArTypes::UByte2 arg2 ;
  ArRetFunctor< double > *arg3 = (ArRetFunctor< double > *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (ArTypes::UByte2)jarg2; 
  arg3 = *(ArRetFunctor< double > **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  ArStringInfoHolderFunctions::doubleWrapper(arg1,arg2,arg3,(char const *)arg4);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoHolderFunctions_1boolWrapper(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  char *arg1 = (char *) 0 ;
  ArTypes::UByte2 arg2 ;
  ArRetFunctor< bool > *arg3 = (ArRetFunctor< bool > *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (ArTypes::UByte2)jarg2; 
  arg3 = *(ArRetFunctor< bool > **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  ArStringInfoHolderFunctions::boolWrapper(arg1,arg2,arg3,(char const *)arg4);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoHolderFunctions_1stringWrapper(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3, jstring jarg4) {
  char *arg1 = (char *) 0 ;
  ArTypes::UByte2 arg2 ;
  ArRetFunctor< char const * > *arg3 = (ArRetFunctor< char const * > *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (ArTypes::UByte2)jarg2; 
  arg3 = *(ArRetFunctor< char const * > **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  ArStringInfoHolderFunctions::stringWrapper(arg1,arg2,arg3,(char const *)arg4);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoHolderFunctions_1unsignedLongWrapper(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3, jstring jarg4) {
  char *arg1 = (char *) 0 ;
  ArTypes::UByte2 arg2 ;
  ArRetFunctor< unsigned long > *arg3 = (ArRetFunctor< unsigned long > *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (ArTypes::UByte2)jarg2; 
  arg3 = *(ArRetFunctor< unsigned long > **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  ArStringInfoHolderFunctions::unsignedLongWrapper(arg1,arg2,arg3,(char const *)arg4);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoHolderFunctions_1longWrapper(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3, jstring jarg4) {
  char *arg1 = (char *) 0 ;
  ArTypes::UByte2 arg2 ;
  ArRetFunctor< long > *arg3 = (ArRetFunctor< long > *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (ArTypes::UByte2)jarg2; 
  arg3 = *(ArRetFunctor< long > **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  ArStringInfoHolderFunctions::longWrapper(arg1,arg2,arg3,(char const *)arg4);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArStringInfoHolderFunctions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArStringInfoHolderFunctions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArStringInfoHolderFunctions *)new ArStringInfoHolderFunctions();
  *(ArStringInfoHolderFunctions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArStringInfoHolderFunctions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArStringInfoHolderFunctions *arg1 = (ArStringInfoHolderFunctions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArStringInfoHolderFunctions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArCallbackList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArLog::LogLevel arg2 ;
  bool arg3 ;
  ArCallbackList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ArLog::LogLevel)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (ArCallbackList *)new ArCallbackList((char const *)arg1,arg2,arg3);
  *(ArCallbackList **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArCallbackList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArLog::LogLevel arg2 ;
  ArCallbackList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ArLog::LogLevel)jarg2; 
  result = (ArCallbackList *)new ArCallbackList((char const *)arg1,arg2);
  *(ArCallbackList **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArCallbackList_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArCallbackList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArCallbackList *)new ArCallbackList((char const *)arg1);
  *(ArCallbackList **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArCallbackList_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArCallbackList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArCallbackList *)new ArCallbackList();
  *(ArCallbackList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArCallbackList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArCallbackList *arg1 = (ArCallbackList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArCallbackList **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCallbackList_1invoke(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArCallbackList *arg1 = (ArCallbackList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCallbackList **)&jarg1; 
  (arg1)->invoke();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseUtil_1findCornersFromRobotBounds(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  bool arg6 ;
  std::list< ArPose > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = ArPoseUtil::findCornersFromRobotBounds(arg1,arg2,arg3,arg4,arg5,arg6);
  *(std::list< ArPose > **)&jresult = new std::list< ArPose >((const std::list< ArPose > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPoseUtil_1breakUpDistanceEvenly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  ArPose arg1 ;
  ArPose arg2 ;
  int arg3 ;
  ArPose *argp1 ;
  ArPose *argp2 ;
  std::list< ArPose > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(ArPose **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  result = ArPoseUtil::breakUpDistanceEvenly(arg1,arg2,arg3);
  *(std::list< ArPose > **)&jresult = new std::list< ArPose >((const std::list< ArPose > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArPoseUtil(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArPoseUtil *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArPoseUtil *)new ArPoseUtil();
  *(ArPoseUtil **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArPoseUtil(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArPoseUtil *arg1 = (ArPoseUtil *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArPoseUtil **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArTimeChecker_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ArTimeChecker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (ArTimeChecker *)new ArTimeChecker((char const *)arg1,arg2);
  *(ArTimeChecker **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArTimeChecker_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArTimeChecker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArTimeChecker *)new ArTimeChecker((char const *)arg1);
  *(ArTimeChecker **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArTimeChecker_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArTimeChecker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArTimeChecker *)new ArTimeChecker();
  *(ArTimeChecker **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArTimeChecker(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArTimeChecker *arg1 = (ArTimeChecker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArTimeChecker **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTimeChecker_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArTimeChecker *arg1 = (ArTimeChecker *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTimeChecker **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTimeChecker_1setDefaultMSecs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArTimeChecker *arg1 = (ArTimeChecker *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTimeChecker **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDefaultMSecs(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTimeChecker_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTimeChecker *arg1 = (ArTimeChecker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTimeChecker **)&jarg1; 
  (arg1)->start();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTimeChecker_1check(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArTimeChecker *arg1 = (ArTimeChecker *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTimeChecker **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->check((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTimeChecker_1finish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTimeChecker *arg1 = (ArTimeChecker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTimeChecker **)&jarg1; 
  (arg1)->finish();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTimeChecker_1getLastCheckTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArTimeChecker *arg1 = (ArTimeChecker *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTimeChecker **)&jarg1; 
  result = (arg1)->getLastCheckTime();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_md5_1state_1t_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  md5_state_t *arg1 = (md5_state_t *) 0 ;
  md5_word_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(md5_state_t **)&jarg1; 
  arg2 = *(md5_word_t **)&jarg2; 
  {
    size_t ii;
    md5_word_t *b = (md5_word_t *) arg1->count;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((md5_word_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_md5_1state_1t_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  md5_state_t *arg1 = (md5_state_t *) 0 ;
  md5_word_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(md5_state_t **)&jarg1; 
  result = (md5_word_t *)(md5_word_t *) ((arg1)->count);
  *(md5_word_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_md5_1state_1t_1abcd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  md5_state_t *arg1 = (md5_state_t *) 0 ;
  md5_word_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(md5_state_t **)&jarg1; 
  arg2 = *(md5_word_t **)&jarg2; 
  {
    size_t ii;
    md5_word_t *b = (md5_word_t *) arg1->abcd;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((md5_word_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_md5_1state_1t_1abcd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  md5_state_t *arg1 = (md5_state_t *) 0 ;
  md5_word_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(md5_state_t **)&jarg1; 
  result = (md5_word_t *)(md5_word_t *) ((arg1)->abcd);
  *(md5_word_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_md5_1state_1t_1buf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  md5_state_t *arg1 = (md5_state_t *) 0 ;
  md5_byte_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(md5_state_t **)&jarg1; 
  arg2 = *(md5_byte_t **)&jarg2; 
  {
    size_t ii;
    md5_byte_t *b = (md5_byte_t *) arg1->buf;
    for (ii = 0; ii < (size_t)64; ii++) b[ii] = *((md5_byte_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_md5_1state_1t_1buf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  md5_state_t *arg1 = (md5_state_t *) 0 ;
  md5_byte_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(md5_state_t **)&jarg1; 
  result = (md5_byte_t *)(md5_byte_t *) ((arg1)->buf);
  *(md5_byte_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1md5_1state_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  md5_state_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (md5_state_t *)new md5_state_t();
  *(md5_state_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1md5_1state_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  md5_state_t *arg1 = (md5_state_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(md5_state_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_md5_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  md5_state_t *arg1 = (md5_state_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(md5_state_t **)&jarg1; 
  md5_init(arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_md5_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  md5_state_t *arg1 = (md5_state_t *) 0 ;
  md5_byte_t *arg2 = (md5_byte_t *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(md5_state_t **)&jarg1; 
  arg2 = *(md5_byte_t **)&jarg2; 
  arg3 = (int)jarg3; 
  md5_append(arg1,(unsigned char const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_md5_1finish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  md5_state_t *arg1 = (md5_state_t *) 0 ;
  md5_byte_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(md5_state_t **)&jarg1; 
  arg2 = *(md5_byte_t **)&jarg2; 
  md5_finish(arg1,arg2);
  
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArBasePacket_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  ArTypes::UByte2 arg1 ;
  ArTypes::UByte2 arg2 ;
  char *arg3 = (char *) 0 ;
  ArTypes::UByte2 arg4 ;
  ArBasePacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArTypes::UByte2)jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (ArTypes::UByte2)jarg4; 
  result = (ArBasePacket *)new ArBasePacket(arg1,arg2,arg3,arg4);
  *(ArBasePacket **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArBasePacket_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  ArTypes::UByte2 arg1 ;
  ArTypes::UByte2 arg2 ;
  char *arg3 = (char *) 0 ;
  ArBasePacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArTypes::UByte2)jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArBasePacket *)new ArBasePacket(arg1,arg2,arg3);
  *(ArBasePacket **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArBasePacket_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  ArTypes::UByte2 arg1 ;
  ArTypes::UByte2 arg2 ;
  ArBasePacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArTypes::UByte2)jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  result = (ArBasePacket *)new ArBasePacket(arg1,arg2);
  *(ArBasePacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArBasePacket_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  ArTypes::UByte2 arg1 ;
  ArBasePacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArTypes::UByte2)jarg1; 
  result = (ArBasePacket *)new ArBasePacket(arg1);
  *(ArBasePacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArBasePacket_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArBasePacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArBasePacket *)new ArBasePacket();
  *(ArBasePacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArBasePacket_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArBasePacket *arg1 = 0 ;
  ArBasePacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArBasePacket const & reference is null");
    return 0;
  } 
  result = (ArBasePacket *)new ArBasePacket((ArBasePacket const &)*arg1);
  *(ArBasePacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArBasePacket(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArBasePacket **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  (arg1)->empty();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1finalizePacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  (arg1)->finalizePacket();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1log(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  (arg1)->log();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1printHex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  (arg1)->printHex();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  result = (bool)(arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1resetValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  (arg1)->resetValid();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1byteToBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::Byte arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  arg2 = (ArTypes::Byte)jarg2; 
  (arg1)->byteToBuf(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1byte2ToBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::Byte2 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  arg2 = (ArTypes::Byte2)jarg2; 
  (arg1)->byte2ToBuf(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1byte4ToBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::Byte4 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  arg2 = (ArTypes::Byte4)jarg2; 
  (arg1)->byte4ToBuf(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1byte8ToBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::Byte8 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  arg2 = (ArTypes::Byte8)jarg2; 
  (arg1)->byte8ToBuf(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1uByteToBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  arg2 = (ArTypes::UByte)jarg2; 
  (arg1)->uByteToBuf(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1uByte2ToBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  (arg1)->uByte2ToBuf(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1uByte4ToBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte4 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  arg2 = (ArTypes::UByte4)jarg2; 
  (arg1)->uByte4ToBuf(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1uByte8ToBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte8 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (ArTypes::UByte8)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  (arg1)->uByte8ToBuf(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1strToBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->strToBuf((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1strNToBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  (arg1)->strNToBuf((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1strToBufPadded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  (arg1)->strToBufPadded((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1dataToBuf_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  (arg1)->dataToBuf((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1dataToBuf_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->dataToBuf((unsigned char const *)arg2,arg3);
}


SWIGEXPORT jchar JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1bufToByte(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::Byte result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  result = (ArTypes::Byte)(arg1)->bufToByte();
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1bufToByte2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::Byte2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  result = (ArTypes::Byte2)(arg1)->bufToByte2();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1bufToByte4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::Byte4 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  result = (ArTypes::Byte4)(arg1)->bufToByte4();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1bufToByte8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::Byte8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  result = (ArTypes::Byte8)(arg1)->bufToByte8();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1bufToUByte(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  result = (ArTypes::UByte)(arg1)->bufToUByte();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1bufToUByte2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  result = (ArTypes::UByte2)(arg1)->bufToUByte2();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1bufToUByte4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte4 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  result = (ArTypes::UByte4)(arg1)->bufToUByte4();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1bufToUByte8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  result = (ArTypes::UByte8)(arg1)->bufToUByte8();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1bufToStr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  (arg1)->bufToStr(arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1bufToData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  (arg1)->bufToData(arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1bufToData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->bufToData(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1resetRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  (arg1)->resetRead();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  result = (ArTypes::UByte2)((ArBasePacket const *)arg1)->getLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1getDataLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  result = (ArTypes::UByte2)((ArBasePacket const *)arg1)->getDataLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1getReadLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  result = (ArTypes::UByte2)((ArBasePacket const *)arg1)->getReadLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1getDataReadLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  result = (ArTypes::UByte2)((ArBasePacket const *)arg1)->getDataReadLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1getHeaderLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  result = (ArTypes::UByte2)((ArBasePacket const *)arg1)->getHeaderLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1getFooterLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  result = (ArTypes::UByte2)((ArBasePacket const *)arg1)->getFooterLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1getMaxLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  result = (ArTypes::UByte2)((ArBasePacket const *)arg1)->getMaxLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1getBuf_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  result = (char *)((ArBasePacket const *)arg1)->getBuf();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1setBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (ArTypes::UByte2)jarg3; 
  (arg1)->setBuf(arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1setMaxLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  (arg1)->setMaxLength(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1setLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  result = (bool)(arg1)->setLength(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1setReadLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  (arg1)->setReadLength(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1setHeaderLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArTypes::UByte2 arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBasePacket **)&jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  result = (bool)(arg1)->setHeaderLength(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBasePacket_1duplicatePacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArBasePacket *arg2 = (ArBasePacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArBasePacket **)&jarg1; 
  arg2 = *(ArBasePacket **)&jarg2; 
  (arg1)->duplicatePacket(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArPTZ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArPTZ **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (bool)(arg1)->init();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (char *)(arg1)->getTypeName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1pan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->pan(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1panRel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->panRel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1tilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->tilt(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1tiltRel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->tiltRel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1panTilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->panTilt(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1panTiltRel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->panTiltRel(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1canZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (bool)((ArPTZ const *)arg1)->canZoom();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1zoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->zoom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1zoomRel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->zoomRel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getPan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (double)((ArPTZ const *)arg1)->getPan();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getTilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (double)((ArPTZ const *)arg1)->getTilt();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (int)((ArPTZ const *)arg1)->getZoom();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1canGetRealPanTilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (bool)((ArPTZ const *)arg1)->canGetRealPanTilt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1canGetRealZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (bool)((ArPTZ const *)arg1)->canGetRealZoom();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getMaxPosPan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (double)((ArPTZ const *)arg1)->getMaxPosPan();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getMaxPan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (double)((ArPTZ const *)arg1)->getMaxPan();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getMaxNegPan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (double)((ArPTZ const *)arg1)->getMaxNegPan();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getMinPan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (double)((ArPTZ const *)arg1)->getMinPan();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getMaxPosTilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (double)((ArPTZ const *)arg1)->getMaxPosTilt();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getMaxTilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (double)((ArPTZ const *)arg1)->getMaxTilt();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getMaxNegTilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (double)((ArPTZ const *)arg1)->getMaxNegTilt();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getMinTilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (double)((ArPTZ const *)arg1)->getMinTilt();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1haltPanTilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (bool)(arg1)->haltPanTilt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1haltZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (bool)(arg1)->haltZoom();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1canPanTiltSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (bool)(arg1)->canPanTiltSlew();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1canSetSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (bool)(arg1)->canSetSpeed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1panSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->panSlew(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1setPanSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setPanSpeed(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1tiltSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->tiltSlew(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1setTiltSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setTiltSpeed(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getMaxPanSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (double)(arg1)->getMaxPanSpeed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getMaxTiltSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (double)(arg1)->getMaxTiltSpeed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getMaxZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (int)((ArPTZ const *)arg1)->getMaxZoom();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getMinZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (int)((ArPTZ const *)arg1)->getMinZoom();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1canGetFOV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (bool)(arg1)->canGetFOV();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getFOVAtMaxZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (double)(arg1)->getFOVAtMaxZoom();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getFOVAtMinZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (double)(arg1)->getFOVAtMinZoom();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1setGain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)((ArPTZ const *)arg1)->setGain(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getGain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)((ArPTZ const *)arg1)->getGain(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1canSetGain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (bool)((ArPTZ const *)arg1)->canSetGain();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1setFocus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)((ArPTZ const *)arg1)->setFocus(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getFocus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)((ArPTZ const *)arg1)->getFocus(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1canSetFocus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (bool)((ArPTZ const *)arg1)->canSetFocus();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1setAutoFocus_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setAutoFocus(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1setAutoFocus_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (bool)(arg1)->setAutoFocus();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1setInverted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInverted(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getInverted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (bool)(arg1)->getInverted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1setDeviceConnection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  ArDeviceConnection *arg2 = (ArDeviceConnection *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = *(ArDeviceConnection **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setDeviceConnection(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1setDeviceConnection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  ArDeviceConnection *arg2 = (ArDeviceConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = *(ArDeviceConnection **)&jarg2; 
  result = (bool)(arg1)->setDeviceConnection(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getDeviceConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  ArDeviceConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (ArDeviceConnection *)(arg1)->getDeviceConnection();
  *(ArDeviceConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1setAuxPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setAuxPort(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getAuxPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (int)(arg1)->getAuxPort();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1readPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  ArBasePacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (ArBasePacket *)(arg1)->readPacket();
  *(ArBasePacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1sendPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  ArBasePacket *arg2 = (ArBasePacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = *(ArBasePacket **)&jarg2; 
  result = (bool)(arg1)->sendPacket(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1packetHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  ArBasePacket *arg2 = (ArBasePacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = *(ArBasePacket **)&jarg2; 
  result = (bool)(arg1)->packetHandler(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1robotPacketHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArPTZ **)&jarg1; 
  arg2 = *(ArRobotPacket **)&jarg2; 
  result = (bool)(arg1)->robotPacketHandler(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1connectHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  (arg1)->connectHandler();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1sensorInterpHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  (arg1)->sensorInterpHandler();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPTZ_1getRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArPTZ *arg1 = (ArPTZ *) 0 ;
  ArRobot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArPTZ **)&jarg1; 
  result = (ArRobot *)(arg1)->getRobot();
  *(ArRobot **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRangeDevice_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jint jarg5, jint jarg6, jdouble jarg7, jboolean jarg8) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  bool arg8 ;
  ArRangeDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (unsigned int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (ArRangeDevice *)new ArRangeDevice(arg1,arg2,(char const *)arg3,arg4,arg5,arg6,arg7,arg8);
  *(ArRangeDevice **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRangeDevice_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jint jarg5, jint jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  int arg5 ;
  int arg6 ;
  double arg7 ;
  ArRangeDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (unsigned int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (double)jarg7; 
  result = (ArRangeDevice *)new ArRangeDevice(arg1,arg2,(char const *)arg3,arg4,arg5,arg6,arg7);
  *(ArRangeDevice **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRangeDevice_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jint jarg5, jint jarg6) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  int arg5 ;
  int arg6 ;
  ArRangeDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (unsigned int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (ArRangeDevice *)new ArRangeDevice(arg1,arg2,(char const *)arg3,arg4,arg5,arg6);
  *(ArRangeDevice **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRangeDevice_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4, jint jarg5) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  int arg5 ;
  ArRangeDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (unsigned int)jarg4; 
  arg5 = (int)jarg5; 
  result = (ArRangeDevice *)new ArRangeDevice(arg1,arg2,(char const *)arg3,arg4,arg5);
  *(ArRangeDevice **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRangeDevice_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  ArRangeDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (unsigned int)jarg4; 
  result = (ArRangeDevice *)new ArRangeDevice(arg1,arg2,(char const *)arg3,arg4);
  *(ArRangeDevice **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRangeDevice(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRangeDevice **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (char *)((ArRangeDevice const *)arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1setRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1getRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArRobot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (ArRobot *)(arg1)->getRobot();
  *(ArRobot **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1setCurrentBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setCurrentBufferSize(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1getCurrentBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = ((ArRangeDevice const *)arg1)->getCurrentBufferSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1setCumulativeBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setCumulativeBufferSize(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1getCumulativeBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = ((ArRangeDevice const *)arg1)->getCumulativeBufferSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1addReading_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  double arg3 ;
  bool *arg4 = (bool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(bool **)&jarg4; 
  (arg1)->addReading(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1addReading_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->addReading(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1isLocationDependent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (bool)(arg1)->isLocationDependent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1currentReadingPolar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4) {
  jdouble jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (double)((ArRangeDevice const *)arg1)->currentReadingPolar(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1currentReadingPolar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)((ArRangeDevice const *)arg1)->currentReadingPolar(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1cumulativeReadingPolar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4) {
  jdouble jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (double)((ArRangeDevice const *)arg1)->cumulativeReadingPolar(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1cumulativeReadingPolar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)((ArRangeDevice const *)arg1)->cumulativeReadingPolar(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1currentReadingBox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_) {
  jdouble jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose *arg6 = (ArPose *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(ArPose **)&jarg6; 
  result = (double)((ArRangeDevice const *)arg1)->currentReadingBox(arg2,arg3,arg4,arg5,arg6);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1currentReadingBox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jdouble jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (double)((ArRangeDevice const *)arg1)->currentReadingBox(arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1cumulativeReadingBox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_) {
  jdouble jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose *arg6 = (ArPose *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(ArPose **)&jarg6; 
  result = (double)((ArRangeDevice const *)arg1)->cumulativeReadingBox(arg2,arg3,arg4,arg5,arg6);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1cumulativeReadingBox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jdouble jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (double)((ArRangeDevice const *)arg1)->cumulativeReadingBox(arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1getCurrentRangeBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArRangeBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (ArRangeBuffer *)(arg1)->getCurrentRangeBuffer();
  *(ArRangeBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1getCumulativeRangeBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArRangeBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (ArRangeBuffer *)(arg1)->getCumulativeRangeBuffer();
  *(ArRangeBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1getCurrentBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  std::list< ArPoseWithTime * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (std::list< ArPoseWithTime * > *)(arg1)->getCurrentBuffer();
  *(std::list< ArPoseWithTime * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1getCurrentBufferAsVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  std::vector< ArPoseWithTime > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (std::vector< ArPoseWithTime > *)(arg1)->getCurrentBufferAsVector();
  *(std::vector< ArPoseWithTime > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1getCumulativeBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  std::list< ArPoseWithTime * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (std::list< ArPoseWithTime * > *)(arg1)->getCumulativeBuffer();
  *(std::list< ArPoseWithTime * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1getCumulativeBufferAsVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  std::vector< ArPoseWithTime > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (std::vector< ArPoseWithTime > *)(arg1)->getCumulativeBufferAsVector();
  *(std::vector< ArPoseWithTime > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1getRawReadings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  std::list< ArSensorReading * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (std::list< ArSensorReading * > *)((ArRangeDevice const *)arg1)->getRawReadings();
  *(std::list< ArSensorReading * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1getRawReadingsAsVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  std::vector< ArSensorReading > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (std::vector< ArSensorReading > *)(arg1)->getRawReadingsAsVector();
  *(std::vector< ArSensorReading > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1getAdjustedRawReadings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  std::list< ArSensorReading * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (std::list< ArSensorReading * > *)((ArRangeDevice const *)arg1)->getAdjustedRawReadings();
  *(std::list< ArSensorReading * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1getAdjustedRawReadingsAsVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  std::vector< ArSensorReading > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (std::vector< ArSensorReading > *)(arg1)->getAdjustedRawReadingsAsVector();
  *(std::vector< ArSensorReading > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1setMaxSecondsToKeepCurrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaxSecondsToKeepCurrent(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1getMaxSecondsToKeepCurrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (int)(arg1)->getMaxSecondsToKeepCurrent();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1setMinDistBetweenCurrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMinDistBetweenCurrent(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1getMinDistBetweenCurrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (double)(arg1)->getMinDistBetweenCurrent();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1setMaxSecondsToKeepCumulative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaxSecondsToKeepCumulative(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1getMaxSecondsToKeepCumulative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (int)(arg1)->getMaxSecondsToKeepCumulative();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1setMaxDistToKeepCumulative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxDistToKeepCumulative(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1getMaxDistToKeepCumulative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (double)(arg1)->getMaxDistToKeepCumulative();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1setMinDistBetweenCumulative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMinDistBetweenCumulative(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1getMinDistBetweenCumulative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (double)(arg1)->getMinDistBetweenCumulative();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1setMaxInsertDistCumulative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxInsertDistCumulative(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1getMaxInsertDistCumulative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (double)(arg1)->getMaxInsertDistCumulative();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1clearCurrentReadings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  (arg1)->clearCurrentReadings();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1clearCumulativeReadings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  (arg1)->clearCumulativeReadings();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1clearCumulativeOlderThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->clearCumulativeOlderThan(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1clearCumulativeOlderThanSeconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->clearCumulativeOlderThanSeconds(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1getMaxRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (unsigned int)((ArRangeDevice const *)arg1)->getMaxRange();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1setMaxRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setMaxRange(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1applyTransform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArTransform arg2 ;
  bool arg3 ;
  ArTransform *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  argp2 = *(ArTransform **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTransform");
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->applyTransform(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1applyTransform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArTransform arg2 ;
  ArTransform *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  argp2 = *(ArTransform **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTransform");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->applyTransform(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1getCurrentDrawingData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArDrawingData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (ArDrawingData *)(arg1)->getCurrentDrawingData();
  *(ArDrawingData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1getCumulativeDrawingData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArDrawingData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (ArDrawingData *)(arg1)->getCumulativeDrawingData();
  *(ArDrawingData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1setCurrentDrawingData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArDrawingData *arg2 = (ArDrawingData *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = *(ArDrawingData **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setCurrentDrawingData(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1setCumulativeDrawingData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArDrawingData *arg2 = (ArDrawingData *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = *(ArDrawingData **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setCumulativeDrawingData(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1lockDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (int)(arg1)->lockDevice();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1tryLockDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (int)(arg1)->tryLockDevice();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1unlockDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (int)(arg1)->unlockDevice();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDevice_1filterCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  (arg1)->filterCallback();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRangeDeviceThreaded(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRangeDeviceThreaded *arg1 = (ArRangeDeviceThreaded *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRangeDeviceThreaded **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDeviceThreaded_1runThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ArRangeDeviceThreaded *arg1 = (ArRangeDeviceThreaded *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDeviceThreaded **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (void *)(arg1)->runThread(arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDeviceThreaded_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRangeDeviceThreaded *arg1 = (ArRangeDeviceThreaded *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDeviceThreaded **)&jarg1; 
  (arg1)->run();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDeviceThreaded_1runAsync(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRangeDeviceThreaded *arg1 = (ArRangeDeviceThreaded *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDeviceThreaded **)&jarg1; 
  (arg1)->runAsync();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDeviceThreaded_1stopRunning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRangeDeviceThreaded *arg1 = (ArRangeDeviceThreaded *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDeviceThreaded **)&jarg1; 
  (arg1)->stopRunning();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDeviceThreaded_1getRunning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRangeDeviceThreaded *arg1 = (ArRangeDeviceThreaded *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDeviceThreaded **)&jarg1; 
  result = (bool)(arg1)->getRunning();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDeviceThreaded_1getRunningWithLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRangeDeviceThreaded *arg1 = (ArRangeDeviceThreaded *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDeviceThreaded **)&jarg1; 
  result = (bool)(arg1)->getRunningWithLock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDeviceThreaded_1lockDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRangeDeviceThreaded *arg1 = (ArRangeDeviceThreaded *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDeviceThreaded **)&jarg1; 
  result = (int)(arg1)->lockDevice();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDeviceThreaded_1tryLockDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRangeDeviceThreaded *arg1 = (ArRangeDeviceThreaded *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDeviceThreaded **)&jarg1; 
  result = (int)(arg1)->tryLockDevice();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeDeviceThreaded_1unlockDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRangeDeviceThreaded *arg1 = (ArRangeDeviceThreaded *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDeviceThreaded **)&jarg1; 
  result = (int)(arg1)->unlockDevice();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArLaser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArLaser **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1blockingConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (bool)(arg1)->blockingConnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1asyncConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (bool)(arg1)->asyncConnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (bool)(arg1)->disconnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1isConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (bool)(arg1)->isConnected();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1isTryingToConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (bool)(arg1)->isTryingToConnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1setConnectionTimeoutSeconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setConnectionTimeoutSeconds(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getConnectionTimeoutSeconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (double)(arg1)->getConnectionTimeoutSeconds();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getLastReadingTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (arg1)->getLastReadingTime();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getReadingCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (int)(arg1)->getReadingCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1setDeviceConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArDeviceConnection *arg2 = (ArDeviceConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = *(ArDeviceConnection **)&jarg2; 
  (arg1)->setDeviceConnection(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getDeviceConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArDeviceConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (ArDeviceConnection *)(arg1)->getDeviceConnection();
  *(ArDeviceConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1setSensorPosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->setSensorPosition(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1setSensorPosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setSensorPosition(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1setSensorPosition_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArPose arg2 ;
  double arg3 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaser **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (double)jarg3; 
  (arg1)->setSensorPosition(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1setSensorPosition_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaser **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setSensorPosition(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1hasSensorPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (bool)(arg1)->hasSensorPosition();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getSensorPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (arg1)->getSensorPosition();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getSensorPositionX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (double)(arg1)->getSensorPositionX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getSensorPositionY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (double)(arg1)->getSensorPositionY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getSensorPositionZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (double)(arg1)->getSensorPositionZ();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getSensorPositionTh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (double)(arg1)->getSensorPositionTh();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getLaserNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (int)(arg1)->getLaserNumber();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1setInfoLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArLog::LogLevel arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  (arg1)->setInfoLogLevel(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getInfoLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArLog::LogLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (ArLog::LogLevel)(arg1)->getInfoLogLevel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1setCumulativeCleanDist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setCumulativeCleanDist(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getCumulativeCleanDist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (double)(arg1)->getCumulativeCleanDist();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1setCumulativeCleanInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCumulativeCleanInterval(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getCumulativeCleanInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (int)(arg1)->getCumulativeCleanInterval();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1setCumulativeCleanOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCumulativeCleanOffset(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getCumulativeCleanOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (int)(arg1)->getCumulativeCleanOffset();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1resetLastCumulativeCleanTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  (arg1)->resetLastCumulativeCleanTime();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1addIgnoreReadings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->addIgnoreReadings((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1addIgnoreReading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->addIgnoreReading(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1clearIgnoreReadings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  (arg1)->clearIgnoreReadings();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getIgnoreReadings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  std::set< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (std::set< int > *)((ArLaser const *)arg1)->getIgnoreReadings();
  *(std::set< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getFlipped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (bool)(arg1)->getFlipped();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1setFlipped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setFlipped(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getDefaultTcpPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (int)(arg1)->getDefaultTcpPort();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getDefaultPortType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (char *)(arg1)->getDefaultPortType();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1canSetDegrees(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (bool)(arg1)->canSetDegrees();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getStartDegreesMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (double)(arg1)->getStartDegreesMin();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getStartDegreesMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (double)(arg1)->getStartDegreesMax();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getStartDegrees(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (double)(arg1)->getStartDegrees();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1setStartDegrees(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setStartDegrees(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getEndDegreesMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (double)(arg1)->getEndDegreesMin();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getEndDegreesMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (double)(arg1)->getEndDegreesMax();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getEndDegrees(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (double)(arg1)->getEndDegrees();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1setEndDegrees(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setEndDegrees(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1canChooseDegrees(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (bool)(arg1)->canChooseDegrees();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getDegreesChoices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (arg1)->getDegreesChoices();
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getDegreesChoicesString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (char *)(arg1)->getDegreesChoicesString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1chooseDegrees(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->chooseDegrees((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getDegreesChoice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (char *)(arg1)->getDegreesChoice();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getDegreesChoiceDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (double)(arg1)->getDegreesChoiceDouble();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getDegreesChoicesMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  SwigValueWrapper< std::map< std::string,double > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (arg1)->getDegreesChoicesMap();
  *(std::map< std::string,double > **)&jresult = new std::map< std::string,double >((const std::map< std::string,double > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1canSetIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (bool)(arg1)->canSetIncrement();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getIncrementMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (double)(arg1)->getIncrementMin();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getIncrementMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (double)(arg1)->getIncrementMax();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (double)(arg1)->getIncrement();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1setIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setIncrement(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1canChooseIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (bool)(arg1)->canChooseIncrement();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getIncrementChoices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (arg1)->getIncrementChoices();
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getIncrementChoicesString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (char *)(arg1)->getIncrementChoicesString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1chooseIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->chooseIncrement((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getIncrementChoice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (char *)(arg1)->getIncrementChoice();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getIncrementChoiceDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (double)(arg1)->getIncrementChoiceDouble();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getIncrementChoicesMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  SwigValueWrapper< std::map< std::string,double > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (arg1)->getIncrementChoicesMap();
  *(std::map< std::string,double > **)&jresult = new std::map< std::string,double >((const std::map< std::string,double > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1canChooseUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (bool)(arg1)->canChooseUnits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getUnitsChoices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (arg1)->getUnitsChoices();
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getUnitsChoicesString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (char *)(arg1)->getUnitsChoicesString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1chooseUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->chooseUnits((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getUnitsChoice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (char *)(arg1)->getUnitsChoice();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1canChooseReflectorBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (bool)(arg1)->canChooseReflectorBits();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getReflectorBitsChoices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (arg1)->getReflectorBitsChoices();
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getReflectorBitsChoicesString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (char *)(arg1)->getReflectorBitsChoicesString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1chooseReflectorBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->chooseReflectorBits((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getReflectorBitsChoice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (char *)(arg1)->getReflectorBitsChoice();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1canSetPowerControlled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (bool)(arg1)->canSetPowerControlled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1setPowerControlled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setPowerControlled(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getPowerControlled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (bool)(arg1)->getPowerControlled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1canChooseStartingBaud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (bool)(arg1)->canChooseStartingBaud();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getStartingBaudChoices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (arg1)->getStartingBaudChoices();
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getStartingBaudChoicesString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (char *)(arg1)->getStartingBaudChoicesString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1chooseStartingBaud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->chooseStartingBaud((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getStartingBaudChoice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (char *)(arg1)->getStartingBaudChoice();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1canChooseAutoBaud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (bool)(arg1)->canChooseAutoBaud();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getAutoBaudChoices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (arg1)->getAutoBaudChoices();
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getAutoBaudChoicesString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (char *)(arg1)->getAutoBaudChoicesString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1chooseAutoBaud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->chooseAutoBaud((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getAutoBaudChoice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (char *)(arg1)->getAutoBaudChoice();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1addConnectCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addConnectCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1addConnectCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addConnectCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1remConnectCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remConnectCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1addFailedConnectCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addFailedConnectCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1addFailedConnectCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addFailedConnectCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1remFailedConnectCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remFailedConnectCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1addDisconnectNormallyCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addDisconnectNormallyCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1addDisconnectNormallyCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addDisconnectNormallyCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1remDisconnectNormallyCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remDisconnectNormallyCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1addDisconnectOnErrorCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addDisconnectOnErrorCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1addDisconnectOnErrorCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addDisconnectOnErrorCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1remDisconnectOnErrorCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remDisconnectOnErrorCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1addReadingCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addReadingCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1addReadingCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addReadingCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1remReadingCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remReadingCB(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1getAbsoluteMaxRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (unsigned int)(arg1)->getAbsoluteMaxRange();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1copyReadingCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  (arg1)->copyReadingCount((ArLaser const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1setMaxRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setMaxRange(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1setCumulativeBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setCumulativeBufferSize(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1laserCheckParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (bool)(arg1)->laserCheckParams();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1applyTransform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArTransform arg2 ;
  bool arg3 ;
  ArTransform *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaser **)&jarg1; 
  argp2 = *(ArTransform **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTransform");
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->applyTransform(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1applyTransform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArTransform arg2 ;
  ArTransform *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaser **)&jarg1; 
  argp2 = *(ArTransform **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTransform");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->applyTransform(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaser_1useSimpleNamingForAllLasers(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArLaser::useSimpleNamingForAllLasers();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArResolver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArResolver *arg1 = (ArResolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArResolver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArResolver_1resolve_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jlong jresult = 0 ;
  ArResolver *arg1 = (ArResolver *) 0 ;
  ArResolver::ActionMap *arg2 = (ArResolver::ActionMap *) 0 ;
  ArRobot *arg3 = (ArRobot *) 0 ;
  bool arg4 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArResolver **)&jarg1; 
  arg2 = *(ArResolver::ActionMap **)&jarg2; 
  arg3 = *(ArRobot **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArActionDesired *)(arg1)->resolve(arg2,arg3,arg4);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArResolver_1resolve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  ArResolver *arg1 = (ArResolver *) 0 ;
  ArResolver::ActionMap *arg2 = (ArResolver::ActionMap *) 0 ;
  ArRobot *arg3 = (ArRobot *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArResolver **)&jarg1; 
  arg2 = *(ArResolver::ActionMap **)&jarg2; 
  arg3 = *(ArRobot **)&jarg3; 
  result = (ArActionDesired *)(arg1)->resolve(arg2,arg3);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArResolver_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArResolver *arg1 = (ArResolver *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArResolver **)&jarg1; 
  result = (char *)((ArResolver const *)arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArResolver_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArResolver *arg1 = (ArResolver *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArResolver **)&jarg1; 
  result = (char *)((ArResolver const *)arg1)->getDescription();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1STATUS_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArThread::Status result;
  
  (void)jenv;
  (void)jcls;
  result = (ArThread::Status)ArThread::STATUS_FAILED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArThread_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  ArThread *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (ArThread *)new ArThread(arg1);
  *(ArThread **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArThread_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArThread *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArThread *)new ArThread();
  *(ArThread **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArThread_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  ArThread::ThreadType arg1 ;
  bool arg2 ;
  bool arg3 ;
  ArThread::ThreadType *argp1 ;
  ArThread *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ArThread::ThreadType **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArThread::ThreadType");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (ArThread *)new ArThread(arg1,arg2,arg3);
  *(ArThread **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArThread_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  ArThread::ThreadType arg1 ;
  bool arg2 ;
  ArThread::ThreadType *argp1 ;
  ArThread *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(ArThread::ThreadType **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArThread::ThreadType");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = jarg2 ? true : false; 
  result = (ArThread *)new ArThread(arg1,arg2);
  *(ArThread **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArThread_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  bool arg2 ;
  bool arg3 ;
  ArThread *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (ArThread *)new ArThread(arg1,arg2,arg3);
  *(ArThread **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArThread_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  bool arg2 ;
  ArThread *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ArThread *)new ArThread(arg1,arg2);
  *(ArThread **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArThread_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  ArThread *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor **)&jarg1; 
  result = (ArThread *)new ArThread(arg1);
  *(ArThread **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArThread(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArThread *arg1 = (ArThread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArThread **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1init(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArThread::init();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1self(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArThread *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArThread *)ArThread::self();
  *(ArThread **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1osSelf(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArThread::ThreadType result;
  
  (void)jenv;
  (void)jcls;
  result = ArThread::osSelf();
  *(ArThread::ThreadType **)&jresult = new ArThread::ThreadType((const ArThread::ThreadType &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1stopAll(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArThread::stopAll();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1cancelAll(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArThread::cancelAll();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1joinAll(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArThread::joinAll();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1shutdown(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArThread::shutdown();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1yieldProcessor(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArThread::yieldProcessor();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1getLogLevel(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArLog::LogLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (ArLog::LogLevel)ArThread::getLogLevel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1setLogLevel(JNIEnv *jenv, jclass jcls, jint jarg1) {
  ArLog::LogLevel arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArLog::LogLevel)jarg1; 
  ArThread::setLogLevel(arg1);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  jint jresult = 0 ;
  ArThread *arg1 = (ArThread *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArThread **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->create(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  ArThread *arg1 = (ArThread *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArThread **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->create(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ArThread *arg1 = (ArThread *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArThread **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  result = (int)(arg1)->create(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1stopRunning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArThread *arg1 = (ArThread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArThread **)&jarg1; 
  (arg1)->stopRunning();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1join_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ArThread *arg1 = (ArThread *) 0 ;
  void **arg2 = (void **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArThread **)&jarg1; 
  arg2 = *(void ***)&jarg2; 
  result = (int)(arg1)->join(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1join_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArThread *arg1 = (ArThread *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArThread **)&jarg1; 
  result = (int)(arg1)->join();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1detach(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArThread *arg1 = (ArThread *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArThread **)&jarg1; 
  result = (int)(arg1)->detach();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1cancel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArThread *arg1 = (ArThread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArThread **)&jarg1; 
  (arg1)->cancel();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1getRunning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArThread *arg1 = (ArThread *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArThread **)&jarg1; 
  result = (bool)((ArThread const *)arg1)->getRunning();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1getRunningWithLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArThread *arg1 = (ArThread *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArThread **)&jarg1; 
  result = (bool)(arg1)->getRunningWithLock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1getJoinable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArThread *arg1 = (ArThread *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArThread **)&jarg1; 
  result = (bool)((ArThread const *)arg1)->getJoinable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1getThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArThread *arg1 = (ArThread *) 0 ;
  ArThread::ThreadType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArThread **)&jarg1; 
  result = (ArThread::ThreadType *)((ArThread const *)arg1)->getThread();
  *(ArThread::ThreadType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1getOSThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArThread *arg1 = (ArThread *) 0 ;
  ArThread::ThreadType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArThread **)&jarg1; 
  result = ((ArThread const *)arg1)->getOSThread();
  *(ArThread::ThreadType **)&jresult = new ArThread::ThreadType((const ArThread::ThreadType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1getFunc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArThread *arg1 = (ArThread *) 0 ;
  ArFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArThread **)&jarg1; 
  result = (ArFunctor *)((ArThread const *)arg1)->getFunc();
  *(ArFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1setRunning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArThread *arg1 = (ArThread *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArThread **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRunning(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1getBlockAllSignals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArThread *arg1 = (ArThread *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArThread **)&jarg1; 
  result = (bool)(arg1)->getBlockAllSignals();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1getThreadName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArThread *arg1 = (ArThread *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArThread **)&jarg1; 
  result = (char *)(arg1)->getThreadName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1setThreadName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArThread *arg1 = (ArThread *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArThread **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setThreadName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1getThreadActivity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArThread *arg1 = (ArThread *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArThread **)&jarg1; 
  result = (char *)(arg1)->getThreadActivity();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1threadStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArThread *arg1 = (ArThread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArThread **)&jarg1; 
  (arg1)->threadStarted();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1threadFinished(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArThread *arg1 = (ArThread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArThread **)&jarg1; 
  (arg1)->threadFinished();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1isThreadStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArThread *arg1 = (ArThread *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArThread **)&jarg1; 
  result = (bool)((ArThread const *)arg1)->isThreadStarted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1isThreadFinished(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArThread *arg1 = (ArThread *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArThread **)&jarg1; 
  result = (bool)((ArThread const *)arg1)->isThreadFinished();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1logThreadInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArThread *arg1 = (ArThread *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArThread **)&jarg1; 
  (arg1)->logThreadInfo();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1getPID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArThread *arg1 = (ArThread *) 0 ;
  pid_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArThread **)&jarg1; 
  result = (arg1)->getPID();
  *(pid_t **)&jresult = new pid_t((const pid_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1getTID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArThread *arg1 = (ArThread *) 0 ;
  pid_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArThread **)&jarg1; 
  result = (arg1)->getTID();
  *(pid_t **)&jresult = new pid_t((const pid_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1getThisThreadName(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArThread::getThisThreadName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1getThisThread(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArThread::ThreadType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArThread::ThreadType *)ArThread::getThisThread();
  *(ArThread::ThreadType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArThread_1getThisOSThread(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArThread::ThreadType result;
  
  (void)jenv;
  (void)jcls;
  result = ArThread::getThisOSThread();
  *(ArThread::ThreadType **)&jresult = new ArThread::ThreadType((const ArThread::ThreadType &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArFunctor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFunctor_1invoke(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor **)&jarg1; 
  (arg1)->invoke();
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFunctor_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor **)&jarg1; 
  result = (char *)(arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFunctor_1getNameSwigExplicitArFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor **)&jarg1; 
  result = (char *)(arg1)->ArFunctor::getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFunctor_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFunctor_1setNameSwigExplicitArFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->ArFunctor::setName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArFunctor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArFunctor *)new SwigDirector_ArFunctor(jenv);
  *(ArFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFunctor_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ArFunctor *obj = *((ArFunctor **)&objarg);
  (void)jcls;
  SwigDirector_ArFunctor *director = dynamic_cast<SwigDirector_ArFunctor *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFunctor_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ArFunctor *obj = *((ArFunctor **)&objarg);
  SwigDirector_ArFunctor *director = dynamic_cast<SwigDirector_ArFunctor *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRetFunctor_1VoidP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRetFunctor< void * > *arg1 = (ArRetFunctor< void * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRetFunctor< void * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1VoidP_1invoke(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRetFunctor< void * > *arg1 = (ArRetFunctor< void * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor< void * > **)&jarg1; 
  (arg1)->invoke();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1VoidP_1invokeSwigExplicitArRetFunctor_1VoidP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRetFunctor< void * > *arg1 = (ArRetFunctor< void * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor< void * > **)&jarg1; 
  (arg1)->ArRetFunctor< void * >::invoke();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1VoidP_1invokeR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRetFunctor< void * > *arg1 = (ArRetFunctor< void * > *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor< void * > **)&jarg1; 
  result = (void *)(arg1)->invokeR();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRetFunctor_1VoidP(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRetFunctor< void * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRetFunctor< void * > *)new SwigDirector_ArRetFunctor_VoidP(jenv);
  *(ArRetFunctor< void * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1VoidP_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ArRetFunctor< void * > *obj = *((ArRetFunctor< void * > **)&objarg);
  (void)jcls;
  SwigDirector_ArRetFunctor_VoidP *director = dynamic_cast<SwigDirector_ArRetFunctor_VoidP *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1VoidP_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ArRetFunctor< void * > *obj = *((ArRetFunctor< void * > **)&objarg);
  SwigDirector_ArRetFunctor_VoidP *director = dynamic_cast<SwigDirector_ArRetFunctor_VoidP *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRetFunctor_1Bool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRetFunctor< bool > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1Bool_1invoke(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor< bool > **)&jarg1; 
  (arg1)->invoke();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1Bool_1invokeSwigExplicitArRetFunctor_1Bool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor< bool > **)&jarg1; 
  (arg1)->ArRetFunctor< bool >::invoke();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1Bool_1invokeR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor< bool > **)&jarg1; 
  result = (bool)(arg1)->invokeR();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRetFunctor_1Bool(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRetFunctor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRetFunctor< bool > *)new SwigDirector_ArRetFunctor_Bool(jenv);
  *(ArRetFunctor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1Bool_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ArRetFunctor< bool > *obj = *((ArRetFunctor< bool > **)&objarg);
  (void)jcls;
  SwigDirector_ArRetFunctor_Bool *director = dynamic_cast<SwigDirector_ArRetFunctor_Bool *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1Bool_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ArRetFunctor< bool > *obj = *((ArRetFunctor< bool > **)&objarg);
  SwigDirector_ArRetFunctor_Bool *director = dynamic_cast<SwigDirector_ArRetFunctor_Bool *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArFunctor1_1CString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArFunctor1< char const * > *arg1 = (ArFunctor1< char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArFunctor1< char const * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFunctor1_1CString_1invoke_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArFunctor1< char const * > *arg1 = (ArFunctor1< char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor1< char const * > **)&jarg1; 
  (arg1)->invoke();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFunctor1_1CString_1invoke_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArFunctor1< char const * > *arg1 = (ArFunctor1< char const * > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor1< char const * > **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->invoke((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArFunctor1_1Int(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArFunctor1< int > *arg1 = (ArFunctor1< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArFunctor1< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFunctor1_1Int_1invoke_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArFunctor1< int > *arg1 = (ArFunctor1< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor1< int > **)&jarg1; 
  (arg1)->invoke();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFunctor1_1Int_1invoke_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArFunctor1< int > *arg1 = (ArFunctor1< int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor1< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->invoke(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArFunctor1_1ArRobotPacketP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArFunctor1< ArRobotPacket * > *arg1 = (ArFunctor1< ArRobotPacket * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArFunctor1< ArRobotPacket * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFunctor1_1ArRobotPacketP_1invoke_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArFunctor1< ArRobotPacket * > *arg1 = (ArFunctor1< ArRobotPacket * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor1< ArRobotPacket * > **)&jarg1; 
  (arg1)->invoke();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFunctor1_1ArRobotPacketP_1invoke_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArFunctor1< ArRobotPacket * > *arg1 = (ArFunctor1< ArRobotPacket * > *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArFunctor1< ArRobotPacket * > **)&jarg1; 
  arg2 = *(ArRobotPacket **)&jarg2; 
  (arg1)->invoke(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArFunctor1_1ArRobotPacketP(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArFunctor1< ArRobotPacket * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArFunctor1< ArRobotPacket * > *)new SwigDirector_ArFunctor1_ArRobotPacketP(jenv);
  *(ArFunctor1< ArRobotPacket * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFunctor1_1ArRobotPacketP_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ArFunctor1< ArRobotPacket * > *obj = *((ArFunctor1< ArRobotPacket * > **)&objarg);
  (void)jcls;
  SwigDirector_ArFunctor1_ArRobotPacketP *director = dynamic_cast<SwigDirector_ArFunctor1_ArRobotPacketP *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFunctor1_1ArRobotPacketP_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ArFunctor1< ArRobotPacket * > *obj = *((ArFunctor1< ArRobotPacket * > **)&objarg);
  SwigDirector_ArFunctor1_ArRobotPacketP *director = dynamic_cast<SwigDirector_ArFunctor1_ArRobotPacketP *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRetFunctor_1Int(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRetFunctor< int > *arg1 = (ArRetFunctor< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRetFunctor< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1Int_1invoke(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRetFunctor< int > *arg1 = (ArRetFunctor< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor< int > **)&jarg1; 
  (arg1)->invoke();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1Int_1invokeSwigExplicitArRetFunctor_1Int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRetFunctor< int > *arg1 = (ArRetFunctor< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor< int > **)&jarg1; 
  (arg1)->ArRetFunctor< int >::invoke();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1Int_1invokeR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRetFunctor< int > *arg1 = (ArRetFunctor< int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor< int > **)&jarg1; 
  result = (int)(arg1)->invokeR();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRetFunctor_1Int(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRetFunctor< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRetFunctor< int > *)new SwigDirector_ArRetFunctor_Int(jenv);
  *(ArRetFunctor< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1Int_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ArRetFunctor< int > *obj = *((ArRetFunctor< int > **)&objarg);
  (void)jcls;
  SwigDirector_ArRetFunctor_Int *director = dynamic_cast<SwigDirector_ArRetFunctor_Int *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1Int_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ArRetFunctor< int > *obj = *((ArRetFunctor< int > **)&objarg);
  SwigDirector_ArRetFunctor_Int *director = dynamic_cast<SwigDirector_ArRetFunctor_Int *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRetFunctor_1Double(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRetFunctor< double > *arg1 = (ArRetFunctor< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRetFunctor< double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1Double_1invoke(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRetFunctor< double > *arg1 = (ArRetFunctor< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor< double > **)&jarg1; 
  (arg1)->invoke();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1Double_1invokeSwigExplicitArRetFunctor_1Double(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRetFunctor< double > *arg1 = (ArRetFunctor< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor< double > **)&jarg1; 
  (arg1)->ArRetFunctor< double >::invoke();
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1Double_1invokeR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRetFunctor< double > *arg1 = (ArRetFunctor< double > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor< double > **)&jarg1; 
  result = (double)(arg1)->invokeR();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRetFunctor_1Double(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRetFunctor< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRetFunctor< double > *)new SwigDirector_ArRetFunctor_Double(jenv);
  *(ArRetFunctor< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1Double_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ArRetFunctor< double > *obj = *((ArRetFunctor< double > **)&objarg);
  (void)jcls;
  SwigDirector_ArRetFunctor_Double *director = dynamic_cast<SwigDirector_ArRetFunctor_Double *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1Double_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ArRetFunctor< double > *obj = *((ArRetFunctor< double > **)&objarg);
  SwigDirector_ArRetFunctor_Double *director = dynamic_cast<SwigDirector_ArRetFunctor_Double *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRetFunctor_1UnsignedInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRetFunctor< unsigned int > *arg1 = (ArRetFunctor< unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRetFunctor< unsigned int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1UnsignedInt_1invoke(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRetFunctor< unsigned int > *arg1 = (ArRetFunctor< unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor< unsigned int > **)&jarg1; 
  (arg1)->invoke();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1UnsignedInt_1invokeSwigExplicitArRetFunctor_1UnsignedInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRetFunctor< unsigned int > *arg1 = (ArRetFunctor< unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor< unsigned int > **)&jarg1; 
  (arg1)->ArRetFunctor< unsigned int >::invoke();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1UnsignedInt_1invokeR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRetFunctor< unsigned int > *arg1 = (ArRetFunctor< unsigned int > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor< unsigned int > **)&jarg1; 
  result = (unsigned int)(arg1)->invokeR();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRetFunctor_1UnsignedInt(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRetFunctor< unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRetFunctor< unsigned int > *)new SwigDirector_ArRetFunctor_UnsignedInt(jenv);
  *(ArRetFunctor< unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1UnsignedInt_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ArRetFunctor< unsigned int > *obj = *((ArRetFunctor< unsigned int > **)&objarg);
  (void)jcls;
  SwigDirector_ArRetFunctor_UnsignedInt *director = dynamic_cast<SwigDirector_ArRetFunctor_UnsignedInt *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor_1UnsignedInt_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ArRetFunctor< unsigned int > *obj = *((ArRetFunctor< unsigned int > **)&objarg);
  SwigDirector_ArRetFunctor_UnsignedInt *director = dynamic_cast<SwigDirector_ArRetFunctor_UnsignedInt *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRetFunctor1_1Double_1ArPoseWithTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRetFunctor1< double,ArPoseWithTime > *arg1 = (ArRetFunctor1< double,ArPoseWithTime > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRetFunctor1< double,ArPoseWithTime > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor1_1Double_1ArPoseWithTime_1invokeR_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRetFunctor1< double,ArPoseWithTime > *arg1 = (ArRetFunctor1< double,ArPoseWithTime > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor1< double,ArPoseWithTime > **)&jarg1; 
  result = (double)(arg1)->invokeR();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor1_1Double_1ArPoseWithTime_1invokeR_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  ArRetFunctor1< double,ArPoseWithTime > *arg1 = (ArRetFunctor1< double,ArPoseWithTime > *) 0 ;
  ArPoseWithTime arg2 ;
  ArPoseWithTime *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRetFunctor1< double,ArPoseWithTime > **)&jarg1; 
  argp2 = *(ArPoseWithTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPoseWithTime");
    return 0;
  }
  arg2 = *argp2; 
  result = (double)(arg1)->invokeR(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRetFunctor1_1Double_1ArPoseWithTime(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRetFunctor1< double,ArPoseWithTime > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRetFunctor1< double,ArPoseWithTime > *)new SwigDirector_ArRetFunctor1_Double_ArPoseWithTime(jenv);
  *(ArRetFunctor1< double,ArPoseWithTime > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor1_1Double_1ArPoseWithTime_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ArRetFunctor1< double,ArPoseWithTime > *obj = *((ArRetFunctor1< double,ArPoseWithTime > **)&objarg);
  (void)jcls;
  SwigDirector_ArRetFunctor1_Double_ArPoseWithTime *director = dynamic_cast<SwigDirector_ArRetFunctor1_Double_ArPoseWithTime *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor1_1Double_1ArPoseWithTime_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ArRetFunctor1< double,ArPoseWithTime > *obj = *((ArRetFunctor1< double,ArPoseWithTime > **)&objarg);
  SwigDirector_ArRetFunctor1_Double_ArPoseWithTime *director = dynamic_cast<SwigDirector_ArRetFunctor1_Double_ArPoseWithTime *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRetFunctor1_1Bool_1ArRobotPacketP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRetFunctor1< bool,ArRobotPacket * > *arg1 = (ArRetFunctor1< bool,ArRobotPacket * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRetFunctor1< bool,ArRobotPacket * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor1_1Bool_1ArRobotPacketP_1invokeR_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRetFunctor1< bool,ArRobotPacket * > *arg1 = (ArRetFunctor1< bool,ArRobotPacket * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor1< bool,ArRobotPacket * > **)&jarg1; 
  result = (bool)(arg1)->invokeR();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor1_1Bool_1ArRobotPacketP_1invokeR_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArRetFunctor1< bool,ArRobotPacket * > *arg1 = (ArRetFunctor1< bool,ArRobotPacket * > *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRetFunctor1< bool,ArRobotPacket * > **)&jarg1; 
  arg2 = *(ArRobotPacket **)&jarg2; 
  result = (bool)(arg1)->invokeR(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRetFunctor1_1Bool_1ArRobotPacketP(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRetFunctor1< bool,ArRobotPacket * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRetFunctor1< bool,ArRobotPacket * > *)new SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP(jenv);
  *(ArRetFunctor1< bool,ArRobotPacket * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor1_1Bool_1ArRobotPacketP_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ArRetFunctor1< bool,ArRobotPacket * > *obj = *((ArRetFunctor1< bool,ArRobotPacket * > **)&objarg);
  (void)jcls;
  SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP *director = dynamic_cast<SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor1_1Bool_1ArRobotPacketP_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ArRetFunctor1< bool,ArRobotPacket * > *obj = *((ArRetFunctor1< bool,ArRobotPacket * > **)&objarg);
  SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP *director = dynamic_cast<SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRetFunctor1_1Bool_1ArgumentBuilder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRetFunctor1< bool,ArArgumentBuilder > *arg1 = (ArRetFunctor1< bool,ArArgumentBuilder > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRetFunctor1< bool,ArArgumentBuilder > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor1_1Bool_1ArgumentBuilder_1invokeR_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRetFunctor1< bool,ArArgumentBuilder > *arg1 = (ArRetFunctor1< bool,ArArgumentBuilder > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor1< bool,ArArgumentBuilder > **)&jarg1; 
  result = (bool)(arg1)->invokeR();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor1_1Bool_1ArgumentBuilder_1invokeR_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArRetFunctor1< bool,ArArgumentBuilder > *arg1 = (ArRetFunctor1< bool,ArArgumentBuilder > *) 0 ;
  ArArgumentBuilder arg2 ;
  ArArgumentBuilder *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRetFunctor1< bool,ArArgumentBuilder > **)&jarg1; 
  argp2 = *(ArArgumentBuilder **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArArgumentBuilder");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->invokeR(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRetFunctor1_1Bool_1ArgumentBuilder(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRetFunctor1< bool,ArArgumentBuilder > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRetFunctor1< bool,ArArgumentBuilder > *)new SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder(jenv);
  *(ArRetFunctor1< bool,ArArgumentBuilder > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor1_1Bool_1ArgumentBuilder_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ArRetFunctor1< bool,ArArgumentBuilder > *obj = *((ArRetFunctor1< bool,ArArgumentBuilder > **)&objarg);
  (void)jcls;
  SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder *director = dynamic_cast<SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor1_1Bool_1ArgumentBuilder_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ArRetFunctor1< bool,ArArgumentBuilder > *obj = *((ArRetFunctor1< bool,ArArgumentBuilder > **)&objarg);
  SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder *director = dynamic_cast<SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRetFunctor1_1Bool_1ArgumentBuilderP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRetFunctor1< bool,ArArgumentBuilder * > *arg1 = (ArRetFunctor1< bool,ArArgumentBuilder * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRetFunctor1< bool,ArArgumentBuilder * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor1_1Bool_1ArgumentBuilderP_1invokeR_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRetFunctor1< bool,ArArgumentBuilder * > *arg1 = (ArRetFunctor1< bool,ArArgumentBuilder * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor1< bool,ArArgumentBuilder * > **)&jarg1; 
  result = (bool)(arg1)->invokeR();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor1_1Bool_1ArgumentBuilderP_1invokeR_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArRetFunctor1< bool,ArArgumentBuilder * > *arg1 = (ArRetFunctor1< bool,ArArgumentBuilder * > *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRetFunctor1< bool,ArArgumentBuilder * > **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  result = (bool)(arg1)->invokeR(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRetFunctor1_1Bool_1ArgumentBuilderP(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRetFunctor1< bool,ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRetFunctor1< bool,ArArgumentBuilder * > *)new SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP(jenv);
  *(ArRetFunctor1< bool,ArArgumentBuilder * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor1_1Bool_1ArgumentBuilderP_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ArRetFunctor1< bool,ArArgumentBuilder * > *obj = *((ArRetFunctor1< bool,ArArgumentBuilder * > **)&objarg);
  (void)jcls;
  SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP *director = dynamic_cast<SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor1_1Bool_1ArgumentBuilderP_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ArRetFunctor1< bool,ArArgumentBuilder * > *obj = *((ArRetFunctor1< bool,ArArgumentBuilder * > **)&objarg);
  SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP *director = dynamic_cast<SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRetFunctor1_1VoidP_1VoidP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRetFunctor1< void *,void * > *arg1 = (ArRetFunctor1< void *,void * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRetFunctor1< void *,void * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor1_1VoidP_1VoidP_1invokeR_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRetFunctor1< void *,void * > *arg1 = (ArRetFunctor1< void *,void * > *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor1< void *,void * > **)&jarg1; 
  result = (void *)(arg1)->invokeR();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor1_1VoidP_1VoidP_1invokeR_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ArRetFunctor1< void *,void * > *arg1 = (ArRetFunctor1< void *,void * > *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor1< void *,void * > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (void *)(arg1)->invokeR(arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRetFunctor1_1VoidP_1VoidP(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRetFunctor1< void *,void * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRetFunctor1< void *,void * > *)new SwigDirector_ArRetFunctor1_VoidP_VoidP(jenv);
  *(ArRetFunctor1< void *,void * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor1_1VoidP_1VoidP_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ArRetFunctor1< void *,void * > *obj = *((ArRetFunctor1< void *,void * > **)&objarg);
  (void)jcls;
  SwigDirector_ArRetFunctor1_VoidP_VoidP *director = dynamic_cast<SwigDirector_ArRetFunctor1_VoidP_VoidP *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRetFunctor1_1VoidP_1VoidP_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ArRetFunctor1< void *,void * > *obj = *((ArRetFunctor1< void *,void * > **)&objarg);
  SwigDirector_ArRetFunctor1_VoidP_VoidP *director = dynamic_cast<SwigDirector_ArRetFunctor1_VoidP_VoidP *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArACTSBlob(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArACTSBlob *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArACTSBlob *)new ArACTSBlob();
  *(ArACTSBlob **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArACTSBlob(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArACTSBlob **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTSBlob_1getArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTSBlob **)&jarg1; 
  result = (int)(arg1)->getArea();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTSBlob_1getXCG(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTSBlob **)&jarg1; 
  result = (int)(arg1)->getXCG();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTSBlob_1getYCG(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTSBlob **)&jarg1; 
  result = (int)(arg1)->getYCG();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTSBlob_1getLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTSBlob **)&jarg1; 
  result = (int)(arg1)->getLeft();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTSBlob_1getRight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTSBlob **)&jarg1; 
  result = (int)(arg1)->getRight();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTSBlob_1getTop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTSBlob **)&jarg1; 
  result = (int)(arg1)->getTop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTSBlob_1getBottom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTSBlob **)&jarg1; 
  result = (int)(arg1)->getBottom();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTSBlob_1setArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTSBlob **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setArea(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTSBlob_1setXCG(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTSBlob **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setXCG(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTSBlob_1setYCG(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTSBlob **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setYCG(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTSBlob_1setLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTSBlob **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLeft(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTSBlob_1setRight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTSBlob **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setRight(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTSBlob_1setTop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTSBlob **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setTop(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTSBlob_1setBottom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTSBlob **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setBottom(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTSBlob_1log(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArACTSBlob *arg1 = (ArACTSBlob *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTSBlob **)&jarg1; 
  (arg1)->log();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArACTS_11_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArACTS_1_2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArACTS_1_2 *)new ArACTS_1_2();
  *(ArACTS_1_2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArACTS_11_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArACTS_1_2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTS_11_12_1openPort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArACTS_1_2 **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->openPort(arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTS_11_12_1openPort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArACTS_1_2 **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->openPort(arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTS_11_12_1openPort_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArACTS_1_2 **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (bool)(arg1)->openPort(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTS_11_12_1closePort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTS_1_2 **)&jarg1; 
  result = (bool)(arg1)->closePort();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTS_11_12_1isConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTS_1_2 **)&jarg1; 
  result = (bool)(arg1)->isConnected();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTS_11_12_1getRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  ArRobot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTS_1_2 **)&jarg1; 
  result = (ArRobot *)(arg1)->getRobot();
  *(ArRobot **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTS_11_12_1setRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArACTS_1_2 **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTS_11_12_1requestPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTS_1_2 **)&jarg1; 
  result = (bool)(arg1)->requestPacket();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTS_11_12_1requestQuit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTS_1_2 **)&jarg1; 
  result = (bool)(arg1)->requestQuit();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTS_11_12_1receiveBlobInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTS_1_2 **)&jarg1; 
  result = (bool)(arg1)->receiveBlobInfo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTS_11_12_1getNumBlobs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTS_1_2 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getNumBlobs(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTS_11_12_1getBlob(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  int arg2 ;
  int arg3 ;
  ArACTSBlob *arg4 = (ArACTSBlob *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArACTS_1_2 **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(ArACTSBlob **)&jarg4; 
  result = (bool)(arg1)->getBlob(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTS_11_12_1actsHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTS_1_2 **)&jarg1; 
  (arg1)->actsHandler();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTS_11_12_1NUM_1CHANNELS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArACTS_1_2::ActsConstants result;
  
  (void)jenv;
  (void)jcls;
  result = (ArACTS_1_2::ActsConstants)ArACTS_1_2::NUM_CHANNELS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTS_11_12_1MAX_1BLOBS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArACTS_1_2::ActsConstants result;
  
  (void)jenv;
  (void)jcls;
  result = (ArACTS_1_2::ActsConstants)ArACTS_1_2::MAX_BLOBS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTS_11_12_1ACTS_1BLOB_1DATA_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArACTS_1_2::ActsConstants result;
  
  (void)jenv;
  (void)jcls;
  result = (ArACTS_1_2::ActsConstants)ArACTS_1_2::ACTS_BLOB_DATA_SIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTS_11_12_1DATA_1HEADER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArACTS_1_2::ActsConstants result;
  
  (void)jenv;
  (void)jcls;
  result = (ArACTS_1_2::ActsConstants)ArACTS_1_2::DATA_HEADER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTS_11_12_1MAX_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArACTS_1_2::ActsConstants result;
  
  (void)jenv;
  (void)jcls;
  result = (ArACTS_1_2::ActsConstants)ArACTS_1_2::MAX_DATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTS_11_12_1invert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTS_1_2 **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->invert(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTS_11_12_1invert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTS_1_2 **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->invert(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArACTS_11_12_1invert_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArACTS_1_2 *arg1 = (ArACTS_1_2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArACTS_1_2 **)&jarg1; 
  (arg1)->invert();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUCommands_1ABSTILT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArAMPTUCommands::ABSTILT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUCommands_1RELTILTU_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArAMPTUCommands::RELTILTU;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUCommands_1RELTILTD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArAMPTUCommands::RELTILTD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUCommands_1ABSPAN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArAMPTUCommands::ABSPAN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUCommands_1RELPANCW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArAMPTUCommands::RELPANCW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUCommands_1RELPANCCW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArAMPTUCommands::RELPANCCW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUCommands_1PANTILT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArAMPTUCommands::PANTILT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUCommands_1PANTILTUCW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArAMPTUCommands::PANTILTUCW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUCommands_1PANTILTDCW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArAMPTUCommands::PANTILTDCW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUCommands_1PANTILTUCCW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArAMPTUCommands::PANTILTUCCW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUCommands_1PANTILTDCCW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArAMPTUCommands::PANTILTDCCW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUCommands_1ZOOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArAMPTUCommands::ZOOM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUCommands_1PAUSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArAMPTUCommands::PAUSE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUCommands_1CONT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArAMPTUCommands::CONT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUCommands_1PURGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArAMPTUCommands::PURGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUCommands_1STATUS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArAMPTUCommands::STATUS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUCommands_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArAMPTUCommands::INIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUCommands_1RESP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArAMPTUCommands::RESP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUCommands_1PANSLEW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArAMPTUCommands::PANSLEW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUCommands_1TILTSLEW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArAMPTUCommands::TILTSLEW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArAMPTUCommands(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArAMPTUCommands *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArAMPTUCommands *)new ArAMPTUCommands();
  *(ArAMPTUCommands **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArAMPTUCommands(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArAMPTUCommands *arg1 = (ArAMPTUCommands *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArAMPTUCommands **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArAMPTUPacket_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  ArTypes::UByte2 arg1 ;
  ArAMPTUPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArTypes::UByte2)jarg1; 
  result = (ArAMPTUPacket *)new ArAMPTUPacket(arg1);
  *(ArAMPTUPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArAMPTUPacket_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArAMPTUPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArAMPTUPacket *)new ArAMPTUPacket();
  *(ArAMPTUPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArAMPTUPacket(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArAMPTUPacket *arg1 = (ArAMPTUPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArAMPTUPacket **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUPacket_1getUnitNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ArAMPTUPacket *arg1 = (ArAMPTUPacket *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAMPTUPacket **)&jarg1; 
  result = (unsigned char)(arg1)->getUnitNumber();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUPacket_1setUnitNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jboolean jresult = 0 ;
  ArAMPTUPacket *arg1 = (ArAMPTUPacket *) 0 ;
  unsigned char arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAMPTUPacket **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  result = (bool)(arg1)->setUnitNumber(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUPacket_1byteToBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  ArAMPTUPacket *arg1 = (ArAMPTUPacket *) 0 ;
  ArTypes::Byte arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAMPTUPacket **)&jarg1; 
  arg2 = (ArTypes::Byte)jarg2; 
  (arg1)->byteToBuf(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUPacket_1byte2ToBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ArAMPTUPacket *arg1 = (ArAMPTUPacket *) 0 ;
  ArTypes::Byte2 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAMPTUPacket **)&jarg1; 
  arg2 = (ArTypes::Byte2)jarg2; 
  (arg1)->byte2ToBuf(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTUPacket_1finalizePacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArAMPTUPacket *arg1 = (ArAMPTUPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAMPTUPacket **)&jarg1; 
  (arg1)->finalizePacket();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArAMPTU_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  ArAMPTU *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ArAMPTU *)new ArAMPTU(arg1,arg2);
  *(ArAMPTU **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArAMPTU_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArAMPTU *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArAMPTU *)new ArAMPTU(arg1);
  *(ArAMPTU **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArAMPTU(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArAMPTU **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTU_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAMPTU **)&jarg1; 
  result = (bool)(arg1)->init();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTU_1getTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAMPTU **)&jarg1; 
  result = (char *)(arg1)->getTypeName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTU_1panSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAMPTU **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->panSlew(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTU_1tiltSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAMPTU **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->tiltSlew(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTU_1canZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAMPTU **)&jarg1; 
  result = (bool)((ArAMPTU const *)arg1)->canZoom();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTU_1canPanTiltSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAMPTU **)&jarg1; 
  result = (bool)(arg1)->canPanTiltSlew();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTU_1pause(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAMPTU **)&jarg1; 
  result = (bool)(arg1)->pause();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTU_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAMPTU **)&jarg1; 
  result = (bool)(arg1)->resume();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTU_1purge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAMPTU **)&jarg1; 
  result = (bool)(arg1)->purge();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTU_1requestStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAMPTU **)&jarg1; 
  result = (bool)(arg1)->requestStatus();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTU_1getPan_1i(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAMPTU **)&jarg1; 
  result = (double)((ArAMPTU const *)arg1)->getPan_i();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTU_1getTilt_1i(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArAMPTU *arg1 = (ArAMPTU *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAMPTU **)&jarg1; 
  result = (double)((ArAMPTU const *)arg1)->getTilt_i();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTU_1MIN_1SLEW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArAMPTU::MIN_SLEW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTU_1MAX_1TILT_1SLEW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArAMPTU::MAX_TILT_SLEW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAMPTU_1MAX_1PAN_1SLEW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArAMPTU::MAX_PAN_SLEW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArASyncTask(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArASyncTask *arg1 = (ArASyncTask *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArASyncTask **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArASyncTask_1runThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ArASyncTask *arg1 = (ArASyncTask *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArASyncTask **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (void *)(arg1)->runThread(arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArASyncTask_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArASyncTask *arg1 = (ArASyncTask *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArASyncTask **)&jarg1; 
  (arg1)->run();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArASyncTask_1runAsync(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArASyncTask *arg1 = (ArASyncTask *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArASyncTask **)&jarg1; 
  (arg1)->runAsync();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArASyncTask_1stopRunning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArASyncTask *arg1 = (ArASyncTask *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArASyncTask **)&jarg1; 
  (arg1)->stopRunning();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArASyncTask_1create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  ArASyncTask *arg1 = (ArASyncTask *) 0 ;
  bool arg2 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArASyncTask **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->create(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArASyncTask_1create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  ArASyncTask *arg1 = (ArASyncTask *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArASyncTask **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->create(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArASyncTask_1create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArASyncTask *arg1 = (ArASyncTask *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArASyncTask **)&jarg1; 
  result = (int)(arg1)->create();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArASyncTask_1runInThisThread_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ArASyncTask *arg1 = (ArASyncTask *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArASyncTask **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (void *)(arg1)->runInThisThread(arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArASyncTask_1runInThisThread_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArASyncTask *arg1 = (ArASyncTask *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArASyncTask **)&jarg1; 
  result = (void *)(arg1)->runInThisThread();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArASyncTask_1getThreadActivity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArASyncTask *arg1 = (ArASyncTask *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArASyncTask **)&jarg1; 
  result = (char *)(arg1)->getThreadActivity();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArAction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ArAction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArAction *)new SwigDirector_ArAction(jenv,(char const *)arg1,(char const *)arg2);
  *(ArAction **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArAction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArAction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArAction *)new SwigDirector_ArAction(jenv,(char const *)arg1);
  *(ArAction **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArAction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArAction *arg1 = (ArAction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArAction **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1isActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArAction *arg1 = (ArAction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAction **)&jarg1; 
  result = (bool)((ArAction const *)arg1)->isActive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1isActiveSwigExplicitArAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArAction *arg1 = (ArAction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAction **)&jarg1; 
  result = (bool)((ArAction const *)arg1)->ArAction::isActive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArAction *arg1 = (ArAction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAction **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1activateSwigExplicitArAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArAction *arg1 = (ArAction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAction **)&jarg1; 
  (arg1)->ArAction::activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArAction *arg1 = (ArAction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAction **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1deactivateSwigExplicitArAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArAction *arg1 = (ArAction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAction **)&jarg1; 
  (arg1)->ArAction::deactivate();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArAction *arg1 = (ArAction *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArAction **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1setRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArAction *arg1 = (ArAction *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArAction **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1setRobotSwigExplicitArAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArAction *arg1 = (ArAction *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArAction **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  (arg1)->ArAction::setRobot(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1getNumArgs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArAction *arg1 = (ArAction *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAction **)&jarg1; 
  result = (int)((ArAction const *)arg1)->getNumArgs();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1getNumArgsSwigExplicitArAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArAction *arg1 = (ArAction *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAction **)&jarg1; 
  result = (int)((ArAction const *)arg1)->ArAction::getNumArgs();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1getArg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ArAction *arg1 = (ArAction *) 0 ;
  int arg2 ;
  ArArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAction **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ArArg *)(arg1)->getArg(arg2);
  *(ArArg **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1getArgSwigExplicitArAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ArAction *arg1 = (ArAction *) 0 ;
  int arg2 ;
  ArArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAction **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ArArg *)(arg1)->ArAction::getArg(arg2);
  *(ArArg **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArAction *arg1 = (ArAction *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAction **)&jarg1; 
  result = (char *)((ArAction const *)arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1getNameSwigExplicitArAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArAction *arg1 = (ArAction *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAction **)&jarg1; 
  result = (char *)((ArAction const *)arg1)->ArAction::getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArAction *arg1 = (ArAction *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAction **)&jarg1; 
  result = (char *)((ArAction const *)arg1)->getDescription();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1getDescriptionSwigExplicitArAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArAction *arg1 = (ArAction *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAction **)&jarg1; 
  result = (char *)((ArAction const *)arg1)->ArAction::getDescription();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1getDesired_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArAction *arg1 = (ArAction *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAction **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1getDesiredSwigExplicitArAction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArAction *arg1 = (ArAction *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAction **)&jarg1; 
  result = (ArActionDesired *)(arg1)->ArAction::getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1getDesiredSwigExplicitArAction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArAction *arg1 = (ArAction *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAction **)&jarg1; 
  result = (ArActionDesired *)((ArAction const *)arg1)->ArAction::getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1log_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArAction *arg1 = (ArAction *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAction **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  ((ArAction const *)arg1)->log(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1logSwigExplicitArAction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArAction *arg1 = (ArAction *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAction **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  ((ArAction const *)arg1)->ArAction::log(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1log_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArAction *arg1 = (ArAction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAction **)&jarg1; 
  ((ArAction const *)arg1)->log();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1logSwigExplicitArAction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArAction *arg1 = (ArAction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAction **)&jarg1; 
  ((ArAction const *)arg1)->ArAction::log();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1getRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArAction *arg1 = (ArAction *) 0 ;
  ArRobot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAction **)&jarg1; 
  result = (ArRobot *)((ArAction const *)arg1)->getRobot();
  *(ArRobot **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1setDefaultActivationState(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  ArAction::setDefaultActivationState(arg1);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1getDefaultActivationState(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)ArAction::getDefaultActivationState();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1setActionRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArAction *arg1 = (ArAction *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArAction **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  ArAction_setActionRobot(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ArAction *obj = *((ArAction **)&objarg);
  (void)jcls;
  SwigDirector_ArAction *director = dynamic_cast<SwigDirector_ArAction *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAction_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ArAction *obj = *((ArAction **)&objarg);
  SwigDirector_ArAction *director = dynamic_cast<SwigDirector_ArAction *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionAvoidFront_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  bool arg5 ;
  ArActionAvoidFront *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (ArActionAvoidFront *)new ArActionAvoidFront((char const *)arg1,arg2,arg3,arg4,arg5);
  *(ArActionAvoidFront **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionAvoidFront_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  ArActionAvoidFront *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArActionAvoidFront *)new ArActionAvoidFront((char const *)arg1,arg2,arg3,arg4);
  *(ArActionAvoidFront **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionAvoidFront_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  ArActionAvoidFront *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArActionAvoidFront *)new ArActionAvoidFront((char const *)arg1,arg2,arg3);
  *(ArActionAvoidFront **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionAvoidFront_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionAvoidFront *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  result = (ArActionAvoidFront *)new ArActionAvoidFront((char const *)arg1,arg2);
  *(ArActionAvoidFront **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionAvoidFront_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArActionAvoidFront *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArActionAvoidFront *)new ArActionAvoidFront((char const *)arg1);
  *(ArActionAvoidFront **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionAvoidFront_1_1SWIG_15(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionAvoidFront *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionAvoidFront *)new ArActionAvoidFront();
  *(ArActionAvoidFront **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionAvoidFront(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionAvoidFront *arg1 = (ArActionAvoidFront *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionAvoidFront **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionAvoidFront_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArActionAvoidFront *arg1 = (ArActionAvoidFront *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionAvoidFront **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionAvoidFront_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionAvoidFront *arg1 = (ArActionAvoidFront *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionAvoidFront **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionAvoidSide_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  ArActionAvoidSide *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArActionAvoidSide *)new ArActionAvoidSide((char const *)arg1,arg2,arg3);
  *(ArActionAvoidSide **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionAvoidSide_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionAvoidSide *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  result = (ArActionAvoidSide *)new ArActionAvoidSide((char const *)arg1,arg2);
  *(ArActionAvoidSide **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionAvoidSide_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArActionAvoidSide *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArActionAvoidSide *)new ArActionAvoidSide((char const *)arg1);
  *(ArActionAvoidSide **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionAvoidSide_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionAvoidSide *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionAvoidSide *)new ArActionAvoidSide();
  *(ArActionAvoidSide **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionAvoidSide(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionAvoidSide *arg1 = (ArActionAvoidSide *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionAvoidSide **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionAvoidSide_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArActionAvoidSide *arg1 = (ArActionAvoidSide *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionAvoidSide **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionAvoidSide_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionAvoidSide *arg1 = (ArActionAvoidSide *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionAvoidSide **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionBumpers_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jint jarg3, jint jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  ArActionBumpers *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (ArActionBumpers *)new ArActionBumpers((char const *)arg1,arg2,arg3,arg4,arg5);
  *(ArActionBumpers **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionBumpers_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  ArActionBumpers *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (ArActionBumpers *)new ArActionBumpers((char const *)arg1,arg2,arg3,arg4);
  *(ArActionBumpers **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionBumpers_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jint jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int arg3 ;
  ArActionBumpers *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  result = (ArActionBumpers *)new ArActionBumpers((char const *)arg1,arg2,arg3);
  *(ArActionBumpers **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionBumpers_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionBumpers *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  result = (ArActionBumpers *)new ArActionBumpers((char const *)arg1,arg2);
  *(ArActionBumpers **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionBumpers_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArActionBumpers *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArActionBumpers *)new ArActionBumpers((char const *)arg1);
  *(ArActionBumpers **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionBumpers_1_1SWIG_15(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionBumpers *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionBumpers *)new ArActionBumpers();
  *(ArActionBumpers **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionBumpers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionBumpers *arg1 = (ArActionBumpers *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionBumpers **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionBumpers_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArActionBumpers *arg1 = (ArActionBumpers *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionBumpers **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionBumpers_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionBumpers *arg1 = (ArActionBumpers *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionBumpers **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionBumpers_1findDegreesToTurn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  ArActionBumpers *arg1 = (ArActionBumpers *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionBumpers **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(arg1)->findDegreesToTurn(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionBumpers_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionBumpers *arg1 = (ArActionBumpers *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionBumpers **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionColorFollow_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4, jint jarg5, jint jarg6) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArACTS_1_2 *arg2 = (ArACTS_1_2 *) 0 ;
  ArPTZ *arg3 = (ArPTZ *) 0 ;
  double arg4 ;
  int arg5 ;
  int arg6 ;
  ArActionColorFollow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArACTS_1_2 **)&jarg2; 
  arg3 = *(ArPTZ **)&jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (ArActionColorFollow *)new ArActionColorFollow((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  *(ArActionColorFollow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionColorFollow_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4, jint jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArACTS_1_2 *arg2 = (ArACTS_1_2 *) 0 ;
  ArPTZ *arg3 = (ArPTZ *) 0 ;
  double arg4 ;
  int arg5 ;
  ArActionColorFollow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArACTS_1_2 **)&jarg2; 
  arg3 = *(ArPTZ **)&jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (int)jarg5; 
  result = (ArActionColorFollow *)new ArActionColorFollow((char const *)arg1,arg2,arg3,arg4,arg5);
  *(ArActionColorFollow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionColorFollow_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArACTS_1_2 *arg2 = (ArACTS_1_2 *) 0 ;
  ArPTZ *arg3 = (ArPTZ *) 0 ;
  double arg4 ;
  ArActionColorFollow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArACTS_1_2 **)&jarg2; 
  arg3 = *(ArPTZ **)&jarg3; 
  arg4 = (double)jarg4; 
  result = (ArActionColorFollow *)new ArActionColorFollow((char const *)arg1,arg2,arg3,arg4);
  *(ArActionColorFollow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionColorFollow_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArACTS_1_2 *arg2 = (ArACTS_1_2 *) 0 ;
  ArPTZ *arg3 = (ArPTZ *) 0 ;
  ArActionColorFollow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArACTS_1_2 **)&jarg2; 
  arg3 = *(ArPTZ **)&jarg3; 
  result = (ArActionColorFollow *)new ArActionColorFollow((char const *)arg1,arg2,arg3);
  *(ArActionColorFollow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionColorFollow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionColorFollow **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionColorFollow_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionColorFollow **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionColorFollow_1setChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionColorFollow **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setChannel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionColorFollow_1setCamera(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  ArPTZ *arg2 = (ArPTZ *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionColorFollow **)&jarg1; 
  arg2 = *(ArPTZ **)&jarg2; 
  (arg1)->setCamera(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionColorFollow_1setAcquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionColorFollow **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAcquire(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionColorFollow_1stopMovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionColorFollow **)&jarg1; 
  (arg1)->stopMovement();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionColorFollow_1startMovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionColorFollow **)&jarg1; 
  (arg1)->startMovement();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionColorFollow_1getChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionColorFollow **)&jarg1; 
  result = (int)(arg1)->getChannel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionColorFollow_1getAcquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionColorFollow **)&jarg1; 
  result = (bool)(arg1)->getAcquire();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionColorFollow_1getMovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionColorFollow **)&jarg1; 
  result = (bool)(arg1)->getMovement();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionColorFollow_1getBlob(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionColorFollow **)&jarg1; 
  result = (bool)(arg1)->getBlob();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionColorFollow_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionColorFollow *arg1 = (ArActionColorFollow *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionColorFollow **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionConstantVelocity_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionConstantVelocity *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  result = (ArActionConstantVelocity *)new ArActionConstantVelocity((char const *)arg1,arg2);
  *(ArActionConstantVelocity **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionConstantVelocity_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArActionConstantVelocity *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArActionConstantVelocity *)new ArActionConstantVelocity((char const *)arg1);
  *(ArActionConstantVelocity **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionConstantVelocity_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionConstantVelocity *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionConstantVelocity *)new ArActionConstantVelocity();
  *(ArActionConstantVelocity **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionConstantVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionConstantVelocity *arg1 = (ArActionConstantVelocity *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionConstantVelocity **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionConstantVelocity_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArActionConstantVelocity *arg1 = (ArActionConstantVelocity *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionConstantVelocity **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionConstantVelocity_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionConstantVelocity *arg1 = (ArActionConstantVelocity *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionConstantVelocity **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionDeceleratingLimiter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArActionDeceleratingLimiter::LimiterType arg2 ;
  ArActionDeceleratingLimiter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ArActionDeceleratingLimiter::LimiterType)jarg2; 
  result = (ArActionDeceleratingLimiter *)new ArActionDeceleratingLimiter((char const *)arg1,arg2);
  *(ArActionDeceleratingLimiter **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionDeceleratingLimiter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArActionDeceleratingLimiter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArActionDeceleratingLimiter *)new ArActionDeceleratingLimiter((char const *)arg1);
  *(ArActionDeceleratingLimiter **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionDeceleratingLimiter_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionDeceleratingLimiter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionDeceleratingLimiter *)new ArActionDeceleratingLimiter();
  *(ArActionDeceleratingLimiter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionDeceleratingLimiter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionDeceleratingLimiter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDeceleratingLimiter_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionDeceleratingLimiter **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDeceleratingLimiter_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDeceleratingLimiter **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDeceleratingLimiter_1setParameters_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9, jboolean jarg10, jdouble jarg11) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  bool arg10 ;
  double arg11 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDeceleratingLimiter **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = (double)jarg11; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDeceleratingLimiter_1setParameters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9, jboolean jarg10) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  bool arg10 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDeceleratingLimiter **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = jarg10 ? true : false; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDeceleratingLimiter_1setParameters_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDeceleratingLimiter **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDeceleratingLimiter_1setParameters_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDeceleratingLimiter **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDeceleratingLimiter_1setParameters_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDeceleratingLimiter **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDeceleratingLimiter_1setParameters_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDeceleratingLimiter **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDeceleratingLimiter_1setParameters_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDeceleratingLimiter **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDeceleratingLimiter_1setParameters_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDeceleratingLimiter **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setParameters(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDeceleratingLimiter_1setParameters_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDeceleratingLimiter **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameters(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDeceleratingLimiter_1setParameters_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDeceleratingLimiter **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setParameters(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDeceleratingLimiter_1setParameters_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDeceleratingLimiter **)&jarg1; 
  (arg1)->setParameters();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDeceleratingLimiter_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  ArActionDeceleratingLimiter::LimiterType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDeceleratingLimiter **)&jarg1; 
  result = (ArActionDeceleratingLimiter::LimiterType)(arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDeceleratingLimiter_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  ArActionDeceleratingLimiter::LimiterType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDeceleratingLimiter **)&jarg1; 
  arg2 = (ArActionDeceleratingLimiter::LimiterType)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDeceleratingLimiter_1addToConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionDeceleratingLimiter **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->addToConfig(arg2,(char const *)arg3,(char const *)arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDeceleratingLimiter_1addToConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionDeceleratingLimiter **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->addToConfig(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDeceleratingLimiter_1getUseLocationDependentDevices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDeceleratingLimiter **)&jarg1; 
  result = (bool)(arg1)->getUseLocationDependentDevices();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDeceleratingLimiter_1setUseLocationDependentDevices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDeceleratingLimiter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseLocationDependentDevices(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDeceleratingLimiter_1setStopRotationToo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArActionDeceleratingLimiter *arg1 = (ArActionDeceleratingLimiter *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDeceleratingLimiter **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStopRotationToo(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesiredChannel_1NO_1STRENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)ArActionDesiredChannel::NO_STRENGTH;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesiredChannel_1MIN_1STRENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)ArActionDesiredChannel::MIN_STRENGTH;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesiredChannel_1MAX_1STRENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)ArActionDesiredChannel::MAX_STRENGTH;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionDesiredChannel(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionDesiredChannel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionDesiredChannel *)new ArActionDesiredChannel();
  *(ArActionDesiredChannel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionDesiredChannel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionDesiredChannel **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesiredChannel_1setOverrideDoesLessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesiredChannel **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOverrideDoesLessThan(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesiredChannel_1setDesired_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4) {
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesiredChannel **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setDesired(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesiredChannel_1setDesired_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesiredChannel **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setDesired(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesiredChannel_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesiredChannel **)&jarg1; 
  result = (double)((ArActionDesiredChannel const *)arg1)->getDesired();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesiredChannel_1getStrength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesiredChannel **)&jarg1; 
  result = (double)((ArActionDesiredChannel const *)arg1)->getStrength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesiredChannel_1getAllowOverride(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesiredChannel **)&jarg1; 
  result = (double)((ArActionDesiredChannel const *)arg1)->getAllowOverride();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesiredChannel_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesiredChannel **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesiredChannel_1merge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  ArActionDesiredChannel *arg2 = (ArActionDesiredChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionDesiredChannel **)&jarg1; 
  arg2 = *(ArActionDesiredChannel **)&jarg2; 
  (arg1)->merge(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesiredChannel_1startAverage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesiredChannel **)&jarg1; 
  (arg1)->startAverage();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesiredChannel_1addAverage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  ArActionDesiredChannel *arg2 = (ArActionDesiredChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionDesiredChannel **)&jarg1; 
  arg2 = *(ArActionDesiredChannel **)&jarg2; 
  (arg1)->addAverage(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesiredChannel_1endAverage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesiredChannel **)&jarg1; 
  (arg1)->endAverage();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesiredChannel_1checkLowerBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesiredChannel **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (int)jarg4; 
  (arg1)->checkLowerBound((char const *)arg2,(char const *)arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesiredChannel_1checkUpperBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  ArActionDesiredChannel *arg1 = (ArActionDesiredChannel *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesiredChannel **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (int)jarg4; 
  (arg1)->checkUpperBound((char const *)arg2,(char const *)arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1NO_1STRENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)ArActionDesired::NO_STRENGTH;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1MIN_1STRENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)ArActionDesired::MIN_STRENGTH;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1MAX_1STRENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)ArActionDesired::MAX_STRENGTH;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionDesired(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionDesired *)new ArActionDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionDesired(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionDesired **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setVel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setVel(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setVel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setVel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setDeltaHeading_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setDeltaHeading(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setDeltaHeading_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDeltaHeading(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setHeading_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setHeading(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setHeading_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setHeading(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setRotVel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setRotVel(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setRotVel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRotVel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setMaxVel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setMaxVel(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setMaxVel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setMaxVel(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setMaxVel_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxVel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setMaxNegVel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setMaxNegVel(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setMaxNegVel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setMaxNegVel(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setMaxNegVel_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxNegVel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setTransAccel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setTransAccel(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setTransAccel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setTransAccel(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setTransAccel_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTransAccel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setTransDecel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setTransDecel(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setTransDecel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setTransDecel(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setTransDecel_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTransDecel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setMaxRotVel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setMaxRotVel(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setMaxRotVel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setMaxRotVel(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setMaxRotVel_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxRotVel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setMaxRotVelPos_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setMaxRotVelPos(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setMaxRotVelPos_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setMaxRotVelPos(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setMaxRotVelPos_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxRotVelPos(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setMaxRotVelNeg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setMaxRotVelNeg(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setMaxRotVelNeg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setMaxRotVelNeg(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setMaxRotVelNeg_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxRotVelNeg(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setRotAccel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setRotAccel(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setRotAccel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setRotAccel(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setRotAccel_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRotAccel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setRotDecel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setRotDecel(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setRotDecel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setRotDecel(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setRotDecel_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRotDecel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setLeftLatVel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setLeftLatVel(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setLeftLatVel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLeftLatVel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setRightLatVel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setRightLatVel(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setRightLatVel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRightLatVel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setMaxLeftLatVel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setMaxLeftLatVel(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setMaxLeftLatVel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setMaxLeftLatVel(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setMaxLeftLatVel_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxLeftLatVel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setMaxRightLatVel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setMaxRightLatVel(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setMaxRightLatVel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setMaxRightLatVel(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setMaxRightLatVel_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxRightLatVel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setLatAccel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setLatAccel(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setLatAccel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setLatAccel(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setLatAccel_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLatAccel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setLatDecel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setLatDecel(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setLatDecel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setLatDecel(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1setLatDecel_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLatDecel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getVel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getVelStrength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getVelStrength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getHeading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getHeading();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getHeadingStrength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getHeadingStrength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getDeltaHeading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getDeltaHeading();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getDeltaHeadingStrength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getDeltaHeadingStrength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getRotVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getRotVel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getRotVelStrength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getRotVelStrength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getMaxVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxVel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getMaxVelStrength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxVelStrength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getMaxVelSlowestUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxVelSlowestUsed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getMaxNegVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxNegVel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getMaxNegVelStrength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxNegVelStrength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getMaxNegVelSlowestUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxNegVelSlowestUsed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getTransAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getTransAccel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getTransAccelStrength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getTransAccelStrength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getTransAccelSlowestUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getTransAccelSlowestUsed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getTransDecel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getTransDecel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getTransDecelStrength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getTransDecelStrength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getTransDecelFastestUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getTransDecelFastestUsed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getMaxRotVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRotVel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getMaxRotVelStrength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRotVelStrength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getMaxRotVelSlowestUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRotVelSlowestUsed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getMaxRotVelPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRotVelPos();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getMaxRotVelPosStrength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRotVelPosStrength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getMaxRotVelPosSlowestUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRotVelPosSlowestUsed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getMaxRotVelNeg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRotVelNeg();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getMaxRotVelNegStrength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRotVelNegStrength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getMaxRotVelNegSlowestUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRotVelNegSlowestUsed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getRotAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getRotAccel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getRotAccelStrength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getRotAccelStrength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getRotAccelSlowestUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getRotAccelSlowestUsed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getRotDecel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getRotDecel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getRotDecelStrength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getRotDecelStrength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getRotDecelFastestUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getRotDecelFastestUsed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getLatVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getLatVel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getLatVelStrength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getLatVelStrength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getMaxLeftLatVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxLeftLatVel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getMaxLeftLatVelStrength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxLeftLatVelStrength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getMaxLeftLatVelSlowestUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxLeftLatVelSlowestUsed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getMaxRightLatVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRightLatVel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getMaxRightLatVelStrength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRightLatVelStrength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getMaxRightLatVelSlowestUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getMaxRightLatVelSlowestUsed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getLatAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getLatAccel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getLatAccelStrength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getLatAccelStrength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getLatAccelSlowestUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getLatAccelSlowestUsed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getLatDecel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getLatDecel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getLatDecelStrength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getLatDecelStrength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1getLatDecelFastestUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (double)((ArActionDesired const *)arg1)->getLatDecelFastestUsed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1merge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  ArActionDesired *arg2 = (ArActionDesired *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = *(ArActionDesired **)&jarg2; 
  (arg1)->merge(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1startAverage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  (arg1)->startAverage();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1addAverage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  ArActionDesired *arg2 = (ArActionDesired *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = *(ArActionDesired **)&jarg2; 
  (arg1)->addAverage(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1endAverage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  (arg1)->endAverage();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1accountForRobotHeading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->accountForRobotHeading(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1log(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  ((ArActionDesired const *)arg1)->log();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1isAnythingDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  result = (bool)((ArActionDesired const *)arg1)->isAnythingDesired();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDesired_1sanityCheck(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArActionDesired *arg1 = (ArActionDesired *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDesired **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->sanityCheck((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionDriveDistance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  ArActionDriveDistance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArActionDriveDistance *)new ArActionDriveDistance((char const *)arg1,arg2,arg3);
  *(ArActionDriveDistance **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionDriveDistance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionDriveDistance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  result = (ArActionDriveDistance *)new ArActionDriveDistance((char const *)arg1,arg2);
  *(ArActionDriveDistance **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionDriveDistance_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArActionDriveDistance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArActionDriveDistance *)new ArActionDriveDistance((char const *)arg1);
  *(ArActionDriveDistance **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionDriveDistance_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionDriveDistance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionDriveDistance *)new ArActionDriveDistance();
  *(ArActionDriveDistance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionDriveDistance(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionDriveDistance **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDriveDistance_1haveAchievedDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDriveDistance **)&jarg1; 
  result = (bool)(arg1)->haveAchievedDistance();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDriveDistance_1cancelDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDriveDistance **)&jarg1; 
  (arg1)->cancelDistance();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDriveDistance_1setDistance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jboolean jarg3) {
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  double arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDriveDistance **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setDistance(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDriveDistance_1setDistance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDriveDistance **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDistance(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDriveDistance_1usingEncoders(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDriveDistance **)&jarg1; 
  result = (bool)(arg1)->usingEncoders();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDriveDistance_1setSpeed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDriveDistance **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSpeed(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDriveDistance_1setSpeed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDriveDistance **)&jarg1; 
  (arg1)->setSpeed();
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDriveDistance_1getSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDriveDistance **)&jarg1; 
  result = (double)(arg1)->getSpeed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDriveDistance_1setDeceleration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDriveDistance **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDeceleration(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDriveDistance_1setDeceleration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDriveDistance **)&jarg1; 
  (arg1)->setDeceleration();
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDriveDistance_1getDeceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDriveDistance **)&jarg1; 
  result = (double)(arg1)->getDeceleration();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDriveDistance_1setPrinting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDriveDistance **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPrinting(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDriveDistance_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionDriveDistance **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionDriveDistance_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionDriveDistance *arg1 = (ArActionDriveDistance *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionDriveDistance **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionGoto_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArPose arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  ArPose *argp2 ;
  ArActionGoto *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (ArActionGoto *)new ArActionGoto((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  *(ArActionGoto **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionGoto_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArPose arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose *argp2 ;
  ArActionGoto *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (ArActionGoto *)new ArActionGoto((char const *)arg1,arg2,arg3,arg4,arg5);
  *(ArActionGoto **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionGoto_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArPose arg2 ;
  double arg3 ;
  double arg4 ;
  ArPose *argp2 ;
  ArActionGoto *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArActionGoto *)new ArActionGoto((char const *)arg1,arg2,arg3,arg4);
  *(ArActionGoto **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionGoto_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArPose arg2 ;
  double arg3 ;
  ArPose *argp2 ;
  ArActionGoto *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (double)jarg3; 
  result = (ArActionGoto *)new ArActionGoto((char const *)arg1,arg2,arg3);
  *(ArActionGoto **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionGoto_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  ArActionGoto *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionGoto *)new ArActionGoto((char const *)arg1,arg2);
  *(ArActionGoto **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionGoto_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArActionGoto *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArActionGoto *)new ArActionGoto((char const *)arg1);
  *(ArActionGoto **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionGoto_1_1SWIG_16(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionGoto *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionGoto *)new ArActionGoto();
  *(ArActionGoto **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionGoto(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionGoto *arg1 = (ArActionGoto *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionGoto **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGoto_1haveAchievedGoal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionGoto *arg1 = (ArActionGoto *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGoto **)&jarg1; 
  result = (bool)(arg1)->haveAchievedGoal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGoto_1cancelGoal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionGoto *arg1 = (ArActionGoto *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGoto **)&jarg1; 
  (arg1)->cancelGoal();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGoto_1setGoal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArActionGoto *arg1 = (ArActionGoto *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionGoto **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setGoal(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGoto_1getGoal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionGoto *arg1 = (ArActionGoto *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGoto **)&jarg1; 
  result = (arg1)->getGoal();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGoto_1setCloseDist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionGoto *arg1 = (ArActionGoto *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGoto **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setCloseDist(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGoto_1getCloseDist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionGoto *arg1 = (ArActionGoto *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGoto **)&jarg1; 
  result = (double)(arg1)->getCloseDist();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGoto_1setSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionGoto *arg1 = (ArActionGoto *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGoto **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSpeed(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGoto_1getSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionGoto *arg1 = (ArActionGoto *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGoto **)&jarg1; 
  result = (double)(arg1)->getSpeed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGoto_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArActionGoto *arg1 = (ArActionGoto *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionGoto **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGoto_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionGoto *arg1 = (ArActionGoto *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGoto **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionGotoStraight_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionGotoStraight *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  result = (ArActionGotoStraight *)new ArActionGotoStraight((char const *)arg1,arg2);
  *(ArActionGotoStraight **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionGotoStraight_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArActionGotoStraight *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArActionGotoStraight *)new ArActionGotoStraight((char const *)arg1);
  *(ArActionGotoStraight **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionGotoStraight_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionGotoStraight *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionGotoStraight *)new ArActionGotoStraight();
  *(ArActionGotoStraight **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionGotoStraight(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1haveAchievedGoal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  result = (bool)(arg1)->haveAchievedGoal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1cancelGoal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  (arg1)->cancelGoal();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1setGoal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  ArPose arg2 ;
  bool arg3 ;
  bool arg4 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setGoal(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1setGoal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  ArPose arg2 ;
  bool arg3 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setGoal(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1setGoal_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setGoal(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1setGoalRel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4, jboolean jarg5) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->setGoalRel(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1setGoalRel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setGoalRel(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1setGoalRel_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setGoalRel(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1getGoal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  result = (arg1)->getGoal();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1usingEncoderGoal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  result = (bool)(arg1)->usingEncoderGoal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1setEncoderGoal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  ArPose arg2 ;
  bool arg3 ;
  bool arg4 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setEncoderGoal(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1setEncoderGoal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  ArPose arg2 ;
  bool arg3 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setEncoderGoal(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1setEncoderGoal_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setEncoderGoal(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1setEncoderGoalRel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4, jboolean jarg5) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->setEncoderGoalRel(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1setEncoderGoalRel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setEncoderGoalRel(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1setEncoderGoalRel_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setEncoderGoalRel(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1getEncoderGoal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  result = (arg1)->getEncoderGoal();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1setSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSpeed(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1getSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  result = (double)(arg1)->getSpeed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1setCloseDist_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setCloseDist(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1setCloseDist_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  (arg1)->setCloseDist();
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1getCloseDist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  result = (double)(arg1)->getCloseDist();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1getBacking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  result = (bool)(arg1)->getBacking();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGotoStraight_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionGotoStraight *arg1 = (ArActionGotoStraight *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGotoStraight **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArActionGroup *)new ArActionGroup(arg1);
  *(ArActionGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionGroup *arg1 = (ArActionGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionGroup **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroup_1addAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArActionGroup *arg1 = (ArActionGroup *) 0 ;
  ArAction *arg2 = (ArAction *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionGroup **)&jarg1; 
  arg2 = *(ArAction **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addAction(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroup_1remAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArActionGroup *arg1 = (ArActionGroup *) 0 ;
  ArAction *arg2 = (ArAction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionGroup **)&jarg1; 
  arg2 = *(ArAction **)&jarg2; 
  (arg1)->remAction(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroup_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionGroup *arg1 = (ArActionGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroup **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroup_1activateExclusive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionGroup *arg1 = (ArActionGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroup **)&jarg1; 
  (arg1)->activateExclusive();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroup_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionGroup *arg1 = (ArActionGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroup **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroup_1removeActions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionGroup *arg1 = (ArActionGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroup **)&jarg1; 
  (arg1)->removeActions();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroup_1deleteActions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionGroup *arg1 = (ArActionGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroup **)&jarg1; 
  (arg1)->deleteActions();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroup_1getActionList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionGroup *arg1 = (ArActionGroup *) 0 ;
  std::list< ArAction * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroup **)&jarg1; 
  result = (std::list< ArAction * > *)(arg1)->getActionList();
  *(std::list< ArAction * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionGroupInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionGroupInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArActionGroupInput *)new ArActionGroupInput(arg1);
  *(ArActionGroupInput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionGroupInput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionGroupInput *arg1 = (ArActionGroupInput *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionGroupInput **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupInput_1setVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionGroupInput *arg1 = (ArActionGroupInput *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroupInput **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setVel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupInput_1setRotVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionGroupInput *arg1 = (ArActionGroupInput *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroupInput **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRotVel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupInput_1setHeading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionGroupInput *arg1 = (ArActionGroupInput *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroupInput **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setHeading(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupInput_1deltaHeadingFromCurrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionGroupInput *arg1 = (ArActionGroupInput *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroupInput **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->deltaHeadingFromCurrent(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupInput_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionGroupInput *arg1 = (ArActionGroupInput *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroupInput **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupInput_1getActionInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionGroupInput *arg1 = (ArActionGroupInput *) 0 ;
  ArActionInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroupInput **)&jarg1; 
  result = (ArActionInput *)(arg1)->getActionInput();
  *(ArActionInput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionGroupStop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionGroupStop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArActionGroupStop *)new ArActionGroupStop(arg1);
  *(ArActionGroupStop **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionGroupStop(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionGroupStop *arg1 = (ArActionGroupStop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionGroupStop **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupStop_1getActionStop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionGroupStop *arg1 = (ArActionGroupStop *) 0 ;
  ArActionStop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroupStop **)&jarg1; 
  result = (ArActionStop *)(arg1)->getActionStop();
  *(ArActionStop **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupStop_1myActionStop_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArActionGroupStop *arg1 = (ArActionGroupStop *) 0 ;
  ArActionStop *arg2 = (ArActionStop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionGroupStop **)&jarg1; 
  arg2 = *(ArActionStop **)&jarg2; 
  if (arg1) (arg1)->myActionStop = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupStop_1myActionStop_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionGroupStop *arg1 = (ArActionGroupStop *) 0 ;
  ArActionStop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroupStop **)&jarg1; 
  result = (ArActionStop *) ((arg1)->myActionStop);
  *(ArActionStop **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionGroupTeleop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionGroupTeleop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArActionGroupTeleop *)new ArActionGroupTeleop(arg1);
  *(ArActionGroupTeleop **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionGroupTeleop(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionGroupTeleop *arg1 = (ArActionGroupTeleop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionGroupTeleop **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupTeleop_1setThrottleParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  ArActionGroupTeleop *arg1 = (ArActionGroupTeleop *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroupTeleop **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setThrottleParams(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionGroupUnguardedTeleop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionGroupUnguardedTeleop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArActionGroupUnguardedTeleop *)new ArActionGroupUnguardedTeleop(arg1);
  *(ArActionGroupUnguardedTeleop **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionGroupUnguardedTeleop(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionGroupUnguardedTeleop *arg1 = (ArActionGroupUnguardedTeleop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionGroupUnguardedTeleop **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupUnguardedTeleop_1setThrottleParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  ArActionGroupUnguardedTeleop *arg1 = (ArActionGroupUnguardedTeleop *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroupUnguardedTeleop **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setThrottleParams(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionGroupWander_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  ArActionGroupWander *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (ArActionGroupWander *)new ArActionGroupWander(arg1,arg2,arg3,arg4,arg5);
  *(ArActionGroupWander **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionGroupWander_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  ArActionGroupWander *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (ArActionGroupWander *)new ArActionGroupWander(arg1,arg2,arg3,arg4);
  *(ArActionGroupWander **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionGroupWander_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  int arg3 ;
  ArActionGroupWander *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (ArActionGroupWander *)new ArActionGroupWander(arg1,arg2,arg3);
  *(ArActionGroupWander **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionGroupWander_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  ArActionGroupWander *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ArActionGroupWander *)new ArActionGroupWander(arg1,arg2);
  *(ArActionGroupWander **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionGroupWander_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionGroupWander *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArActionGroupWander *)new ArActionGroupWander(arg1);
  *(ArActionGroupWander **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionGroupWander(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionGroupWander *arg1 = (ArActionGroupWander *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionGroupWander **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionGroupColorFollow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArACTS_1_2 *arg2 = (ArACTS_1_2 *) 0 ;
  ArPTZ *arg3 = (ArPTZ *) 0 ;
  ArActionGroupColorFollow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArACTS_1_2 **)&jarg2; 
  arg3 = *(ArPTZ **)&jarg3; 
  result = (ArActionGroupColorFollow *)new ArActionGroupColorFollow(arg1,arg2,arg3);
  *(ArActionGroupColorFollow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionGroupColorFollow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionGroupColorFollow *arg1 = (ArActionGroupColorFollow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionGroupColorFollow **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupColorFollow_1setCamera(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArActionGroupColorFollow *arg1 = (ArActionGroupColorFollow *) 0 ;
  ArPTZ *arg2 = (ArPTZ *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionGroupColorFollow **)&jarg1; 
  arg2 = *(ArPTZ **)&jarg2; 
  (arg1)->setCamera(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupColorFollow_1setChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArActionGroupColorFollow *arg1 = (ArActionGroupColorFollow *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroupColorFollow **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setChannel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupColorFollow_1startMovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionGroupColorFollow *arg1 = (ArActionGroupColorFollow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroupColorFollow **)&jarg1; 
  (arg1)->startMovement();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupColorFollow_1stopMovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionGroupColorFollow *arg1 = (ArActionGroupColorFollow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroupColorFollow **)&jarg1; 
  (arg1)->stopMovement();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupColorFollow_1setAcquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArActionGroupColorFollow *arg1 = (ArActionGroupColorFollow *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroupColorFollow **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAcquire(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupColorFollow_1getChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArActionGroupColorFollow *arg1 = (ArActionGroupColorFollow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroupColorFollow **)&jarg1; 
  result = (int)(arg1)->getChannel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupColorFollow_1getAcquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionGroupColorFollow *arg1 = (ArActionGroupColorFollow *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroupColorFollow **)&jarg1; 
  result = (bool)(arg1)->getAcquire();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupColorFollow_1getMovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionGroupColorFollow *arg1 = (ArActionGroupColorFollow *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroupColorFollow **)&jarg1; 
  result = (bool)(arg1)->getMovement();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupColorFollow_1getBlob(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionGroupColorFollow *arg1 = (ArActionGroupColorFollow *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroupColorFollow **)&jarg1; 
  result = (bool)(arg1)->getBlob();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionGroupRatioDrive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionGroupRatioDrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArActionGroupRatioDrive *)new ArActionGroupRatioDrive(arg1);
  *(ArActionGroupRatioDrive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionGroupRatioDrive(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionGroupRatioDrive *arg1 = (ArActionGroupRatioDrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionGroupRatioDrive **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupRatioDrive_1getActionRatioInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionGroupRatioDrive *arg1 = (ArActionGroupRatioDrive *) 0 ;
  ArActionRatioInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroupRatioDrive **)&jarg1; 
  result = (ArActionRatioInput *)(arg1)->getActionRatioInput();
  *(ArActionRatioInput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupRatioDrive_1addToConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArActionGroupRatioDrive *arg1 = (ArActionGroupRatioDrive *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionGroupRatioDrive **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->addToConfig(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionGroupRatioDriveUnsafe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionGroupRatioDriveUnsafe *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArActionGroupRatioDriveUnsafe *)new ArActionGroupRatioDriveUnsafe(arg1);
  *(ArActionGroupRatioDriveUnsafe **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionGroupRatioDriveUnsafe(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionGroupRatioDriveUnsafe *arg1 = (ArActionGroupRatioDriveUnsafe *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionGroupRatioDriveUnsafe **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupRatioDriveUnsafe_1getActionRatioInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionGroupRatioDriveUnsafe *arg1 = (ArActionGroupRatioDriveUnsafe *) 0 ;
  ArActionRatioInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionGroupRatioDriveUnsafe **)&jarg1; 
  result = (ArActionRatioInput *)(arg1)->getActionRatioInput();
  *(ArActionRatioInput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionGroupRatioDriveUnsafe_1addToConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArActionGroupRatioDriveUnsafe *arg1 = (ArActionGroupRatioDriveUnsafe *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionGroupRatioDriveUnsafe **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->addToConfig(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionIRs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jint jarg3, jint jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  ArActionIRs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (ArActionIRs *)new ArActionIRs((char const *)arg1,arg2,arg3,arg4,arg5);
  *(ArActionIRs **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionIRs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  ArActionIRs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (ArActionIRs *)new ArActionIRs((char const *)arg1,arg2,arg3,arg4);
  *(ArActionIRs **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionIRs_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jint jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int arg3 ;
  ArActionIRs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  result = (ArActionIRs *)new ArActionIRs((char const *)arg1,arg2,arg3);
  *(ArActionIRs **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionIRs_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionIRs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  result = (ArActionIRs *)new ArActionIRs((char const *)arg1,arg2);
  *(ArActionIRs **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionIRs_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArActionIRs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArActionIRs *)new ArActionIRs((char const *)arg1);
  *(ArActionIRs **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionIRs_1_1SWIG_15(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionIRs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionIRs *)new ArActionIRs();
  *(ArActionIRs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionIRs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionIRs *arg1 = (ArActionIRs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionIRs **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionIRs_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArActionIRs *arg1 = (ArActionIRs *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionIRs **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionIRs_1setRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArActionIRs *arg1 = (ArActionIRs *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionIRs **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionIRs_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionIRs *arg1 = (ArActionIRs *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionIRs **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionInput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArActionInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArActionInput *)new ArActionInput((char const *)arg1);
  *(ArActionInput **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionInput_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionInput *)new ArActionInput();
  *(ArActionInput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionInput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionInput *arg1 = (ArActionInput *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionInput **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionInput_1setVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionInput *arg1 = (ArActionInput *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionInput **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setVel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionInput_1deltaHeadingFromCurrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionInput *arg1 = (ArActionInput *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionInput **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->deltaHeadingFromCurrent(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionInput_1setRotVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionInput *arg1 = (ArActionInput *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionInput **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRotVel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionInput_1setHeading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionInput *arg1 = (ArActionInput *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionInput **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setHeading(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionInput_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionInput *arg1 = (ArActionInput *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionInput **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionInput_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArActionInput *arg1 = (ArActionInput *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionInput **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionInput_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionInput *arg1 = (ArActionInput *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionInput **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionJoydrive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3, jboolean jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  bool arg5 ;
  ArActionJoydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (ArActionJoydrive *)new ArActionJoydrive((char const *)arg1,arg2,arg3,arg4,arg5);
  *(ArActionJoydrive **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionJoydrive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  ArActionJoydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArActionJoydrive *)new ArActionJoydrive((char const *)arg1,arg2,arg3,arg4);
  *(ArActionJoydrive **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionJoydrive_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  ArActionJoydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArActionJoydrive *)new ArActionJoydrive((char const *)arg1,arg2,arg3);
  *(ArActionJoydrive **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionJoydrive_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionJoydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  result = (ArActionJoydrive *)new ArActionJoydrive((char const *)arg1,arg2);
  *(ArActionJoydrive **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionJoydrive_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArActionJoydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArActionJoydrive *)new ArActionJoydrive((char const *)arg1);
  *(ArActionJoydrive **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionJoydrive_1_1SWIG_15(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionJoydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionJoydrive *)new ArActionJoydrive();
  *(ArActionJoydrive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionJoydrive(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionJoydrive *arg1 = (ArActionJoydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionJoydrive **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionJoydrive_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArActionJoydrive *arg1 = (ArActionJoydrive *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionJoydrive **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionJoydrive_1joystickInited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionJoydrive *arg1 = (ArActionJoydrive *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionJoydrive **)&jarg1; 
  result = (bool)(arg1)->joystickInited();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionJoydrive_1setSpeeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionJoydrive *arg1 = (ArActionJoydrive *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionJoydrive **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setSpeeds(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionJoydrive_1setStopIfNoButtonPressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArActionJoydrive *arg1 = (ArActionJoydrive *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionJoydrive **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStopIfNoButtonPressed(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionJoydrive_1getStopIfNoButtonPressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionJoydrive *arg1 = (ArActionJoydrive *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionJoydrive **)&jarg1; 
  result = (bool)(arg1)->getStopIfNoButtonPressed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionJoydrive_1setThrottleParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionJoydrive *arg1 = (ArActionJoydrive *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionJoydrive **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setThrottleParams(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionJoydrive_1setUseOSCal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArActionJoydrive *arg1 = (ArActionJoydrive *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionJoydrive **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseOSCal(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionJoydrive_1getUseOSCal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionJoydrive *arg1 = (ArActionJoydrive *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionJoydrive **)&jarg1; 
  result = (bool)(arg1)->getUseOSCal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionJoydrive_1getJoyHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionJoydrive *arg1 = (ArActionJoydrive *) 0 ;
  ArJoyHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionJoydrive **)&jarg1; 
  result = (ArJoyHandler *)(arg1)->getJoyHandler();
  *(ArJoyHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionJoydrive_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionJoydrive *arg1 = (ArActionJoydrive *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionJoydrive **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionKeydrive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArActionKeydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (ArActionKeydrive *)new ArActionKeydrive((char const *)arg1,arg2,arg3,arg4,arg5);
  *(ArActionKeydrive **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionKeydrive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  ArActionKeydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArActionKeydrive *)new ArActionKeydrive((char const *)arg1,arg2,arg3,arg4);
  *(ArActionKeydrive **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionKeydrive_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  ArActionKeydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArActionKeydrive *)new ArActionKeydrive((char const *)arg1,arg2,arg3);
  *(ArActionKeydrive **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionKeydrive_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionKeydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  result = (ArActionKeydrive *)new ArActionKeydrive((char const *)arg1,arg2);
  *(ArActionKeydrive **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionKeydrive_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArActionKeydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArActionKeydrive *)new ArActionKeydrive((char const *)arg1);
  *(ArActionKeydrive **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionKeydrive_1_1SWIG_15(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionKeydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionKeydrive *)new ArActionKeydrive();
  *(ArActionKeydrive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionKeydrive(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionKeydrive **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionKeydrive_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionKeydrive **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionKeydrive_1setSpeeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionKeydrive **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setSpeeds(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionKeydrive_1setIncrements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionKeydrive **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setIncrements(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionKeydrive_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionKeydrive **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionKeydrive_1setRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionKeydrive **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionKeydrive_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionKeydrive **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionKeydrive_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionKeydrive **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionKeydrive_1takeKeys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionKeydrive **)&jarg1; 
  (arg1)->takeKeys();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionKeydrive_1giveUpKeys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionKeydrive **)&jarg1; 
  (arg1)->giveUpKeys();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionKeydrive_1up(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionKeydrive **)&jarg1; 
  (arg1)->up();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionKeydrive_1down(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionKeydrive **)&jarg1; 
  (arg1)->down();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionKeydrive_1left(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionKeydrive **)&jarg1; 
  (arg1)->left();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionKeydrive_1right(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionKeydrive **)&jarg1; 
  (arg1)->right();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionKeydrive_1space(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionKeydrive *arg1 = (ArActionKeydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionKeydrive **)&jarg1; 
  (arg1)->space();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionLimiterBackwards_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  bool arg6 ;
  ArActionLimiterBackwards *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (ArActionLimiterBackwards *)new ArActionLimiterBackwards((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  *(ArActionLimiterBackwards **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionLimiterBackwards_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArActionLimiterBackwards *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (ArActionLimiterBackwards *)new ArActionLimiterBackwards((char const *)arg1,arg2,arg3,arg4,arg5);
  *(ArActionLimiterBackwards **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionLimiterBackwards_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  ArActionLimiterBackwards *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArActionLimiterBackwards *)new ArActionLimiterBackwards((char const *)arg1,arg2,arg3,arg4);
  *(ArActionLimiterBackwards **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionLimiterBackwards_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  ArActionLimiterBackwards *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArActionLimiterBackwards *)new ArActionLimiterBackwards((char const *)arg1,arg2,arg3);
  *(ArActionLimiterBackwards **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionLimiterBackwards_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionLimiterBackwards *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  result = (ArActionLimiterBackwards *)new ArActionLimiterBackwards((char const *)arg1,arg2);
  *(ArActionLimiterBackwards **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionLimiterBackwards_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArActionLimiterBackwards *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArActionLimiterBackwards *)new ArActionLimiterBackwards((char const *)arg1);
  *(ArActionLimiterBackwards **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionLimiterBackwards_1_1SWIG_16(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionLimiterBackwards *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionLimiterBackwards *)new ArActionLimiterBackwards();
  *(ArActionLimiterBackwards **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionLimiterBackwards(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionLimiterBackwards *arg1 = (ArActionLimiterBackwards *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionLimiterBackwards **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionLimiterBackwards_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArActionLimiterBackwards *arg1 = (ArActionLimiterBackwards *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionLimiterBackwards **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionLimiterBackwards_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionLimiterBackwards *arg1 = (ArActionLimiterBackwards *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionLimiterBackwards **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionLimiterForwards_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArActionLimiterForwards *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (ArActionLimiterForwards *)new ArActionLimiterForwards((char const *)arg1,arg2,arg3,arg4,arg5);
  *(ArActionLimiterForwards **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionLimiterForwards_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  ArActionLimiterForwards *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArActionLimiterForwards *)new ArActionLimiterForwards((char const *)arg1,arg2,arg3,arg4);
  *(ArActionLimiterForwards **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionLimiterForwards_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  ArActionLimiterForwards *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArActionLimiterForwards *)new ArActionLimiterForwards((char const *)arg1,arg2,arg3);
  *(ArActionLimiterForwards **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionLimiterForwards_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionLimiterForwards *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  result = (ArActionLimiterForwards *)new ArActionLimiterForwards((char const *)arg1,arg2);
  *(ArActionLimiterForwards **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionLimiterForwards_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArActionLimiterForwards *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArActionLimiterForwards *)new ArActionLimiterForwards((char const *)arg1);
  *(ArActionLimiterForwards **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionLimiterForwards_1_1SWIG_15(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionLimiterForwards *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionLimiterForwards *)new ArActionLimiterForwards();
  *(ArActionLimiterForwards **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionLimiterForwards(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionLimiterForwards *arg1 = (ArActionLimiterForwards *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionLimiterForwards **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionLimiterForwards_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArActionLimiterForwards *arg1 = (ArActionLimiterForwards *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionLimiterForwards **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionLimiterForwards_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionLimiterForwards *arg1 = (ArActionLimiterForwards *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionLimiterForwards **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionLimiterForwards_1setParameters_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  ArActionLimiterForwards *arg1 = (ArActionLimiterForwards *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionLimiterForwards **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionLimiterForwards_1setParameters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  ArActionLimiterForwards *arg1 = (ArActionLimiterForwards *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionLimiterForwards **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setParameters(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionLimiterForwards_1setParameters_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionLimiterForwards *arg1 = (ArActionLimiterForwards *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionLimiterForwards **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameters(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionLimiterForwards_1setParameters_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionLimiterForwards *arg1 = (ArActionLimiterForwards *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionLimiterForwards **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setParameters(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionLimiterForwards_1setParameters_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionLimiterForwards *arg1 = (ArActionLimiterForwards *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionLimiterForwards **)&jarg1; 
  (arg1)->setParameters();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionLimiterTableSensor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArActionLimiterTableSensor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArActionLimiterTableSensor *)new ArActionLimiterTableSensor((char const *)arg1);
  *(ArActionLimiterTableSensor **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionLimiterTableSensor_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionLimiterTableSensor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionLimiterTableSensor *)new ArActionLimiterTableSensor();
  *(ArActionLimiterTableSensor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionLimiterTableSensor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionLimiterTableSensor *arg1 = (ArActionLimiterTableSensor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionLimiterTableSensor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionLimiterTableSensor_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArActionLimiterTableSensor *arg1 = (ArActionLimiterTableSensor *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionLimiterTableSensor **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionLimiterTableSensor_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionLimiterTableSensor *arg1 = (ArActionLimiterTableSensor *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionLimiterTableSensor **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionMovementParameters_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool arg3 ;
  ArActionMovementParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (ArActionMovementParameters *)new ArActionMovementParameters((char const *)arg1,arg2,arg3);
  *(ArActionMovementParameters **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionMovementParameters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ArActionMovementParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  result = (ArActionMovementParameters *)new ArActionMovementParameters((char const *)arg1,arg2);
  *(ArActionMovementParameters **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionMovementParameters_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArActionMovementParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArActionMovementParameters *)new ArActionMovementParameters((char const *)arg1);
  *(ArActionMovementParameters **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionMovementParameters_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionMovementParameters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionMovementParameters *)new ArActionMovementParameters();
  *(ArActionMovementParameters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionMovementParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionMovementParameters **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionMovementParameters_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionMovementParameters **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionMovementParameters_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionMovementParameters **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionMovementParameters_1isEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionMovementParameters **)&jarg1; 
  result = (bool)(arg1)->isEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionMovementParameters_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionMovementParameters **)&jarg1; 
  (arg1)->enable();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionMovementParameters_1enableOnceFromSector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  ArMapObject *arg2 = (ArMapObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionMovementParameters **)&jarg1; 
  arg2 = *(ArMapObject **)&jarg2; 
  (arg1)->enableOnceFromSector(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionMovementParameters_1disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionMovementParameters **)&jarg1; 
  (arg1)->disable();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionMovementParameters_1setParameters_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9, jdouble jarg10, jdouble jarg11) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionMovementParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  arg11 = (double)jarg11; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionMovementParameters_1setParameters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9, jdouble jarg10) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionMovementParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionMovementParameters_1setParameters_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionMovementParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionMovementParameters_1setParameters_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionMovementParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionMovementParameters_1setParameters_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionMovementParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionMovementParameters_1setParameters_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionMovementParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionMovementParameters_1setParameters_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionMovementParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionMovementParameters_1setParameters_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionMovementParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setParameters(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionMovementParameters_1setParameters_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionMovementParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameters(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionMovementParameters_1setParameters_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionMovementParameters **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setParameters(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionMovementParameters_1setParameters_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionMovementParameters **)&jarg1; 
  (arg1)->setParameters();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionMovementParameters_1addToConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionMovementParameters **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->addToConfig(arg2,(char const *)arg3,(char const *)arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionMovementParameters_1addToConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArActionMovementParameters *arg1 = (ArActionMovementParameters *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionMovementParameters **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->addToConfig(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionRatioInput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArActionRatioInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArActionRatioInput *)new ArActionRatioInput((char const *)arg1);
  *(ArActionRatioInput **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionRatioInput_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionRatioInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionRatioInput *)new ArActionRatioInput();
  *(ArActionRatioInput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionRatioInput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1setRatios_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->setRatios(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1setRatios_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setRatios(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1setTransRatio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTransRatio(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1setRotRatio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRotRatio(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1setLatRatio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLatRatio(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1setThrottleRatio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setThrottleRatio(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1getTransRatio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  result = (double)(arg1)->getTransRatio();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1getRotRatio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  result = (double)(arg1)->getRotRatio();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1getThrottleRatio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  result = (double)(arg1)->getThrottleRatio();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1addFireCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  int arg2 ;
  ArFunctor *arg3 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(ArFunctor **)&jarg3; 
  (arg1)->addFireCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1remFireCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remFireCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1addActivateCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addActivateCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1addActivateCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addActivateCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1remActivateCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remActivateCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1addDeactivateCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addDeactivateCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1addDeactivateCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addDeactivateCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1remDeactivateCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remDeactivateCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1setParameters_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1setParameters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1setParameters_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1setParameters_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1addToConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->addToConfig(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRatioInput_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionRatioInput *arg1 = (ArActionRatioInput *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionRatioInput **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionRobotJoydrive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ArActionRobotJoydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  result = (ArActionRobotJoydrive *)new ArActionRobotJoydrive((char const *)arg1,arg2);
  *(ArActionRobotJoydrive **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionRobotJoydrive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArActionRobotJoydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArActionRobotJoydrive *)new ArActionRobotJoydrive((char const *)arg1);
  *(ArActionRobotJoydrive **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionRobotJoydrive_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionRobotJoydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionRobotJoydrive *)new ArActionRobotJoydrive();
  *(ArActionRobotJoydrive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionRobotJoydrive(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionRobotJoydrive *arg1 = (ArActionRobotJoydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionRobotJoydrive **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRobotJoydrive_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArActionRobotJoydrive *arg1 = (ArActionRobotJoydrive *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionRobotJoydrive **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRobotJoydrive_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionRobotJoydrive *arg1 = (ArActionRobotJoydrive *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionRobotJoydrive **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionRobotJoydrive_1setRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArActionRobotJoydrive *arg1 = (ArActionRobotJoydrive *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionRobotJoydrive **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionStallRecover_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jint jarg3, jdouble jarg4, jdouble jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  bool arg6 ;
  ArActionStallRecover *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (ArActionStallRecover *)new ArActionStallRecover((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  *(ArActionStallRecover **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionStallRecover_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jint jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  ArActionStallRecover *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (ArActionStallRecover *)new ArActionStallRecover((char const *)arg1,arg2,arg3,arg4,arg5);
  *(ArActionStallRecover **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionStallRecover_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jint jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int arg3 ;
  double arg4 ;
  ArActionStallRecover *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArActionStallRecover *)new ArActionStallRecover((char const *)arg1,arg2,arg3,arg4);
  *(ArActionStallRecover **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionStallRecover_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jint jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int arg3 ;
  ArActionStallRecover *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  result = (ArActionStallRecover *)new ArActionStallRecover((char const *)arg1,arg2,arg3);
  *(ArActionStallRecover **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionStallRecover_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionStallRecover *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  result = (ArActionStallRecover *)new ArActionStallRecover((char const *)arg1,arg2);
  *(ArActionStallRecover **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionStallRecover_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArActionStallRecover *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArActionStallRecover *)new ArActionStallRecover((char const *)arg1);
  *(ArActionStallRecover **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionStallRecover_1_1SWIG_16(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionStallRecover *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionStallRecover *)new ArActionStallRecover();
  *(ArActionStallRecover **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionStallRecover(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionStallRecover *arg1 = (ArActionStallRecover *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionStallRecover **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionStallRecover_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArActionStallRecover *arg1 = (ArActionStallRecover *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionStallRecover **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionStallRecover_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionStallRecover *arg1 = (ArActionStallRecover *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionStallRecover **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionStallRecover_1addToConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4) {
  ArActionStallRecover *arg1 = (ArActionStallRecover *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  ArPriority::Priority arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionStallRecover **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (ArPriority::Priority)jarg4; 
  (arg1)->addToConfig(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionStallRecover_1addToConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArActionStallRecover *arg1 = (ArActionStallRecover *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionStallRecover **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->addToConfig(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionStallRecover_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionStallRecover *arg1 = (ArActionStallRecover *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionStallRecover **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionStop_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArActionStop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArActionStop *)new ArActionStop((char const *)arg1);
  *(ArActionStop **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionStop_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionStop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionStop *)new ArActionStop();
  *(ArActionStop **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionStop(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionStop *arg1 = (ArActionStop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionStop **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionStop_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArActionStop *arg1 = (ArActionStop *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionStop **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionStop_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionStop *arg1 = (ArActionStop *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionStop **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionTriangleDriveTo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  ArActionTriangleDriveTo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (ArActionTriangleDriveTo *)new ArActionTriangleDriveTo((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  *(ArActionTriangleDriveTo **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionTriangleDriveTo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArActionTriangleDriveTo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (ArActionTriangleDriveTo *)new ArActionTriangleDriveTo((char const *)arg1,arg2,arg3,arg4,arg5);
  *(ArActionTriangleDriveTo **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionTriangleDriveTo_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  ArActionTriangleDriveTo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArActionTriangleDriveTo *)new ArActionTriangleDriveTo((char const *)arg1,arg2,arg3,arg4);
  *(ArActionTriangleDriveTo **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionTriangleDriveTo_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  ArActionTriangleDriveTo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArActionTriangleDriveTo *)new ArActionTriangleDriveTo((char const *)arg1,arg2,arg3);
  *(ArActionTriangleDriveTo **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionTriangleDriveTo_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionTriangleDriveTo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  result = (ArActionTriangleDriveTo *)new ArActionTriangleDriveTo((char const *)arg1,arg2);
  *(ArActionTriangleDriveTo **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionTriangleDriveTo_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArActionTriangleDriveTo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArActionTriangleDriveTo *)new ArActionTriangleDriveTo((char const *)arg1);
  *(ArActionTriangleDriveTo **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionTriangleDriveTo_1_1SWIG_16(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionTriangleDriveTo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionTriangleDriveTo *)new ArActionTriangleDriveTo();
  *(ArActionTriangleDriveTo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionTriangleDriveTo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setAcquire_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAcquire(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setAcquire_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  (arg1)->setAcquire();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1getAcquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  result = (bool)(arg1)->getAcquire();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setFinalDistFromVertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setFinalDistFromVertex(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1getFinalDistFromVertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  result = (double)(arg1)->getFinalDistFromVertex();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setTriangleParams_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setTriangleParams(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setTriangleParams_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setTriangleParams(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setTriangleParams_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTriangleParams(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setTriangleParams_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  (arg1)->setTriangleParams();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setParameters_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setParameters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setParameters_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setParameters(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setParameters_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameters(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setParameters_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setParameters(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setParameters_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  (arg1)->setParameters();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1getAdjustVertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  result = (bool)(arg1)->getAdjustVertex();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setAdjustVertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAdjustVertex(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setVertexOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jdouble jarg4) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setVertexOffset(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setUseLegacyVertexOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseLegacyVertexOffset(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1getUseLegacyVertexOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  result = (bool)(arg1)->getUseLegacyVertexOffset();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1getGotoVertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  result = (bool)(arg1)->getGotoVertex();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setGotoVertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setGotoVertex(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setIgnoreTriangleDist_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jboolean jarg3) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setIgnoreTriangleDist(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setIgnoreTriangleDist_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setIgnoreTriangleDist(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setIgnoreTriangleDist_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  (arg1)->setIgnoreTriangleDist();
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1getIgnoreTriangleDist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  result = (double)(arg1)->getIgnoreTriangleDist();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1getUseIgnoreInGotoVertexMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  result = (bool)(arg1)->getUseIgnoreInGotoVertexMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setVertexUnseenStopMSecs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setVertexUnseenStopMSecs(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setVertexUnseenStopMSecs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  (arg1)->setVertexUnseenStopMSecs();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1getVertexUnseenStopMSecs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  result = (int)(arg1)->getVertexUnseenStopMSecs();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setMaxDistBetweenLinePoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaxDistBetweenLinePoints(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setMaxDistBetweenLinePoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  (arg1)->setMaxDistBetweenLinePoints();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setMaxLateralDist_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaxLateralDist(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setMaxLateralDist_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  (arg1)->setMaxLateralDist();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setMaxAngleMisalignment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaxAngleMisalignment(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setMaxAngleMisalignment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  (arg1)->setMaxAngleMisalignment();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  ArActionTriangleDriveTo::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  result = (ArActionTriangleDriveTo::State)(arg1)->getState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1getVertexSeen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  result = (bool)(arg1)->getVertexSeen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setLineFinder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  ArLineFinder *arg2 = (ArLineFinder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  arg2 = *(ArLineFinder **)&jarg2; 
  (arg1)->setLineFinder(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1getLineFinder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  ArLineFinder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  result = (ArLineFinder *)(arg1)->getLineFinder();
  *(ArLineFinder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setLogging_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLogging(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setLogging_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  result = (bool)(arg1)->setLogging();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1setRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTriangleDriveTo_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionTriangleDriveTo *arg1 = (ArActionTriangleDriveTo *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTriangleDriveTo **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionTurn_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  ArActionTurn *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArActionTurn *)new ArActionTurn((char const *)arg1,arg2,arg3,arg4);
  *(ArActionTurn **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionTurn_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  ArActionTurn *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArActionTurn *)new ArActionTurn((char const *)arg1,arg2,arg3);
  *(ArActionTurn **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionTurn_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArActionTurn *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  result = (ArActionTurn *)new ArActionTurn((char const *)arg1,arg2);
  *(ArActionTurn **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionTurn_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArActionTurn *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArActionTurn *)new ArActionTurn((char const *)arg1);
  *(ArActionTurn **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArActionTurn_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArActionTurn *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArActionTurn *)new ArActionTurn();
  *(ArActionTurn **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArActionTurn(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArActionTurn *arg1 = (ArActionTurn *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArActionTurn **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTurn_1fire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArActionTurn *arg1 = (ArActionTurn *) 0 ;
  ArActionDesired arg2 ;
  ArActionDesired *argp2 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArActionTurn **)&jarg1; 
  argp2 = *(ArActionDesired **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArActionDesired");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArActionDesired *)(arg1)->fire(arg2);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArActionTurn_1getDesired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArActionTurn *arg1 = (ArActionTurn *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArActionTurn **)&jarg1; 
  result = (ArActionDesired *)(arg1)->getDesired();
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArAnalogGyro(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArAnalogGyro *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArAnalogGyro *)new ArAnalogGyro(arg1);
  *(ArAnalogGyro **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArAnalogGyro(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArAnalogGyro **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAnalogGyro_1isActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAnalogGyro **)&jarg1; 
  result = (bool)(arg1)->isActive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAnalogGyro_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAnalogGyro **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAnalogGyro_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAnalogGyro **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAnalogGyro_1hasGyroOnlyMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAnalogGyro **)&jarg1; 
  result = (bool)(arg1)->hasGyroOnlyMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAnalogGyro_1isGyroOnlyActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAnalogGyro **)&jarg1; 
  result = (bool)(arg1)->isGyroOnlyActive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAnalogGyro_1activateGyroOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAnalogGyro **)&jarg1; 
  (arg1)->activateGyroOnly();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAnalogGyro_1hasNoInternalData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAnalogGyro **)&jarg1; 
  result = (bool)(arg1)->hasNoInternalData();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAnalogGyro_1haveGottenData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAnalogGyro **)&jarg1; 
  result = (bool)(arg1)->haveGottenData();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAnalogGyro_1getHeading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAnalogGyro **)&jarg1; 
  result = (double)((ArAnalogGyro const *)arg1)->getHeading();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAnalogGyro_1getTemperature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAnalogGyro **)&jarg1; 
  result = (int)((ArAnalogGyro const *)arg1)->getTemperature();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAnalogGyro_1setFilterModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAnalogGyro **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->setFilterModel(arg2,arg3,arg4,arg5);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAnalogGyro_1getPacCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAnalogGyro **)&jarg1; 
  result = (int)(arg1)->getPacCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAnalogGyro_1getAverage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAnalogGyro **)&jarg1; 
  result = (double)((ArAnalogGyro const *)arg1)->getAverage();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAnalogGyro_1getAverageTaken(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAnalogGyro **)&jarg1; 
  result = ((ArAnalogGyro const *)arg1)->getAverageTaken();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAnalogGyro_1getScalingFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAnalogGyro **)&jarg1; 
  result = (double)((ArAnalogGyro const *)arg1)->getScalingFactor();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAnalogGyro_1setScalingFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAnalogGyro **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setScalingFactor(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAnalogGyro_1handleGyroPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArAnalogGyro **)&jarg1; 
  arg2 = *(ArRobotPacket **)&jarg2; 
  result = (bool)(arg1)->handleGyroPacket(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAnalogGyro_1encoderCorrect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  ArPoseWithTime arg2 ;
  ArPoseWithTime *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArAnalogGyro **)&jarg1; 
  argp2 = *(ArPoseWithTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPoseWithTime");
    return 0;
  }
  arg2 = *argp2; 
  result = (double)(arg1)->encoderCorrect(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAnalogGyro_1stabilizingCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAnalogGyro **)&jarg1; 
  (arg1)->stabilizingCallback();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAnalogGyro_1userTaskCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAnalogGyro **)&jarg1; 
  (arg1)->userTaskCallback();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArAnalogGyro_1setLogAnomalies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArAnalogGyro *arg1 = (ArAnalogGyro *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArAnalogGyro **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLogAnomalies(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1LAST_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArArg::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (ArArg::Type)ArArg::LAST_TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1TYPE_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArArg::TYPE_COUNT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArg_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArArg *)new ArArg();
  *(ArArg **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  ArArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (ArArg *)new ArArg((char const *)arg1,arg2,(char const *)arg3,arg4,arg5);
  *(ArArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArg_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ArArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (ArArg *)new ArArg((char const *)arg1,arg2,(char const *)arg3,arg4);
  *(ArArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArg_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  ArArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArArg *)new ArArg((char const *)arg1,arg2,(char const *)arg3);
  *(ArArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArg_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  ArArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  result = (ArArg *)new ArArg((char const *)arg1,arg2);
  *(ArArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArg_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  double arg5 ;
  ArArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(double **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (ArArg *)new ArArg((char const *)arg1,arg2,(char const *)arg3,arg4,arg5);
  *(ArArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArg_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  ArArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(double **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  result = (ArArg *)new ArArg((char const *)arg1,arg2,(char const *)arg3,arg4);
  *(ArArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArg_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  char *arg3 = (char *) 0 ;
  ArArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(double **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArArg *)new ArArg((char const *)arg1,arg2,(char const *)arg3);
  *(ArArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArg_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  ArArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(double **)&jarg2; 
  result = (ArArg *)new ArArg((char const *)arg1,arg2);
  *(ArArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArg_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  char *arg3 = (char *) 0 ;
  ArArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(bool **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArArg *)new ArArg((char const *)arg1,arg2,(char const *)arg3);
  *(ArArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArg_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ArArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(bool **)&jarg2; 
  result = (ArArg *)new ArArg((char const *)arg1,arg2);
  *(ArArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArg_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArPose *arg2 = (ArPose *) 0 ;
  char *arg3 = (char *) 0 ;
  ArArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArPose **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArArg *)new ArArg((char const *)arg1,arg2,(char const *)arg3);
  *(ArArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArg_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArPose *arg2 = (ArPose *) 0 ;
  ArArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArPose **)&jarg2; 
  result = (ArArg *)new ArArg((char const *)arg1,arg2);
  *(ArArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArg_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  ArArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (ArArg *)new ArArg((char const *)arg1,arg2,(char const *)arg3,arg4);
  *(ArArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArg_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArRetFunctor1< bool,ArArgumentBuilder * > *arg2 = (ArRetFunctor1< bool,ArArgumentBuilder * > *) 0 ;
  ArRetFunctor< std::list< ArArgumentBuilder * > const * > *arg3 = (ArRetFunctor< std::list< ArArgumentBuilder * > const * > *) 0 ;
  char *arg4 = (char *) 0 ;
  ArArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArRetFunctor1< bool,ArArgumentBuilder * > **)&jarg2; 
  arg3 = *(ArRetFunctor< std::list< ArArgumentBuilder * > const * > **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (ArArg *)new ArArg((char const *)arg1,arg2,arg3,(char const *)arg4);
  *(ArArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArg_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArArg *)new ArArg((char const *)arg1);
  *(ArArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArg_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArArg *arg1 = 0 ;
  ArArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArg **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArArg const & reference is null");
    return 0;
  } 
  result = (ArArg *)new ArArg((ArArg const &)*arg1);
  *(ArArg **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArArg(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArArg *arg1 = (ArArg *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArArg **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArArg *arg1 = (ArArg *) 0 ;
  ArArg::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArg **)&jarg1; 
  result = (ArArg::Type)((ArArg const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArArg *arg1 = (ArArg *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArg **)&jarg1; 
  result = (char *)((ArArg const *)arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArArg *arg1 = (ArArg *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArg **)&jarg1; 
  result = (char *)((ArArg const *)arg1)->getDescription();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1setInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArArg *arg1 = (ArArg *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArg **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setInt(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1setDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArArg *arg1 = (ArArg *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArg **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setDouble(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1setBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  ArArg *arg1 = (ArArg *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArg **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setBool(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1setPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArArg *arg1 = (ArArg *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArArg **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->setPose(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1setString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArArg *arg1 = (ArArg *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArg **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->setString((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1setArgWithFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArArg *arg1 = (ArArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArArg **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  result = (bool)(arg1)->setArgWithFunctor(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1getInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArArg *arg1 = (ArArg *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArg **)&jarg1; 
  result = (int)((ArArg const *)arg1)->getInt();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1getDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArArg *arg1 = (ArArg *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArg **)&jarg1; 
  result = (double)((ArArg const *)arg1)->getDouble();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1getBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArArg *arg1 = (ArArg *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArg **)&jarg1; 
  result = (bool)((ArArg const *)arg1)->getBool();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1getPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArArg *arg1 = (ArArg *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArg **)&jarg1; 
  result = ((ArArg const *)arg1)->getPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1getString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArArg *arg1 = (ArArg *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArg **)&jarg1; 
  result = (char *)((ArArg const *)arg1)->getString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1getArgsWithFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArArg *arg1 = (ArArg *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArg **)&jarg1; 
  result = (std::list< ArArgumentBuilder * > *)((ArArg const *)arg1)->getArgsWithFunctor();
  *(std::list< ArArgumentBuilder * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1log(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArArg *arg1 = (ArArg *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArg **)&jarg1; 
  ((ArArg const *)arg1)->log();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1getMinInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArArg *arg1 = (ArArg *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArg **)&jarg1; 
  result = (int)((ArArg const *)arg1)->getMinInt();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1getMaxInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArArg *arg1 = (ArArg *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArg **)&jarg1; 
  result = (int)((ArArg const *)arg1)->getMaxInt();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1getMinDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArArg *arg1 = (ArArg *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArg **)&jarg1; 
  result = (double)((ArArg const *)arg1)->getMinDouble();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1getMaxDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArArg *arg1 = (ArArg *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArg **)&jarg1; 
  result = (double)((ArArg const *)arg1)->getMaxDouble();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1getConfigPrioritySet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArArg *arg1 = (ArArg *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArg **)&jarg1; 
  result = (bool)((ArArg const *)arg1)->getConfigPrioritySet();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1getConfigPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArArg *arg1 = (ArArg *) 0 ;
  ArPriority::Priority result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArg **)&jarg1; 
  result = (ArPriority::Priority)((ArArg const *)arg1)->getConfigPriority();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArg_1setConfigPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArArg *arg1 = (ArArg *) 0 ;
  ArPriority::Priority arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArg **)&jarg1; 
  arg2 = (ArPriority::Priority)jarg2; 
  (arg1)->setConfigPriority(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArgumentBuilder_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jchar jarg2, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  size_t arg1 ;
  char arg2 ;
  bool arg3 ;
  bool arg4 ;
  ArArgumentBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (char)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (ArArgumentBuilder *)new ArArgumentBuilder(arg1,arg2,arg3,arg4);
  *(ArArgumentBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArgumentBuilder_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jchar jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  size_t arg1 ;
  char arg2 ;
  bool arg3 ;
  ArArgumentBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (char)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (ArArgumentBuilder *)new ArArgumentBuilder(arg1,arg2,arg3);
  *(ArArgumentBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArgumentBuilder_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jchar jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  char arg2 ;
  ArArgumentBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (char)jarg2; 
  result = (ArArgumentBuilder *)new ArArgumentBuilder(arg1,arg2);
  *(ArArgumentBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArgumentBuilder_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  ArArgumentBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (ArArgumentBuilder *)new ArArgumentBuilder(arg1);
  *(ArArgumentBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArgumentBuilder_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArArgumentBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArArgumentBuilder *)new ArArgumentBuilder();
  *(ArArgumentBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArgumentBuilder_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArArgumentBuilder *arg1 = 0 ;
  ArArgumentBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArArgumentBuilder const & reference is null");
    return 0;
  } 
  result = (ArArgumentBuilder *)new ArArgumentBuilder((ArArgumentBuilder const &)*arg1);
  *(ArArgumentBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArArgumentBuilder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1addPlain_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  (arg1)->addPlain((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1addPlain_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->addPlain((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1addPlainAsIs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  (arg1)->addPlainAsIs((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1addPlainAsIs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->addPlainAsIs((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1addStrings_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->addStrings(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1addStrings_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addStrings(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1addStrings_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(char ***)&jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->addStrings(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1addStrings_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(char ***)&jarg3; 
  (arg1)->addStrings(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1addStringsAsIs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(char ***)&jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->addStringsAsIs(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1addStringsAsIs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(char ***)&jarg3; 
  (arg1)->addStringsAsIs(arg2,arg3);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1getFullString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  result = (char *)((ArArgumentBuilder const *)arg1)->getFullString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1setFullString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setFullString((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1getExtraString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  result = (char *)((ArArgumentBuilder const *)arg1)->getExtraString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1setExtraString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setExtraString((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1log(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  ((ArArgumentBuilder const *)arg1)->log();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1getArgc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  result = ((ArArgumentBuilder const *)arg1)->getArgc();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1getArgv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  result = (char **)((ArArgumentBuilder const *)arg1)->getArgv();
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1getArg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (char *)((ArArgumentBuilder const *)arg1)->getArg(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1isArgBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)((ArArgumentBuilder const *)arg1)->isArgBool(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1getArgBool_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(bool **)&jarg3; 
  result = (bool)((ArArgumentBuilder const *)arg1)->getArgBool(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1getArgBool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)((ArArgumentBuilder const *)arg1)->getArgBool(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1isArgInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)((ArArgumentBuilder const *)arg1)->isArgInt(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1isArgInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)((ArArgumentBuilder const *)arg1)->isArgInt(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1getArgInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4) {
  jint jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool *arg3 = (bool *) 0 ;
  bool arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(bool **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)((ArArgumentBuilder const *)arg1)->getArgInt(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1getArgInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool *arg3 = (bool *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(bool **)&jarg3; 
  result = (int)((ArArgumentBuilder const *)arg1)->getArgInt(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1getArgInt_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (int)((ArArgumentBuilder const *)arg1)->getArgInt(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1isArgLongLongInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)((ArArgumentBuilder const *)arg1)->isArgLongLongInt(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1getArgLongLongInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool *arg3 = (bool *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(bool **)&jarg3; 
  result = (int)((ArArgumentBuilder const *)arg1)->getArgLongLongInt(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1getArgLongLongInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (int)((ArArgumentBuilder const *)arg1)->getArgLongLongInt(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1isArgDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)((ArArgumentBuilder const *)arg1)->isArgDouble(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1getArgDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool *arg3 = (bool *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(bool **)&jarg3; 
  result = (double)((ArArgumentBuilder const *)arg1)->getArgDouble(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1getArgDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (double)((ArArgumentBuilder const *)arg1)->getArgDouble(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1removeArg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->removeArg(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1removeArg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->removeArg(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1compressQuoted_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->compressQuoted(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1compressQuoted_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  (arg1)->compressQuoted();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentBuilder_1setQuiet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setQuiet(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArgumentBuilderCompareOp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArArgumentBuilderCompareOp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArArgumentBuilderCompareOp *)new ArArgumentBuilderCompareOp();
  *(ArArgumentBuilderCompareOp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArArgumentBuilderCompareOp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArArgumentBuilderCompareOp *arg1 = (ArArgumentBuilderCompareOp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArArgumentBuilderCompareOp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArgumentParser_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jobjectArray jarg1) {
  jlong jresult = 0 ;
  int *arg1 = (int *) 0 ;
  char **arg2 = (char **) 0 ;
  jint size1 ;
  ArArgumentParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    /* (begin %typemap(in) for (int *argc, char **argv) */
    size1 = jenv->GetArrayLength((jarray)jarg1);
    int tmpArgc = size1;
    int i;
    arg2 = (char**)malloc( (size1+1) * sizeof(char*) );
    for(i = 0; i < size1; i++) {
      jstring js = (jstring) jenv->GetObjectArrayElement((jobjectArray)jarg1, i);
      const char *cs = jenv->GetStringUTFChars(js, 0);
      arg2[i] = (char*)malloc(strlen(cs)+1 * sizeof(const char));
      strcpy(arg2[i], cs);
      jenv->ReleaseStringUTFChars(js, cs);
      jenv->DeleteLocalRef(js);
    }
    arg2[i] = 0;
    int *newArgc = (int*) malloc(sizeof(int));
    *newArgc = tmpArgc;
    arg1 = newArgc;
    /* (end %typemap(in) for (int *argc, char **argv) */
  }
  result = (ArArgumentParser *)new ArArgumentParser(arg1,arg2);
  *(ArArgumentParser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArArgumentParser_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  ArArgumentParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  result = (ArArgumentParser *)new ArArgumentParser(arg1);
  *(ArArgumentParser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArArgumentParser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArArgumentParser **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1setWasReallySetOnlyTrue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setWasReallySetOnlyTrue(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1getWasReallySetOnlyTrue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  result = (bool)(arg1)->getWasReallySetOnlyTrue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1checkArgument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->checkArgument((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1checkParameterArgument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jstring jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (char *)(arg1)->checkParameterArgument((char const *)arg2,arg3);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1checkParameterArgument_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->checkParameterArgument((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1checkParameterArgumentString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  arg4 = *(bool **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->checkParameterArgumentString((char const *)arg2,(char const **)arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1checkParameterArgumentString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  arg4 = *(bool **)&jarg4; 
  result = (bool)(arg1)->checkParameterArgumentString((char const *)arg2,(char const **)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1checkParameterArgumentString_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  result = (bool)(arg1)->checkParameterArgumentString((char const *)arg2,(char const **)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1checkParameterArgumentInteger_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(int **)&jarg3; 
  arg4 = *(bool **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->checkParameterArgumentInteger((char const *)arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1checkParameterArgumentInteger_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(int **)&jarg3; 
  arg4 = *(bool **)&jarg4; 
  result = (bool)(arg1)->checkParameterArgumentInteger((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1checkParameterArgumentInteger_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(int **)&jarg3; 
  result = (bool)(arg1)->checkParameterArgumentInteger((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1checkParameterArgumentBool_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(bool **)&jarg3; 
  arg4 = *(bool **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->checkParameterArgumentBool((char const *)arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1checkParameterArgumentBool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(bool **)&jarg3; 
  arg4 = *(bool **)&jarg4; 
  result = (bool)(arg1)->checkParameterArgumentBool((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1checkParameterArgumentBool_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(bool **)&jarg3; 
  result = (bool)(arg1)->checkParameterArgumentBool((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1checkParameterArgumentFloat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(float **)&jarg3; 
  arg4 = *(bool **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->checkParameterArgumentFloat((char const *)arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1checkParameterArgumentFloat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(float **)&jarg3; 
  arg4 = *(bool **)&jarg4; 
  result = (bool)(arg1)->checkParameterArgumentFloat((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1checkParameterArgumentFloat_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(float **)&jarg3; 
  result = (bool)(arg1)->checkParameterArgumentFloat((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1checkParameterArgumentDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = (double *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(double **)&jarg3; 
  arg4 = *(bool **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->checkParameterArgumentDouble((char const *)arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1checkParameterArgumentDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = (double *) 0 ;
  bool *arg4 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(double **)&jarg3; 
  arg4 = *(bool **)&jarg4; 
  result = (bool)(arg1)->checkParameterArgumentDouble((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1checkParameterArgumentDouble_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->checkParameterArgumentDouble((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1addDefaultArgument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  (arg1)->addDefaultArgument((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1addDefaultArgument_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->addDefaultArgument((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1addDefaultArgumentAsIs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  (arg1)->addDefaultArgumentAsIs((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1addDefaultArgumentAsIs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->addDefaultArgumentAsIs((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1loadDefaultArguments_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->loadDefaultArguments(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1loadDefaultArguments_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  (arg1)->loadDefaultArguments();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1checkHelpAndWarnUnparsed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->checkHelpAndWarnUnparsed(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1checkHelpAndWarnUnparsed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  result = (bool)(arg1)->checkHelpAndWarnUnparsed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1getArgc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  result = ((ArArgumentParser const *)arg1)->getArgc();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1getArgv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  result = (char **)((ArArgumentParser const *)arg1)->getArgv();
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1getArgumentBuilder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArArgumentBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  result = (ArArgumentBuilder *)((ArArgumentParser const *)arg1)->getArgumentBuilder();
  *(ArArgumentBuilder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1getArg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  size_t arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (char *)((ArArgumentParser const *)arg1)->getArg(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1log(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  ((ArArgumentParser const *)arg1)->log();
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1getStartingArguments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  result = (char *)((ArArgumentParser const *)arg1)->getStartingArguments();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1removeArg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->removeArg(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1addDefaultArgumentFile(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  ArArgumentParser::addDefaultArgumentFile((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1addDefaultArgumentEnv(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  ArArgumentParser::addDefaultArgumentEnv((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArArgumentParser_1logDefaultArgumentLocations(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArArgumentParser::logDefaultArgumentLocations();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArBumpers_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jint jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  double arg5 ;
  ArBumpers *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  result = (ArBumpers *)new ArBumpers(arg1,arg2,(char const *)arg3,arg4,arg5);
  *(ArBumpers **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArBumpers_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ArBumpers *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (ArBumpers *)new ArBumpers(arg1,arg2,(char const *)arg3,arg4);
  *(ArBumpers **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArBumpers_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  ArBumpers *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArBumpers *)new ArBumpers(arg1,arg2,(char const *)arg3);
  *(ArBumpers **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArBumpers_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  ArBumpers *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (ArBumpers *)new ArBumpers(arg1,arg2);
  *(ArBumpers **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArBumpers_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  ArBumpers *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (ArBumpers *)new ArBumpers(arg1);
  *(ArBumpers **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArBumpers_1_1SWIG_15(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArBumpers *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArBumpers *)new ArBumpers();
  *(ArBumpers **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArBumpers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArBumpers *arg1 = (ArBumpers *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArBumpers **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBumpers_1setRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArBumpers *arg1 = (ArBumpers *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArBumpers **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBumpers_1processReadings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArBumpers *arg1 = (ArBumpers *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBumpers **)&jarg1; 
  (arg1)->processReadings();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArBumpers_1addBumpToBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  ArBumpers *arg1 = (ArBumpers *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArBumpers **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addBumpToBuffer(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArCameraCollection(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArCameraCollection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArCameraCollection *)new ArCameraCollection();
  *(ArCameraCollection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArCameraCollection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArCameraCollection **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1addCamera(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (bool)(arg1)->addCamera((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1removeCamera(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->removeCamera((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1addCameraCommand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5) {
  jboolean jresult = 0 ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->addCameraCommand((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1addCameraCommand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (bool)(arg1)->addCameraCommand((char const *)arg2,(char const *)arg3,(char const *)arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1removeCameraCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->removeCameraCommand((char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1addParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  ArCameraParameterSource *arg3 = (ArCameraParameterSource *) 0 ;
  ArConfigArg *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(ArCameraParameterSource **)&jarg3; 
  arg4 = *(ArConfigArg **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addParameter((char const *)arg2,arg3,(ArConfigArg const &)*arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1removeParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->removeParameter((char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1getCameraNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > & reference is null");
    return ;
  } 
  (arg1)->getCameraNames(*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1getCameraType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->getCameraType((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1getDisplayName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->getDisplayName((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1getDisplayType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->getDisplayType((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1getCameraCommands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(std::list< std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > & reference is null");
    return ;
  } 
  (arg1)->getCameraCommands((char const *)arg2,*arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1getCommandName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (char *)(arg1)->getCommandName((char const *)arg2,(char const *)arg3);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1getRequestInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)(arg1)->getRequestInterval((char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1getParameterNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(std::list< std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > & reference is null");
    return ;
  } 
  (arg1)->getParameterNames((char const *)arg2,*arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1getParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArConfigArg **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getParameter((char const *)arg2,(char const *)arg3,*arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1setParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  ArConfigArg *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(ArConfigArg **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setParameter((char const *)arg2,(ArConfigArg const &)*arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1exists_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->exists((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1exists_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->exists((char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1parameterExists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->parameterExists((char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1addModifiedCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  result = (bool)(arg1)->addModifiedCB(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1addModifiedCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  result = (bool)(arg1)->addModifiedCB(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1removeModifiedCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  result = (bool)(arg1)->removeModifiedCB(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1startUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  (arg1)->startUpdate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1endUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  (arg1)->endUpdate();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  result = (int)(arg1)->lock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1tryLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  result = (int)(arg1)->tryLock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollection_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArCameraCollection *arg1 = (ArCameraCollection *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCameraCollection **)&jarg1; 
  result = (int)(arg1)->unlock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArCameraCollectionItem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArCameraCollectionItem *arg1 = (ArCameraCollectionItem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArCameraCollectionItem **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollectionItem_1getCameraName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArCameraCollectionItem *arg1 = (ArCameraCollectionItem *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCameraCollectionItem **)&jarg1; 
  result = (char *)(arg1)->getCameraName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCollectionItem_1addToCameraCollection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArCameraCollectionItem *arg1 = (ArCameraCollectionItem *) 0 ;
  ArCameraCollection *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArCameraCollectionItem **)&jarg1; 
  arg2 = *(ArCameraCollection **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArCameraCollection & reference is null");
    return ;
  } 
  (arg1)->addToCameraCollection(*arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArCameraParameterSource(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArCameraParameterSource *arg1 = (ArCameraParameterSource *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArCameraParameterSource **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraParameterSource_1getParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArCameraParameterSource *arg1 = (ArCameraParameterSource *) 0 ;
  char *arg2 = (char *) 0 ;
  ArConfigArg *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArCameraParameterSource **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(ArConfigArg **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getParameter((char const *)arg2,*arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraParameterSource_1setParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArCameraParameterSource *arg1 = (ArCameraParameterSource *) 0 ;
  ArConfigArg *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArCameraParameterSource **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setParameter((ArConfigArg const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1GET_1CAMERA_1DATA_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArCameraCommands::GET_CAMERA_DATA = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::GET_CAMERA_DATA, (const char *)arg1);
    } else {
      ArCameraCommands::GET_CAMERA_DATA = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1GET_1CAMERA_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArCameraCommands::GET_CAMERA_DATA;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1GET_1CAMERA_1INFO_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArCameraCommands::GET_CAMERA_INFO = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::GET_CAMERA_INFO, (const char *)arg1);
    } else {
      ArCameraCommands::GET_CAMERA_INFO = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1GET_1CAMERA_1INFO_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArCameraCommands::GET_CAMERA_INFO;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1GET_1PICTURE_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArCameraCommands::GET_PICTURE = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::GET_PICTURE, (const char *)arg1);
    } else {
      ArCameraCommands::GET_PICTURE = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1GET_1PICTURE_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArCameraCommands::GET_PICTURE;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1GET_1PICTURE_1OPTIM_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArCameraCommands::GET_PICTURE_OPTIM = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::GET_PICTURE_OPTIM, (const char *)arg1);
    } else {
      ArCameraCommands::GET_PICTURE_OPTIM = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1GET_1PICTURE_1OPTIM_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArCameraCommands::GET_PICTURE_OPTIM;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1GET_1SNAPSHOT_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArCameraCommands::GET_SNAPSHOT = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::GET_SNAPSHOT, (const char *)arg1);
    } else {
      ArCameraCommands::GET_SNAPSHOT = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1GET_1SNAPSHOT_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArCameraCommands::GET_SNAPSHOT;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1GET_1DISPLAY_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArCameraCommands::GET_DISPLAY = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::GET_DISPLAY, (const char *)arg1);
    } else {
      ArCameraCommands::GET_DISPLAY = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1GET_1DISPLAY_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArCameraCommands::GET_DISPLAY;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1SET_1CAMERA_1ABS_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArCameraCommands::SET_CAMERA_ABS = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::SET_CAMERA_ABS, (const char *)arg1);
    } else {
      ArCameraCommands::SET_CAMERA_ABS = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1SET_1CAMERA_1ABS_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArCameraCommands::SET_CAMERA_ABS;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1SET_1CAMERA_1PCT_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArCameraCommands::SET_CAMERA_PCT = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::SET_CAMERA_PCT, (const char *)arg1);
    } else {
      ArCameraCommands::SET_CAMERA_PCT = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1SET_1CAMERA_1PCT_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArCameraCommands::SET_CAMERA_PCT;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1SET_1CAMERA_1REL_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArCameraCommands::SET_CAMERA_REL = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::SET_CAMERA_REL, (const char *)arg1);
    } else {
      ArCameraCommands::SET_CAMERA_REL = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1SET_1CAMERA_1REL_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArCameraCommands::SET_CAMERA_REL;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1GET_1CAMERA_1MODE_1LIST_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArCameraCommands::GET_CAMERA_MODE_LIST = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::GET_CAMERA_MODE_LIST, (const char *)arg1);
    } else {
      ArCameraCommands::GET_CAMERA_MODE_LIST = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1GET_1CAMERA_1MODE_1LIST_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArCameraCommands::GET_CAMERA_MODE_LIST;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1CAMERA_1MODE_1UPDATED_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArCameraCommands::CAMERA_MODE_UPDATED = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::CAMERA_MODE_UPDATED, (const char *)arg1);
    } else {
      ArCameraCommands::CAMERA_MODE_UPDATED = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1CAMERA_1MODE_1UPDATED_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArCameraCommands::CAMERA_MODE_UPDATED;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1SET_1CAMERA_1MODE_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArCameraCommands::SET_CAMERA_MODE = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::SET_CAMERA_MODE, (const char *)arg1);
    } else {
      ArCameraCommands::SET_CAMERA_MODE = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1SET_1CAMERA_1MODE_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArCameraCommands::SET_CAMERA_MODE;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1RESET_1CAMERA_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArCameraCommands::RESET_CAMERA = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::RESET_CAMERA, (const char *)arg1);
    } else {
      ArCameraCommands::RESET_CAMERA = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1RESET_1CAMERA_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArCameraCommands::RESET_CAMERA;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1GET_1CAMERA_1DATA_1INT_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArCameraCommands::GET_CAMERA_DATA_INT = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::GET_CAMERA_DATA_INT, (const char *)arg1);
    } else {
      ArCameraCommands::GET_CAMERA_DATA_INT = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1GET_1CAMERA_1DATA_1INT_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArCameraCommands::GET_CAMERA_DATA_INT;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1GET_1CAMERA_1INFO_1INT_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArCameraCommands::GET_CAMERA_INFO_INT = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::GET_CAMERA_INFO_INT, (const char *)arg1);
    } else {
      ArCameraCommands::GET_CAMERA_INFO_INT = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1GET_1CAMERA_1INFO_1INT_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArCameraCommands::GET_CAMERA_INFO_INT;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1SET_1CAMERA_1ABS_1INT_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArCameraCommands::SET_CAMERA_ABS_INT = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::SET_CAMERA_ABS_INT, (const char *)arg1);
    } else {
      ArCameraCommands::SET_CAMERA_ABS_INT = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1SET_1CAMERA_1ABS_1INT_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArCameraCommands::SET_CAMERA_ABS_INT;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1SET_1CAMERA_1REL_1INT_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArCameraCommands::SET_CAMERA_REL_INT = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::SET_CAMERA_REL_INT, (const char *)arg1);
    } else {
      ArCameraCommands::SET_CAMERA_REL_INT = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1SET_1CAMERA_1REL_1INT_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArCameraCommands::SET_CAMERA_REL_INT;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1SET_1CAMERA_1PCT_1INT_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArCameraCommands::SET_CAMERA_PCT_INT = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::SET_CAMERA_PCT_INT, (const char *)arg1);
    } else {
      ArCameraCommands::SET_CAMERA_PCT_INT = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1SET_1CAMERA_1PCT_1INT_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArCameraCommands::SET_CAMERA_PCT_INT;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1GET_1VIDEO_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArCameraCommands::GET_VIDEO = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::GET_VIDEO, (const char *)arg1);
    } else {
      ArCameraCommands::GET_VIDEO = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1GET_1VIDEO_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArCameraCommands::GET_VIDEO;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1GET_1SNAPSHOT_1PLAIN_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArCameraCommands::GET_SNAPSHOT_PLAIN = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArCameraCommands::GET_SNAPSHOT_PLAIN, (const char *)arg1);
    } else {
      ArCameraCommands::GET_SNAPSHOT_PLAIN = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCameraCommands_1GET_1SNAPSHOT_1PLAIN_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArCameraCommands::GET_SNAPSHOT_PLAIN;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArCameraCommands(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArCameraCommands *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArCameraCommands *)new ArCameraCommands();
  *(ArCameraCommands **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArCameraCommands(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArCameraCommands *arg1 = (ArCameraCommands *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArCameraCommands **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1PULSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::PULSE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1OPEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::OPEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1CLOSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::CLOSE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1POLLING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::POLLING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1ENABLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::ENABLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SETA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SETA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SETV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SETV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SETO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SETO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1MOVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::MOVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1ROTATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::ROTATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SETRV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SETRV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1VEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::VEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1HEAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::HEAD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1DHEAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::DHEAD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1JOYINFO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::JOYINFO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1CONFIG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::CONFIG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1ENCODER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::ENCODER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SETRVDIR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SETRVDIR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1RVEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::RVEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1DCHEAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::DCHEAD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SETRA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SETRA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SONAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SONAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1STOP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::STOP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1DIGOUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::DIGOUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1VEL2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::VEL2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1GRIPPER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::GRIPPER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1ADSEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::ADSEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1GRIPPERVAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::GRIPPERVAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1GRIPPERPACREQUEST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::GRIPPERPACREQUEST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1IOREQUEST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::IOREQUEST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1PTUPOS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::PTUPOS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1TTY2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::TTY2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1GETAUX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::GETAUX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1BUMPSTALL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::BUMPSTALL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1TCM2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::TCM2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1JOYDRIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::JOYDRIVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1MOVINGBLINK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::MOVINGBLINK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1HOSTBAUD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::HOSTBAUD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1AUX1BAUD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::AUX1BAUD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1AUX2BAUD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::AUX2BAUD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1ESTOP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::ESTOP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1ESTALL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::ESTALL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1GYRO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::GYRO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1TTY4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::TTY4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1GETAUX3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::GETAUX3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1BATTERYINFO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::BATTERYINFO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1TTY3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::TTY3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1GETAUX2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::GETAUX2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1BATTEST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::BATTEST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1LOADPARAM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::LOADPARAM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1OLDSIM_1LOADPARAM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::OLDSIM_LOADPARAM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1ENDSIM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::ENDSIM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1OLDSIM_1EXIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::OLDSIM_EXIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1LOADWORLD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::LOADWORLD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1OLDSIM_1LOADWORLD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::OLDSIM_LOADWORLD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1STEP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::STEP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1OLDSIM_1STEP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::OLDSIM_STEP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1CALCOMP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::CALCOMP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SETSIMORIGINTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SETSIMORIGINTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1OLDSIM_1SETORIGINTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::OLDSIM_SETORIGINTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1RESETSIMTOORIGIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::RESETSIMTOORIGIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1OLDSIM_1RESETTOORIGIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::OLDSIM_RESETTOORIGIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SOUND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SOUND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1PLAYLIST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::PLAYLIST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SOUNDTOG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SOUNDTOG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1POWER_1PC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::POWER_PC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1POWER_1LRF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::POWER_LRF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1POWER_15V_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::POWER_5V;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1POWER_112V_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::POWER_12V;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1POWER_124V_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::POWER_24V;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1POWER_1AUX_1PC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::POWER_AUX_PC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1POWER_1TOUCHSCREEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::POWER_TOUCHSCREEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1POWER_1PTZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::POWER_PTZ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1POWER_1AUDIO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::POWER_AUDIO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1POWER_1LRF2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::POWER_LRF2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1LATVEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::LATVEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1LATACCEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::LATACCEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SETLATV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SETLATV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SRECORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SRECORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1MARCDEBUG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::MARCDEBUG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1WHEEL_1LIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::WHEEL_LIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1ABSOLUTE_1MAXES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::ABSOLUTE_MAXES;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SAFETY_1STATE_1INFO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SAFETY_STATE_INFO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SAFETY_1SET_1STATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SAFETY_SET_STATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SAFETY_1DISABLE_1POWER_1OFF_1TIMER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SAFETY_DISABLE_POWER_OFF_TIMER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SIM_1SET_1POSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SIM_SET_POSE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SIM_1RESET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SIM_RESET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SIM_1LRF_1ENABLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SIM_LRF_ENABLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SIM_1LRF_1SET_1FOV_1START_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SIM_LRF_SET_FOV_START;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SIM_1LRF_1SET_1FOV_1END_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SIM_LRF_SET_FOV_END;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SIM_1LRF_1SET_1RES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SIM_LRF_SET_RES;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SIM_1CTRL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SIM_CTRL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SIM_1STAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SIM_STAT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SIM_1MESSAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SIM_MESSAGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCommands_1SIM_1EXIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands::Commands)ArCommands::SIM_EXIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArCommands(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArCommands *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArCommands *)new ArCommands();
  *(ArCommands **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArCommands(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArCommands *arg1 = (ArCommands *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArCommands **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCondition_1STATUS_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArCondition::STATUS_FAILED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCondition_1STATUS_1FAILED_1DESTROY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArCondition::STATUS_FAILED_DESTROY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCondition_1STATUS_1FAILED_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArCondition::STATUS_FAILED_INIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCondition_1STATUS_1WAIT_1TIMEDOUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArCondition::STATUS_WAIT_TIMEDOUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCondition_1STATUS_1WAIT_1INTR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArCondition::STATUS_WAIT_INTR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCondition_1STATUS_1MUTEX_1FAILED_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArCondition::STATUS_MUTEX_FAILED_INIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCondition_1STATUS_1MUTEX_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArCondition::STATUS_MUTEX_FAILED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArCondition(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArCondition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArCondition *)new ArCondition();
  *(ArCondition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArCondition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArCondition *arg1 = (ArCondition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArCondition **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCondition_1signal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArCondition *arg1 = (ArCondition *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCondition **)&jarg1; 
  result = (int)(arg1)->signal();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCondition_1broadcast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArCondition *arg1 = (ArCondition *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCondition **)&jarg1; 
  result = (int)(arg1)->broadcast();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCondition_1waitFor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArCondition *arg1 = (ArCondition *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCondition **)&jarg1; 
  result = (int)(arg1)->wait();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCondition_1timedWait(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ArCondition *arg1 = (ArCondition *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCondition **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->timedWait(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCondition_1getError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArCondition *arg1 = (ArCondition *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCondition **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArCondition const *)arg1)->getError(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCondition_1setLogName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArCondition *arg1 = (ArCondition *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCondition **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setLogName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCondition_1getLogName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArCondition *arg1 = (ArCondition *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArCondition **)&jarg1; 
  result = (char *)(arg1)->getLogName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1CATEGORY_1ROBOT_1INTERFACE_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArConfig::CATEGORY_ROBOT_INTERFACE = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArConfig::CATEGORY_ROBOT_INTERFACE, (const char *)arg1);
    } else {
      ArConfig::CATEGORY_ROBOT_INTERFACE = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1CATEGORY_1ROBOT_1INTERFACE_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArConfig::CATEGORY_ROBOT_INTERFACE;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1CATEGORY_1ROBOT_1OPERATION_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArConfig::CATEGORY_ROBOT_OPERATION = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArConfig::CATEGORY_ROBOT_OPERATION, (const char *)arg1);
    } else {
      ArConfig::CATEGORY_ROBOT_OPERATION = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1CATEGORY_1ROBOT_1OPERATION_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArConfig::CATEGORY_ROBOT_OPERATION;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1CATEGORY_1ROBOT_1PHYSICAL_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArConfig::CATEGORY_ROBOT_PHYSICAL = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArConfig::CATEGORY_ROBOT_PHYSICAL, (const char *)arg1);
    } else {
      ArConfig::CATEGORY_ROBOT_PHYSICAL = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1CATEGORY_1ROBOT_1PHYSICAL_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArConfig::CATEGORY_ROBOT_PHYSICAL;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1CATEGORY_1FLEET_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArConfig::CATEGORY_FLEET = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArConfig::CATEGORY_FLEET, (const char *)arg1);
    } else {
      ArConfig::CATEGORY_FLEET = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1CATEGORY_1FLEET_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArConfig::CATEGORY_FLEET;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1CATEGORY_1SECURITY_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArConfig::CATEGORY_SECURITY = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArConfig::CATEGORY_SECURITY, (const char *)arg1);
    } else {
      ArConfig::CATEGORY_SECURITY = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1CATEGORY_1SECURITY_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArConfig::CATEGORY_SECURITY;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1CATEGORY_1DEBUG_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArConfig::CATEGORY_DEBUG = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArConfig::CATEGORY_DEBUG, (const char *)arg1);
    } else {
      ArConfig::CATEGORY_DEBUG = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1CATEGORY_1DEBUG_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArConfig::CATEGORY_DEBUG;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1toCategoryName(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (char *)ArConfig::toCategoryName((char const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jboolean jarg3, jboolean jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  ArConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (ArConfig *)new ArConfig((char const *)arg1,arg2,arg3,arg4,arg5);
  *(ArConfig **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  ArConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (ArConfig *)new ArConfig((char const *)arg1,arg2,arg3,arg4);
  *(ArConfig **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfig_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool arg3 ;
  ArConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (ArConfig *)new ArConfig((char const *)arg1,arg2,arg3);
  *(ArConfig **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfig_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ArConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  result = (ArConfig *)new ArConfig((char const *)arg1,arg2);
  *(ArConfig **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfig_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArConfig *)new ArConfig((char const *)arg1);
  *(ArConfig **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfig_1_1SWIG_15(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfig *)new ArConfig();
  *(ArConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfig_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArConfig *arg1 = 0 ;
  ArConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfig const & reference is null");
    return 0;
  } 
  result = (ArConfig *)new ArConfig((ArConfig const &)*arg1);
  *(ArConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1copyAndDetach(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfig *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfig const & reference is null");
    return ;
  } 
  (arg1)->copyAndDetach((ArConfig const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1setConfigName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setConfigName((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1setConfigName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setConfigName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1setQuiet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setQuiet(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1setTranslator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  (arg1)->setTranslator(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1getTranslator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  result = (ArConfig *)((ArConfig const *)arg1)->getTranslator();
  *(ArConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jboolean jarg4, jstring jarg5, jlong jarg6, jlong jarg7, jint jarg8, jint jarg9, jlong jarg10) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  size_t arg6 ;
  std::list< std::string > *arg7 = (std::list< std::string > *) 0 ;
  ArPriority::Priority arg8 ;
  ArPriority::Priority arg9 ;
  ArConfigArg::RestartLevel *arg10 = (ArConfigArg::RestartLevel *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = (size_t)jarg6; 
  arg7 = *(std::list< std::string > **)&jarg7; 
  arg8 = (ArPriority::Priority)jarg8; 
  arg9 = (ArPriority::Priority)jarg9; 
  arg10 = *(ArConfigArg::RestartLevel **)&jarg10; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jboolean jarg4, jstring jarg5, jlong jarg6, jlong jarg7, jint jarg8, jint jarg9) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  size_t arg6 ;
  std::list< std::string > *arg7 = (std::list< std::string > *) 0 ;
  ArPriority::Priority arg8 ;
  ArPriority::Priority arg9 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = (size_t)jarg6; 
  arg7 = *(std::list< std::string > **)&jarg7; 
  arg8 = (ArPriority::Priority)jarg8; 
  arg9 = (ArPriority::Priority)jarg9; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseFile_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jboolean jarg4, jstring jarg5, jlong jarg6, jlong jarg7, jint jarg8) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  size_t arg6 ;
  std::list< std::string > *arg7 = (std::list< std::string > *) 0 ;
  ArPriority::Priority arg8 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = (size_t)jarg6; 
  arg7 = *(std::list< std::string > **)&jarg7; 
  arg8 = (ArPriority::Priority)jarg8; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseFile_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jboolean jarg4, jstring jarg5, jlong jarg6, jlong jarg7) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  size_t arg6 ;
  std::list< std::string > *arg7 = (std::list< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = (size_t)jarg6; 
  arg7 = *(std::list< std::string > **)&jarg7; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseFile_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jboolean jarg4, jstring jarg5, jlong jarg6) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  size_t arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = (size_t)jarg6; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseFile_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jboolean jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseFile_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseFile_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseFile_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->parseFile((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1writeFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4, jboolean jarg5, jlong jarg6, jint jarg7, jint jarg8) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  std::set< std::string > *arg4 = (std::set< std::string > *) 0 ;
  bool arg5 ;
  std::list< std::string > *arg6 = (std::list< std::string > *) 0 ;
  ArPriority::Priority arg7 ;
  ArPriority::Priority arg8 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = *(std::set< std::string > **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = *(std::list< std::string > **)&jarg6; 
  arg7 = (ArPriority::Priority)jarg7; 
  arg8 = (ArPriority::Priority)jarg8; 
  result = (bool)(arg1)->writeFile((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1writeFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4, jboolean jarg5, jlong jarg6, jint jarg7) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  std::set< std::string > *arg4 = (std::set< std::string > *) 0 ;
  bool arg5 ;
  std::list< std::string > *arg6 = (std::list< std::string > *) 0 ;
  ArPriority::Priority arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = *(std::set< std::string > **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = *(std::list< std::string > **)&jarg6; 
  arg7 = (ArPriority::Priority)jarg7; 
  result = (bool)(arg1)->writeFile((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1writeFile_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4, jboolean jarg5, jlong jarg6) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  std::set< std::string > *arg4 = (std::set< std::string > *) 0 ;
  bool arg5 ;
  std::list< std::string > *arg6 = (std::list< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = *(std::set< std::string > **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = *(std::list< std::string > **)&jarg6; 
  result = (bool)(arg1)->writeFile((char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1writeFile_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  std::set< std::string > *arg4 = (std::set< std::string > *) 0 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = *(std::set< std::string > **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->writeFile((char const *)arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1writeFile_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  std::set< std::string > *arg4 = (std::set< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = *(std::set< std::string > **)&jarg4; 
  result = (bool)(arg1)->writeFile((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1writeFile_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->writeFile((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1writeFile_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->writeFile((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseText_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jlong jarg7, jlong jarg8, jint jarg9, jint jarg10, jlong jarg11) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  bool *arg4 = (bool *) 0 ;
  bool *arg5 = (bool *) 0 ;
  char *arg6 = (char *) 0 ;
  size_t arg7 ;
  std::list< std::string > *arg8 = (std::list< std::string > *) 0 ;
  ArPriority::Priority arg9 ;
  ArPriority::Priority arg10 ;
  ArConfigArg::RestartLevel *arg11 = (ArConfigArg::RestartLevel *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = *(bool **)&jarg4; 
  arg5 = *(bool **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = (size_t)jarg7; 
  arg8 = *(std::list< std::string > **)&jarg8; 
  arg9 = (ArPriority::Priority)jarg9; 
  arg10 = (ArPriority::Priority)jarg10; 
  arg11 = *(ArConfigArg::RestartLevel **)&jarg11; 
  result = (bool)(arg1)->parseText((std::list< std::string > const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (jboolean)result; 
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseText_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jlong jarg7, jlong jarg8, jint jarg9, jint jarg10) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  bool *arg4 = (bool *) 0 ;
  bool *arg5 = (bool *) 0 ;
  char *arg6 = (char *) 0 ;
  size_t arg7 ;
  std::list< std::string > *arg8 = (std::list< std::string > *) 0 ;
  ArPriority::Priority arg9 ;
  ArPriority::Priority arg10 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = *(bool **)&jarg4; 
  arg5 = *(bool **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = (size_t)jarg7; 
  arg8 = *(std::list< std::string > **)&jarg8; 
  arg9 = (ArPriority::Priority)jarg9; 
  arg10 = (ArPriority::Priority)jarg10; 
  result = (bool)(arg1)->parseText((std::list< std::string > const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (jboolean)result; 
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseText_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jlong jarg7, jlong jarg8, jint jarg9) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  bool *arg4 = (bool *) 0 ;
  bool *arg5 = (bool *) 0 ;
  char *arg6 = (char *) 0 ;
  size_t arg7 ;
  std::list< std::string > *arg8 = (std::list< std::string > *) 0 ;
  ArPriority::Priority arg9 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = *(bool **)&jarg4; 
  arg5 = *(bool **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = (size_t)jarg7; 
  arg8 = *(std::list< std::string > **)&jarg8; 
  arg9 = (ArPriority::Priority)jarg9; 
  result = (bool)(arg1)->parseText((std::list< std::string > const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jboolean)result; 
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseText_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jlong jarg7, jlong jarg8) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  bool *arg4 = (bool *) 0 ;
  bool *arg5 = (bool *) 0 ;
  char *arg6 = (char *) 0 ;
  size_t arg7 ;
  std::list< std::string > *arg8 = (std::list< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = *(bool **)&jarg4; 
  arg5 = *(bool **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = (size_t)jarg7; 
  arg8 = *(std::list< std::string > **)&jarg8; 
  result = (bool)(arg1)->parseText((std::list< std::string > const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jboolean)result; 
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseText_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jlong jarg7) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  bool *arg4 = (bool *) 0 ;
  bool *arg5 = (bool *) 0 ;
  char *arg6 = (char *) 0 ;
  size_t arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = *(bool **)&jarg4; 
  arg5 = *(bool **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = (size_t)jarg7; 
  result = (bool)(arg1)->parseText((std::list< std::string > const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseText_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jlong jarg4, jlong jarg5, jstring jarg6) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  bool *arg4 = (bool *) 0 ;
  bool *arg5 = (bool *) 0 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = *(bool **)&jarg4; 
  arg5 = *(bool **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (bool)(arg1)->parseText((std::list< std::string > const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseText_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jlong jarg4, jlong jarg5) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  bool *arg4 = (bool *) 0 ;
  bool *arg5 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = *(bool **)&jarg4; 
  arg5 = *(bool **)&jarg5; 
  result = (bool)(arg1)->parseText((std::list< std::string > const &)*arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseText_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  bool *arg4 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = *(bool **)&jarg4; 
  result = (bool)(arg1)->parseText((std::list< std::string > const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseText_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->parseText((std::list< std::string > const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseText_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->parseText((std::list< std::string > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseResourceFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jstring jarg4, jlong jarg5, jlong jarg6) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  size_t arg5 ;
  std::list< std::string > *arg6 = (std::list< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (size_t)jarg5; 
  arg6 = *(std::list< std::string > **)&jarg6; 
  result = (bool)(arg1)->parseResourceFile((char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseResourceFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jstring jarg4, jlong jarg5) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  size_t arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (size_t)jarg5; 
  result = (bool)(arg1)->parseResourceFile((char const *)arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseResourceFile_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (bool)(arg1)->parseResourceFile((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseResourceFile_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->parseResourceFile((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseResourceFile_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->parseResourceFile((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseResourceFile_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  (arg1)->parseResourceFile(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1writeResourceFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4, jlong jarg5) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  std::set< std::string > *arg4 = (std::set< std::string > *) 0 ;
  std::list< std::string > *arg5 = (std::list< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = *(std::set< std::string > **)&jarg4; 
  arg5 = *(std::list< std::string > **)&jarg5; 
  result = (bool)(arg1)->writeResourceFile((char const *)arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1writeResourceFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  std::set< std::string > *arg4 = (std::set< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = *(std::set< std::string > **)&jarg4; 
  result = (bool)(arg1)->writeResourceFile((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1writeResourceFile_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->writeResourceFile((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1writeResourceFile_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->writeResourceFile((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1writeResourceFile_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  (arg1)->writeResourceFile(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1addSection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (bool)(arg1)->addSection((char const *)arg2,(char const *)arg3,(char const *)arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1addParam_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4, jstring jarg5, jint jarg6) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfigArg *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  ArPriority::Priority arg4 ;
  char *arg5 = (char *) 0 ;
  ArConfigArg::RestartLevel arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (ArPriority::Priority)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = (ArConfigArg::RestartLevel)jarg6; 
  result = (bool)(arg1)->addParam((ArConfigArg const &)*arg2,(char const *)arg3,arg4,(char const *)arg5,arg6);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1addParam_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfigArg *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  ArPriority::Priority arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (ArPriority::Priority)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (bool)(arg1)->addParam((ArConfigArg const &)*arg2,(char const *)arg3,arg4,(char const *)arg5);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1addParam_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfigArg *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  ArPriority::Priority arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (ArPriority::Priority)jarg4; 
  result = (bool)(arg1)->addParam((ArConfigArg const &)*arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1addParam_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfigArg *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->addParam((ArConfigArg const &)*arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1addParam_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfigArg *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addParam((ArConfigArg const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1addComment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArPriority::Priority arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (ArPriority::Priority)jarg4; 
  result = (bool)(arg1)->addComment((char const *)arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1addComment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->addComment((char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1addComment_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->addComment((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1addParamAsIs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfigArg *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->addParamAsIs((ArConfigArg const &)*arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1addParamAsIs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfigArg *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addParamAsIs((ArConfigArg const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1setSectionComment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setSectionComment((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1useArgumentParser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentParser *arg2 = (ArArgumentParser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArArgumentParser **)&jarg2; 
  (arg1)->useArgumentParser(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1processFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  result = (bool)(arg1)->processFile();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1addProcessFileCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArRetFunctor< bool > *arg2 = (ArRetFunctor< bool > *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArRetFunctor< bool > **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addProcessFileCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1addProcessFileCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArRetFunctor< bool > *arg2 = (ArRetFunctor< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArRetFunctor< bool > **)&jarg2; 
  (arg1)->addProcessFileCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1addProcessFileCB_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArRetFunctor2< bool,char *,size_t > *arg2 = (ArRetFunctor2< bool,char *,size_t > *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArRetFunctor2< bool,char *,size_t > **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addProcessFileCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1addProcessFileCB_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArRetFunctor2< bool,char *,size_t > *arg2 = (ArRetFunctor2< bool,char *,size_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArRetFunctor2< bool,char *,size_t > **)&jarg2; 
  (arg1)->addProcessFileCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1addProcessFileWithErrorCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArRetFunctor2< bool,char *,size_t > *arg2 = (ArRetFunctor2< bool,char *,size_t > *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArRetFunctor2< bool,char *,size_t > **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addProcessFileWithErrorCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1addProcessFileWithErrorCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArRetFunctor2< bool,char *,size_t > *arg2 = (ArRetFunctor2< bool,char *,size_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArRetFunctor2< bool,char *,size_t > **)&jarg2; 
  (arg1)->addProcessFileWithErrorCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1remProcessFileCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArRetFunctor< bool > *arg2 = (ArRetFunctor< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArRetFunctor< bool > **)&jarg2; 
  (arg1)->remProcessFileCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1remProcessFileCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArRetFunctor2< bool,char *,size_t > *arg2 = (ArRetFunctor2< bool,char *,size_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArRetFunctor2< bool,char *,size_t > **)&jarg2; 
  (arg1)->remProcessFileCB(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1callProcessFileCallBacks_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->callProcessFileCallBacks(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1callProcessFileCallBacks_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->callProcessFileCallBacks(arg2,arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1callProcessFileCallBacks_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->callProcessFileCallBacks(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseArgument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->parseArgument(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseArgument_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->parseArgument(arg2,arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseArgument_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  result = (bool)(arg1)->parseArgument(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->parseVersion(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->parseVersion(arg2,arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseVersion_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  result = (bool)(arg1)->parseVersion(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseSection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->parseSection(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseSection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->parseSection(arg2,arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseSection_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  result = (bool)(arg1)->parseSection(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseListBegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->parseListBegin(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseListEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->parseListEnd(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseUnknown_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->parseUnknown(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseUnknown_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->parseUnknown(arg2,arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseUnknown_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  result = (bool)(arg1)->parseUnknown(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1getRestartLevelNeeded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfigArg::RestartLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  result = (ArConfigArg::RestartLevel)((ArConfig const *)arg1)->getRestartLevelNeeded();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1resetRestartLevelNeeded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  (arg1)->resetRestartLevelNeeded();
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1getBaseDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  result = (char *)((ArConfig const *)arg1)->getBaseDirectory();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1setBaseDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setBaseDirectory((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1getFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  result = (char *)((ArConfig const *)arg1)->getFileName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1setNoBlanksBetweenParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setNoBlanksBetweenParams(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1getNoBlanksBetweenParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  result = (bool)(arg1)->getNoBlanksBetweenParams();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseArgumentParser_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jstring jarg4, jlong jarg5) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentParser *arg2 = (ArArgumentParser *) 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  size_t arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArArgumentParser **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (size_t)jarg5; 
  result = (bool)(arg1)->parseArgumentParser(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseArgumentParser_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentParser *arg2 = (ArArgumentParser *) 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArArgumentParser **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (bool)(arg1)->parseArgumentParser(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseArgumentParser_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentParser *arg2 = (ArArgumentParser *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArArgumentParser **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->parseArgumentParser(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1parseArgumentParser_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArArgumentParser *arg2 = (ArArgumentParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArArgumentParser **)&jarg2; 
  result = (bool)(arg1)->parseArgumentParser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1getCategoryNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  result = ((ArConfig const *)arg1)->getCategoryNames();
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1getSectionNamesInCategory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = ((ArConfig const *)arg1)->getSectionNamesInCategory((char const *)arg2);
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1getSectionNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  result = ((ArConfig const *)arg1)->getSectionNames();
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1getSections(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  std::list< ArConfigSection * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  result = (std::list< ArConfigSection * > *)(arg1)->getSections();
  *(std::list< ArConfigSection * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1findSection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  ArConfigSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArConfigSection *)((ArConfig const *)arg1)->findSection((char const *)arg2);
  *(ArConfigSection **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1setProcessFileCallbacksLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArLog::LogLevel arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  (arg1)->setProcessFileCallbacksLogLevel(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1getProcessFileCallbacksLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArLog::LogLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  result = (ArLog::LogLevel)(arg1)->getProcessFileCallbacksLogLevel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1setSaveUnknown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSaveUnknown(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1getSaveUnknown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  result = (bool)(arg1)->getSaveUnknown();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1clearSections(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  (arg1)->clearSections();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1clearAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  (arg1)->clearAll();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1addSectionFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->addSectionFlags((char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1remSectionFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->remSectionFlag((char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1clearAllValueSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  (arg1)->clearAllValueSet();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1removeAllUnsetValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  (arg1)->removeAllUnsetValues();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1removeAllUnsetSections(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  (arg1)->removeAllUnsetSections();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1log_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jstring jarg4) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool arg2 ;
  std::list< std::string > *arg3 = (std::list< std::string > *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(std::list< std::string > **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->log(arg2,arg3,(char const *)arg4);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1log_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool arg2 ;
  std::list< std::string > *arg3 = (std::list< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(std::list< std::string > **)&jarg3; 
  (arg1)->log(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1log_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->log(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1log_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  (arg1)->log();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1setPermissions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setPermissions(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1setPermissions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPermissions(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1setPermissions_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  (arg1)->setPermissions();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1addSectionNotToParse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->addSectionNotToParse((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1remSectionNotToParse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->remSectionNotToParse((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfig_1addListNamesToParser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  ArConfigArg *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfig **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return ;
  } 
  (arg1)->addListNamesToParser((ArConfigArg const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigSection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  ArConfigSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (ArConfigSection *)new ArConfigSection((char const *)arg1,(char const *)arg2,arg3,(char const *)arg4);
  *(ArConfigSection **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigSection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  ArConfigSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (ArConfigSection *)new ArConfigSection((char const *)arg1,(char const *)arg2,arg3);
  *(ArConfigSection **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigSection_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ArConfigSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArConfigSection *)new ArConfigSection((char const *)arg1,(char const *)arg2);
  *(ArConfigSection **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigSection_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArConfigSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArConfigSection *)new ArConfigSection((char const *)arg1);
  *(ArConfigSection **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigSection_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArConfigSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigSection *)new ArConfigSection();
  *(ArConfigSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArConfigSection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArConfigSection **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigSection_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArConfigSection *arg1 = 0 ;
  ArConfigSection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigSection **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigSection const & reference is null");
    return 0;
  } 
  result = (ArConfigSection *)new ArConfigSection((ArConfigSection const &)*arg1);
  *(ArConfigSection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigSection_1copyAndDetach(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  ArConfigSection *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigSection **)&jarg1; 
  arg2 = *(ArConfigSection **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigSection const & reference is null");
    return ;
  } 
  (arg1)->copyAndDetach((ArConfigSection const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigSection_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigSection **)&jarg1; 
  result = (char *)((ArConfigSection const *)arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigSection_1getComment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigSection **)&jarg1; 
  result = (char *)((ArConfigSection const *)arg1)->getComment();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigSection_1getCategoryName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigSection **)&jarg1; 
  result = (char *)((ArConfigSection const *)arg1)->getCategoryName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigSection_1getFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigSection **)&jarg1; 
  result = (char *)((ArConfigSection const *)arg1)->getFlags();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigSection_1hasFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigSection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((ArConfigSection const *)arg1)->hasFlag((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigSection_1getParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  std::list< ArConfigArg > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigSection **)&jarg1; 
  result = (std::list< ArConfigArg > *)(arg1)->getParams();
  *(std::list< ArConfigArg > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigSection_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigSection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigSection_1setComment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigSection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setComment((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigSection_1addFlags_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigSection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->addFlags((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigSection_1addFlags_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigSection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->addFlags((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigSection_1remFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigSection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->remFlag((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigSection_1findParam_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigSection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (ArConfigArg *)(arg1)->findParam((char const *)arg2,arg3);
  *(ArConfigArg **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigSection_1findParam_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *arg2 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigSection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArConfigArg *)(arg1)->findParam((char const *)arg2);
  *(ArConfigArg **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigSection_1findParam_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigSection **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (ArConfigArg *)(arg1)->findParam((std::list< std::string > const &)*arg2,arg3);
  *(ArConfigArg **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigSection_1findParam_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigSection **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return 0;
  } 
  result = (ArConfigArg *)(arg1)->findParam((std::list< std::string > const &)*arg2);
  *(ArConfigArg **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigSection_1findParam_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  bool arg4 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigSection **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArConfigArg *)(arg1)->findParam((char const **)arg2,arg3,arg4);
  *(ArConfigArg **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigSection_1findParam_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigSection **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  arg3 = (int)jarg3; 
  result = (ArConfigArg *)(arg1)->findParam((char const **)arg2,arg3);
  *(ArConfigArg **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigSection_1containsParamsOfPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  ArPriority::Priority arg2 ;
  ArPriority::Priority arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigSection **)&jarg1; 
  arg2 = (ArPriority::Priority)jarg2; 
  arg3 = (ArPriority::Priority)jarg3; 
  result = (bool)(arg1)->containsParamsOfPriority(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigSection_1remStringHolder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigSection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->remStringHolder((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigSection_1setQuiet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArConfigSection *arg1 = (ArConfigSection *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigSection **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setQuiet(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1LAST_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArConfigArg::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg::Type)ArConfigArg::LAST_TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1LAST_1RESTART_1LEVEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArConfigArg::RestartLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg::RestartLevel)ArConfigArg::LAST_RESTART_LEVEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1DEFAULT_1DOUBLE_1PRECISION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArConfigArg::DEFAULT_DOUBLE_PRECISION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1TYPE_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArConfigArg::TYPE_COUNT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1RESTART_1LEVEL_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArConfigArg::RESTART_LEVEL_COUNT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1SOCKET_1INDEX_1OF_1SECTION_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArConfigArg::SocketIndices result;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg::SocketIndices)ArConfigArg::SOCKET_INDEX_OF_SECTION_NAME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1SOCKET_1INDEX_1OF_1ARG_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArConfigArg::SocketIndices result;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg::SocketIndices)ArConfigArg::SOCKET_INDEX_OF_ARG_NAME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1SOCKET_1INDEX_1OF_1DESCRIPTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArConfigArg::SocketIndices result;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg::SocketIndices)ArConfigArg::SOCKET_INDEX_OF_DESCRIPTION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1SOCKET_1INDEX_1OF_1PRIORITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArConfigArg::SocketIndices result;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg::SocketIndices)ArConfigArg::SOCKET_INDEX_OF_PRIORITY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1SOCKET_1INDEX_1OF_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArConfigArg::SocketIndices result;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg::SocketIndices)ArConfigArg::SOCKET_INDEX_OF_TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1SOCKET_1INDEX_1OF_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArConfigArg::SocketIndices result;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg::SocketIndices)ArConfigArg::SOCKET_INDEX_OF_VALUE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1SOCKET_1INDEX_1OF_1MIN_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArConfigArg::SocketIndices result;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg::SocketIndices)ArConfigArg::SOCKET_INDEX_OF_MIN_VALUE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1SOCKET_1INDEX_1OF_1MAX_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArConfigArg::SocketIndices result;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg::SocketIndices)ArConfigArg::SOCKET_INDEX_OF_MAX_VALUE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1SOCKET_1INDEX_1OF_1DISPLAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArConfigArg::SocketIndices result;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg::SocketIndices)ArConfigArg::SOCKET_INDEX_OF_DISPLAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1SOCKET_1INDEX_1OF_1PARENT_1PATH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArConfigArg::SocketIndices result;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg::SocketIndices)ArConfigArg::SOCKET_INDEX_OF_PARENT_PATH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1SOCKET_1INDEX_1OF_1SERIALIZABLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArConfigArg::SocketIndices result;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg::SocketIndices)ArConfigArg::SOCKET_INDEX_OF_SERIALIZABLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1RESOURCE_1INDEX_1OF_1SECTION_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArConfigArg::ResourceIndices result;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg::ResourceIndices)ArConfigArg::RESOURCE_INDEX_OF_SECTION_NAME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1RESOURCE_1INDEX_1OF_1ARG_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArConfigArg::ResourceIndices result;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg::ResourceIndices)ArConfigArg::RESOURCE_INDEX_OF_ARG_NAME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1RESOURCE_1INDEX_1OF_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArConfigArg::ResourceIndices result;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg::ResourceIndices)ArConfigArg::RESOURCE_INDEX_OF_TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1RESOURCE_1INDEX_1OF_1PRIORITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArConfigArg::ResourceIndices result;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg::ResourceIndices)ArConfigArg::RESOURCE_INDEX_OF_PRIORITY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1RESOURCE_1INDEX_1OF_1RESTART_1LEVEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArConfigArg::ResourceIndices result;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg::ResourceIndices)ArConfigArg::RESOURCE_INDEX_OF_RESTART_LEVEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1RESOURCE_1INDEX_1OF_1PARENT_1PATH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArConfigArg::ResourceIndices result;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg::ResourceIndices)ArConfigArg::RESOURCE_INDEX_OF_PARENT_PATH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1RESOURCE_1INDEX_1OF_1DESCRIPTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArConfigArg::ResourceIndices result;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg::ResourceIndices)ArConfigArg::RESOURCE_INDEX_OF_DESCRIPTION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1RESOURCE_1INDEX_1OF_1EXTRA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArConfigArg::ResourceIndices result;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg::ResourceIndices)ArConfigArg::RESOURCE_INDEX_OF_EXTRA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1RESOURCE_1INDEX_1OF_1DISPLAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArConfigArg::ResourceIndices result;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg::ResourceIndices)ArConfigArg::RESOURCE_INDEX_OF_DISPLAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1RESOURCE_1INDEX_1OF_1NEW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArConfigArg::ResourceIndices result;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg::ResourceIndices)ArConfigArg::RESOURCE_INDEX_OF_NEW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1LIST_1BEGIN_1TAG_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArConfigArg::LIST_BEGIN_TAG = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArConfigArg::LIST_BEGIN_TAG, (const char *)arg1);
    } else {
      ArConfigArg::LIST_BEGIN_TAG = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1LIST_1BEGIN_1TAG_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArConfigArg::LIST_BEGIN_TAG;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1LIST_1END_1TAG_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArConfigArg::LIST_END_TAG = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArConfigArg::LIST_END_TAG, (const char *)arg1);
    } else {
      ArConfigArg::LIST_END_TAG = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1LIST_1END_1TAG_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArConfigArg::LIST_END_TAG;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1NULL_1TAG_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArConfigArg::NULL_TAG = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArConfigArg::NULL_TAG, (const char *)arg1);
    } else {
      ArConfigArg::NULL_TAG = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1NULL_1TAG_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArConfigArg::NULL_TAG;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1NEW_1RESOURCE_1TAG_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArConfigArg::NEW_RESOURCE_TAG = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArConfigArg::NEW_RESOURCE_TAG, (const char *)arg1);
    } else {
      ArConfigArg::NEW_RESOURCE_TAG = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1NEW_1RESOURCE_1TAG_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArConfigArg::NEW_RESOURCE_TAG;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1toString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  ArConfigArg::Type arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArConfigArg::Type)jarg1; 
  result = (char *)ArConfigArg::toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1toString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  ArConfigArg::RestartLevel arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArConfigArg::RestartLevel)jarg1; 
  result = (char *)ArConfigArg::toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1typeFromString(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArConfigArg::Type result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArConfigArg::Type)ArConfigArg::typeFromString((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1restartLevelFromString(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArConfigArg::RestartLevel result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArConfigArg::RestartLevel)ArConfigArg::restartLevelFromString((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1parseResourceSectionName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = ArConfigArg::parseResourceSectionName(arg1,(char const *)arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1parseResourceSectionName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  result = ArConfigArg::parseResourceSectionName(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1parseResourceArgName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = ArConfigArg::parseResourceArgName(arg1,(char const *)arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1parseResourceArgName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  result = ArConfigArg::parseResourceArgName(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1parseResourceType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  ArConfigArg::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArConfigArg::Type)ArConfigArg::parseResourceType(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1parseResourceType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  ArConfigArg::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  result = (ArConfigArg::Type)ArConfigArg::parseResourceType(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1isResourceTopLevel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)ArConfigArg::isResourceTopLevel(arg1,(char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1isResourceTopLevel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  result = (bool)ArConfigArg::isResourceTopLevel(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1parseResourceParentPath_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char arg2 ;
  char *arg3 = (char *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = (char)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = ArConfigArg::parseResourceParentPath(arg1,arg2,(char const *)arg3);
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1parseResourceParentPath_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  jlong jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char arg2 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = (char)jarg2; 
  result = ArConfigArg::parseResourceParentPath(arg1,arg2);
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1parseResourceParentPath_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  result = ArConfigArg::parseResourceParentPath(arg1);
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1parseResourceDescription_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = ArConfigArg::parseResourceDescription(arg1,(char const *)arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1parseResourceDescription_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  result = ArConfigArg::parseResourceDescription(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1parseResourceExtra_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = ArConfigArg::parseResourceExtra(arg1,(char const *)arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1parseResourceExtra_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  result = ArConfigArg::parseResourceExtra(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigArg *)new ArConfigArg();
  *(ArConfigArg **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(int **)&jarg2; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  short *arg2 = (short *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(short **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  short *arg2 = (short *) 0 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(short **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  short *arg2 = (short *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(short **)&jarg2; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(unsigned short **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(unsigned short **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(unsigned short **)&jarg2; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(unsigned char **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(unsigned char **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(unsigned char **)&jarg2; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3, jdouble jarg4, jdouble jarg5, jint jarg6) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(double **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (int)jarg6; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4,arg5,arg6);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(double **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(double **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(double **)&jarg2; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(bool **)&jarg2; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,(char const *)arg2,(char const *)arg3);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_120(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(std::string **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_121(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4,arg5);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_122(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_123(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_124(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_125(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jstring jarg3, jdouble jarg4, jdouble jarg5, jint jarg6) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (int)jarg6; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4,arg5,arg6);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_126(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jstring jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  double arg5 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4,arg5);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_127(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jstring jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3,arg4);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_128(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_129(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_130(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,(char const *)arg3);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_131(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_132(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArRetFunctor1< bool,ArArgumentBuilder * > *arg2 = (ArRetFunctor1< bool,ArArgumentBuilder * > *) 0 ;
  ArRetFunctor< std::list< ArArgumentBuilder * > const * > *arg3 = (ArRetFunctor< std::list< ArArgumentBuilder * > const * > *) 0 ;
  char *arg4 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArRetFunctor1< bool,ArArgumentBuilder * > **)&jarg2; 
  arg3 = *(ArRetFunctor< std::list< ArArgumentBuilder * > const * > **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2,arg3,(char const *)arg4);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_133(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArConfigArg::Type arg2 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (ArConfigArg::Type)jarg2; 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,arg2);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_134(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_135(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,(char const *)arg2);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_136(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  ArConfigArg::Type arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArConfigArg::Type)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArConfigArg *)new ArConfigArg(arg1,(char const *)arg2,(char const *)arg3);
  *(ArConfigArg **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_137(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  ArConfigArg::Type arg1 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArConfigArg::Type)jarg1; 
  result = (ArConfigArg *)new ArConfigArg(arg1);
  *(ArConfigArg **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArConfigArg(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArConfigArg **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_138(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArConfigArg *arg2 = 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArConfigArg **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  result = (ArConfigArg *)new ArConfigArg((char const *)arg1,(ArConfigArg const &)*arg2);
  *(ArConfigArg **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1_1SWIG_139(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArConfigArg *arg1 = 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  result = (ArConfigArg *)new ArConfigArg((ArConfigArg const &)*arg1);
  *(ArConfigArg **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1copyAndDetach(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return ;
  } 
  (arg1)->copyAndDetach((ArConfigArg const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1copyTranslation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->copyTranslation((ArConfigArg const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1promoteList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->promoteList((ArConfigArg const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1isListType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (bool)((ArConfigArg const *)arg1)->isListType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (ArConfigArg::Type)((ArConfigArg const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (char *)((ArConfigArg const *)arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (char *)((ArConfigArg const *)arg1)->getDescription();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setDescription((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setExtraExplanation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setExtraExplanation((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getExtraExplanation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (char *)((ArConfigArg const *)arg1)->getExtraExplanation();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->setInt(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->setInt(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setInt_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->setInt(arg2,arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setInt_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setInt(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jstring jarg3, jlong jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->setDouble(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->setDouble(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setDouble_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->setDouble(arg2,arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setDouble_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setDouble(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setBool_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jstring jarg3, jlong jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->setBool(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setBool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->setBool(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setBool_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->setBool(arg2,arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setBool_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setBool(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->setString((char const *)arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->setString((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setString_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->setString((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setString_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->setString((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setCppString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->setCppString((std::string const &)*arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setCppString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->setCppString((std::string const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setCppString_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->setCppString((std::string const &)*arg2,arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setCppString_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->setCppString((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setArgWithFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->setArgWithFunctor(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setArgWithFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->setArgWithFunctor(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setArgWithFunctor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->setArgWithFunctor(arg2,arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setArgWithFunctor_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  result = (bool)(arg1)->setArgWithFunctor(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (int)((ArConfigArg const *)arg1)->getInt(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (int)((ArConfigArg const *)arg1)->getInt();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getMinInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (int)((ArConfigArg const *)arg1)->getMinInt(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getMinInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (int)((ArConfigArg const *)arg1)->getMinInt();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getMaxInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (int)((ArConfigArg const *)arg1)->getMaxInt(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getMaxInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (int)((ArConfigArg const *)arg1)->getMaxInt();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (double)((ArConfigArg const *)arg1)->getDouble(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (double)((ArConfigArg const *)arg1)->getDouble();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getMinDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (double)((ArConfigArg const *)arg1)->getMinDouble(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getMinDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (double)((ArConfigArg const *)arg1)->getMinDouble();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getMaxDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (double)((ArConfigArg const *)arg1)->getMaxDouble(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getMaxDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (double)((ArConfigArg const *)arg1)->getMaxDouble();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getDoublePrecision_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (int)((ArConfigArg const *)arg1)->getDoublePrecision(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getDoublePrecision_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (int)((ArConfigArg const *)arg1)->getDoublePrecision();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getBool_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (bool)((ArConfigArg const *)arg1)->getBool(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getBool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (bool)((ArConfigArg const *)arg1)->getBool();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (char *)((ArConfigArg const *)arg1)->getString(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (char *)((ArConfigArg const *)arg1)->getString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getArgsWithFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (std::list< ArArgumentBuilder * > *)((ArConfigArg const *)arg1)->getArgsWithFunctor(arg2);
  *(std::list< ArArgumentBuilder * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getArgsWithFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (std::list< ArArgumentBuilder * > *)((ArConfigArg const *)arg1)->getArgsWithFunctor();
  *(std::list< ArArgumentBuilder * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getCppString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = ((ArConfigArg const *)arg1)->getCppString(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getCppString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = ((ArConfigArg const *)arg1)->getCppString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getCppStringPtr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = (std::string *)((ArConfigArg const *)arg1)->getCppStringPtr(arg2);
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getCppStringPtr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (std::string *)((ArConfigArg const *)arg1)->getCppStringPtr();
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1addArg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addArg((ArConfigArg const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1removeArg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->removeArg((ArConfigArg const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1hasArgs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (bool)((ArConfigArg const *)arg1)->hasArgs();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getArgCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = ((ArConfigArg const *)arg1)->getArgCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getDescendantArgCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = ((ArConfigArg const *)arg1)->getDescendantArgCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getArgs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool *arg2 = (bool *) 0 ;
  SwigValueWrapper< std::list< ArConfigArg > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(bool **)&jarg2; 
  result = ((ArConfigArg const *)arg1)->getArgs(arg2);
  *(std::list< ArConfigArg > **)&jresult = new std::list< ArConfigArg >((const std::list< ArConfigArg > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getArgs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  SwigValueWrapper< std::list< ArConfigArg > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = ((ArConfigArg const *)arg1)->getArgs();
  *(std::list< ArConfigArg > **)&jresult = new std::list< ArConfigArg >((const std::list< ArConfigArg > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getArg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  size_t arg2 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (ArConfigArg *)((ArConfigArg const *)arg1)->getArg(arg2);
  *(ArConfigArg **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1findArg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *arg2 = (char *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArConfigArg *)((ArConfigArg const *)arg1)->findArg((char const *)arg2);
  *(ArConfigArg **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getAncestorList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  std::list< ArConfigArg * > *arg2 = (std::list< ArConfigArg * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(std::list< ArConfigArg * > **)&jarg2; 
  result = (bool)(arg1)->getAncestorList(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getTopLevelArg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (ArConfigArg *)((ArConfigArg const *)arg1)->getTopLevelArg();
  *(ArConfigArg **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getConfigPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArPriority::Priority result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (ArPriority::Priority)((ArConfigArg const *)arg1)->getConfigPriority();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setConfigPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArPriority::Priority arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = (ArPriority::Priority)jarg2; 
  (arg1)->setConfigPriority(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getDisplayHint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (char *)((ArConfigArg const *)arg1)->getDisplayHint();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setDisplayHint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setDisplayHint((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getRestartLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg::RestartLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (ArConfigArg::RestartLevel)((ArConfigArg const *)arg1)->getRestartLevel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setRestartLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg::RestartLevel arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = (ArConfigArg::RestartLevel)jarg2; 
  (arg1)->setRestartLevel(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getSuppressChanges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (bool)((ArConfigArg const *)arg1)->getSuppressChanges();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setSuppressChanges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSuppressChanges(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1isSerializable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (bool)((ArConfigArg const *)arg1)->isSerializable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setSerializable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSerializable(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getParentArg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (ArConfigArg *)((ArConfigArg const *)arg1)->getParentArg();
  *(ArConfigArg **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getParentPathName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  jstring jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = (char)jarg2; 
  result = ((ArConfigArg const *)arg1)->getParentPathName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1getParentPathName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = ((ArConfigArg const *)arg1)->getParentPathName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1splitParentPathName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jchar jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char arg2 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (char)jarg2; 
  result = ArConfigArg::splitParentPathName((char const *)arg1,arg2);
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1splitParentPathName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = ArConfigArg::splitParentPathName((char const *)arg1);
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1replaceSpacesInName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  (arg1)->replaceSpacesInName();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1hasMinBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (bool)((ArConfigArg const *)arg1)->hasMinBound();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1hasMaxBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (bool)((ArConfigArg const *)arg1)->hasMaxBound();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setIgnoreBounds_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIgnoreBounds(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setIgnoreBounds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  (arg1)->setIgnoreBounds();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1hasExternalDataReference(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (bool)((ArConfigArg const *)arg1)->hasExternalDataReference();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1isPlaceholder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (bool)((ArConfigArg const *)arg1)->isPlaceholder();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1addToFileParser_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  ArRetFunctor3C< bool,ArConfig,ArArgumentBuilder *,char *,size_t > *arg3 = (ArRetFunctor3C< bool,ArConfig,ArArgumentBuilder *,char *,size_t > *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArFileParser **)&jarg2; 
  arg3 = *(ArRetFunctor3C< bool,ArConfig,ArArgumentBuilder *,char *,size_t > **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = jarg5 ? true : false; 
  result = (bool)((ArConfigArg const *)arg1)->addToFileParser(arg2,arg3,(char const *)arg4,arg5);
  jresult = (jboolean)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1addToFileParser_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  ArRetFunctor3C< bool,ArConfig,ArArgumentBuilder *,char *,size_t > *arg3 = (ArRetFunctor3C< bool,ArConfig,ArArgumentBuilder *,char *,size_t > *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArFileParser **)&jarg2; 
  arg3 = *(ArRetFunctor3C< bool,ArConfig,ArArgumentBuilder *,char *,size_t > **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (bool)((ArConfigArg const *)arg1)->addToFileParser(arg2,arg3,(char const *)arg4);
  jresult = (jboolean)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1addToFileParser_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  ArRetFunctor3C< bool,ArConfig,ArArgumentBuilder *,char *,size_t > *arg3 = (ArRetFunctor3C< bool,ArConfig,ArArgumentBuilder *,char *,size_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArFileParser **)&jarg2; 
  arg3 = *(ArRetFunctor3C< bool,ArConfig,ArArgumentBuilder *,char *,size_t > **)&jarg3; 
  result = (bool)((ArConfigArg const *)arg1)->addToFileParser(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1parseArgument_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jstring jarg5, jboolean jarg6, jlong jarg7) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  bool *arg7 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  arg7 = *(bool **)&jarg7; 
  result = (bool)(arg1)->parseArgument(arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1parseArgument_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jstring jarg5, jboolean jarg6) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->parseArgument(arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1parseArgument_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (bool)(arg1)->parseArgument(arg2,arg3,arg4,(char const *)arg5);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1parseArgument_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->parseArgument(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1writeArguments_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jint jarg4, jint jarg5, jboolean jarg6, jstring jarg7, jint jarg8) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  char *arg7 = (char *) 0 ;
  int arg8 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(FILE **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = (int)jarg8; 
  result = (bool)((ArConfigArg const *)arg1)->writeArguments(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1writeArguments_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jint jarg4, jint jarg5, jboolean jarg6, jstring jarg7) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(FILE **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  result = (bool)((ArConfigArg const *)arg1)->writeArguments(arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1writeArguments_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jint jarg4, jint jarg5, jboolean jarg6) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(FILE **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (bool)((ArConfigArg const *)arg1)->writeArguments(arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1writeArguments_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jint jarg4, jint jarg5) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(FILE **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)((ArConfigArg const *)arg1)->writeArguments(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1writeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)((ArConfigArg const *)arg1)->writeName(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1writeBounds_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (bool)((ArConfigArg const *)arg1)->writeBounds(arg2,arg3,(char const *)arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1writeBounds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  result = (bool)((ArConfigArg const *)arg1)->writeBounds(arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1isNone(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)ArConfigArg::isNone((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1parseSocket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArArgumentBuilder const & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->parseSocket((ArArgumentBuilder const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1writeValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArSocket **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)((ArConfigArg const *)arg1)->writeValue(arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1writeInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArSocket **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)((ArConfigArg const *)arg1)->writeInfo(arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1log_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3, jstring jarg4) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  ((ArConfigArg const *)arg1)->log(arg2,arg3,(char const *)arg4);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1log_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  ((ArConfigArg const *)arg1)->log(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1log_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  ((ArConfigArg const *)arg1)->log(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1log_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  ((ArConfigArg const *)arg1)->log();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1isValueEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  result = (bool)((ArConfigArg const *)arg1)->isValueEqual((ArConfigArg const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setValue((ArConfigArg const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArConfigArg *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setValue((ArConfigArg const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1isValueSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (bool)(arg1)->isValueSet();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1clearValueSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  (arg1)->clearValueSet();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setValueSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  (arg1)->setValueSet();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1isTranslated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  result = (bool)((ArConfigArg const *)arg1)->isTranslated();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1setTranslated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setTranslated(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1MAX_1RESOURCE_1ARG_1TEXT_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArConfigArg::MAX_RESOURCE_ARG_TEXT_LENGTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1parseResource_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jstring jarg5, jboolean jarg6) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->parseResource(arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1parseResource_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (bool)(arg1)->parseResource(arg2,arg3,arg4,(char const *)arg5);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1parseResource_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->parseResource(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1parseResourceArgText(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  result = (bool)ArConfigArg::parseResourceArgText((char const *)arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1writeResource_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jint jarg4, jchar jarg5, jstring jarg6, jstring jarg7) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(FILE **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = (char)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  result = (bool)((ArConfigArg const *)arg1)->writeResource(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1writeResource_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jint jarg4, jchar jarg5, jstring jarg6) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = (ArConfigArg *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1; 
  arg2 = *(FILE **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = (char)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (bool)((ArConfigArg const *)arg1)->writeResource(arg2,arg3,arg4,arg5,(char const *)arg6);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1writeResourceHeader_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jchar jarg4, jstring jarg5, jstring jarg6) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (char)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (int)ArConfigArg::writeResourceHeader(arg1,arg2,arg3,arg4,(char const *)arg5,(char const *)arg6);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1writeResourceHeader_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jchar jarg4, jstring jarg5) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char arg4 ;
  char *arg5 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (char)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (int)ArConfigArg::writeResourceHeader(arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1writeResourceSectionHeader_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jchar jarg4, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8, jboolean jarg9, jstring jarg10) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  bool arg9 ;
  char *arg10 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (char)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = jarg9 ? true : false; 
  arg10 = 0;
  if (jarg10) {
    arg10 = (char *)jenv->GetStringUTFChars(jarg10, 0);
    if (!arg10) return 0;
  }
  result = (int)ArConfigArg::writeResourceSectionHeader(arg1,arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,arg9,(char const *)arg10);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg10) jenv->ReleaseStringUTFChars(jarg10, (const char *)arg10);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigArg_1writeResourceSectionHeader_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jchar jarg4, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8, jboolean jarg9) {
  jint jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  bool arg9 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (char)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = jarg9 ? true : false; 
  result = (int)ArConfigArg::writeResourceSectionHeader(arg1,arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,arg9);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArConfigGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArConfigGroup *)new ArConfigGroup((char const *)arg1);
  *(ArConfigGroup **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArConfigGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfigGroup *)new ArConfigGroup();
  *(ArConfigGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArConfigGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArConfigGroup *arg1 = (ArConfigGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArConfigGroup **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigGroup_1addConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArConfigGroup *arg1 = (ArConfigGroup *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigGroup **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  (arg1)->addConfig(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigGroup_1remConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArConfigGroup *arg1 = (ArConfigGroup *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArConfigGroup **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  (arg1)->remConfig(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigGroup_1parseFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArConfigGroup *arg1 = (ArConfigGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigGroup_1parseFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArConfigGroup *arg1 = (ArConfigGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->parseFile((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigGroup_1reloadFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  ArConfigGroup *arg1 = (ArConfigGroup *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigGroup **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->reloadFile(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigGroup_1reloadFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArConfigGroup *arg1 = (ArConfigGroup *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigGroup **)&jarg1; 
  result = (bool)(arg1)->reloadFile();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigGroup_1writeFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArConfigGroup *arg1 = (ArConfigGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->writeFile((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigGroup_1setBaseDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArConfigGroup *arg1 = (ArConfigGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setBaseDirectory((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArConfigGroup_1getBaseDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArConfigGroup *arg1 = (ArConfigGroup *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigGroup **)&jarg1; 
  result = (char *)((ArConfigGroup const *)arg1)->getBaseDirectory();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArDataLogger_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  ArDataLogger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArDataLogger *)new ArDataLogger(arg1,(char const *)arg2);
  *(ArDataLogger **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArDataLogger_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArDataLogger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArDataLogger *)new ArDataLogger(arg1);
  *(ArDataLogger **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArDataLogger(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArDataLogger **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDataLogger_1addToConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArDataLogger **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  (arg1)->addToConfig(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDataLogger_1addString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4) {
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArFunctor2< char *,ArTypes::UByte2 > *arg4 = (ArFunctor2< char *,ArTypes::UByte2 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDataLogger **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = *(ArFunctor2< char *,ArTypes::UByte2 > **)&jarg4; 
  (arg1)->addString((char const *)arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDataLogger_1getAddStringFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArDataLogger *arg1 = (ArDataLogger *) 0 ;
  ArFunctor3< char const *,ArTypes::UByte2,ArFunctor2< char *,ArTypes::UByte2 > * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDataLogger **)&jarg1; 
  result = (ArFunctor3< char const *,ArTypes::UByte2,ArFunctor2< char *,ArTypes::UByte2 > * > *)(arg1)->getAddStringFunctor();
  *(ArFunctor3< char const *,ArTypes::UByte2,ArFunctor2< char *,ArTypes::UByte2 > * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTUCommands_1DELIM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArDPPTUCommands::DELIM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTUCommands_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArDPPTUCommands::INIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTUCommands_1ACCEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArDPPTUCommands::ACCEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTUCommands_1BASE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArDPPTUCommands::BASE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTUCommands_1CONTROL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArDPPTUCommands::CONTROL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTUCommands_1DISABLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArDPPTUCommands::DISABLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTUCommands_1ENABLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArDPPTUCommands::ENABLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTUCommands_1FACTORY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArDPPTUCommands::FACTORY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTUCommands_1HALT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArDPPTUCommands::HALT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTUCommands_1IMMED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArDPPTUCommands::IMMED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTUCommands_1LIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArDPPTUCommands::LIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTUCommands_1MONITOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArDPPTUCommands::MONITOR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTUCommands_1OFFSET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArDPPTUCommands::OFFSET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTUCommands_1PAN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArDPPTUCommands::PAN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTUCommands_1RESET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArDPPTUCommands::RESET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTUCommands_1SPEED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArDPPTUCommands::SPEED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTUCommands_1TILT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArDPPTUCommands::TILT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTUCommands_1UPPER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArDPPTUCommands::UPPER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTUCommands_1VELOCITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArDPPTUCommands::VELOCITY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArDPPTUCommands(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArDPPTUCommands *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArDPPTUCommands *)new ArDPPTUCommands();
  *(ArDPPTUCommands **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArDPPTUCommands(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArDPPTUCommands *arg1 = (ArDPPTUCommands *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArDPPTUCommands **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArDPPTUPacket_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  ArTypes::UByte2 arg1 ;
  ArDPPTUPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArTypes::UByte2)jarg1; 
  result = (ArDPPTUPacket *)new ArDPPTUPacket(arg1);
  *(ArDPPTUPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArDPPTUPacket_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArDPPTUPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArDPPTUPacket *)new ArDPPTUPacket();
  *(ArDPPTUPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArDPPTUPacket(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArDPPTUPacket *arg1 = (ArDPPTUPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArDPPTUPacket **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTUPacket_1byte2ToBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArDPPTUPacket *arg1 = (ArDPPTUPacket *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTUPacket **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->byte2ToBuf(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTUPacket_1finalizePacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArDPPTUPacket *arg1 = (ArDPPTUPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTUPacket **)&jarg1; 
  (arg1)->finalizePacket();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1PAN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArDPPTU::Axis result;
  
  (void)jenv;
  (void)jcls;
  result = (ArDPPTU::Axis)ArDPPTU::PAN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1TILT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArDPPTU::Axis result;
  
  (void)jenv;
  (void)jcls;
  result = (ArDPPTU::Axis)ArDPPTU::TILT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArDPPTU_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArDPPTU::DeviceType arg2 ;
  int arg3 ;
  ArDPPTU *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (ArDPPTU::DeviceType)jarg2; 
  arg3 = (int)jarg3; 
  result = (ArDPPTU *)new ArDPPTU(arg1,arg2,arg3);
  *(ArDPPTU **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArDPPTU_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArDPPTU::DeviceType arg2 ;
  ArDPPTU *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (ArDPPTU::DeviceType)jarg2; 
  result = (ArDPPTU *)new ArDPPTU(arg1,arg2);
  *(ArDPPTU **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArDPPTU_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArDPPTU *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArDPPTU *)new ArDPPTU(arg1);
  *(ArDPPTU **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArDPPTU(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArDPPTU **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->init();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1getTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (char *)(arg1)->getTypeName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1canZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)((ArDPPTU const *)arg1)->canZoom();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1canGetRealPanTilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)((ArDPPTU const *)arg1)->canGetRealPanTilt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1blank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->blank();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1resetCalib(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->resetCalib();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1disableReset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->disableReset();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1resetTilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->resetTilt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1resetPan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->resetPan();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1resetAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->resetAll();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1enMon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->enMon();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1disMon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->disMon();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1saveSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->saveSet();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1restoreSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->restoreSet();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1factorySet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->factorySet();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1awaitExec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->awaitExec();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1haltAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->haltAll();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1haltPan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->haltPan();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1haltTilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->haltTilt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1initMon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (bool)(arg1)->initMon(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1limitEnforce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->limitEnforce(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1immedExec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->immedExec();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1slaveExec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->slaveExec();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1getMaxPanSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (double)(arg1)->getMaxPanSlew();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1getMaxPanSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (double)(arg1)->getMaxPanSpeed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1getMinPanSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (double)(arg1)->getMinPanSlew();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1getMaxTiltSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (double)(arg1)->getMaxTiltSlew();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1getMaxTiltSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (double)(arg1)->getMaxTiltSpeed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1getMinTiltSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (double)(arg1)->getMinTiltSlew();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1getMaxPanAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (double)(arg1)->getMaxPanAccel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1getMinPanAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (double)(arg1)->getMinPanAccel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1getMaxTiltAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (double)(arg1)->getMaxTiltAccel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1getMinTiltAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (double)(arg1)->getMinTiltAccel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1OFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArDPPTU::PowerMode result;
  
  (void)jenv;
  (void)jcls;
  result = (ArDPPTU::PowerMode)ArDPPTU::OFF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1LOW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArDPPTU::PowerMode result;
  
  (void)jenv;
  (void)jcls;
  result = (ArDPPTU::PowerMode)ArDPPTU::LOW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1NORMAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArDPPTU::PowerMode result;
  
  (void)jenv;
  (void)jcls;
  result = (ArDPPTU::PowerMode)ArDPPTU::NORMAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1HIGH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArDPPTU::PowerMode result;
  
  (void)jenv;
  (void)jcls;
  result = (ArDPPTU::PowerMode)ArDPPTU::HIGH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1setMovePower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  ArDPPTU::Axis arg2 ;
  ArDPPTU::PowerMode arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  arg2 = (ArDPPTU::Axis)jarg2; 
  arg3 = (ArDPPTU::PowerMode)jarg3; 
  result = (bool)(arg1)->setMovePower(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1setHoldPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  ArDPPTU::Axis arg2 ;
  ArDPPTU::PowerMode arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  arg2 = (ArDPPTU::Axis)jarg2; 
  arg3 = (ArDPPTU::PowerMode)jarg3; 
  result = (bool)(arg1)->setHoldPower(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1offStatPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->offStatPower();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1regStatPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->regStatPower();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1lowStatPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->lowStatPower();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1highMotPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->highMotPower();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1regMotPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->regMotPower();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1lowMotPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->lowMotPower();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1panAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->panAccel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1tiltAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->tiltAccel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1basePanSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->basePanSlew(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1baseTiltSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->baseTiltSlew(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1upperPanSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->upperPanSlew(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1lowerPanSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->lowerPanSlew(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1upperTiltSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->upperTiltSlew(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1lowerTiltSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->lowerTiltSlew(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1indepMove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->indepMove();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1velMove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->velMove();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1panSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->panSlew(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1tiltSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->tiltSlew(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1canPanTiltSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (bool)(arg1)->canPanTiltSlew();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1panSlewRel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->panSlewRel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1tiltSlewRel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->tiltSlewRel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1getLastPanRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (double)((ArDPPTU const *)arg1)->getLastPanRequest();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1getLastTiltRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (double)((ArDPPTU const *)arg1)->getLastTiltRequest();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1getPanSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (double)(arg1)->getPanSlew();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1getTiltSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (double)(arg1)->getTiltSlew();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1getBasePanSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (double)(arg1)->getBasePanSlew();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1getBaseTiltSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (double)(arg1)->getBaseTiltSlew();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1getPanAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (double)(arg1)->getPanAccel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1getTiltAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  result = (double)(arg1)->getTiltAccel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDPPTU_1query(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArDPPTU *arg1 = (ArDPPTU *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDPPTU **)&jarg1; 
  (arg1)->query();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArDeviceConnection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDeviceConnection_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (int)(arg1)->read((char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDeviceConnection_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (unsigned int)jarg3; 
  result = (int)(arg1)->read((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDeviceConnection_1writePacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  ArBasePacket *arg2 = (ArBasePacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  arg2 = *(ArBasePacket **)&jarg2; 
  result = (int)(arg1)->writePacket(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDeviceConnection_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (unsigned int)jarg3; 
  result = (int)(arg1)->write((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDeviceConnection_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  result = (int)(arg1)->getStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDeviceConnection_1getStatusMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArDeviceConnection const *)arg1)->getStatusMessage(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDeviceConnection_1openSimple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  result = (bool)(arg1)->openSimple();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDeviceConnection_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  result = (bool)(arg1)->close();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDeviceConnection_1getOpenMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getOpenMessage(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDeviceConnection_1STATUS_1NEVER_1OPENED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArDeviceConnection::Status result;
  
  (void)jenv;
  (void)jcls;
  result = (ArDeviceConnection::Status)ArDeviceConnection::STATUS_NEVER_OPENED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDeviceConnection_1getTimeRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  int arg2 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getTimeRead(arg2);
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDeviceConnection_1isTimeStamping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  result = (bool)(arg1)->isTimeStamping();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDeviceConnection_1getPortName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  result = (char *)((ArDeviceConnection const *)arg1)->getPortName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDeviceConnection_1getPortType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  result = (char *)((ArDeviceConnection const *)arg1)->getPortType();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDeviceConnection_1setDeviceName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setDeviceName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDeviceConnection_1getDeviceName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  result = (char *)((ArDeviceConnection const *)arg1)->getDeviceName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDeviceConnection_1debugStartPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  (arg1)->debugStartPacket();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDeviceConnection_1debugBytesRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->debugBytesRead(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDeviceConnection_1debugEndPacket_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3) {
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  bool arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  (arg1)->debugEndPacket(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDeviceConnection_1debugEndPacket_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->debugEndPacket(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDeviceConnection_1debugShouldLog(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jboolean jresult = 0 ;
  bool arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (bool)ArDeviceConnection::debugShouldLog(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArColor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1, jshort jarg2, jshort jarg3) {
  jlong jresult = 0 ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  ArColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  result = (ArColor *)new ArColor(arg1,arg2,arg3);
  *(ArColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArColor_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArColor *)new ArColor();
  *(ArColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArColor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  ArTypes::Byte4 arg1 ;
  ArColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArTypes::Byte4)jarg1; 
  result = (ArColor *)new ArColor(arg1);
  *(ArColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArColor *arg1 = (ArColor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArColor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArColor_1getRed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ArColor *arg1 = (ArColor *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArColor **)&jarg1; 
  result = (unsigned char)(arg1)->getRed();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArColor_1getGreen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ArColor *arg1 = (ArColor *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArColor **)&jarg1; 
  result = (unsigned char)(arg1)->getGreen();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArColor_1getBlue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ArColor *arg1 = (ArColor *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArColor **)&jarg1; 
  result = (unsigned char)(arg1)->getBlue();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArColor_1colorToByte4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArColor *arg1 = (ArColor *) 0 ;
  ArTypes::Byte4 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArColor **)&jarg1; 
  result = (ArTypes::Byte4)(arg1)->colorToByte4();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDrawingData_1DEFAULT_1REFRESH_1TIME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArDrawingData::DEFAULT_REFRESH_TIME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArDrawingData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jlong jarg5, jstring jarg6) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArColor arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned int arg5 ;
  char *arg6 = (char *) 0 ;
  ArColor *argp2 ;
  ArDrawingData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(ArColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArColor");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (ArDrawingData *)new ArDrawingData((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  *(ArDrawingData **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArDrawingData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArColor arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned int arg5 ;
  ArColor *argp2 ;
  ArDrawingData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(ArColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArColor");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  result = (ArDrawingData *)new ArDrawingData((char const *)arg1,arg2,arg3,arg4,arg5);
  *(ArDrawingData **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArDrawingData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArColor arg2 ;
  int arg3 ;
  int arg4 ;
  ArColor *argp2 ;
  ArDrawingData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(ArColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArColor");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (ArDrawingData *)new ArDrawingData((char const *)arg1,arg2,arg3,arg4);
  *(ArDrawingData **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArDrawingData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jstring jarg7) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArColor arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned int arg5 ;
  ArColor arg6 ;
  char *arg7 = (char *) 0 ;
  ArColor *argp2 ;
  ArColor *argp6 ;
  ArDrawingData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg6_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(ArColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArColor");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  argp6 = *(ArColor **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArColor");
    return 0;
  }
  arg6 = *argp6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  result = (ArDrawingData *)new ArDrawingData((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  *(ArDrawingData **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArDrawingData_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jlong jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArColor arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned int arg5 ;
  ArColor arg6 ;
  ArColor *argp2 ;
  ArColor *argp6 ;
  ArDrawingData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg6_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(ArColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArColor");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  argp6 = *(ArColor **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArColor");
    return 0;
  }
  arg6 = *argp6; 
  result = (ArDrawingData *)new ArDrawingData((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  *(ArDrawingData **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArDrawingData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArDrawingData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDrawingData_1getShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDrawingData **)&jarg1; 
  result = (char *)(arg1)->getShape();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDrawingData_1getPrimaryColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  ArColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDrawingData **)&jarg1; 
  result = (arg1)->getPrimaryColor();
  *(ArColor **)&jresult = new ArColor((const ArColor &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDrawingData_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDrawingData **)&jarg1; 
  result = (int)(arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDrawingData_1getLayer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDrawingData **)&jarg1; 
  result = (int)(arg1)->getLayer();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDrawingData_1getDefaultRefreshTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDrawingData **)&jarg1; 
  result = (unsigned int)(arg1)->getDefaultRefreshTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDrawingData_1getSecondaryColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  ArColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDrawingData **)&jarg1; 
  result = (arg1)->getSecondaryColor();
  *(ArColor **)&jresult = new ArColor((const ArColor &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDrawingData_1getVisibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDrawingData **)&jarg1; 
  result = (char *)(arg1)->getVisibility();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDrawingData_1setShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDrawingData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setShape((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDrawingData_1setPrimaryColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  ArColor arg2 ;
  ArColor *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArDrawingData **)&jarg1; 
  argp2 = *(ArColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArColor");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setPrimaryColor(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDrawingData_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDrawingData **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSize(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDrawingData_1setLayer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDrawingData **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLayer(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDrawingData_1setDefaultRefreshTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDrawingData **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setDefaultRefreshTime(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDrawingData_1setSecondaryColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  ArColor arg2 ;
  ArColor *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArDrawingData **)&jarg1; 
  argp2 = *(ArColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArColor");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setSecondaryColor(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArDrawingData_1setVisibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArDrawingData *arg1 = (ArDrawingData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDrawingData **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setVisibility((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArFileParser_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ArFileParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  result = (ArFileParser *)new ArFileParser((char const *)arg1,arg2);
  *(ArFileParser **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArFileParser_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArFileParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArFileParser *)new ArFileParser((char const *)arg1);
  *(ArFileParser **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArFileParser_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArFileParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArFileParser *)new ArFileParser();
  *(ArFileParser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArFileParser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArFileParser **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1addHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  ArRetFunctor1< bool,ArArgumentBuilder * > *arg3 = (ArRetFunctor1< bool,ArArgumentBuilder * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArFileParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(ArRetFunctor1< bool,ArArgumentBuilder * > **)&jarg3; 
  result = (bool)(arg1)->addHandler((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1addHandlerWithError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  ArRetFunctor3< bool,ArArgumentBuilder *,char *,size_t > *arg3 = (ArRetFunctor3< bool,ArArgumentBuilder *,char *,size_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(ArRetFunctor3< bool,ArArgumentBuilder *,char *,size_t > **)&jarg3; 
  result = (bool)(arg1)->addHandlerWithError((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1remHandler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->remHandler((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1remHandler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->remHandler((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1remHandler_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  ArRetFunctor1< bool,ArArgumentBuilder * > *arg2 = (ArRetFunctor1< bool,ArArgumentBuilder * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArFileParser **)&jarg1; 
  arg2 = *(ArRetFunctor1< bool,ArArgumentBuilder * > **)&jarg2; 
  result = (bool)(arg1)->remHandler(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1remHandler_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  ArRetFunctor3< bool,ArArgumentBuilder *,char *,size_t > *arg2 = (ArRetFunctor3< bool,ArArgumentBuilder *,char *,size_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  arg2 = *(ArRetFunctor3< bool,ArArgumentBuilder *,char *,size_t > **)&jarg2; 
  result = (bool)(arg1)->remHandler(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1setPreParseFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArFileParser **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  (arg1)->setPreParseFunctor(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1parseFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jboolean jarg4, jstring jarg5, jlong jarg6) {
  jboolean jresult = 0 ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  size_t arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = (size_t)jarg6; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1parseFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jboolean jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1parseFile_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1parseFile_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->parseFile((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1parseFile_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->parseFile((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1parseFile_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jint jarg4, jboolean jarg5, jstring jarg6, jlong jarg7) {
  jboolean jresult = 0 ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool arg5 ;
  char *arg6 = (char *) 0 ;
  size_t arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  arg2 = *(FILE **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = (size_t)jarg7; 
  result = (bool)(arg1)->parseFile(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1parseFile_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jint jarg4, jboolean jarg5, jstring jarg6) {
  jboolean jresult = 0 ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  arg2 = *(FILE **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (bool)(arg1)->parseFile(arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1parseFile_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jint jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  arg2 = *(FILE **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->parseFile(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1parseFile_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  arg2 = *(FILE **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->parseFile(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1cancelParsing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  (arg1)->cancelParsing();
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1getBaseDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  result = (char *)((ArFileParser const *)arg1)->getBaseDirectory();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1setBaseDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setBaseDirectory((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1setCommentDelimiters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return ;
  } 
  (arg1)->setCommentDelimiters((std::list< std::string > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1clearCommentDelimiters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  (arg1)->clearCommentDelimiters();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1parseLine_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->parseLine(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1parseLine_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->parseLine(arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1parseLine_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->parseLine(arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1resetCounters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  (arg1)->resetCounters();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1setMaxNumArguments_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setMaxNumArguments(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1setMaxNumArguments_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  (arg1)->setMaxNumArguments();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFileParser_1setQuiet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArFileParser *arg1 = (ArFileParser *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFileParser **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setQuiet(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArForbiddenRangeDevice_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  double arg2 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  ArForbiddenRangeDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (ArForbiddenRangeDevice *)new ArForbiddenRangeDevice(arg1,arg2,arg3,(char const *)arg4);
  *(ArForbiddenRangeDevice **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArForbiddenRangeDevice_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  double arg2 ;
  unsigned int arg3 ;
  ArForbiddenRangeDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (ArForbiddenRangeDevice *)new ArForbiddenRangeDevice(arg1,arg2,arg3);
  *(ArForbiddenRangeDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArForbiddenRangeDevice_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  double arg2 ;
  ArForbiddenRangeDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (ArForbiddenRangeDevice *)new ArForbiddenRangeDevice(arg1,arg2);
  *(ArForbiddenRangeDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArForbiddenRangeDevice_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArForbiddenRangeDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  result = (ArForbiddenRangeDevice *)new ArForbiddenRangeDevice(arg1);
  *(ArForbiddenRangeDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArForbiddenRangeDevice(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArForbiddenRangeDevice *arg1 = (ArForbiddenRangeDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArForbiddenRangeDevice **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArForbiddenRangeDevice_1processMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArForbiddenRangeDevice *arg1 = (ArForbiddenRangeDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArForbiddenRangeDevice **)&jarg1; 
  (arg1)->processMap();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArForbiddenRangeDevice_1processReadings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArForbiddenRangeDevice *arg1 = (ArForbiddenRangeDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArForbiddenRangeDevice **)&jarg1; 
  (arg1)->processReadings();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArForbiddenRangeDevice_1setRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArForbiddenRangeDevice *arg1 = (ArForbiddenRangeDevice *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArForbiddenRangeDevice **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArForbiddenRangeDevice_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArForbiddenRangeDevice *arg1 = (ArForbiddenRangeDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArForbiddenRangeDevice **)&jarg1; 
  (arg1)->enable();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArForbiddenRangeDevice_1disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArForbiddenRangeDevice *arg1 = (ArForbiddenRangeDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArForbiddenRangeDevice **)&jarg1; 
  (arg1)->disable();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArForbiddenRangeDevice_1isEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArForbiddenRangeDevice *arg1 = (ArForbiddenRangeDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArForbiddenRangeDevice **)&jarg1; 
  result = (bool)((ArForbiddenRangeDevice const *)arg1)->isEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArForbiddenRangeDevice_1getEnableCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArForbiddenRangeDevice *arg1 = (ArForbiddenRangeDevice *) 0 ;
  ArFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArForbiddenRangeDevice **)&jarg1; 
  result = (ArFunctor *)(arg1)->getEnableCB();
  *(ArFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArForbiddenRangeDevice_1getDisableCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArForbiddenRangeDevice *arg1 = (ArForbiddenRangeDevice *) 0 ;
  ArFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArForbiddenRangeDevice **)&jarg1; 
  result = (ArFunctor *)(arg1)->getDisableCB();
  *(ArFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArFunctorASyncTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRetFunctor1< void *,void * > *arg1 = (ArRetFunctor1< void *,void * > *) 0 ;
  ArFunctorASyncTask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor1< void *,void * > **)&jarg1; 
  result = (ArFunctorASyncTask *)new ArFunctorASyncTask(arg1);
  *(ArFunctorASyncTask **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArFunctorASyncTask(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArFunctorASyncTask *arg1 = (ArFunctorASyncTask *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArFunctorASyncTask **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArFunctorASyncTask_1runThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ArFunctorASyncTask *arg1 = (ArFunctorASyncTask *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctorASyncTask **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (void *)(arg1)->runThread(arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArGPS(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArGPS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArGPS *)new ArGPS();
  *(ArGPS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArGPS(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArGPS **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1setDeviceConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  ArDeviceConnection *arg2 = (ArDeviceConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArGPS **)&jarg1; 
  arg2 = *(ArDeviceConnection **)&jarg2; 
  (arg1)->setDeviceConnection(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getDeviceConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  ArDeviceConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (ArDeviceConnection *)((ArGPS const *)arg1)->getDeviceConnection();
  *(ArDeviceConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1connect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  unsigned long arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (bool)(arg1)->connect(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1connect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (bool)(arg1)->connect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1blockingConnect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  unsigned long arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (bool)(arg1)->blockingConnect(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1blockingConnect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (bool)(arg1)->blockingConnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1ReadFinished_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArGPS::ReadFinished;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1ReadError_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArGPS::ReadError;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1ReadData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArGPS::ReadData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1ReadUpdated_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArGPS::ReadUpdated;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1ReadFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1 && sizeof(int) == sizeof((arg1)->ReadFlags)) *(int*)(void*)&((arg1)->ReadFlags) = arg2;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1ReadFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (int) ((arg1)->ReadFlags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  unsigned long arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (int)(arg1)->read(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (int)(arg1)->read();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1readWithLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->readWithLock(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  (arg1)->lock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  (arg1)->unlock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1setIgnoreChecksum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIgnoreChecksum(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1logData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  ((ArGPS const *)arg1)->logData();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1printData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  ((ArGPS const *)arg1)->printData(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1printData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  ((ArGPS const *)arg1)->printData();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1printDataLabelsHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  ((ArGPS const *)arg1)->printDataLabelsHeader();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1OmnistarConverging_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArGPS::FixType result;
  
  (void)jenv;
  (void)jcls;
  result = (ArGPS::FixType)ArGPS::OmnistarConverging;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1OmnistarConverged_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArGPS::FixType result;
  
  (void)jenv;
  (void)jcls;
  result = (ArGPS::FixType)ArGPS::OmnistarConverged;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getCurrentDataRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  ArGPS::Data *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (ArGPS::Data *) &((ArGPS const *)arg1)->getCurrentDataRef();
  *(ArGPS::Data **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getFixType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  ArGPS::FixType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (ArGPS::FixType)((ArGPS const *)arg1)->getFixType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getFixTypeName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (char *)((ArGPS const *)arg1)->getFixTypeName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getFixTypeName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  ArGPS::FixType arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArGPS::FixType)jarg1; 
  result = (char *)ArGPS::getFixTypeName(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1havePosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (bool)((ArGPS const *)arg1)->havePosition();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1haveLatitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveLatitude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1haveLongitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveLongitude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getLatitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (double)((ArGPS const *)arg1)->getLatitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getLongitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (double)((ArGPS const *)arg1)->getLongitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getTimeReceivedPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = ((ArGPS const *)arg1)->getTimeReceivedPosition();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1haveSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveSpeed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (double)((ArGPS const *)arg1)->getSpeed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getGPSPositionTimestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = ((ArGPS const *)arg1)->getGPSPositionTimestamp();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getNumSatellitesTracked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (int)((ArGPS const *)arg1)->getNumSatellitesTracked();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1haveDGPSStation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveDGPSStation();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getDGPSStationID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (unsigned short)((ArGPS const *)arg1)->getDGPSStationID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1haveGarminPositionError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveGarminPositionError();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getGarminPositionError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (double)((ArGPS const *)arg1)->getGarminPositionError();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1haveGarminVerticalPositionError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveGarminVerticalPositionError();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getGarminVerticalPositionError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (double)((ArGPS const *)arg1)->getGarminVerticalPositionError();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1haveCompassHeadingMag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveCompassHeadingMag();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1haveCompassHeadingTrue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveCompassHeadingTrue();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getCompassHeadingMag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (double)((ArGPS const *)arg1)->getCompassHeadingMag();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getCompassHeadingTrue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (double)((ArGPS const *)arg1)->getCompassHeadingTrue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1setCompassHeadingMag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setCompassHeadingMag(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1setCompassHeadingTrue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setCompassHeadingTrue(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1setCompassHeadingMagWithLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setCompassHeadingMagWithLock(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1setCompassHeadingTrueWithLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setCompassHeadingTrueWithLock(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1haveAltitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveAltitude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getAltitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (double)((ArGPS const *)arg1)->getAltitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1haveAltimeter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveAltimeter();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getAltimeter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (double)((ArGPS const *)arg1)->getAltimeter();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1haveHDOP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveHDOP();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getHDOP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (double)((ArGPS const *)arg1)->getHDOP();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1haveVDOP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveVDOP();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getVDOP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (double)((ArGPS const *)arg1)->getVDOP();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1havePDOP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (bool)((ArGPS const *)arg1)->havePDOP();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getPDOP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (double)((ArGPS const *)arg1)->getPDOP();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1haveSNR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveSNR();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getMeanSNR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (double)((ArGPS const *)arg1)->getMeanSNR();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1haveBeaconInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveBeaconInfo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getBeaconSignalStrength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (double)((ArGPS const *)arg1)->getBeaconSignalStrength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getBeaconSNR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (double)((ArGPS const *)arg1)->getBeaconSNR();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getBeaconFreq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (double)((ArGPS const *)arg1)->getBeaconFreq();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getBecaonBPS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (unsigned short)((ArGPS const *)arg1)->getBecaonBPS();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getBeaconChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (unsigned short)((ArGPS const *)arg1)->getBeaconChannel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1haveErrorEllipse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveErrorEllipse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getErrorEllipse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = ((ArGPS const *)arg1)->getErrorEllipse();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1haveLatLonError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveLatLonError();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getLatLonError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = ((ArGPS const *)arg1)->getLatLonError();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getLatitudeError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (double)((ArGPS const *)arg1)->getLatitudeError();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getLongitudeError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (double)((ArGPS const *)arg1)->getLongitudeError();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1haveAltitudeError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveAltitudeError();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getAltitudeError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (double)((ArGPS const *)arg1)->getAltitudeError();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1haveInputsRMS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (bool)((ArGPS const *)arg1)->haveInputsRMS();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1getInputsRMS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArGPS *arg1 = (ArGPS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  result = (double)((ArGPS const *)arg1)->getInputsRMS();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1addNMEAHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  char *arg2 = (char *) 0 ;
  ArNMEAParser::Handler *arg3 = (ArNMEAParser::Handler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(ArNMEAParser::Handler **)&jarg3; 
  (arg1)->addNMEAHandler((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1removeNMEAHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->removeNMEAHandler((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPS_1replaceNMEAHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  ArGPS *arg1 = (ArGPS *) 0 ;
  char *arg2 = (char *) 0 ;
  ArNMEAParser::Handler *arg3 = (ArNMEAParser::Handler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPS **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(ArNMEAParser::Handler **)&jarg3; 
  (arg1)->replaceNMEAHandler((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSimulatedGPS_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArSimulatedGPS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArSimulatedGPS *)new ArSimulatedGPS(arg1);
  *(ArSimulatedGPS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSimulatedGPS_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArSimulatedGPS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArSimulatedGPS *)new ArSimulatedGPS();
  *(ArSimulatedGPS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArSimulatedGPS(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArSimulatedGPS **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimulatedGPS_1setDummyPosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimulatedGPS **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setDummyPosition(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimulatedGPS_1clearDummyPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimulatedGPS **)&jarg1; 
  (arg1)->clearDummyPosition();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimulatedGPS_1clearPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimulatedGPS **)&jarg1; 
  (arg1)->clearPosition();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimulatedGPS_1setDummyPosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimulatedGPS **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setDummyPosition(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimulatedGPS_1setDummyPosition_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSimulatedGPS **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  (arg1)->setDummyPosition(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimulatedGPS_1setDummyPositionFromArgs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSimulatedGPS **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  (arg1)->setDummyPositionFromArgs(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimulatedGPS_1connect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  unsigned long arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimulatedGPS **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (bool)(arg1)->connect(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimulatedGPS_1connect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimulatedGPS **)&jarg1; 
  result = (bool)(arg1)->connect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimulatedGPS_1initDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimulatedGPS **)&jarg1; 
  result = (bool)(arg1)->initDevice();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimulatedGPS_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  unsigned long arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimulatedGPS **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (int)(arg1)->read(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimulatedGPS_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArSimulatedGPS *arg1 = (ArSimulatedGPS *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimulatedGPS **)&jarg1; 
  result = (int)(arg1)->read();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArGPSConnector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArGPSConnector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  result = (ArGPSConnector *)new ArGPSConnector(arg1);
  *(ArGPSConnector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArGPSConnector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArGPSConnector *arg1 = (ArGPSConnector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArGPSConnector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPSConnector_1parseArgs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGPSConnector *arg1 = (ArGPSConnector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPSConnector **)&jarg1; 
  result = (bool)(arg1)->parseArgs();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPSConnector_1createGPS_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArGPSConnector *arg1 = (ArGPSConnector *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArGPS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArGPSConnector **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (ArGPS *)(arg1)->createGPS(arg2);
  *(ArGPS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPSConnector_1createGPS_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArGPSConnector *arg1 = (ArGPSConnector *) 0 ;
  ArGPS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPSConnector **)&jarg1; 
  result = (ArGPS *)(arg1)->createGPS();
  *(ArGPS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPSConnector_1create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArGPSConnector *arg1 = (ArGPSConnector *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArGPS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArGPSConnector **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (ArGPS *)(arg1)->create(arg2);
  *(ArGPS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPSConnector_1create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArGPSConnector *arg1 = (ArGPSConnector *) 0 ;
  ArGPS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPSConnector **)&jarg1; 
  result = (ArGPS *)(arg1)->create();
  *(ArGPS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGPSConnector_1getGPSType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArGPSConnector *arg1 = (ArGPSConnector *) 0 ;
  ArGPSConnector::GPSType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGPSConnector **)&jarg1; 
  result = (ArGPSConnector::GPSType)((ArGPSConnector const *)arg1)->getGPSType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1Ar3DPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ar3DPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Ar3DPoint *)new Ar3DPoint();
  *(Ar3DPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1Ar3DPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  Ar3DPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (Ar3DPoint *)new Ar3DPoint(arg1,arg2,arg3);
  *(Ar3DPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1Ar3DPoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ar3DPoint *arg1 = (Ar3DPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ar3DPoint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Ar3DPoint_1dot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Ar3DPoint *arg1 = (Ar3DPoint *) 0 ;
  Ar3DPoint arg2 ;
  Ar3DPoint *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ar3DPoint **)&jarg1; 
  argp2 = *(Ar3DPoint **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Ar3DPoint");
    return 0;
  }
  arg2 = *argp2; 
  result = (double)(arg1)->dot(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Ar3DPoint_1cross(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Ar3DPoint *arg1 = (Ar3DPoint *) 0 ;
  Ar3DPoint arg2 ;
  Ar3DPoint *argp2 ;
  Ar3DPoint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ar3DPoint **)&jarg1; 
  argp2 = *(Ar3DPoint **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Ar3DPoint");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->cross(arg2);
  *(Ar3DPoint **)&jresult = new Ar3DPoint((const Ar3DPoint &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Ar3DPoint_1print_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Ar3DPoint *arg1 = (Ar3DPoint *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ar3DPoint **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->print((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Ar3DPoint_1print_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ar3DPoint *arg1 = (Ar3DPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ar3DPoint **)&jarg1; 
  (arg1)->print();
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Ar3DPoint_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Ar3DPoint *arg1 = (Ar3DPoint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ar3DPoint **)&jarg1; 
  result = (double)((Ar3DPoint const *)arg1)->getX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Ar3DPoint_1getY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Ar3DPoint *arg1 = (Ar3DPoint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ar3DPoint **)&jarg1; 
  result = (double)((Ar3DPoint const *)arg1)->getY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Ar3DPoint_1getZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Ar3DPoint *arg1 = (Ar3DPoint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ar3DPoint **)&jarg1; 
  result = (double)((Ar3DPoint const *)arg1)->getZ();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Ar3DPoint_1setX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Ar3DPoint *arg1 = (Ar3DPoint *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ar3DPoint **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setX(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Ar3DPoint_1setY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Ar3DPoint *arg1 = (Ar3DPoint *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ar3DPoint **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setY(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Ar3DPoint_1setZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Ar3DPoint *arg1 = (Ar3DPoint *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ar3DPoint **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setZ(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArWGS84(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArWGS84 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArWGS84 *)new ArWGS84();
  *(ArWGS84 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArWGS84_1getE(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)ArWGS84::getE();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArWGS84_1getA(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)ArWGS84::getA();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArWGS84_1getB(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)ArWGS84::getB();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArWGS84_1getEP(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)ArWGS84::getEP();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArWGS84_1get1byf(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)ArWGS84::get1byf();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArWGS84_1getOmega(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)ArWGS84::getOmega();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArWGS84_1getGM(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)ArWGS84::getGM();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArWGS84(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArWGS84 *arg1 = (ArWGS84 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArWGS84 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArECEFCoords(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  ArECEFCoords *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArECEFCoords *)new ArECEFCoords(arg1,arg2,arg3);
  *(ArECEFCoords **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArECEFCoords_1ECEF2LLA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArECEFCoords *arg1 = (ArECEFCoords *) 0 ;
  ArLLACoords result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArECEFCoords **)&jarg1; 
  result = (arg1)->ECEF2LLA();
  *(ArLLACoords **)&jresult = new ArLLACoords((const ArLLACoords &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArECEFCoords_1ECEF2ENU(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArECEFCoords *arg1 = (ArECEFCoords *) 0 ;
  SwigValueWrapper< ArECEFCoords > arg2 ;
  ArECEFCoords *argp2 ;
  SwigValueWrapper< ArENUCoords > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArECEFCoords **)&jarg1; 
  argp2 = *(ArECEFCoords **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArECEFCoords");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->ECEF2ENU(arg2);
  *(ArENUCoords **)&jresult = new ArENUCoords((const ArENUCoords &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArECEFCoords(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArECEFCoords *arg1 = (ArECEFCoords *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArECEFCoords **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLLACoords_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArLLACoords *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArLLACoords *)new ArLLACoords();
  *(ArLLACoords **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLLACoords_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  ArLLACoords *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArLLACoords *)new ArLLACoords(arg1,arg2,arg3);
  *(ArLLACoords **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLLACoords_1LLA2ECEF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLLACoords *arg1 = (ArLLACoords *) 0 ;
  SwigValueWrapper< ArECEFCoords > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLLACoords **)&jarg1; 
  result = (arg1)->LLA2ECEF();
  *(ArECEFCoords **)&jresult = new ArECEFCoords((const ArECEFCoords &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLLACoords_1getLatitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLLACoords *arg1 = (ArLLACoords *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLLACoords **)&jarg1; 
  result = (double)((ArLLACoords const *)arg1)->getLatitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLLACoords_1getLongitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLLACoords *arg1 = (ArLLACoords *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLLACoords **)&jarg1; 
  result = (double)((ArLLACoords const *)arg1)->getLongitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLLACoords_1getAltitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLLACoords *arg1 = (ArLLACoords *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLLACoords **)&jarg1; 
  result = (double)((ArLLACoords const *)arg1)->getAltitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLLACoords_1setLatitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLLACoords *arg1 = (ArLLACoords *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLLACoords **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLatitude(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLLACoords_1setLongitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLLACoords *arg1 = (ArLLACoords *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLLACoords **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLongitude(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLLACoords_1setAltitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLLACoords *arg1 = (ArLLACoords *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLLACoords **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setAltitude(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArLLACoords(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArLLACoords *arg1 = (ArLLACoords *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArLLACoords **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArENUCoords(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  ArENUCoords *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArENUCoords *)new ArENUCoords(arg1,arg2,arg3);
  *(ArENUCoords **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArENUCoords_1ENU2ECEF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArENUCoords *arg1 = (ArENUCoords *) 0 ;
  ArLLACoords arg2 ;
  ArLLACoords *argp2 ;
  SwigValueWrapper< ArECEFCoords > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArENUCoords **)&jarg1; 
  argp2 = *(ArLLACoords **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArLLACoords");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->ENU2ECEF(arg2);
  *(ArECEFCoords **)&jresult = new ArECEFCoords((const ArECEFCoords &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArENUCoords_1getEast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArENUCoords *arg1 = (ArENUCoords *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArENUCoords **)&jarg1; 
  result = (double)((ArENUCoords const *)arg1)->getEast();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArENUCoords_1getNorth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArENUCoords *arg1 = (ArENUCoords *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArENUCoords **)&jarg1; 
  result = (double)((ArENUCoords const *)arg1)->getNorth();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArENUCoords_1getUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArENUCoords *arg1 = (ArENUCoords *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArENUCoords **)&jarg1; 
  result = (double)((ArENUCoords const *)arg1)->getUp();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArENUCoords_1setEast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArENUCoords *arg1 = (ArENUCoords *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArENUCoords **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setEast(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArENUCoords_1setNorth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArENUCoords *arg1 = (ArENUCoords *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArENUCoords **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setNorth(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArENUCoords_1setUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArENUCoords *arg1 = (ArENUCoords *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArENUCoords **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setUp(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArENUCoords(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArENUCoords *arg1 = (ArENUCoords *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArENUCoords **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapGPSCoords_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLLACoords arg1 ;
  ArLLACoords *argp1 ;
  ArMapGPSCoords *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(ArLLACoords **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArLLACoords");
    return 0;
  }
  arg1 = *argp1; 
  result = (ArMapGPSCoords *)new ArMapGPSCoords(arg1);
  *(ArMapGPSCoords **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapGPSCoords_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArMapGPSCoords *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArMapGPSCoords *)new ArMapGPSCoords();
  *(ArMapGPSCoords **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapGPSCoords_1convertMap2LLACoords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jboolean jresult = 0 ;
  ArMapGPSCoords *arg1 = (ArMapGPSCoords *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapGPSCoords **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  arg6 = *(double **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  arg7 = *(double **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (bool)((ArMapGPSCoords const *)arg1)->convertMap2LLACoords(arg2,arg3,arg4,*arg5,*arg6,*arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapGPSCoords_1convertLLA2MapCoords_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jboolean jresult = 0 ;
  ArMapGPSCoords *arg1 = (ArMapGPSCoords *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapGPSCoords **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  arg6 = *(double **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  arg7 = *(double **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (bool)((ArMapGPSCoords const *)arg1)->convertLLA2MapCoords(arg2,arg3,arg4,*arg5,*arg6,*arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapGPSCoords_1convertLLA2MapCoords_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5) {
  jboolean jresult = 0 ;
  ArMapGPSCoords *arg1 = (ArMapGPSCoords *) 0 ;
  ArLLACoords *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapGPSCoords **)&jarg1; 
  arg2 = *(ArLLACoords **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArLLACoords const & reference is null");
    return 0;
  } 
  arg3 = *(double **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  arg4 = *(double **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  arg5 = *(double **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->convertLLA2MapCoords((ArLLACoords const &)*arg2,*arg3,*arg4,*arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapGPSCoords_1setOrigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMapGPSCoords *arg1 = (ArMapGPSCoords *) 0 ;
  ArLLACoords arg2 ;
  ArLLACoords *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapGPSCoords **)&jarg1; 
  argp2 = *(ArLLACoords **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArLLACoords");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setOrigin(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapGPSCoords_1myOriginECEF_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMapGPSCoords *arg1 = (ArMapGPSCoords *) 0 ;
  ArECEFCoords *arg2 = (ArECEFCoords *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapGPSCoords **)&jarg1; 
  arg2 = *(ArECEFCoords **)&jarg2; 
  if (arg1) (arg1)->myOriginECEF = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapGPSCoords_1myOriginECEF_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapGPSCoords *arg1 = (ArMapGPSCoords *) 0 ;
  ArECEFCoords *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapGPSCoords **)&jarg1; 
  result = (ArECEFCoords *) ((arg1)->myOriginECEF);
  *(ArECEFCoords **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapGPSCoords_1myOriginLLA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMapGPSCoords *arg1 = (ArMapGPSCoords *) 0 ;
  ArLLACoords *arg2 = (ArLLACoords *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapGPSCoords **)&jarg1; 
  arg2 = *(ArLLACoords **)&jarg2; 
  if (arg1) (arg1)->myOriginLLA = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapGPSCoords_1myOriginLLA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapGPSCoords *arg1 = (ArMapGPSCoords *) 0 ;
  ArLLACoords *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapGPSCoords **)&jarg1; 
  result = (ArLLACoords *) ((arg1)->myOriginLLA);
  *(ArLLACoords **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapGPSCoords_1myOriginSet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArMapGPSCoords *arg1 = (ArMapGPSCoords *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapGPSCoords **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->myOriginSet = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapGPSCoords_1myOriginSet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMapGPSCoords *arg1 = (ArMapGPSCoords *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapGPSCoords **)&jarg1; 
  result = (bool) ((arg1)->myOriginSet);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArMapGPSCoords(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArMapGPSCoords *arg1 = (ArMapGPSCoords *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArMapGPSCoords **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripperCommands_1GRIP_1OPEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArGripperCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArGripperCommands::Commands)ArGripperCommands::GRIP_OPEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripperCommands_1GRIP_1CLOSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArGripperCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArGripperCommands::Commands)ArGripperCommands::GRIP_CLOSE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripperCommands_1GRIP_1STOP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArGripperCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArGripperCommands::Commands)ArGripperCommands::GRIP_STOP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripperCommands_1LIFT_1UP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArGripperCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArGripperCommands::Commands)ArGripperCommands::LIFT_UP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripperCommands_1LIFT_1DOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArGripperCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArGripperCommands::Commands)ArGripperCommands::LIFT_DOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripperCommands_1LIFT_1STOP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArGripperCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArGripperCommands::Commands)ArGripperCommands::LIFT_STOP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripperCommands_1GRIPPER_1STORE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArGripperCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArGripperCommands::Commands)ArGripperCommands::GRIPPER_STORE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripperCommands_1GRIPPER_1DEPLOY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArGripperCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArGripperCommands::Commands)ArGripperCommands::GRIPPER_DEPLOY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripperCommands_1GRIPPER_1HALT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArGripperCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArGripperCommands::Commands)ArGripperCommands::GRIPPER_HALT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripperCommands_1GRIP_1PRESSURE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArGripperCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArGripperCommands::Commands)ArGripperCommands::GRIP_PRESSURE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripperCommands_1LIFT_1CARRY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArGripperCommands::Commands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArGripperCommands::Commands)ArGripperCommands::LIFT_CARRY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArGripperCommands(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArGripperCommands *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArGripperCommands *)new ArGripperCommands();
  *(ArGripperCommands **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArGripperCommands(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArGripperCommands *arg1 = (ArGripperCommands *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArGripperCommands **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArGripper_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  ArGripper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ArGripper *)new ArGripper(arg1,arg2);
  *(ArGripper **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArGripper_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArGripper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArGripper *)new ArGripper(arg1);
  *(ArGripper **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArGripper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArGripper *arg1 = (ArGripper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArGripper **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1gripOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGripper **)&jarg1; 
  result = (bool)(arg1)->gripOpen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1gripClose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGripper **)&jarg1; 
  result = (bool)(arg1)->gripClose();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1gripStop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGripper **)&jarg1; 
  result = (bool)(arg1)->gripStop();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1liftUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGripper **)&jarg1; 
  result = (bool)(arg1)->liftUp();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1liftDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGripper **)&jarg1; 
  result = (bool)(arg1)->liftDown();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1liftStop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGripper **)&jarg1; 
  result = (bool)(arg1)->liftStop();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1gripperStore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGripper **)&jarg1; 
  result = (bool)(arg1)->gripperStore();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1gripperDeploy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGripper **)&jarg1; 
  result = (bool)(arg1)->gripperDeploy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1gripperHalt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGripper **)&jarg1; 
  result = (bool)(arg1)->gripperHalt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1gripPressure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGripper **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->gripPressure(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1liftCarry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGripper **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->liftCarry(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1isGripMoving(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGripper **)&jarg1; 
  result = (bool)((ArGripper const *)arg1)->isGripMoving();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1isLiftMoving(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGripper **)&jarg1; 
  result = (bool)((ArGripper const *)arg1)->isLiftMoving();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1getGripState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGripper **)&jarg1; 
  result = (int)((ArGripper const *)arg1)->getGripState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1getPaddleState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGripper **)&jarg1; 
  result = (int)((ArGripper const *)arg1)->getPaddleState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1getBreakBeamState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGripper **)&jarg1; 
  result = (int)((ArGripper const *)arg1)->getBreakBeamState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1isLiftMaxed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGripper **)&jarg1; 
  result = (bool)((ArGripper const *)arg1)->isLiftMaxed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGripper **)&jarg1; 
  result = (int)((ArGripper const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArGripper *arg1 = (ArGripper *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGripper **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1getMSecSinceLastPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGripper **)&jarg1; 
  result = (long)((ArGripper const *)arg1)->getMSecSinceLastPacket();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1getGraspTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGripper **)&jarg1; 
  result = (int)((ArGripper const *)arg1)->getGraspTime();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1logState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArGripper *arg1 = (ArGripper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGripper **)&jarg1; 
  ((ArGripper const *)arg1)->logState();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1packetHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArGripper *arg1 = (ArGripper *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArGripper **)&jarg1; 
  arg2 = *(ArRobotPacket **)&jarg2; 
  result = (bool)(arg1)->packetHandler(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArGripper_1connectHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArGripper *arg1 = (ArGripper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArGripper **)&jarg1; 
  (arg1)->connectHandler();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArIRs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ArIRs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (ArIRs *)new ArIRs(arg1,arg2,(char const *)arg3,arg4);
  *(ArIRs **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArIRs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  ArIRs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArIRs *)new ArIRs(arg1,arg2,(char const *)arg3);
  *(ArIRs **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArIRs_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  ArIRs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (ArIRs *)new ArIRs(arg1,arg2);
  *(ArIRs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArIRs_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  ArIRs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (ArIRs *)new ArIRs(arg1);
  *(ArIRs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArIRs_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArIRs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArIRs *)new ArIRs();
  *(ArIRs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArIRs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArIRs *arg1 = (ArIRs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArIRs **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArIRs_1setRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArIRs *arg1 = (ArIRs *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArIRs **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArIRs_1processReadings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArIRs *arg1 = (ArIRs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArIRs **)&jarg1; 
  (arg1)->processReadings();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArInterpolation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  ArInterpolation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (ArInterpolation *)new ArInterpolation(arg1);
  *(ArInterpolation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArInterpolation_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArInterpolation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArInterpolation *)new ArInterpolation();
  *(ArInterpolation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArInterpolation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArInterpolation **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArInterpolation_1addReading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  ArTime arg2 ;
  ArPose arg3 ;
  ArTime *argp2 ;
  ArPose *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArInterpolation **)&jarg1; 
  argp2 = *(ArTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(ArPose **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->addReading(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArInterpolation_1getPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  ArTime arg2 ;
  ArPose *arg3 = (ArPose *) 0 ;
  ArPoseWithTime *arg4 = (ArPoseWithTime *) 0 ;
  ArTime *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(ArInterpolation **)&jarg1; 
  argp2 = *(ArTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(ArPose **)&jarg3; 
  arg4 = *(ArPoseWithTime **)&jarg4; 
  result = (int)(arg1)->getPose(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArInterpolation_1getPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  ArTime arg2 ;
  ArPose *arg3 = (ArPose *) 0 ;
  ArTime *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArInterpolation **)&jarg1; 
  argp2 = *(ArTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(ArPose **)&jarg3; 
  result = (int)(arg1)->getPose(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArInterpolation_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArInterpolation **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArInterpolation_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArInterpolation **)&jarg1; 
  result = (char *)(arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArInterpolation_1setAllowedMSForPrediction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArInterpolation **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setAllowedMSForPrediction(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArInterpolation_1setAllowedMSForPrediction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArInterpolation **)&jarg1; 
  (arg1)->setAllowedMSForPrediction();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArInterpolation_1getAllowedMSForPrediction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArInterpolation **)&jarg1; 
  result = (int)(arg1)->getAllowedMSForPrediction();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArInterpolation_1setAllowedPercentageForPrediction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArInterpolation **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setAllowedPercentageForPrediction(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArInterpolation_1setAllowedPercentageForPrediction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArInterpolation **)&jarg1; 
  (arg1)->setAllowedPercentageForPrediction();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArInterpolation_1getAllowedPercentageForPrediction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArInterpolation **)&jarg1; 
  result = (int)(arg1)->getAllowedPercentageForPrediction();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArInterpolation_1setLogPrediction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArInterpolation **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLogPrediction(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArInterpolation_1setLogPrediction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArInterpolation **)&jarg1; 
  (arg1)->setLogPrediction();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArInterpolation_1getLogPrediction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArInterpolation **)&jarg1; 
  result = (bool)(arg1)->getLogPrediction();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArInterpolation_1setNumberOfReadings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArInterpolation **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setNumberOfReadings(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArInterpolation_1getNumberOfReadings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArInterpolation **)&jarg1; 
  result = ((ArInterpolation const *)arg1)->getNumberOfReadings();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArInterpolation_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArInterpolation *arg1 = (ArInterpolation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArInterpolation **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArIrrfDevice_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  ArIrrfDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArIrrfDevice *)new ArIrrfDevice(arg1,arg2,(char const *)arg3);
  *(ArIrrfDevice **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArIrrfDevice_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  ArIrrfDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (ArIrrfDevice *)new ArIrrfDevice(arg1,arg2);
  *(ArIrrfDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArIrrfDevice_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  ArIrrfDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (ArIrrfDevice *)new ArIrrfDevice(arg1);
  *(ArIrrfDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArIrrfDevice_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArIrrfDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArIrrfDevice *)new ArIrrfDevice();
  *(ArIrrfDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArIrrfDevice(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArIrrfDevice *arg1 = (ArIrrfDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArIrrfDevice **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArIrrfDevice_1packetHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArIrrfDevice *arg1 = (ArIrrfDevice *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArIrrfDevice **)&jarg1; 
  arg2 = *(ArRobotPacket **)&jarg2; 
  result = (bool)(arg1)->packetHandler(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArIrrfDevice_1setCumulativeMaxRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArIrrfDevice *arg1 = (ArIrrfDevice *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArIrrfDevice **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setCumulativeMaxRange(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArIrrfDevice_1setRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArIrrfDevice *arg1 = (ArIrrfDevice *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArIrrfDevice **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArJoyHandler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  bool arg1 ;
  bool arg2 ;
  ArJoyHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  result = (ArJoyHandler *)new ArJoyHandler(arg1,arg2);
  *(ArJoyHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArJoyHandler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  ArJoyHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (ArJoyHandler *)new ArJoyHandler(arg1);
  *(ArJoyHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArJoyHandler_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArJoyHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArJoyHandler *)new ArJoyHandler();
  *(ArJoyHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArJoyHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArJoyHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  result = (bool)(arg1)->init();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1haveJoystick(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  result = (bool)(arg1)->haveJoystick();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1getDoubles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double temp2 ;
  double temp3 ;
  double temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg2 = &temp2; 
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg3 = &temp3; 
  }
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg4 = &temp4; 
  }
  (arg1)->getDoubles(arg2,arg3,arg4);
  {
    jdouble jvalue = (jdouble)temp2;
    jenv->SetDoubleArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp3;
    jenv->SetDoubleArrayRegion(jarg3, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp4;
    jenv->SetDoubleArrayRegion(jarg4, 0, 1, &jvalue);
  }
  
  
  
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1getDoubles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double temp2 ;
  double temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg2 = &temp2; 
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg3 = &temp3; 
  }
  (arg1)->getDoubles(arg2,arg3);
  {
    jdouble jvalue = (jdouble)temp2;
    jenv->SetDoubleArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp3;
    jenv->SetDoubleArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1getButton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->getButton(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1haveZAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  result = (bool)(arg1)->haveZAxis();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1setSpeeds_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setSpeeds(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1setSpeeds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setSpeeds(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1getAdjusted_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jintArray jarg3, jintArray jarg4) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int temp2 ;
  int temp3 ;
  int temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg2 = &temp2; 
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg3 = &temp3; 
  }
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg4 = &temp4; 
  }
  (arg1)->getAdjusted(arg2,arg3,arg4);
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp3;
    jenv->SetIntArrayRegion(jarg3, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp4;
    jenv->SetIntArrayRegion(jarg4, 0, 1, &jvalue);
  }
  
  
  
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1getAdjusted_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jintArray jarg3) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int temp2 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg2 = &temp2; 
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg3 = &temp3; 
  }
  (arg1)->getAdjusted(arg2,arg3);
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp3;
    jenv->SetIntArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1getNumAxes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  result = (unsigned int)(arg1)->getNumAxes();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1getAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  unsigned int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (double)(arg1)->getAxis(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1getNumButtons(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  result = (unsigned int)(arg1)->getNumButtons();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1setUseOSCal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseOSCal(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1getUseOSCal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  result = (bool)(arg1)->getUseOSCal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1startCal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  (arg1)->startCal();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1endCal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  (arg1)->endCal();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1getUnfiltered_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jintArray jarg3, jintArray jarg4) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int temp2 ;
  int temp3 ;
  int temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg2 = &temp2; 
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg3 = &temp3; 
  }
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg4 = &temp4; 
  }
  (arg1)->getUnfiltered(arg2,arg3,arg4);
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp3;
    jenv->SetIntArrayRegion(jarg3, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp4;
    jenv->SetIntArrayRegion(jarg4, 0, 1, &jvalue);
  }
  
  
  
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1getUnfiltered_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jintArray jarg3) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int temp2 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg2 = &temp2; 
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg3 = &temp3; 
  }
  (arg1)->getUnfiltered(arg2,arg3);
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp3;
    jenv->SetIntArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1getStats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = *(int **)&jarg5; 
  arg6 = *(int **)&jarg6; 
  arg7 = *(int **)&jarg7; 
  (arg1)->getStats(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1setStats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->setStats(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1getSpeeds_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jintArray jarg3, jintArray jarg4) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int temp2 ;
  int temp3 ;
  int temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg2 = &temp2; 
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg3 = &temp3; 
  }
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg4 = &temp4; 
  }
  (arg1)->getSpeeds(arg2,arg3,arg4);
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp3;
    jenv->SetIntArrayRegion(jarg3, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp4;
    jenv->SetIntArrayRegion(jarg4, 0, 1, &jvalue);
  }
  
  
  
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1getDoubles_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  ArJoyVec3f result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  result = ArJoyHandler_getDoubles__SWIG_2(arg1);
  *(ArJoyVec3f **)&jresult = new ArJoyVec3f((const ArJoyVec3f &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1getAdjusted_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  ArJoyVec3i result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  result = ArJoyHandler_getAdjusted__SWIG_2(arg1);
  *(ArJoyVec3i **)&jresult = new ArJoyVec3i((const ArJoyVec3i &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1getUnfiltered_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  ArJoyVec3i result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  result = ArJoyHandler_getUnfiltered__SWIG_2(arg1);
  *(ArJoyVec3i **)&jresult = new ArJoyVec3i((const ArJoyVec3i &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyHandler_1getSpeeds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  ArJoyVec3i result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  result = ArJoyHandler_getSpeeds__SWIG_1(arg1);
  *(ArJoyVec3i **)&jresult = new ArJoyVec3i((const ArJoyVec3i &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArKeyHandler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1, jboolean jarg2, jlong jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  bool arg1 ;
  bool arg2 ;
  FILE *arg3 = (FILE *) 0 ;
  bool arg4 ;
  ArKeyHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(FILE **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArKeyHandler *)new ArKeyHandler(arg1,arg2,arg3,arg4);
  *(ArKeyHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArKeyHandler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jboolean jarg1, jboolean jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  bool arg1 ;
  bool arg2 ;
  FILE *arg3 = (FILE *) 0 ;
  ArKeyHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(FILE **)&jarg3; 
  result = (ArKeyHandler *)new ArKeyHandler(arg1,arg2,arg3);
  *(ArKeyHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArKeyHandler_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jboolean jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  bool arg1 ;
  bool arg2 ;
  ArKeyHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  result = (ArKeyHandler *)new ArKeyHandler(arg1,arg2);
  *(ArKeyHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArKeyHandler_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  ArKeyHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (ArKeyHandler *)new ArKeyHandler(arg1);
  *(ArKeyHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArKeyHandler_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArKeyHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArKeyHandler *)new ArKeyHandler();
  *(ArKeyHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArKeyHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArKeyHandler *arg1 = (ArKeyHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArKeyHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArKeyHandler_1UP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArKeyHandler::KEY result;
  
  (void)jenv;
  (void)jcls;
  result = (ArKeyHandler::KEY)ArKeyHandler::UP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArKeyHandler_1addKeyHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArKeyHandler *arg1 = (ArKeyHandler *) 0 ;
  int arg2 ;
  ArFunctor *arg3 = (ArFunctor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArKeyHandler **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(ArFunctor **)&jarg3; 
  result = (bool)(arg1)->addKeyHandler(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArKeyHandler_1remKeyHandler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArKeyHandler *arg1 = (ArKeyHandler *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArKeyHandler **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remKeyHandler(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArKeyHandler_1remKeyHandler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArKeyHandler *arg1 = (ArKeyHandler *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArKeyHandler **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  result = (bool)(arg1)->remKeyHandler(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArKeyHandler_1takeKeys_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArKeyHandler *arg1 = (ArKeyHandler *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArKeyHandler **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->takeKeys(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArKeyHandler_1takeKeys_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArKeyHandler *arg1 = (ArKeyHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArKeyHandler **)&jarg1; 
  (arg1)->takeKeys();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArKeyHandler_1restore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArKeyHandler *arg1 = (ArKeyHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArKeyHandler **)&jarg1; 
  (arg1)->restore();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArKeyHandler_1checkKeys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArKeyHandler *arg1 = (ArKeyHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArKeyHandler **)&jarg1; 
  (arg1)->checkKeys();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArKeyHandler_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArKeyHandler *arg1 = (ArKeyHandler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArKeyHandler **)&jarg1; 
  result = (int)(arg1)->getKey();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLaserConnector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jint jarg5, jlong jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArRobotConnector *arg3 = (ArRobotConnector *) 0 ;
  bool arg4 ;
  ArLog::LogLevel arg5 ;
  ArRetFunctor1< bool,char const * > *arg6 = (ArRetFunctor1< bool,char const * > *) 0 ;
  ArRetFunctor1< bool,char const * > *arg7 = (ArRetFunctor1< bool,char const * > *) 0 ;
  ArLaserConnector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(ArRobotConnector **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (ArLog::LogLevel)jarg5; 
  arg6 = *(ArRetFunctor1< bool,char const * > **)&jarg6; 
  arg7 = *(ArRetFunctor1< bool,char const * > **)&jarg7; 
  result = (ArLaserConnector *)new ArLaserConnector(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(ArLaserConnector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLaserConnector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jint jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArRobotConnector *arg3 = (ArRobotConnector *) 0 ;
  bool arg4 ;
  ArLog::LogLevel arg5 ;
  ArRetFunctor1< bool,char const * > *arg6 = (ArRetFunctor1< bool,char const * > *) 0 ;
  ArLaserConnector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(ArRobotConnector **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (ArLog::LogLevel)jarg5; 
  arg6 = *(ArRetFunctor1< bool,char const * > **)&jarg6; 
  result = (ArLaserConnector *)new ArLaserConnector(arg1,arg2,arg3,arg4,arg5,arg6);
  *(ArLaserConnector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLaserConnector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4, jint jarg5) {
  jlong jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArRobotConnector *arg3 = (ArRobotConnector *) 0 ;
  bool arg4 ;
  ArLog::LogLevel arg5 ;
  ArLaserConnector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(ArRobotConnector **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (ArLog::LogLevel)jarg5; 
  result = (ArLaserConnector *)new ArLaserConnector(arg1,arg2,arg3,arg4,arg5);
  *(ArLaserConnector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLaserConnector_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jlong jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArRobotConnector *arg3 = (ArRobotConnector *) 0 ;
  bool arg4 ;
  ArLaserConnector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(ArRobotConnector **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArLaserConnector *)new ArLaserConnector(arg1,arg2,arg3,arg4);
  *(ArLaserConnector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLaserConnector_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArRobotConnector *arg3 = (ArRobotConnector *) 0 ;
  ArLaserConnector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(ArRobotConnector **)&jarg3; 
  result = (ArLaserConnector *)new ArLaserConnector(arg1,arg2,arg3);
  *(ArLaserConnector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArLaserConnector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArLaserConnector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserConnector_1connectLasers_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jboolean jarg4, jboolean jarg5, jboolean jarg6, jlong jarg7) {
  jboolean jresult = 0 ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  int *arg7 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserConnector **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = *(int **)&jarg7; 
  result = (bool)(arg1)->connectLasers(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserConnector_1connectLasers_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jboolean jarg4, jboolean jarg5, jboolean jarg6) {
  jboolean jresult = 0 ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserConnector **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->connectLasers(arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserConnector_1connectLasers_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jboolean jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserConnector **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->connectLasers(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserConnector_1connectLasers_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserConnector **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->connectLasers(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserConnector_1connectLasers_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserConnector **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->connectLasers(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserConnector_1connectLasers_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserConnector **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->connectLasers(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserConnector_1connectLasers_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserConnector **)&jarg1; 
  result = (bool)(arg1)->connectLasers();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserConnector_1setupLaser_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaserConnector **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->setupLaser(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserConnector_1setupLaser_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaserConnector **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  result = (bool)(arg1)->setupLaser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserConnector_1connectLaser_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaserConnector **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->connectLaser(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserConnector_1connectLaser_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaserConnector **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->connectLaser(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserConnector_1connectLaser_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaserConnector **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  result = (bool)(arg1)->connectLaser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserConnector_1addLaser_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaserConnector **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->addLaser(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserConnector_1addLaser_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaserConnector **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  result = (bool)(arg1)->addLaser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserConnector_1addPlaceholderLaser_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaserConnector **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->addPlaceholderLaser(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserConnector_1addPlaceholderLaser_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaserConnector **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->addPlaceholderLaser(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserConnector_1addPlaceholderLaser_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaserConnector **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  result = (bool)(arg1)->addPlaceholderLaser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserConnector_1parseArgs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserConnector **)&jarg1; 
  result = (bool)(arg1)->parseArgs();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserConnector_1parseArgs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArArgumentParser *arg2 = (ArArgumentParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaserConnector **)&jarg1; 
  arg2 = *(ArArgumentParser **)&jarg2; 
  result = (bool)(arg1)->parseArgs(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserConnector_1logOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserConnector **)&jarg1; 
  ((ArLaserConnector const *)arg1)->logOptions();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserConnector_1getLaser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  int arg2 ;
  ArLaser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserConnector **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ArLaser *)(arg1)->getLaser(arg2);
  *(ArLaser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserConnector_1replaceLaser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  ArLaserConnector *arg1 = (ArLaserConnector *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaserConnector **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->replaceLaser(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLaserFilter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  char *arg2 = (char *) 0 ;
  ArLaserFilter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArLaserFilter *)new ArLaserFilter(arg1,(char const *)arg2);
  *(ArLaserFilter **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLaserFilter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArLaserFilter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (ArLaserFilter *)new ArLaserFilter(arg1);
  *(ArLaserFilter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArLaserFilter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArLaserFilter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserFilter_1setRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaserFilter **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserFilter_1addToConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaserFilter **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->addToConfig(arg2,(char const *)arg3,(char const *)arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserFilter_1addToConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaserFilter **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->addToConfig(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserFilter_1blockingConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserFilter **)&jarg1; 
  result = (bool)(arg1)->blockingConnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserFilter_1asyncConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserFilter **)&jarg1; 
  result = (bool)(arg1)->asyncConnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserFilter_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserFilter **)&jarg1; 
  result = (bool)(arg1)->disconnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserFilter_1isConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserFilter **)&jarg1; 
  result = (bool)(arg1)->isConnected();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserFilter_1isTryingToConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserFilter **)&jarg1; 
  result = (bool)(arg1)->isTryingToConnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserFilter_1runThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserFilter **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (void *)(arg1)->runThread(arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserFilter_1laserCheckParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserFilter **)&jarg1; 
  result = (bool)(arg1)->laserCheckParams();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserFilter_1getBaseLaser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLaserFilter *arg1 = (ArLaserFilter *) 0 ;
  ArLaser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserFilter **)&jarg1; 
  result = (ArLaser *)(arg1)->getBaseLaser();
  *(ArLaser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLaserLogger_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4, jstring jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_, jstring jarg8, jboolean jarg9, jlong jarg10, jobject jarg10_, jlong jarg11, jlong jarg12) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArJoyHandler *arg7 = (ArJoyHandler *) 0 ;
  char *arg8 = (char *) 0 ;
  bool arg9 ;
  ArRobotJoyHandler *arg10 = (ArRobotJoyHandler *) 0 ;
  std::map< std::string,ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *,ArStrCaseCmpOp > *arg11 = (std::map< std::string,ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *,ArStrCaseCmpOp > *) 0 ;
  std::list< ArLaser * > *arg12 = (std::list< ArLaser * > *) 0 ;
  ArLaserLogger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg7_;
  (void)jarg10_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  arg7 = *(ArJoyHandler **)&jarg7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = jarg9 ? true : false; 
  arg10 = *(ArRobotJoyHandler **)&jarg10; 
  arg11 = *(std::map< std::string,ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *,ArStrCaseCmpOp > **)&jarg11; 
  arg12 = *(std::list< ArLaser * > **)&jarg12; 
  result = (ArLaserLogger *)new ArLaserLogger(arg1,arg2,arg3,arg4,(char const *)arg5,arg6,arg7,(char const *)arg8,arg9,arg10,(std::map< std::string,ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *,ArStrCaseCmpOp > const *)arg11,arg12);
  *(ArLaserLogger **)&jresult = result; 
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLaserLogger_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4, jstring jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_, jstring jarg8, jboolean jarg9, jlong jarg10, jobject jarg10_, jlong jarg11) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArJoyHandler *arg7 = (ArJoyHandler *) 0 ;
  char *arg8 = (char *) 0 ;
  bool arg9 ;
  ArRobotJoyHandler *arg10 = (ArRobotJoyHandler *) 0 ;
  std::map< std::string,ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *,ArStrCaseCmpOp > *arg11 = (std::map< std::string,ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *,ArStrCaseCmpOp > *) 0 ;
  ArLaserLogger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg7_;
  (void)jarg10_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  arg7 = *(ArJoyHandler **)&jarg7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = jarg9 ? true : false; 
  arg10 = *(ArRobotJoyHandler **)&jarg10; 
  arg11 = *(std::map< std::string,ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *,ArStrCaseCmpOp > **)&jarg11; 
  result = (ArLaserLogger *)new ArLaserLogger(arg1,arg2,arg3,arg4,(char const *)arg5,arg6,arg7,(char const *)arg8,arg9,arg10,(std::map< std::string,ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *,ArStrCaseCmpOp > const *)arg11);
  *(ArLaserLogger **)&jresult = result; 
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLaserLogger_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4, jstring jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_, jstring jarg8, jboolean jarg9, jlong jarg10, jobject jarg10_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArJoyHandler *arg7 = (ArJoyHandler *) 0 ;
  char *arg8 = (char *) 0 ;
  bool arg9 ;
  ArRobotJoyHandler *arg10 = (ArRobotJoyHandler *) 0 ;
  ArLaserLogger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg7_;
  (void)jarg10_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  arg7 = *(ArJoyHandler **)&jarg7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = jarg9 ? true : false; 
  arg10 = *(ArRobotJoyHandler **)&jarg10; 
  result = (ArLaserLogger *)new ArLaserLogger(arg1,arg2,arg3,arg4,(char const *)arg5,arg6,arg7,(char const *)arg8,arg9,arg10);
  *(ArLaserLogger **)&jresult = result; 
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLaserLogger_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4, jstring jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_, jstring jarg8, jboolean jarg9) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArJoyHandler *arg7 = (ArJoyHandler *) 0 ;
  char *arg8 = (char *) 0 ;
  bool arg9 ;
  ArLaserLogger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg7_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  arg7 = *(ArJoyHandler **)&jarg7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = jarg9 ? true : false; 
  result = (ArLaserLogger *)new ArLaserLogger(arg1,arg2,arg3,arg4,(char const *)arg5,arg6,arg7,(char const *)arg8,arg9);
  *(ArLaserLogger **)&jresult = result; 
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLaserLogger_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4, jstring jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_, jstring jarg8) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArJoyHandler *arg7 = (ArJoyHandler *) 0 ;
  char *arg8 = (char *) 0 ;
  ArLaserLogger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg7_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  arg7 = *(ArJoyHandler **)&jarg7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  result = (ArLaserLogger *)new ArLaserLogger(arg1,arg2,arg3,arg4,(char const *)arg5,arg6,arg7,(char const *)arg8);
  *(ArLaserLogger **)&jresult = result; 
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLaserLogger_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4, jstring jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArJoyHandler *arg7 = (ArJoyHandler *) 0 ;
  ArLaserLogger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg7_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  arg7 = *(ArJoyHandler **)&jarg7; 
  result = (ArLaserLogger *)new ArLaserLogger(arg1,arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
  *(ArLaserLogger **)&jresult = result; 
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLaserLogger_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4, jstring jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArLaserLogger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  result = (ArLaserLogger *)new ArLaserLogger(arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  *(ArLaserLogger **)&jresult = result; 
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLaserLogger_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  ArLaserLogger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (ArLaserLogger *)new ArLaserLogger(arg1,arg2,arg3,arg4,(char const *)arg5);
  *(ArLaserLogger **)&jresult = result; 
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArLaserLogger(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArLaserLogger **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserLogger_1addTagToLogPlain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserLogger **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->addTagToLogPlain((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserLogger_1addInfoToLogPlain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserLogger **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->addInfoToLogPlain((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserLogger_1setDistDiff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserLogger **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDistDiff(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserLogger_1getDistDiff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserLogger **)&jarg1; 
  result = (double)(arg1)->getDistDiff();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserLogger_1setDegDiff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserLogger **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDegDiff(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserLogger_1getDegDiff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserLogger **)&jarg1; 
  result = (double)(arg1)->getDegDiff();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserLogger_1takeReading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserLogger **)&jarg1; 
  (arg1)->takeReading();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserLogger_1addGoal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserLogger **)&jarg1; 
  (arg1)->addGoal();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserLogger_1wasFileOpenedSuccessfully(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserLogger **)&jarg1; 
  result = (bool)(arg1)->wasFileOpenedSuccessfully();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserLogger_1takingOldReadings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserLogger **)&jarg1; 
  result = (bool)(arg1)->takingOldReadings();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserLogger_1takeOldReadings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserLogger **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->takeOldReadings(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserLogger_1takingNewReadings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserLogger **)&jarg1; 
  result = (bool)(arg1)->takingNewReadings();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserLogger_1takeNewReadings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArLaserLogger *arg1 = (ArLaserLogger *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserLogger **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->takeNewReadings(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLaserReflectorDevice_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  char *arg3 = (char *) 0 ;
  ArLaserReflectorDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArLaserReflectorDevice *)new ArLaserReflectorDevice(arg1,arg2,(char const *)arg3);
  *(ArLaserReflectorDevice **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLaserReflectorDevice_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArLaserReflectorDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (ArLaserReflectorDevice *)new ArLaserReflectorDevice(arg1,arg2);
  *(ArLaserReflectorDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArLaserReflectorDevice(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArLaserReflectorDevice *arg1 = (ArLaserReflectorDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArLaserReflectorDevice **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserReflectorDevice_1processReadings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArLaserReflectorDevice *arg1 = (ArLaserReflectorDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaserReflectorDevice **)&jarg1; 
  (arg1)->processReadings();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserReflectorDevice_1setRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArLaserReflectorDevice *arg1 = (ArLaserReflectorDevice *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaserReflectorDevice **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLaserReflectorDevice_1addToConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArLaserReflectorDevice *arg1 = (ArLaserReflectorDevice *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLaserReflectorDevice **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->addToConfig(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLineFinder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRangeDevice *arg1 = (ArRangeDevice *) 0 ;
  ArLineFinder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeDevice **)&jarg1; 
  result = (ArLineFinder *)new ArLineFinder(arg1);
  *(ArLineFinder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArLineFinder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArLineFinder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinder_1getLinesAsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  SwigValueWrapper< std::set< ArLineFinderSegment * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinder **)&jarg1; 
  result = (arg1)->getLinesAsSet();
  *(std::set< ArLineFinderSegment * > **)&jresult = new std::set< ArLineFinderSegment * >((const std::set< ArLineFinderSegment * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinder_1getNonLinePointsAsSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  SwigValueWrapper< std::set< ArPose > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinder **)&jarg1; 
  result = (arg1)->getNonLinePointsAsSet();
  *(std::set< ArPose > **)&jresult = new std::set< ArPose >((const std::set< ArPose > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinder_1getLinesTakenPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinder **)&jarg1; 
  result = (arg1)->getLinesTakenPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinder_1saveLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinder **)&jarg1; 
  (arg1)->saveLast();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinder_1getLinesAndSaveThem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinder **)&jarg1; 
  (arg1)->getLinesAndSaveThem();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinder_1setVerbose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinder **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setVerbose(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinder_1getVerbose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinder **)&jarg1; 
  result = (bool)(arg1)->getVerbose();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinder_1setLineCreationParams_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinder **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setLineCreationParams(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinder_1setLineCreationParams_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinder **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLineCreationParams(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinder_1setLineCreationParams_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinder **)&jarg1; 
  (arg1)->setLineCreationParams();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinder_1setLineCombiningParams_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinder **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setLineCombiningParams(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinder_1setLineCombiningParams_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinder **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLineCombiningParams(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinder_1setLineCombiningParams_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinder **)&jarg1; 
  (arg1)->setLineCombiningParams();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinder_1setLineFilteringParams_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinder **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setLineFilteringParams(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinder_1setLineFilteringParams_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinder **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLineFilteringParams(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinder_1setLineFilteringParams_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinder **)&jarg1; 
  (arg1)->setLineFilteringParams();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinder_1setLineValidParams_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinder **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setLineValidParams(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinder_1setLineValidParams_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinder **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLineValidParams(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinder_1setLineValidParams_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinder **)&jarg1; 
  (arg1)->setLineValidParams();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinder_1setMaxDistBetweenPoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinder **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaxDistBetweenPoints(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinder_1setMaxDistBetweenPoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinder **)&jarg1; 
  (arg1)->setMaxDistBetweenPoints();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinder_1addToConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArLineFinder *arg1 = (ArLineFinder *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLineFinder **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->addToConfig(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLineFinderSegment_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArLineFinderSegment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArLineFinderSegment *)new ArLineFinderSegment();
  *(ArLineFinderSegment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLineFinderSegment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jint jarg5, jint jarg6, jint jarg7) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  ArLineFinderSegment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  result = (ArLineFinderSegment *)new ArLineFinderSegment(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(ArLineFinderSegment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLineFinderSegment_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jint jarg5, jint jarg6) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  int arg6 ;
  ArLineFinderSegment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (ArLineFinderSegment *)new ArLineFinderSegment(arg1,arg2,arg3,arg4,arg5,arg6);
  *(ArLineFinderSegment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLineFinderSegment_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jint jarg5) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  ArLineFinderSegment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (int)jarg5; 
  result = (ArLineFinderSegment *)new ArLineFinderSegment(arg1,arg2,arg3,arg4,arg5);
  *(ArLineFinderSegment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLineFinderSegment_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  ArLineFinderSegment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArLineFinderSegment *)new ArLineFinderSegment(arg1,arg2,arg3,arg4);
  *(ArLineFinderSegment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArLineFinderSegment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArLineFinderSegment **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinderSegment_1newEndPoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jint jarg6, jint jarg7, jint jarg8) {
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinderSegment **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  (arg1)->newEndPoints(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinderSegment_1newEndPoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jint jarg6, jint jarg7) {
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  int arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinderSegment **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->newEndPoints(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinderSegment_1newEndPoints_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jint jarg6) {
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinderSegment **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->newEndPoints(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinderSegment_1newEndPoints_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinderSegment **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->newEndPoints(arg2,arg3,arg4,arg5);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinderSegment_1getLineAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinderSegment **)&jarg1; 
  result = (double)(arg1)->getLineAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinderSegment_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinderSegment **)&jarg1; 
  result = (double)(arg1)->getLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinderSegment_1getNumPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinderSegment **)&jarg1; 
  result = (int)(arg1)->getNumPoints();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinderSegment_1getStartPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinderSegment **)&jarg1; 
  result = (int)(arg1)->getStartPoint();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinderSegment_1getEndPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinderSegment **)&jarg1; 
  result = (int)(arg1)->getEndPoint();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinderSegment_1setAveDistFromLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinderSegment **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setAveDistFromLine(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLineFinderSegment_1getAveDistFromLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArLineFinderSegment *arg1 = (ArLineFinderSegment *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLineFinderSegment **)&jarg1; 
  result = (double)(arg1)->getAveDistFromLine();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLog_1log(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  ArLog::LogLevel arg1 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArLog::LogLevel)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  ArLog::logPlain(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLog_1init_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jstring jarg3, jboolean jarg4, jboolean jarg5, jboolean jarg6) {
  jboolean jresult = 0 ;
  ArLog::LogType arg1 ;
  ArLog::LogLevel arg2 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArLog::LogType)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (bool)ArLog::init(arg1,arg2,(char const *)arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLog_1init_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jstring jarg3, jboolean jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArLog::LogType arg1 ;
  ArLog::LogLevel arg2 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArLog::LogType)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)ArLog::init(arg1,arg2,(char const *)arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLog_1init_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jstring jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  ArLog::LogType arg1 ;
  ArLog::LogLevel arg2 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArLog::LogType)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = jarg4 ? true : false; 
  result = (bool)ArLog::init(arg1,arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLog_1init_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArLog::LogType arg1 ;
  ArLog::LogLevel arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArLog::LogType)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)ArLog::init(arg1,arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLog_1init_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  ArLog::LogType arg1 ;
  ArLog::LogLevel arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArLog::LogType)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  result = (bool)ArLog::init(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLog_1close(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArLog::close();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLog_1logErrorFromOS(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  ArLog::LogLevel arg1 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArLog::LogLevel)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  ArLog::logErrorFromOS(arg1,(char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLog_1logErrorFromOSPlain(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  ArLog::LogLevel arg1 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArLog::LogLevel)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  ArLog::logErrorFromOSPlain(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLog_1logBacktrace(JNIEnv *jenv, jclass jcls, jint jarg1) {
  ArLog::LogLevel arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArLog::LogLevel)jarg1; 
  ArLog::logBacktrace(arg1);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLog_1logFileContents(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  ArLog::LogLevel arg1 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArLog::LogLevel)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)ArLog::logFileContents(arg1,(char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLog_1colbertPrint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  void (*arg1)(int,char const *) = (void (*)(int,char const *)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void (**)(int,char const *))&jarg1; 
  ArLog::colbertPrint = arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLog_1colbertPrint_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  void (*result)(int,char const *) = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (void (*)(int,char const *))ArLog::colbertPrint;
  *(void (**)(int,char const *))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLog_1addToConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArConfig *arg1 = (ArConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfig **)&jarg1; 
  ArLog::addToConfig(arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLog_1aramInit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jdouble jarg3, jboolean jarg4) {
  char *arg1 = (char *) 0 ;
  ArLog::LogLevel arg2 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (ArLog::LogLevel)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  ArLog::aramInit((char const *)arg1,arg2,arg3,arg4);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLog_1aramInit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jdouble jarg3) {
  char *arg1 = (char *) 0 ;
  ArLog::LogLevel arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (ArLog::LogLevel)jarg2; 
  arg3 = (double)jarg3; 
  ArLog::aramInit((char const *)arg1,arg2,arg3);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLog_1aramInit_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  char *arg1 = (char *) 0 ;
  ArLog::LogLevel arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (ArLog::LogLevel)jarg2; 
  ArLog::aramInit((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLog_1aramInit_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  ArLog::aramInit((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLog_1setFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArFunctor1< char const * > *arg1 = (ArFunctor1< char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor1< char const * > **)&jarg1; 
  ArLog::setFunctor(arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLog_1clearFunctor(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArLog::clearFunctor();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLog_1internalForceLockup(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArLog::internalForceLockup();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLog(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArLog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArLog *)new ArLog();
  *(ArLog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArLog(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArLog *arg1 = (ArLog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArLog **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArLogFileConnection(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArLogFileConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArLogFileConnection *)new ArLogFileConnection();
  *(ArLogFileConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArLogFileConnection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1open_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->open((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1open_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  result = (int)(arg1)->open();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1setLogFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setLogFile((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1setLogFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  (arg1)->setLogFile();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1openSimple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  result = (bool)(arg1)->openSimple();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  result = (int)(arg1)->getStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  result = (bool)(arg1)->close();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (int)(arg1)->read((char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (unsigned int)jarg3; 
  result = (int)(arg1)->read((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (unsigned int)jarg3; 
  result = (int)(arg1)->write((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1getOpenMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getOpenMessage(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1getTimeRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  int arg2 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getTimeRead(arg2);
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1isTimeStamping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  result = (bool)(arg1)->isTimeStamping();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1getLogFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  result = (char *)(arg1)->getLogFile();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1internalOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  result = (int)(arg1)->internalOpen();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1OPEN_1FILE_1NOT_1FOUND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArLogFileConnection::Open result;
  
  (void)jenv;
  (void)jcls;
  result = (ArLogFileConnection::Open)ArLogFileConnection::OPEN_FILE_NOT_FOUND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1myPose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  ArPose *arg2 = (ArPose *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  arg2 = *(ArPose **)&jarg2; 
  if (arg1) (arg1)->myPose = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1myPose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  ArPose *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  result = (ArPose *)& ((arg1)->myPose);
  *(ArPose **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1havePose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->havePose = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1havePose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  result = (bool) ((arg1)->havePose);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1myName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->myName, (const char *)arg2, 100-1);
      arg1->myName[100-1] = 0;
    } else {
      arg1->myName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1myName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  result = (char *)(char *) ((arg1)->myName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1myType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->myType, (const char *)arg2, 20-1);
      arg1->myType[20-1] = 0;
    } else {
      arg1->myType[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1myType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  result = (char *)(char *) ((arg1)->myType);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1mySubtype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->mySubtype, (const char *)arg2, 20-1);
      arg1->mySubtype[20-1] = 0;
    } else {
      arg1->mySubtype[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArLogFileConnection_1mySubtype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArLogFileConnection *arg1 = (ArLogFileConnection *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLogFileConnection **)&jarg1; 
  result = (char *)(char *) ((arg1)->mySubtype);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMD5Calculator_1DIGEST_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArMD5Calculator::DIGEST_LENGTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMD5Calculator_1DISPLAY_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArMD5Calculator::DISPLAY_LENGTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMD5Calculator_1toDisplay(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3, jlong jarg4) {
  unsigned char *arg1 = (unsigned char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (size_t)jarg4; 
  ArMD5Calculator::toDisplay((unsigned char const *)arg1,arg2,arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMD5Calculator_1calculateChecksum(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(unsigned char **)&jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)ArMD5Calculator::calculateChecksum((char const *)arg1,arg2,arg3);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMD5Calculator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArFunctor1< char const * > *arg1 = (ArFunctor1< char const * > *) 0 ;
  ArMD5Calculator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor1< char const * > **)&jarg1; 
  result = (ArMD5Calculator *)new ArMD5Calculator(arg1);
  *(ArMD5Calculator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMD5Calculator_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArMD5Calculator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArMD5Calculator *)new ArMD5Calculator();
  *(ArMD5Calculator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArMD5Calculator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArMD5Calculator *arg1 = (ArMD5Calculator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArMD5Calculator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMD5Calculator_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMD5Calculator *arg1 = (ArMD5Calculator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMD5Calculator **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMD5Calculator_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArMD5Calculator *arg1 = (ArMD5Calculator *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMD5Calculator **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->append((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMD5Calculator_1getDigest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMD5Calculator *arg1 = (ArMD5Calculator *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMD5Calculator **)&jarg1; 
  result = (unsigned char *)(arg1)->getDigest();
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMD5Calculator_1getFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMD5Calculator *arg1 = (ArMD5Calculator *) 0 ;
  ArFunctor1< char const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMD5Calculator **)&jarg1; 
  result = (ArFunctor1< char const * > *)(arg1)->getFunctor();
  *(ArFunctor1< char const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMD5Calculator_1getSecondFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMD5Calculator *arg1 = (ArMD5Calculator *) 0 ;
  ArFunctor1< char const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMD5Calculator **)&jarg1; 
  result = (ArFunctor1< char const * > *)(arg1)->getSecondFunctor();
  *(ArFunctor1< char const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMD5Calculator_1setSecondFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMD5Calculator *arg1 = (ArMD5Calculator *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMD5Calculator **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  (arg1)->setSecondFunctor(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ARMAP_1DEFAULT_1SCAN_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *) "\0";
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1isDefaultScanType(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)ArMapScanInterface::isDefaultScanType((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1isSummaryScanType(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)ArMapScanInterface::isSummaryScanType((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArMapScanInterface(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1getDisplayString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->getDisplayString((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1getDisplayString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  result = (char *)(arg1)->getDisplayString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1getPoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< ArPose > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (std::vector< ArPose > *)(arg1)->getPoints((char const *)arg2);
  *(std::vector< ArPose > **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1getPoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  std::vector< ArPose > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  result = (std::vector< ArPose > *)(arg1)->getPoints();
  *(std::vector< ArPose > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1getMinPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getMinPose((char const *)arg2);
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1getMinPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  result = (arg1)->getMinPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1getMaxPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getMaxPose((char const *)arg2);
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1getMaxPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  result = (arg1)->getMaxPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1getNumPoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->getNumPoints((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1getNumPoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  result = (int)(arg1)->getNumPoints();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1isSortedPoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((ArMapScanInterface const *)arg1)->isSortedPoints((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1isSortedPoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  result = (bool)((ArMapScanInterface const *)arg1)->isSortedPoints();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1setPoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4, jlong jarg5) {
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapChangeDetails *arg5 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = *(std::vector< ArPose > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  arg5 = *(ArMapChangeDetails **)&jarg5; 
  (arg1)->setPoints((std::vector< ArPose > const *)arg2,(char const *)arg3,arg4,arg5);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1setPoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4) {
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = *(std::vector< ArPose > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  (arg1)->setPoints((std::vector< ArPose > const *)arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1setPoints_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = *(std::vector< ArPose > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setPoints((std::vector< ArPose > const *)arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1setPoints_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = *(std::vector< ArPose > **)&jarg2; 
  (arg1)->setPoints((std::vector< ArPose > const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1getLines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< ArLineSegment > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (std::vector< ArLineSegment > *)(arg1)->getLines((char const *)arg2);
  *(std::vector< ArLineSegment > **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1getLines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  std::vector< ArLineSegment > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  result = (std::vector< ArLineSegment > *)(arg1)->getLines();
  *(std::vector< ArLineSegment > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1getLineMinPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getLineMinPose((char const *)arg2);
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1getLineMinPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  result = (arg1)->getLineMinPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1getLineMaxPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getLineMaxPose((char const *)arg2);
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1getLineMaxPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  result = (arg1)->getLineMaxPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1getNumLines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->getNumLines((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1getNumLines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  result = (int)(arg1)->getNumLines();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1isSortedLines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((ArMapScanInterface const *)arg1)->isSortedLines((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1isSortedLines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  result = (bool)((ArMapScanInterface const *)arg1)->isSortedLines();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1setLines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4, jlong jarg5) {
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapChangeDetails *arg5 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = *(std::vector< ArLineSegment > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  arg5 = *(ArMapChangeDetails **)&jarg5; 
  (arg1)->setLines((std::vector< ArLineSegment > const *)arg2,(char const *)arg3,arg4,arg5);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1setLines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4) {
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = *(std::vector< ArLineSegment > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  (arg1)->setLines((std::vector< ArLineSegment > const *)arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1setLines_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = *(std::vector< ArLineSegment > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setLines((std::vector< ArLineSegment > const *)arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1setLines_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = *(std::vector< ArLineSegment > **)&jarg2; 
  (arg1)->setLines((std::vector< ArLineSegment > const *)arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1getResolution_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->getResolution((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1getResolution_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  result = (int)(arg1)->getResolution();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1setResolution_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4) {
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  (arg1)->setResolution(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1setResolution_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setResolution(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1setResolution_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setResolution(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1writeScanToFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->writeScanToFunctor(arg2,(char const *)arg3,(char const *)arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1writeScanToFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeScanToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1writePointsToFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  ArFunctor2< int,std::vector< ArPose > * > *arg2 = (ArFunctor2< int,std::vector< ArPose > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor1< char const * > *arg4 = (ArFunctor1< char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArPose > * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(ArFunctor1< char const * > **)&jarg4; 
  (arg1)->writePointsToFunctor(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1writePointsToFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  ArFunctor2< int,std::vector< ArPose > * > *arg2 = (ArFunctor2< int,std::vector< ArPose > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArPose > * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writePointsToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1writePointsToFunctor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  ArFunctor2< int,std::vector< ArPose > * > *arg2 = (ArFunctor2< int,std::vector< ArPose > * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArPose > * > **)&jarg2; 
  (arg1)->writePointsToFunctor(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1writeLinesToFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  ArFunctor2< int,std::vector< ArLineSegment > * > *arg2 = (ArFunctor2< int,std::vector< ArLineSegment > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor1< char const * > *arg4 = (ArFunctor1< char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArLineSegment > * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(ArFunctor1< char const * > **)&jarg4; 
  (arg1)->writeLinesToFunctor(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1writeLinesToFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  ArFunctor2< int,std::vector< ArLineSegment > * > *arg2 = (ArFunctor2< int,std::vector< ArLineSegment > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArLineSegment > * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeLinesToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1writeLinesToFunctor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  ArFunctor2< int,std::vector< ArLineSegment > * > *arg2 = (ArFunctor2< int,std::vector< ArLineSegment > * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArLineSegment > * > **)&jarg2; 
  (arg1)->writeLinesToFunctor(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1addToFileParser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = *(ArFileParser **)&jarg2; 
  result = (bool)(arg1)->addToFileParser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1remFromFileParser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = *(ArFileParser **)&jarg2; 
  result = (bool)(arg1)->remFromFileParser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1readDataPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->readDataPoint(arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1readLineSegment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->readLineSegment(arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1loadDataPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->loadDataPoint(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScanInterface_1loadLineSegment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  ArMapScanInterface *arg1 = (ArMapScanInterface *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScanInterface **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->loadLineSegment(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArMapObjectsInterface(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArMapObjectsInterface **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjectsInterface_1findFirstMapObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObjectsInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = jarg4 ? true : false; 
  result = (ArMapObject *)(arg1)->findFirstMapObject((char const *)arg2,(char const *)arg3,arg4);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjectsInterface_1findFirstMapObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObjectsInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArMapObject *)(arg1)->findFirstMapObject((char const *)arg2,(char const *)arg3);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjectsInterface_1findMapObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObjectsInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = jarg4 ? true : false; 
  result = (ArMapObject *)(arg1)->findMapObject((char const *)arg2,(char const *)arg3,arg4);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjectsInterface_1findMapObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObjectsInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArMapObject *)(arg1)->findMapObject((char const *)arg2,(char const *)arg3);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjectsInterface_1findMapObject_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObjectsInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArMapObject *)(arg1)->findMapObject((char const *)arg2);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjectsInterface_1findMapObjectsOfType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  std::list< ArMapObject * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObjectsInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (arg1)->findMapObjectsOfType((char const *)arg2,arg3);
  *(std::list< ArMapObject * > **)&jresult = new std::list< ArMapObject * >((const std::list< ArMapObject * > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjectsInterface_1findMapObjectsOfType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArMapObject * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObjectsInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->findMapObjectsOfType((char const *)arg2);
  *(std::list< ArMapObject * > **)&jresult = new std::list< ArMapObject * >((const std::list< ArMapObject * > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjectsInterface_1getMapObjects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  std::list< ArMapObject * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObjectsInterface **)&jarg1; 
  result = (std::list< ArMapObject * > *)(arg1)->getMapObjects();
  *(std::list< ArMapObject * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjectsInterface_1setMapObjects_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4) {
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  std::list< ArMapObject * > *arg2 = (std::list< ArMapObject * > *) 0 ;
  bool arg3 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapObjectsInterface **)&jarg1; 
  arg2 = *(std::list< ArMapObject * > **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  (arg1)->setMapObjects((std::list< ArMapObject * > const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjectsInterface_1setMapObjects_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  std::list< ArMapObject * > *arg2 = (std::list< ArMapObject * > *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapObjectsInterface **)&jarg1; 
  arg2 = *(std::list< ArMapObject * > **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setMapObjects((std::list< ArMapObject * > const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjectsInterface_1setMapObjects_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  std::list< ArMapObject * > *arg2 = (std::list< ArMapObject * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapObjectsInterface **)&jarg1; 
  arg2 = *(std::list< ArMapObject * > **)&jarg2; 
  (arg1)->setMapObjects((std::list< ArMapObject * > const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjectsInterface_1writeObjectListToFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMapObjectsInterface *arg1 = (ArMapObjectsInterface *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapObjectsInterface **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeObjectListToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1MAP_1INFO_1NAME_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArMapInfoInterface::MAP_INFO_NAME = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInfoInterface::MAP_INFO_NAME, (const char *)arg1);
    } else {
      ArMapInfoInterface::MAP_INFO_NAME = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1MAP_1INFO_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArMapInfoInterface::MAP_INFO_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1META_1INFO_1NAME_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArMapInfoInterface::META_INFO_NAME = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInfoInterface::META_INFO_NAME, (const char *)arg1);
    } else {
      ArMapInfoInterface::META_INFO_NAME = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1META_1INFO_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArMapInfoInterface::META_INFO_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1TASK_1INFO_1NAME_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArMapInfoInterface::TASK_INFO_NAME = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInfoInterface::TASK_INFO_NAME, (const char *)arg1);
    } else {
      ArMapInfoInterface::TASK_INFO_NAME = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1TASK_1INFO_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArMapInfoInterface::TASK_INFO_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1ROUTE_1INFO_1NAME_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArMapInfoInterface::ROUTE_INFO_NAME = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInfoInterface::ROUTE_INFO_NAME, (const char *)arg1);
    } else {
      ArMapInfoInterface::ROUTE_INFO_NAME = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1ROUTE_1INFO_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArMapInfoInterface::ROUTE_INFO_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1SCHED_1TASK_1INFO_1NAME_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArMapInfoInterface::SCHED_TASK_INFO_NAME = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInfoInterface::SCHED_TASK_INFO_NAME, (const char *)arg1);
    } else {
      ArMapInfoInterface::SCHED_TASK_INFO_NAME = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1SCHED_1TASK_1INFO_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArMapInfoInterface::SCHED_TASK_INFO_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1SCHED_1INFO_1NAME_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArMapInfoInterface::SCHED_INFO_NAME = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInfoInterface::SCHED_INFO_NAME, (const char *)arg1);
    } else {
      ArMapInfoInterface::SCHED_INFO_NAME = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1SCHED_1INFO_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArMapInfoInterface::SCHED_INFO_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1CAIRN_1INFO_1NAME_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArMapInfoInterface::CAIRN_INFO_NAME = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInfoInterface::CAIRN_INFO_NAME, (const char *)arg1);
    } else {
      ArMapInfoInterface::CAIRN_INFO_NAME = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1CAIRN_1INFO_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArMapInfoInterface::CAIRN_INFO_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1CUSTOM_1INFO_1NAME_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArMapInfoInterface::CUSTOM_INFO_NAME = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInfoInterface::CUSTOM_INFO_NAME, (const char *)arg1);
    } else {
      ArMapInfoInterface::CUSTOM_INFO_NAME = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1CUSTOM_1INFO_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArMapInfoInterface::CUSTOM_INFO_NAME;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArMapInfoInterface(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArMapInfoInterface **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1getInfoCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInfoInterface **)&jarg1; 
  result = (int)((ArMapInfoInterface const *)arg1)->getInfoCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1getInfoNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInfoInterface **)&jarg1; 
  result = ((ArMapInfoInterface const *)arg1)->getInfoNames();
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1getInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInfoInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (std::list< ArArgumentBuilder * > *)(arg1)->getInfo((char const *)arg2);
  *(std::list< ArArgumentBuilder * > **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1getInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  int arg2 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInfoInterface **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (std::list< ArArgumentBuilder * > *)(arg1)->getInfo(arg2);
  *(std::list< ArArgumentBuilder * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1getMapInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInfoInterface **)&jarg1; 
  result = (std::list< ArArgumentBuilder * > *)(arg1)->getMapInfo();
  *(std::list< ArArgumentBuilder * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1setInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jboolean jresult = 0 ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMapInfoInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(std::list< ArArgumentBuilder * > **)&jarg3; 
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  result = (bool)(arg1)->setInfo((char const *)arg2,(std::list< ArArgumentBuilder * > const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1setInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMapInfoInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(std::list< ArArgumentBuilder * > **)&jarg3; 
  result = (bool)(arg1)->setInfo((char const *)arg2,(std::list< ArArgumentBuilder * > const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1setInfo_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jboolean jresult = 0 ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  int arg2 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMapInfoInterface **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::list< ArArgumentBuilder * > **)&jarg3; 
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  result = (bool)(arg1)->setInfo(arg2,(std::list< ArArgumentBuilder * > const *)arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1setInfo_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  int arg2 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMapInfoInterface **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::list< ArArgumentBuilder * > **)&jarg3; 
  result = (bool)(arg1)->setInfo(arg2,(std::list< ArArgumentBuilder * > const *)arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1setMapInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  std::list< ArArgumentBuilder * > *arg2 = (std::list< ArArgumentBuilder * > *) 0 ;
  ArMapChangeDetails *arg3 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInfoInterface **)&jarg1; 
  arg2 = *(std::list< ArArgumentBuilder * > **)&jarg2; 
  arg3 = *(ArMapChangeDetails **)&jarg3; 
  result = (bool)(arg1)->setMapInfo((std::list< ArArgumentBuilder * > const *)arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1setMapInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  std::list< ArArgumentBuilder * > *arg2 = (std::list< ArArgumentBuilder * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInfoInterface **)&jarg1; 
  arg2 = *(std::list< ArArgumentBuilder * > **)&jarg2; 
  result = (bool)(arg1)->setMapInfo((std::list< ArArgumentBuilder * > const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1writeInfoToFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInfoInterface **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeInfoToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1FIRST_1INFO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArMapInfoInterface::InfoType result;
  
  (void)jenv;
  (void)jcls;
  result = (ArMapInfoInterface::InfoType)ArMapInfoInterface::FIRST_INFO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1LAST_1INFO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArMapInfoInterface::InfoType result;
  
  (void)jenv;
  (void)jcls;
  result = (ArMapInfoInterface::InfoType)ArMapInfoInterface::LAST_INFO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1INFO_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArMapInfoInterface::INFO_COUNT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfoInterface_1getInfoName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArMapInfoInterface *arg1 = (ArMapInfoInterface *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInfoInterface **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getInfoName(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArMapSupplementInterface(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArMapSupplementInterface *arg1 = (ArMapSupplementInterface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArMapSupplementInterface **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSupplementInterface_1hasOriginLatLongAlt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMapSupplementInterface *arg1 = (ArMapSupplementInterface *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSupplementInterface **)&jarg1; 
  result = (bool)(arg1)->hasOriginLatLongAlt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSupplementInterface_1getOriginLatLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapSupplementInterface *arg1 = (ArMapSupplementInterface *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSupplementInterface **)&jarg1; 
  result = (arg1)->getOriginLatLong();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSupplementInterface_1getOriginAltitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArMapSupplementInterface *arg1 = (ArMapSupplementInterface *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSupplementInterface **)&jarg1; 
  result = (double)(arg1)->getOriginAltitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSupplementInterface_1setOriginLatLongAlt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jdouble jarg4, jlong jarg5) {
  ArMapSupplementInterface *arg1 = (ArMapSupplementInterface *) 0 ;
  bool arg2 ;
  ArPose *arg3 = 0 ;
  double arg4 ;
  ArMapChangeDetails *arg5 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMapSupplementInterface **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(ArPose **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose const & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  arg5 = *(ArMapChangeDetails **)&jarg5; 
  (arg1)->setOriginLatLongAlt(arg2,(ArPose const &)*arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSupplementInterface_1setOriginLatLongAlt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  ArMapSupplementInterface *arg1 = (ArMapSupplementInterface *) 0 ;
  bool arg2 ;
  ArPose *arg3 = 0 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMapSupplementInterface **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(ArPose **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose const & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  (arg1)->setOriginLatLongAlt(arg2,(ArPose const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSupplementInterface_1writeSupplementToFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMapSupplementInterface *arg1 = (ArMapSupplementInterface *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSupplementInterface **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeSupplementToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1MAX_1MAP_1NAME_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArMapInterface::MAX_MAP_NAME_LENGTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1MAP_1CATEGORY_12D_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArMapInterface::MAP_CATEGORY_2D = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInterface::MAP_CATEGORY_2D, (const char *)arg1);
    } else {
      ArMapInterface::MAP_CATEGORY_2D = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1MAP_1CATEGORY_12D_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArMapInterface::MAP_CATEGORY_2D;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1MAP_1CATEGORY_12D_1MULTI_1SOURCES_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArMapInterface::MAP_CATEGORY_2D_MULTI_SOURCES = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInterface::MAP_CATEGORY_2D_MULTI_SOURCES, (const char *)arg1);
    } else {
      ArMapInterface::MAP_CATEGORY_2D_MULTI_SOURCES = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1MAP_1CATEGORY_12D_1MULTI_1SOURCES_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArMapInterface::MAP_CATEGORY_2D_MULTI_SOURCES;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1MAP_1CATEGORY_12D_1EXTENDED_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArMapInterface::MAP_CATEGORY_2D_EXTENDED = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInterface::MAP_CATEGORY_2D_EXTENDED, (const char *)arg1);
    } else {
      ArMapInterface::MAP_CATEGORY_2D_EXTENDED = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1MAP_1CATEGORY_12D_1EXTENDED_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArMapInterface::MAP_CATEGORY_2D_EXTENDED;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1MAP_1CATEGORY_12D_1COMPOSITE_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArMapInterface::MAP_CATEGORY_2D_COMPOSITE = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapInterface::MAP_CATEGORY_2D_COMPOSITE, (const char *)arg1);
    } else {
      ArMapInterface::MAP_CATEGORY_2D_COMPOSITE = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1MAP_1CATEGORY_12D_1COMPOSITE_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArMapInterface::MAP_CATEGORY_2D_COMPOSITE;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1createRealFileName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = ArMapInterface::createRealFileName((char const *)arg1,(char const *)arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArMapInterface(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArMapInterface **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArMapInterface *arg2 = (ArMapInterface *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = *(ArMapInterface **)&jarg2; 
  result = (bool)(arg1)->set(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1cloneMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArMapInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  result = (ArMapInterface *)(arg1)->clone();
  *(ArMapInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1getScanTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  result = ((ArMapInterface const *)arg1)->getScanTypes();
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1setScanTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setScanTypes((std::list< std::string > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  result = (int)(arg1)->lock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1tryLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  result = (int)(arg1)->tryLock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  result = (int)(arg1)->unlock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1mapChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  (arg1)->mapChanged();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1addMapChangedCBPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addMapChangedCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1addMapChangedCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addMapChangedCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1addMapChangedCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addMapChangedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1remMapChangedCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remMapChangedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1addPreMapChangedCBPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addPreMapChangedCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1addPreMapChangedCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addPreMapChangedCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1addPreMapChangedCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addPreMapChangedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1remPreMapChangedCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remPreMapChangedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1setMapChangedLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArLog::LogLevel arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  (arg1)->setMapChangedLogLevel(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1getMapChangedLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArLog::LogLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  result = (ArLog::LogLevel)(arg1)->getMapChangedLogLevel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1writeToFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1writeObjectsToFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4, jstring jarg5) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  (arg1)->writeObjectsToFunctor(arg2,(char const *)arg3,arg4,(char const *)arg5);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1writeObjectsToFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  (arg1)->writeObjectsToFunctor(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1writeObjectsToFunctor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeObjectsToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1addPreWriteFileCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addPreWriteFileCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1addPreWriteFileCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addPreWriteFileCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1remPreWriteFileCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remPreWriteFileCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1addPostWriteFileCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addPostWriteFileCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1addPostWriteFileCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addPostWriteFileCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1remPostWriteFileCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remPostWriteFileCB(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1getMapId_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArMapId *arg2 = (ArMapId *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = *(ArMapId **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->getMapId(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1getMapId_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArMapId *arg2 = (ArMapId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = *(ArMapId **)&jarg2; 
  result = (bool)(arg1)->getMapId(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1calculateChecksum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)(arg1)->calculateChecksum(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1getBaseDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  result = (char *)((ArMapInterface const *)arg1)->getBaseDirectory();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1setBaseDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setBaseDirectory((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1getTempDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  result = (char *)((ArMapInterface const *)arg1)->getTempDirectory();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1setTempDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setTempDirectory((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1createRealFileName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->createRealFileName((char const *)arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1getFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  result = (char *)((ArMapInterface const *)arg1)->getFileName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1setSourceFileName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  (arg1)->setSourceFileName((char const *)arg2,(char const *)arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1setSourceFileName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setSourceFileName((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1refresh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  result = (bool)(arg1)->refresh();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1setIgnoreEmptyFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIgnoreEmptyFileName(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1getIgnoreEmptyFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  result = (bool)(arg1)->getIgnoreEmptyFileName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1setIgnoreCase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIgnoreCase(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1setIgnoreCase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  (arg1)->setIgnoreCase();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1getIgnoreCase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  result = (bool)(arg1)->getIgnoreCase();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1getInactiveInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArMapInfoInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  result = (ArMapInfoInterface *)(arg1)->getInactiveInfo();
  *(ArMapInfoInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1getInactiveObjects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArMapObjectsInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  result = (ArMapObjectsInterface *)(arg1)->getInactiveObjects();
  *(ArMapObjectsInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1getChildObjects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  ArMapObjectsInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  result = (ArMapObjectsInterface *)(arg1)->getChildObjects();
  *(ArMapObjectsInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1findMapObjectParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  ArArgumentBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArArgumentBuilder *)(arg1)->findMapObjectParams((char const *)arg2);
  *(ArArgumentBuilder **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1setMapObjectParams_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jboolean jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  ArArgumentBuilder *arg3 = (ArArgumentBuilder *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(ArArgumentBuilder **)&jarg3; 
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  result = (bool)(arg1)->setMapObjectParams((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1setMapObjectParams_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  ArArgumentBuilder *arg3 = (ArArgumentBuilder *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(ArArgumentBuilder **)&jarg3; 
  result = (bool)(arg1)->setMapObjectParams((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1getRemainder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  result = (std::list< ArArgumentBuilder * > *)(arg1)->getRemainder();
  *(std::list< ArArgumentBuilder * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1setQuiet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setQuiet(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1parseLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->parseLine(arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1parsingComplete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  (arg1)->parsingComplete();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1isLoadingDataStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  result = (bool)(arg1)->isLoadingDataStarted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInterface_1isLoadingLinesAndDataStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMapInterface *arg1 = (ArMapInterface *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInterface **)&jarg1; 
  result = (bool)(arg1)->isLoadingLinesAndDataStarted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jboolean jarg6, jint jarg7, jstring jarg8, jint jarg9) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArPriority::Priority arg7 ;
  char *arg8 = (char *) 0 ;
  int arg9 ;
  ArMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  arg7 = (ArPriority::Priority)jarg7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = (int)jarg9; 
  result = (ArMap *)new SwigDirector_ArMap(jenv,(char const *)arg1,arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,arg6,arg7,(char const *)arg8,arg9);
  *(ArMap **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jboolean jarg6, jint jarg7, jstring jarg8) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArPriority::Priority arg7 ;
  char *arg8 = (char *) 0 ;
  ArMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  arg7 = (ArPriority::Priority)jarg7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  result = (ArMap *)new SwigDirector_ArMap(jenv,(char const *)arg1,arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,arg6,arg7,(char const *)arg8);
  *(ArMap **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMap_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jboolean jarg6, jint jarg7) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArPriority::Priority arg7 ;
  ArMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  arg7 = (ArPriority::Priority)jarg7; 
  result = (ArMap *)new SwigDirector_ArMap(jenv,(char const *)arg1,arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,arg6,arg7);
  *(ArMap **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMap_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  result = (ArMap *)new SwigDirector_ArMap(jenv,(char const *)arg1,arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,arg6);
  *(ArMap **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMap_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  ArMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (ArMap *)new SwigDirector_ArMap(jenv,(char const *)arg1,arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  *(ArMap **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMap_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  ArMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (ArMap *)new SwigDirector_ArMap(jenv,(char const *)arg1,arg2,(char const *)arg3,(char const *)arg4);
  *(ArMap **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMap_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  ArMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArMap *)new SwigDirector_ArMap(jenv,(char const *)arg1,arg2,(char const *)arg3);
  *(ArMap **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMap_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ArMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  result = (ArMap *)new SwigDirector_ArMap(jenv,(char const *)arg1,arg2);
  *(ArMap **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMap_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArMap *)new SwigDirector_ArMap(jenv,(char const *)arg1);
  *(ArMap **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMap_1_1SWIG_19(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArMap *)new SwigDirector_ArMap(jenv);
  *(ArMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMap_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = 0 ;
  ArMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArMap const & reference is null");
    return 0;
  } 
  result = (ArMap *)new SwigDirector_ArMap(jenv,(ArMap const &)*arg1);
  *(ArMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArMap *arg1 = (ArMap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArMap **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getScanTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = ((ArMap const *)arg1)->getScanTypes();
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getScanTypesSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = ((ArMap const *)arg1)->ArMap::getScanTypes();
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setScanTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setScanTypes((std::list< std::string > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setScanTypesSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->ArMap::setScanTypes((std::list< std::string > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (int)(arg1)->lock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1lockSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (int)(arg1)->ArMap::lock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1tryLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (int)(arg1)->tryLock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1tryLockSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (int)(arg1)->ArMap::tryLock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (int)(arg1)->unlock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1unlockSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (int)(arg1)->ArMap::unlock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getDisplayString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->getDisplayString((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getDisplayStringSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->ArMap::getDisplayString((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getDisplayString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (char *)(arg1)->getDisplayString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getDisplayStringSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (char *)(arg1)->ArMap::getDisplayString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getPoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< ArPose > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (std::vector< ArPose > *)(arg1)->getPoints((char const *)arg2);
  *(std::vector< ArPose > **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getPointsSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< ArPose > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (std::vector< ArPose > *)(arg1)->ArMap::getPoints((char const *)arg2);
  *(std::vector< ArPose > **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getPoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArPose > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (std::vector< ArPose > *)(arg1)->getPoints();
  *(std::vector< ArPose > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getPointsSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArPose > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (std::vector< ArPose > *)(arg1)->ArMap::getPoints();
  *(std::vector< ArPose > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getMinPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getMinPose((char const *)arg2);
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getMinPoseSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->ArMap::getMinPose((char const *)arg2);
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getMinPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (arg1)->getMinPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getMinPoseSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (arg1)->ArMap::getMinPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getMaxPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getMaxPose((char const *)arg2);
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getMaxPoseSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->ArMap::getMaxPose((char const *)arg2);
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getMaxPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (arg1)->getMaxPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getMaxPoseSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (arg1)->ArMap::getMaxPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getNumPoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->getNumPoints((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getNumPointsSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->ArMap::getNumPoints((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getNumPoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (int)(arg1)->getNumPoints();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getNumPointsSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (int)(arg1)->ArMap::getNumPoints();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1isSortedPoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((ArMap const *)arg1)->isSortedPoints((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1isSortedPointsSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((ArMap const *)arg1)->ArMap::isSortedPoints((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1isSortedPoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (bool)((ArMap const *)arg1)->isSortedPoints();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1isSortedPointsSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (bool)((ArMap const *)arg1)->ArMap::isSortedPoints();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setPoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4, jlong jarg5) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapChangeDetails *arg5 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::vector< ArPose > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  arg5 = *(ArMapChangeDetails **)&jarg5; 
  (arg1)->setPoints((std::vector< ArPose > const *)arg2,(char const *)arg3,arg4,arg5);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setPointsSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4, jlong jarg5) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapChangeDetails *arg5 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::vector< ArPose > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  arg5 = *(ArMapChangeDetails **)&jarg5; 
  (arg1)->ArMap::setPoints((std::vector< ArPose > const *)arg2,(char const *)arg3,arg4,arg5);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setPoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::vector< ArPose > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  (arg1)->setPoints((std::vector< ArPose > const *)arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setPointsSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::vector< ArPose > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  (arg1)->ArMap::setPoints((std::vector< ArPose > const *)arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setPoints_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::vector< ArPose > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setPoints((std::vector< ArPose > const *)arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setPointsSwigExplicitArMap_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::vector< ArPose > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->ArMap::setPoints((std::vector< ArPose > const *)arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setPoints_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::vector< ArPose > **)&jarg2; 
  (arg1)->setPoints((std::vector< ArPose > const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setPointsSwigExplicitArMap_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::vector< ArPose > **)&jarg2; 
  (arg1)->ArMap::setPoints((std::vector< ArPose > const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getLines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< ArLineSegment > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (std::vector< ArLineSegment > *)(arg1)->getLines((char const *)arg2);
  *(std::vector< ArLineSegment > **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getLinesSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< ArLineSegment > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (std::vector< ArLineSegment > *)(arg1)->ArMap::getLines((char const *)arg2);
  *(std::vector< ArLineSegment > **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getLines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArLineSegment > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (std::vector< ArLineSegment > *)(arg1)->getLines();
  *(std::vector< ArLineSegment > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getLinesSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArLineSegment > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (std::vector< ArLineSegment > *)(arg1)->ArMap::getLines();
  *(std::vector< ArLineSegment > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getLineMinPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getLineMinPose((char const *)arg2);
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getLineMinPoseSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->ArMap::getLineMinPose((char const *)arg2);
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getLineMinPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (arg1)->getLineMinPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getLineMinPoseSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (arg1)->ArMap::getLineMinPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getLineMaxPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getLineMaxPose((char const *)arg2);
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getLineMaxPoseSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->ArMap::getLineMaxPose((char const *)arg2);
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getLineMaxPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (arg1)->getLineMaxPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getLineMaxPoseSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (arg1)->ArMap::getLineMaxPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getNumLines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->getNumLines((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getNumLinesSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->ArMap::getNumLines((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getNumLines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (int)(arg1)->getNumLines();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getNumLinesSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (int)(arg1)->ArMap::getNumLines();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1isSortedLines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((ArMap const *)arg1)->isSortedLines((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1isSortedLinesSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((ArMap const *)arg1)->ArMap::isSortedLines((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1isSortedLines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (bool)((ArMap const *)arg1)->isSortedLines();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1isSortedLinesSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (bool)((ArMap const *)arg1)->ArMap::isSortedLines();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setLines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4, jlong jarg5) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapChangeDetails *arg5 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::vector< ArLineSegment > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  arg5 = *(ArMapChangeDetails **)&jarg5; 
  (arg1)->setLines((std::vector< ArLineSegment > const *)arg2,(char const *)arg3,arg4,arg5);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setLinesSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4, jlong jarg5) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapChangeDetails *arg5 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::vector< ArLineSegment > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  arg5 = *(ArMapChangeDetails **)&jarg5; 
  (arg1)->ArMap::setLines((std::vector< ArLineSegment > const *)arg2,(char const *)arg3,arg4,arg5);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setLines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::vector< ArLineSegment > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  (arg1)->setLines((std::vector< ArLineSegment > const *)arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setLinesSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::vector< ArLineSegment > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  (arg1)->ArMap::setLines((std::vector< ArLineSegment > const *)arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setLines_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::vector< ArLineSegment > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setLines((std::vector< ArLineSegment > const *)arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setLinesSwigExplicitArMap_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::vector< ArLineSegment > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->ArMap::setLines((std::vector< ArLineSegment > const *)arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setLines_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::vector< ArLineSegment > **)&jarg2; 
  (arg1)->setLines((std::vector< ArLineSegment > const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setLinesSwigExplicitArMap_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::vector< ArLineSegment > **)&jarg2; 
  (arg1)->ArMap::setLines((std::vector< ArLineSegment > const *)arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getResolution_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->getResolution((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getResolutionSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->ArMap::getResolution((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getResolution_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (int)(arg1)->getResolution();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getResolutionSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (int)(arg1)->ArMap::getResolution();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setResolution_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  (arg1)->setResolution(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setResolutionSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  (arg1)->ArMap::setResolution(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setResolution_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setResolution(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setResolutionSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->ArMap::setResolution(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setResolution_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setResolution(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setResolutionSwigExplicitArMap_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ArMap::setResolution(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeScanToFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->writeScanToFunctor(arg2,(char const *)arg3,(char const *)arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeScanToFunctorSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->ArMap::writeScanToFunctor(arg2,(char const *)arg3,(char const *)arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeScanToFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeScanToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeScanToFunctorSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->ArMap::writeScanToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writePointsToFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor2< int,std::vector< ArPose > * > *arg2 = (ArFunctor2< int,std::vector< ArPose > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor1< char const * > *arg4 = (ArFunctor1< char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArPose > * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(ArFunctor1< char const * > **)&jarg4; 
  (arg1)->writePointsToFunctor(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writePointsToFunctorSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor2< int,std::vector< ArPose > * > *arg2 = (ArFunctor2< int,std::vector< ArPose > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor1< char const * > *arg4 = (ArFunctor1< char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArPose > * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(ArFunctor1< char const * > **)&jarg4; 
  (arg1)->ArMap::writePointsToFunctor(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writePointsToFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor2< int,std::vector< ArPose > * > *arg2 = (ArFunctor2< int,std::vector< ArPose > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArPose > * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writePointsToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writePointsToFunctorSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor2< int,std::vector< ArPose > * > *arg2 = (ArFunctor2< int,std::vector< ArPose > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArPose > * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->ArMap::writePointsToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writePointsToFunctor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor2< int,std::vector< ArPose > * > *arg2 = (ArFunctor2< int,std::vector< ArPose > * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArPose > * > **)&jarg2; 
  (arg1)->writePointsToFunctor(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writePointsToFunctorSwigExplicitArMap_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor2< int,std::vector< ArPose > * > *arg2 = (ArFunctor2< int,std::vector< ArPose > * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArPose > * > **)&jarg2; 
  (arg1)->ArMap::writePointsToFunctor(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeLinesToFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor2< int,std::vector< ArLineSegment > * > *arg2 = (ArFunctor2< int,std::vector< ArLineSegment > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor1< char const * > *arg4 = (ArFunctor1< char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArLineSegment > * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(ArFunctor1< char const * > **)&jarg4; 
  (arg1)->writeLinesToFunctor(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeLinesToFunctorSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor2< int,std::vector< ArLineSegment > * > *arg2 = (ArFunctor2< int,std::vector< ArLineSegment > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor1< char const * > *arg4 = (ArFunctor1< char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArLineSegment > * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(ArFunctor1< char const * > **)&jarg4; 
  (arg1)->ArMap::writeLinesToFunctor(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeLinesToFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor2< int,std::vector< ArLineSegment > * > *arg2 = (ArFunctor2< int,std::vector< ArLineSegment > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArLineSegment > * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeLinesToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeLinesToFunctorSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor2< int,std::vector< ArLineSegment > * > *arg2 = (ArFunctor2< int,std::vector< ArLineSegment > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArLineSegment > * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->ArMap::writeLinesToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeLinesToFunctor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor2< int,std::vector< ArLineSegment > * > *arg2 = (ArFunctor2< int,std::vector< ArLineSegment > * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArLineSegment > * > **)&jarg2; 
  (arg1)->writeLinesToFunctor(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeLinesToFunctorSwigExplicitArMap_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor2< int,std::vector< ArLineSegment > * > *arg2 = (ArFunctor2< int,std::vector< ArLineSegment > * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArLineSegment > * > **)&jarg2; 
  (arg1)->ArMap::writeLinesToFunctor(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1addToFileParser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFileParser **)&jarg2; 
  result = (bool)(arg1)->addToFileParser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1addToFileParserSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFileParser **)&jarg2; 
  result = (bool)(arg1)->ArMap::addToFileParser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1remFromFileParser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFileParser **)&jarg2; 
  result = (bool)(arg1)->remFromFileParser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1remFromFileParserSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFileParser **)&jarg2; 
  result = (bool)(arg1)->ArMap::remFromFileParser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1readDataPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->readDataPoint(arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1readDataPointSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->ArMap::readDataPoint(arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1readLineSegment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->readLineSegment(arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1readLineSegmentSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->ArMap::readLineSegment(arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1loadDataPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->loadDataPoint(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1loadDataPointSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->ArMap::loadDataPoint(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1loadLineSegment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  ArMap *arg1 = (ArMap *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->loadLineSegment(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1loadLineSegmentSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  ArMap *arg1 = (ArMap *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->ArMap::loadLineSegment(arg2,arg3,arg4,arg5);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1findFirstMapObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = jarg4 ? true : false; 
  result = (ArMapObject *)(arg1)->findFirstMapObject((char const *)arg2,(char const *)arg3,arg4);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1findFirstMapObjectSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = jarg4 ? true : false; 
  result = (ArMapObject *)(arg1)->ArMap::findFirstMapObject((char const *)arg2,(char const *)arg3,arg4);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1findFirstMapObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArMapObject *)(arg1)->findFirstMapObject((char const *)arg2,(char const *)arg3);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1findFirstMapObjectSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArMapObject *)(arg1)->ArMap::findFirstMapObject((char const *)arg2,(char const *)arg3);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1findMapObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = jarg4 ? true : false; 
  result = (ArMapObject *)(arg1)->findMapObject((char const *)arg2,(char const *)arg3,arg4);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1findMapObjectSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = jarg4 ? true : false; 
  result = (ArMapObject *)(arg1)->ArMap::findMapObject((char const *)arg2,(char const *)arg3,arg4);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1findMapObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArMapObject *)(arg1)->findMapObject((char const *)arg2,(char const *)arg3);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1findMapObjectSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArMapObject *)(arg1)->ArMap::findMapObject((char const *)arg2,(char const *)arg3);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1findMapObject_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArMapObject *)(arg1)->findMapObject((char const *)arg2);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1findMapObjectSwigExplicitArMap_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArMapObject *)(arg1)->ArMap::findMapObject((char const *)arg2);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1findMapObjectsOfType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  std::list< ArMapObject * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (arg1)->findMapObjectsOfType((char const *)arg2,arg3);
  *(std::list< ArMapObject * > **)&jresult = new std::list< ArMapObject * >((const std::list< ArMapObject * > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1findMapObjectsOfTypeSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  std::list< ArMapObject * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (arg1)->ArMap::findMapObjectsOfType((char const *)arg2,arg3);
  *(std::list< ArMapObject * > **)&jresult = new std::list< ArMapObject * >((const std::list< ArMapObject * > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1findMapObjectsOfType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArMapObject * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->findMapObjectsOfType((char const *)arg2);
  *(std::list< ArMapObject * > **)&jresult = new std::list< ArMapObject * >((const std::list< ArMapObject * > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1findMapObjectsOfTypeSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArMapObject * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->ArMap::findMapObjectsOfType((char const *)arg2);
  *(std::list< ArMapObject * > **)&jresult = new std::list< ArMapObject * >((const std::list< ArMapObject * > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getMapObjects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArMapObject * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (std::list< ArMapObject * > *)(arg1)->getMapObjects();
  *(std::list< ArMapObject * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getMapObjectsSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArMapObject * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (std::list< ArMapObject * > *)(arg1)->ArMap::getMapObjects();
  *(std::list< ArMapObject * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setMapObjects_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArMapObject * > *arg2 = (std::list< ArMapObject * > *) 0 ;
  bool arg3 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::list< ArMapObject * > **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  (arg1)->setMapObjects((std::list< ArMapObject * > const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setMapObjectsSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArMapObject * > *arg2 = (std::list< ArMapObject * > *) 0 ;
  bool arg3 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::list< ArMapObject * > **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  (arg1)->ArMap::setMapObjects((std::list< ArMapObject * > const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setMapObjects_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArMapObject * > *arg2 = (std::list< ArMapObject * > *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::list< ArMapObject * > **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setMapObjects((std::list< ArMapObject * > const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setMapObjectsSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArMapObject * > *arg2 = (std::list< ArMapObject * > *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::list< ArMapObject * > **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->ArMap::setMapObjects((std::list< ArMapObject * > const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setMapObjects_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArMapObject * > *arg2 = (std::list< ArMapObject * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::list< ArMapObject * > **)&jarg2; 
  (arg1)->setMapObjects((std::list< ArMapObject * > const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setMapObjectsSwigExplicitArMap_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArMapObject * > *arg2 = (std::list< ArMapObject * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::list< ArMapObject * > **)&jarg2; 
  (arg1)->ArMap::setMapObjects((std::list< ArMapObject * > const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeObjectListToFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeObjectListToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeObjectListToFunctorSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->ArMap::writeObjectListToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (std::list< ArArgumentBuilder * > *)(arg1)->getInfo((char const *)arg2);
  *(std::list< ArArgumentBuilder * > **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getInfoSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (std::list< ArArgumentBuilder * > *)(arg1)->ArMap::getInfo((char const *)arg2);
  *(std::list< ArArgumentBuilder * > **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  int arg2 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (std::list< ArArgumentBuilder * > *)(arg1)->getInfo(arg2);
  *(std::list< ArArgumentBuilder * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getInfoSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  int arg2 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (std::list< ArArgumentBuilder * > *)(arg1)->ArMap::getInfo(arg2);
  *(std::list< ArArgumentBuilder * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getMapInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (std::list< ArArgumentBuilder * > *)(arg1)->getMapInfo();
  *(std::list< ArArgumentBuilder * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getMapInfoSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (std::list< ArArgumentBuilder * > *)(arg1)->ArMap::getMapInfo();
  *(std::list< ArArgumentBuilder * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getInfoCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (int)((ArMap const *)arg1)->getInfoCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getInfoCountSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (int)((ArMap const *)arg1)->ArMap::getInfoCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getInfoNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = ((ArMap const *)arg1)->getInfoNames();
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getInfoNamesSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = ((ArMap const *)arg1)->ArMap::getInfoNames();
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(std::list< ArArgumentBuilder * > **)&jarg3; 
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  result = (bool)(arg1)->setInfo((char const *)arg2,(std::list< ArArgumentBuilder * > const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setInfoSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(std::list< ArArgumentBuilder * > **)&jarg3; 
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  result = (bool)(arg1)->ArMap::setInfo((char const *)arg2,(std::list< ArArgumentBuilder * > const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(std::list< ArArgumentBuilder * > **)&jarg3; 
  result = (bool)(arg1)->setInfo((char const *)arg2,(std::list< ArArgumentBuilder * > const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setInfoSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(std::list< ArArgumentBuilder * > **)&jarg3; 
  result = (bool)(arg1)->ArMap::setInfo((char const *)arg2,(std::list< ArArgumentBuilder * > const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setInfo_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  int arg2 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::list< ArArgumentBuilder * > **)&jarg3; 
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  result = (bool)(arg1)->setInfo(arg2,(std::list< ArArgumentBuilder * > const *)arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setInfoSwigExplicitArMap_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  int arg2 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::list< ArArgumentBuilder * > **)&jarg3; 
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  result = (bool)(arg1)->ArMap::setInfo(arg2,(std::list< ArArgumentBuilder * > const *)arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setInfo_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  int arg2 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::list< ArArgumentBuilder * > **)&jarg3; 
  result = (bool)(arg1)->setInfo(arg2,(std::list< ArArgumentBuilder * > const *)arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setInfoSwigExplicitArMap_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  int arg2 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::list< ArArgumentBuilder * > **)&jarg3; 
  result = (bool)(arg1)->ArMap::setInfo(arg2,(std::list< ArArgumentBuilder * > const *)arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setMapInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArArgumentBuilder * > *arg2 = (std::list< ArArgumentBuilder * > *) 0 ;
  ArMapChangeDetails *arg3 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::list< ArArgumentBuilder * > **)&jarg2; 
  arg3 = *(ArMapChangeDetails **)&jarg3; 
  result = (bool)(arg1)->setMapInfo((std::list< ArArgumentBuilder * > const *)arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setMapInfoSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArArgumentBuilder * > *arg2 = (std::list< ArArgumentBuilder * > *) 0 ;
  ArMapChangeDetails *arg3 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::list< ArArgumentBuilder * > **)&jarg2; 
  arg3 = *(ArMapChangeDetails **)&jarg3; 
  result = (bool)(arg1)->ArMap::setMapInfo((std::list< ArArgumentBuilder * > const *)arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setMapInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArArgumentBuilder * > *arg2 = (std::list< ArArgumentBuilder * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::list< ArArgumentBuilder * > **)&jarg2; 
  result = (bool)(arg1)->setMapInfo((std::list< ArArgumentBuilder * > const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setMapInfoSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArArgumentBuilder * > *arg2 = (std::list< ArArgumentBuilder * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(std::list< ArArgumentBuilder * > **)&jarg2; 
  result = (bool)(arg1)->ArMap::setMapInfo((std::list< ArArgumentBuilder * > const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getInfoName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getInfoName(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getInfoNameSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->ArMap::getInfoName(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeInfoToFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeInfoToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeInfoToFunctorSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->ArMap::writeInfoToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1hasOriginLatLongAlt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (bool)(arg1)->hasOriginLatLongAlt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1hasOriginLatLongAltSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (bool)(arg1)->ArMap::hasOriginLatLongAlt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getOriginLatLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (arg1)->getOriginLatLong();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getOriginLatLongSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (arg1)->ArMap::getOriginLatLong();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getOriginAltitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (double)(arg1)->getOriginAltitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getOriginAltitudeSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (double)(arg1)->ArMap::getOriginAltitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setOriginLatLongAlt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jdouble jarg4, jlong jarg5) {
  ArMap *arg1 = (ArMap *) 0 ;
  bool arg2 ;
  ArPose *arg3 = 0 ;
  double arg4 ;
  ArMapChangeDetails *arg5 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(ArPose **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose const & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  arg5 = *(ArMapChangeDetails **)&jarg5; 
  (arg1)->setOriginLatLongAlt(arg2,(ArPose const &)*arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setOriginLatLongAltSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jdouble jarg4, jlong jarg5) {
  ArMap *arg1 = (ArMap *) 0 ;
  bool arg2 ;
  ArPose *arg3 = 0 ;
  double arg4 ;
  ArMapChangeDetails *arg5 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(ArPose **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose const & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  arg5 = *(ArMapChangeDetails **)&jarg5; 
  (arg1)->ArMap::setOriginLatLongAlt(arg2,(ArPose const &)*arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setOriginLatLongAlt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  bool arg2 ;
  ArPose *arg3 = 0 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(ArPose **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose const & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  (arg1)->setOriginLatLongAlt(arg2,(ArPose const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setOriginLatLongAltSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  bool arg2 ;
  ArPose *arg3 = 0 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(ArPose **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose const & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  (arg1)->ArMap::setOriginLatLongAlt(arg2,(ArPose const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeSupplementToFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeSupplementToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeSupplementToFunctorSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->ArMap::writeSupplementToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMap *arg1 = (ArMap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1clearSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMap *arg1 = (ArMap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  (arg1)->ArMap::clear();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArMapInterface *arg2 = (ArMapInterface *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArMapInterface **)&jarg2; 
  result = (bool)(arg1)->set(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArMapInterface *arg2 = (ArMapInterface *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArMapInterface **)&jarg2; 
  result = (bool)(arg1)->ArMap::set(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1cloneMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArMapInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (ArMapInterface *)(arg1)->clone();
  *(ArMapInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1cloneMapSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArMapInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (ArMapInterface *)(arg1)->ArMap::clone();
  *(ArMapInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1mapChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMap *arg1 = (ArMap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  (arg1)->mapChanged();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1mapChangedSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMap *arg1 = (ArMap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  (arg1)->ArMap::mapChanged();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1addMapChangedCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addMapChangedCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1addMapChangedCBSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->ArMap::addMapChangedCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1addMapChangedCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addMapChangedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1addMapChangedCBSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->ArMap::addMapChangedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1remMapChangedCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remMapChangedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1remMapChangedCBSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->ArMap::remMapChangedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1addPreMapChangedCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addPreMapChangedCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1addPreMapChangedCBSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->ArMap::addPreMapChangedCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1addPreMapChangedCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addPreMapChangedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1addPreMapChangedCBSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->ArMap::addPreMapChangedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1remPreMapChangedCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remPreMapChangedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1remPreMapChangedCBSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->ArMap::remPreMapChangedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setMapChangedLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArLog::LogLevel arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  (arg1)->setMapChangedLogLevel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setMapChangedLogLevelSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArLog::LogLevel arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  (arg1)->ArMap::setMapChangedLogLevel(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getMapChangedLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArLog::LogLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (ArLog::LogLevel)(arg1)->getMapChangedLogLevel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getMapChangedLogLevelSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArLog::LogLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (ArLog::LogLevel)(arg1)->ArMap::getMapChangedLogLevel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeToFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeToFunctorSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->ArMap::writeToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeObjectsToFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4, jstring jarg5) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  (arg1)->writeObjectsToFunctor(arg2,(char const *)arg3,arg4,(char const *)arg5);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeObjectsToFunctorSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4, jstring jarg5) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  (arg1)->ArMap::writeObjectsToFunctor(arg2,(char const *)arg3,arg4,(char const *)arg5);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeObjectsToFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  (arg1)->writeObjectsToFunctor(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeObjectsToFunctorSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  (arg1)->ArMap::writeObjectsToFunctor(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeObjectsToFunctor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeObjectsToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeObjectsToFunctorSwigExplicitArMap_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->ArMap::writeObjectsToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1addPreWriteFileCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addPreWriteFileCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1addPreWriteFileCBSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->ArMap::addPreWriteFileCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1addPreWriteFileCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addPreWriteFileCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1addPreWriteFileCBSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->ArMap::addPreWriteFileCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1remPreWriteFileCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remPreWriteFileCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1remPreWriteFileCBSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->ArMap::remPreWriteFileCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1addPostWriteFileCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addPostWriteFileCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1addPostWriteFileCBSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->ArMap::addPostWriteFileCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1addPostWriteFileCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addPostWriteFileCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1addPostWriteFileCBSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->ArMap::addPostWriteFileCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1remPostWriteFileCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remPostWriteFileCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1remPostWriteFileCBSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMap *arg1 = (ArMap *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->ArMap::remPostWriteFileCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1forceMapLoadOnConfigProcessFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMap *arg1 = (ArMap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  (arg1)->forceMapLoadOnConfigProcessFile();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1readFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->readFile((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->writeFile((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1writeFileSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->ArMap::writeFile((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getMapId_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArMapId *arg2 = (ArMapId *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArMapId **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->getMapId(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getMapIdSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArMapId *arg2 = (ArMapId *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArMapId **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->ArMap::getMapId(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getMapId_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArMapId *arg2 = (ArMapId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArMapId **)&jarg2; 
  result = (bool)(arg1)->getMapId(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getMapIdSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArMapId *arg2 = (ArMapId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(ArMapId **)&jarg2; 
  result = (bool)(arg1)->ArMap::getMapId(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1calculateChecksum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)(arg1)->calculateChecksum(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1calculateChecksumSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)(arg1)->ArMap::calculateChecksum(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getBaseDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (char *)((ArMap const *)arg1)->getBaseDirectory();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getBaseDirectorySwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (char *)((ArMap const *)arg1)->ArMap::getBaseDirectory();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setBaseDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setBaseDirectory((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setBaseDirectorySwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->ArMap::setBaseDirectory((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getTempDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (char *)((ArMap const *)arg1)->getTempDirectory();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getTempDirectorySwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (char *)((ArMap const *)arg1)->ArMap::getTempDirectory();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setTempDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setTempDirectory((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setTempDirectorySwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->ArMap::setTempDirectory((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1createRealFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->createRealFileName((char const *)arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1createRealFileNameSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->ArMap::createRealFileName((char const *)arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (char *)((ArMap const *)arg1)->getFileName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getFileNameSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (char *)((ArMap const *)arg1)->ArMap::getFileName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setSourceFileName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  (arg1)->setSourceFileName((char const *)arg2,(char const *)arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setSourceFileNameSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  (arg1)->ArMap::setSourceFileName((char const *)arg2,(char const *)arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setSourceFileName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setSourceFileName((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setSourceFileNameSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->ArMap::setSourceFileName((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1refresh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (bool)(arg1)->refresh();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1refreshSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (bool)(arg1)->ArMap::refresh();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setIgnoreEmptyFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIgnoreEmptyFileName(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setIgnoreEmptyFileNameSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ArMap::setIgnoreEmptyFileName(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getIgnoreEmptyFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (bool)(arg1)->getIgnoreEmptyFileName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getIgnoreEmptyFileNameSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (bool)(arg1)->ArMap::getIgnoreEmptyFileName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setIgnoreCase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIgnoreCase(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setIgnoreCaseSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ArMap::setIgnoreCase(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setIgnoreCase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMap *arg1 = (ArMap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  (arg1)->setIgnoreCase();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setIgnoreCaseSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMap *arg1 = (ArMap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  (arg1)->ArMap::setIgnoreCase();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getIgnoreCase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (bool)(arg1)->getIgnoreCase();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getIgnoreCaseSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (bool)(arg1)->ArMap::getIgnoreCase();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getInactiveInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArMapInfoInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (ArMapInfoInterface *)(arg1)->getInactiveInfo();
  *(ArMapInfoInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getInactiveInfoSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArMapInfoInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (ArMapInfoInterface *)(arg1)->ArMap::getInactiveInfo();
  *(ArMapInfoInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getInactiveObjects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArMapObjectsInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (ArMapObjectsInterface *)(arg1)->getInactiveObjects();
  *(ArMapObjectsInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getInactiveObjectsSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArMapObjectsInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (ArMapObjectsInterface *)(arg1)->ArMap::getInactiveObjects();
  *(ArMapObjectsInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getChildObjects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArMapObjectsInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (ArMapObjectsInterface *)(arg1)->getChildObjects();
  *(ArMapObjectsInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getChildObjectsSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  ArMapObjectsInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (ArMapObjectsInterface *)(arg1)->ArMap::getChildObjects();
  *(ArMapObjectsInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1findMapObjectParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArArgumentBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArArgumentBuilder *)(arg1)->findMapObjectParams((char const *)arg2);
  *(ArArgumentBuilder **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1findMapObjectParamsSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArArgumentBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArArgumentBuilder *)(arg1)->ArMap::findMapObjectParams((char const *)arg2);
  *(ArArgumentBuilder **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setMapObjectParams_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArArgumentBuilder *arg3 = (ArArgumentBuilder *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(ArArgumentBuilder **)&jarg3; 
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  result = (bool)(arg1)->setMapObjectParams((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setMapObjectParamsSwigExplicitArMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArArgumentBuilder *arg3 = (ArArgumentBuilder *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(ArArgumentBuilder **)&jarg3; 
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  result = (bool)(arg1)->ArMap::setMapObjectParams((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setMapObjectParams_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArArgumentBuilder *arg3 = (ArArgumentBuilder *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(ArArgumentBuilder **)&jarg3; 
  result = (bool)(arg1)->setMapObjectParams((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setMapObjectParamsSwigExplicitArMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  ArArgumentBuilder *arg3 = (ArArgumentBuilder *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(ArArgumentBuilder **)&jarg3; 
  result = (bool)(arg1)->ArMap::setMapObjectParams((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getRemainder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (std::list< ArArgumentBuilder * > *)(arg1)->getRemainder();
  *(std::list< ArArgumentBuilder * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1getRemainderSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (std::list< ArArgumentBuilder * > *)(arg1)->ArMap::getRemainder();
  *(std::list< ArArgumentBuilder * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setQuiet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setQuiet(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1setQuietSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ArMap::setQuiet(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1parseLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->parseLine(arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1parseLineSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->ArMap::parseLine(arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1parsingComplete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMap *arg1 = (ArMap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  (arg1)->parsingComplete();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1parsingCompleteSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMap *arg1 = (ArMap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  (arg1)->ArMap::parsingComplete();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1isLoadingDataStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (bool)(arg1)->isLoadingDataStarted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1isLoadingDataStartedSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (bool)(arg1)->ArMap::isLoadingDataStarted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1isLoadingLinesAndDataStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (bool)(arg1)->isLoadingLinesAndDataStarted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1isLoadingLinesAndDataStartedSwigExplicitArMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  result = (bool)(arg1)->ArMap::isLoadingLinesAndDataStarted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1readFileAndChangeConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->readFileAndChangeConfig((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1changeConfigMapName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArMap *arg1 = (ArMap *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->changeConfigMapName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ArMap *obj = *((ArMap **)&objarg);
  (void)jcls;
  SwigDirector_ArMap *director = dynamic_cast<SwigDirector_ArMap *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMap_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ArMap *obj = *((ArMap **)&objarg);
  SwigDirector_ArMap *director = dynamic_cast<SwigDirector_ArMap *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapScan_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArMapScan *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArMapScan *)new ArMapScan((char const *)arg1);
  *(ArMapScan **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapScan_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArMapScan *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArMapScan *)new ArMapScan();
  *(ArMapScan **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapScan_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapScan *arg1 = 0 ;
  ArMapScan *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArMapScan const & reference is null");
    return 0;
  } 
  result = (ArMapScan *)new ArMapScan((ArMapScan const &)*arg1);
  *(ArMapScan **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArMapScan(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArMapScan **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getDisplayString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->getDisplayString((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getDisplayString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  result = (char *)(arg1)->getDisplayString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getPoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< ArPose > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (std::vector< ArPose > *)(arg1)->getPoints((char const *)arg2);
  *(std::vector< ArPose > **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getPoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  std::vector< ArPose > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  result = (std::vector< ArPose > *)(arg1)->getPoints();
  *(std::vector< ArPose > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getLines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< ArLineSegment > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (std::vector< ArLineSegment > *)(arg1)->getLines((char const *)arg2);
  *(std::vector< ArLineSegment > **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getLines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  std::vector< ArLineSegment > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  result = (std::vector< ArLineSegment > *)(arg1)->getLines();
  *(std::vector< ArLineSegment > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getMinPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getMinPose((char const *)arg2);
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getMinPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  result = (arg1)->getMinPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getMaxPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getMaxPose((char const *)arg2);
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getMaxPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  result = (arg1)->getMaxPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getNumPoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->getNumPoints((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getNumPoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  result = (int)(arg1)->getNumPoints();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1isSortedPoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((ArMapScan const *)arg1)->isSortedPoints((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1isSortedPoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  result = (bool)((ArMapScan const *)arg1)->isSortedPoints();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1setPoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4, jlong jarg5) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapChangeDetails *arg5 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(std::vector< ArPose > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  arg5 = *(ArMapChangeDetails **)&jarg5; 
  (arg1)->setPoints((std::vector< ArPose > const *)arg2,(char const *)arg3,arg4,arg5);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1setPoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(std::vector< ArPose > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  (arg1)->setPoints((std::vector< ArPose > const *)arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1setPoints_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(std::vector< ArPose > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setPoints((std::vector< ArPose > const *)arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1setPoints_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(std::vector< ArPose > **)&jarg2; 
  (arg1)->setPoints((std::vector< ArPose > const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getLineMinPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getLineMinPose((char const *)arg2);
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getLineMinPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  result = (arg1)->getLineMinPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getLineMaxPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getLineMaxPose((char const *)arg2);
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getLineMaxPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  result = (arg1)->getLineMaxPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getNumLines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->getNumLines((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getNumLines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  result = (int)(arg1)->getNumLines();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1isSortedLines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((ArMapScan const *)arg1)->isSortedLines((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1isSortedLines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  result = (bool)((ArMapScan const *)arg1)->isSortedLines();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1setLines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4, jlong jarg5) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapChangeDetails *arg5 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(std::vector< ArLineSegment > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  arg5 = *(ArMapChangeDetails **)&jarg5; 
  (arg1)->setLines((std::vector< ArLineSegment > const *)arg2,(char const *)arg3,arg4,arg5);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1setLines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(std::vector< ArLineSegment > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  (arg1)->setLines((std::vector< ArLineSegment > const *)arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1setLines_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(std::vector< ArLineSegment > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setLines((std::vector< ArLineSegment > const *)arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1setLines_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(std::vector< ArLineSegment > **)&jarg2; 
  (arg1)->setLines((std::vector< ArLineSegment > const *)arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getResolution_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->getResolution((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getResolution_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  result = (int)(arg1)->getResolution();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1setResolution_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  (arg1)->setResolution(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1setResolution_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setResolution(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1setResolution_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setResolution(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1writeScanToFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->writeScanToFunctor(arg2,(char const *)arg3,(char const *)arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1writeScanToFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeScanToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1writePointsToFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  ArFunctor2< int,std::vector< ArPose > * > *arg2 = (ArFunctor2< int,std::vector< ArPose > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor1< char const * > *arg4 = (ArFunctor1< char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArPose > * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(ArFunctor1< char const * > **)&jarg4; 
  (arg1)->writePointsToFunctor(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1writePointsToFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  ArFunctor2< int,std::vector< ArPose > * > *arg2 = (ArFunctor2< int,std::vector< ArPose > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArPose > * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writePointsToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1writePointsToFunctor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  ArFunctor2< int,std::vector< ArPose > * > *arg2 = (ArFunctor2< int,std::vector< ArPose > * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArPose > * > **)&jarg2; 
  (arg1)->writePointsToFunctor(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1writeLinesToFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  ArFunctor2< int,std::vector< ArLineSegment > * > *arg2 = (ArFunctor2< int,std::vector< ArLineSegment > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor1< char const * > *arg4 = (ArFunctor1< char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArLineSegment > * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(ArFunctor1< char const * > **)&jarg4; 
  (arg1)->writeLinesToFunctor(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1writeLinesToFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  ArFunctor2< int,std::vector< ArLineSegment > * > *arg2 = (ArFunctor2< int,std::vector< ArLineSegment > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArLineSegment > * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeLinesToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1writeLinesToFunctor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  ArFunctor2< int,std::vector< ArLineSegment > * > *arg2 = (ArFunctor2< int,std::vector< ArLineSegment > * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArLineSegment > * > **)&jarg2; 
  (arg1)->writeLinesToFunctor(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1addToFileParser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(ArFileParser **)&jarg2; 
  result = (bool)(arg1)->addToFileParser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1remFromFileParser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(ArFileParser **)&jarg2; 
  result = (bool)(arg1)->remFromFileParser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1readDataPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->readDataPoint(arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1readLineSegment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->readLineSegment(arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1loadDataPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->loadDataPoint(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1loadLineSegment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->loadLineSegment(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1unite_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  ArMapScan *arg2 = (ArMapScan *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(ArMapScan **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->unite(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1unite_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  ArMapScan *arg2 = (ArMapScan *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(ArMapScan **)&jarg2; 
  result = (bool)(arg1)->unite(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getTimeChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  result = ((ArMapScan const *)arg1)->getTimeChanged();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getScanType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  result = (char *)((ArMapScan const *)arg1)->getScanType();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getPointsKeyword(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  result = (char *)((ArMapScan const *)arg1)->getPointsKeyword();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1getLinesKeyword(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapScan **)&jarg1; 
  result = (char *)((ArMapScan const *)arg1)->getLinesKeyword();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1writePointsToFunctor_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->writePointsToFunctor(arg2,(char const *)arg3,(char const *)arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1writePointsToFunctor_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writePointsToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1writeLinesToFunctor_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->writeLinesToFunctor(arg2,(char const *)arg3,(char const *)arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1writeLinesToFunctor_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeLinesToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1addExtraToFileParser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(ArFileParser **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->addExtraToFileParser(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapScan_1remExtraFromFileParser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapScan *arg1 = (ArMapScan *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapScan **)&jarg1; 
  arg2 = *(ArFileParser **)&jarg2; 
  result = (bool)(arg1)->remExtraFromFileParser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjects_1DEFAULT_1KEYWORD_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      ArMapObjects::DEFAULT_KEYWORD = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)ArMapObjects::DEFAULT_KEYWORD, (const char *)arg1);
    } else {
      ArMapObjects::DEFAULT_KEYWORD = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjects_1DEFAULT_1KEYWORD_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArMapObjects::DEFAULT_KEYWORD;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapObjects_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArMapObjects *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArMapObjects *)new ArMapObjects((char const *)arg1);
  *(ArMapObjects **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapObjects_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArMapObjects *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArMapObjects *)new ArMapObjects();
  *(ArMapObjects **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapObjects_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapObjects *arg1 = 0 ;
  ArMapObjects *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObjects **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArMapObjects const & reference is null");
    return 0;
  } 
  result = (ArMapObjects *)new ArMapObjects((ArMapObjects const &)*arg1);
  *(ArMapObjects **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArMapObjects(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArMapObjects *arg1 = (ArMapObjects *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArMapObjects **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjects_1findFirstMapObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  ArMapObjects *arg1 = (ArMapObjects *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObjects **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = jarg4 ? true : false; 
  result = (ArMapObject *)(arg1)->findFirstMapObject((char const *)arg2,(char const *)arg3,arg4);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjects_1findFirstMapObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  ArMapObjects *arg1 = (ArMapObjects *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObjects **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArMapObject *)(arg1)->findFirstMapObject((char const *)arg2,(char const *)arg3);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjects_1findMapObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  ArMapObjects *arg1 = (ArMapObjects *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObjects **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = jarg4 ? true : false; 
  result = (ArMapObject *)(arg1)->findMapObject((char const *)arg2,(char const *)arg3,arg4);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjects_1findMapObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  ArMapObjects *arg1 = (ArMapObjects *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObjects **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArMapObject *)(arg1)->findMapObject((char const *)arg2,(char const *)arg3);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjects_1findMapObject_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapObjects *arg1 = (ArMapObjects *) 0 ;
  char *arg2 = (char *) 0 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObjects **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArMapObject *)(arg1)->findMapObject((char const *)arg2);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjects_1findMapObjectsOfType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  ArMapObjects *arg1 = (ArMapObjects *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  std::list< ArMapObject * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObjects **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (arg1)->findMapObjectsOfType((char const *)arg2,arg3);
  *(std::list< ArMapObject * > **)&jresult = new std::list< ArMapObject * >((const std::list< ArMapObject * > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjects_1findMapObjectsOfType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapObjects *arg1 = (ArMapObjects *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArMapObject * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObjects **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->findMapObjectsOfType((char const *)arg2);
  *(std::list< ArMapObject * > **)&jresult = new std::list< ArMapObject * >((const std::list< ArMapObject * > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjects_1getMapObjects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapObjects *arg1 = (ArMapObjects *) 0 ;
  std::list< ArMapObject * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObjects **)&jarg1; 
  result = (std::list< ArMapObject * > *)(arg1)->getMapObjects();
  *(std::list< ArMapObject * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjects_1setMapObjects_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4) {
  ArMapObjects *arg1 = (ArMapObjects *) 0 ;
  std::list< ArMapObject * > *arg2 = (std::list< ArMapObject * > *) 0 ;
  bool arg3 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapObjects **)&jarg1; 
  arg2 = *(std::list< ArMapObject * > **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  (arg1)->setMapObjects((std::list< ArMapObject * > const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjects_1setMapObjects_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  ArMapObjects *arg1 = (ArMapObjects *) 0 ;
  std::list< ArMapObject * > *arg2 = (std::list< ArMapObject * > *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapObjects **)&jarg1; 
  arg2 = *(std::list< ArMapObject * > **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setMapObjects((std::list< ArMapObject * > const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjects_1setMapObjects_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMapObjects *arg1 = (ArMapObjects *) 0 ;
  std::list< ArMapObject * > *arg2 = (std::list< ArMapObject * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapObjects **)&jarg1; 
  arg2 = *(std::list< ArMapObject * > **)&jarg2; 
  (arg1)->setMapObjects((std::list< ArMapObject * > const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjects_1writeObjectListToFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMapObjects *arg1 = (ArMapObjects *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapObjects **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeObjectListToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjects_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMapObjects *arg1 = (ArMapObjects *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObjects **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjects_1addToFileParser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapObjects *arg1 = (ArMapObjects *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapObjects **)&jarg1; 
  arg2 = *(ArFileParser **)&jarg2; 
  result = (bool)(arg1)->addToFileParser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjects_1remFromFileParser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapObjects *arg1 = (ArMapObjects *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapObjects **)&jarg1; 
  arg2 = *(ArFileParser **)&jarg2; 
  result = (bool)(arg1)->remFromFileParser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObjects_1getTimeChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapObjects *arg1 = (ArMapObjects *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObjects **)&jarg1; 
  result = ((ArMapObjects const *)arg1)->getTimeChanged();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char **arg1 = (char **) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  ArMapInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArMapInfo *)new ArMapInfo((char const **)arg1,arg2,(char const *)arg3);
  *(ArMapInfo **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char **arg1 = (char **) 0 ;
  size_t arg2 ;
  ArMapInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (ArMapInfo *)new ArMapInfo((char const **)arg1,arg2);
  *(ArMapInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapInfo_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  char **arg1 = (char **) 0 ;
  ArMapInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  result = (ArMapInfo *)new ArMapInfo((char const **)arg1);
  *(ArMapInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapInfo_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArMapInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArMapInfo *)new ArMapInfo();
  *(ArMapInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapInfo_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapInfo *arg1 = 0 ;
  ArMapInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInfo **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArMapInfo const & reference is null");
    return 0;
  } 
  result = (ArMapInfo *)new ArMapInfo((ArMapInfo const &)*arg1);
  *(ArMapInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArMapInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArMapInfo *arg1 = (ArMapInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArMapInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfo_1getInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapInfo *arg1 = (ArMapInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInfo **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (std::list< ArArgumentBuilder * > *)(arg1)->getInfo((char const *)arg2);
  *(std::list< ArArgumentBuilder * > **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfo_1getInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ArMapInfo *arg1 = (ArMapInfo *) 0 ;
  int arg2 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (std::list< ArArgumentBuilder * > *)(arg1)->getInfo(arg2);
  *(std::list< ArArgumentBuilder * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfo_1getMapInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapInfo *arg1 = (ArMapInfo *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInfo **)&jarg1; 
  result = (std::list< ArArgumentBuilder * > *)(arg1)->getMapInfo();
  *(std::list< ArArgumentBuilder * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfo_1getInfoCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMapInfo *arg1 = (ArMapInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInfo **)&jarg1; 
  result = (int)((ArMapInfo const *)arg1)->getInfoCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfo_1getInfoNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapInfo *arg1 = (ArMapInfo *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInfo **)&jarg1; 
  result = ((ArMapInfo const *)arg1)->getInfoNames();
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfo_1setInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jboolean jresult = 0 ;
  ArMapInfo *arg1 = (ArMapInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMapInfo **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(std::list< ArArgumentBuilder * > **)&jarg3; 
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  result = (bool)(arg1)->setInfo((char const *)arg2,(std::list< ArArgumentBuilder * > const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfo_1setInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jboolean jresult = 0 ;
  ArMapInfo *arg1 = (ArMapInfo *) 0 ;
  int arg2 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMapInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::list< ArArgumentBuilder * > **)&jarg3; 
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  result = (bool)(arg1)->setInfo(arg2,(std::list< ArArgumentBuilder * > const *)arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfo_1setInfo_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArMapInfo *arg1 = (ArMapInfo *) 0 ;
  int arg2 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMapInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::list< ArArgumentBuilder * > **)&jarg3; 
  result = (bool)(arg1)->setInfo(arg2,(std::list< ArArgumentBuilder * > const *)arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfo_1setMapInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  ArMapInfo *arg1 = (ArMapInfo *) 0 ;
  std::list< ArArgumentBuilder * > *arg2 = (std::list< ArArgumentBuilder * > *) 0 ;
  ArMapChangeDetails *arg3 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInfo **)&jarg1; 
  arg2 = *(std::list< ArArgumentBuilder * > **)&jarg2; 
  arg3 = *(ArMapChangeDetails **)&jarg3; 
  result = (bool)(arg1)->setMapInfo((std::list< ArArgumentBuilder * > const *)arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfo_1setMapInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapInfo *arg1 = (ArMapInfo *) 0 ;
  std::list< ArArgumentBuilder * > *arg2 = (std::list< ArArgumentBuilder * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInfo **)&jarg1; 
  arg2 = *(std::list< ArArgumentBuilder * > **)&jarg2; 
  result = (bool)(arg1)->setMapInfo((std::list< ArArgumentBuilder * > const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfo_1getInfoName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArMapInfo *arg1 = (ArMapInfo *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getInfoName(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfo_1writeInfoToFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMapInfo *arg1 = (ArMapInfo *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInfo **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeInfoToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfo_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMapInfo *arg1 = (ArMapInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInfo **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfo_1addToFileParser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapInfo *arg1 = (ArMapInfo *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInfo **)&jarg1; 
  arg2 = *(ArFileParser **)&jarg2; 
  result = (bool)(arg1)->addToFileParser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfo_1remFromFileParser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapInfo *arg1 = (ArMapInfo *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapInfo **)&jarg1; 
  arg2 = *(ArFileParser **)&jarg2; 
  result = (bool)(arg1)->remFromFileParser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapInfo_1getTimeChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapInfo *arg1 = (ArMapInfo *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapInfo **)&jarg1; 
  result = ((ArMapInfo const *)arg1)->getTimeChanged();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapSupplement_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArMapSupplement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArMapSupplement *)new ArMapSupplement();
  *(ArMapSupplement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapSupplement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapSupplement *arg1 = 0 ;
  ArMapSupplement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSupplement **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArMapSupplement const & reference is null");
    return 0;
  } 
  result = (ArMapSupplement *)new ArMapSupplement((ArMapSupplement const &)*arg1);
  *(ArMapSupplement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArMapSupplement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArMapSupplement *arg1 = (ArMapSupplement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArMapSupplement **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSupplement_1hasOriginLatLongAlt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMapSupplement *arg1 = (ArMapSupplement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSupplement **)&jarg1; 
  result = (bool)(arg1)->hasOriginLatLongAlt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSupplement_1getOriginLatLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapSupplement *arg1 = (ArMapSupplement *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSupplement **)&jarg1; 
  result = (arg1)->getOriginLatLong();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSupplement_1getOriginAltitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArMapSupplement *arg1 = (ArMapSupplement *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSupplement **)&jarg1; 
  result = (double)(arg1)->getOriginAltitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSupplement_1setOriginLatLongAlt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jdouble jarg4, jlong jarg5) {
  ArMapSupplement *arg1 = (ArMapSupplement *) 0 ;
  bool arg2 ;
  ArPose *arg3 = 0 ;
  double arg4 ;
  ArMapChangeDetails *arg5 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMapSupplement **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(ArPose **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose const & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  arg5 = *(ArMapChangeDetails **)&jarg5; 
  (arg1)->setOriginLatLongAlt(arg2,(ArPose const &)*arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSupplement_1setOriginLatLongAlt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  ArMapSupplement *arg1 = (ArMapSupplement *) 0 ;
  bool arg2 ;
  ArPose *arg3 = 0 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMapSupplement **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(ArPose **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose const & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  (arg1)->setOriginLatLongAlt(arg2,(ArPose const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSupplement_1writeSupplementToFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMapSupplement *arg1 = (ArMapSupplement *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSupplement **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeSupplementToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSupplement_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMapSupplement *arg1 = (ArMapSupplement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSupplement **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSupplement_1addToFileParser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapSupplement *arg1 = (ArMapSupplement *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSupplement **)&jarg1; 
  arg2 = *(ArFileParser **)&jarg2; 
  result = (bool)(arg1)->addToFileParser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSupplement_1remFromFileParser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapSupplement *arg1 = (ArMapSupplement *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSupplement **)&jarg1; 
  arg2 = *(ArFileParser **)&jarg2; 
  result = (bool)(arg1)->remFromFileParser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSupplement_1getTimeChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapSupplement *arg1 = (ArMapSupplement *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSupplement **)&jarg1; 
  result = ((ArMapSupplement const *)arg1)->getTimeChanged();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArDataTagCaseCmpOp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArDataTagCaseCmpOp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArDataTagCaseCmpOp *)new ArDataTagCaseCmpOp();
  *(ArDataTagCaseCmpOp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArDataTagCaseCmpOp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArDataTagCaseCmpOp *arg1 = (ArDataTagCaseCmpOp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArDataTagCaseCmpOp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapSimple_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArMapSimple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArMapSimple *)new ArMapSimple((char const *)arg1,(char const *)arg2,(char const *)arg3);
  *(ArMapSimple **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapSimple_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ArMapSimple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArMapSimple *)new ArMapSimple((char const *)arg1,(char const *)arg2);
  *(ArMapSimple **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapSimple_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArMapSimple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArMapSimple *)new ArMapSimple((char const *)arg1);
  *(ArMapSimple **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapSimple_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArMapSimple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArMapSimple *)new ArMapSimple();
  *(ArMapSimple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapSimple_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = 0 ;
  ArMapSimple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArMapSimple const & reference is null");
    return 0;
  } 
  result = (ArMapSimple *)new ArMapSimple((ArMapSimple const &)*arg1);
  *(ArMapSimple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArMapSimple(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArMapSimple **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArMapInterface *arg2 = (ArMapInterface *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArMapInterface **)&jarg2; 
  result = (bool)(arg1)->set(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1cloneMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArMapInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (ArMapInterface *)(arg1)->clone();
  *(ArMapInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getScanTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = ((ArMapSimple const *)arg1)->getScanTypes();
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setScanTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setScanTypes((std::list< std::string > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (int)(arg1)->lock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1tryLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (int)(arg1)->tryLock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (int)(arg1)->unlock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (std::list< ArArgumentBuilder * > *)(arg1)->getInfo((char const *)arg2);
  *(std::list< ArArgumentBuilder * > **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  int arg2 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (std::list< ArArgumentBuilder * > *)(arg1)->getInfo(arg2);
  *(std::list< ArArgumentBuilder * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getMapInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (std::list< ArArgumentBuilder * > *)(arg1)->getMapInfo();
  *(std::list< ArArgumentBuilder * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getInfoCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (int)((ArMapSimple const *)arg1)->getInfoCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getInfoNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = ((ArMapSimple const *)arg1)->getInfoNames();
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(std::list< ArArgumentBuilder * > **)&jarg3; 
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  result = (bool)(arg1)->setInfo((char const *)arg2,(std::list< ArArgumentBuilder * > const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(std::list< ArArgumentBuilder * > **)&jarg3; 
  result = (bool)(arg1)->setInfo((char const *)arg2,(std::list< ArArgumentBuilder * > const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setInfo_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  int arg2 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::list< ArArgumentBuilder * > **)&jarg3; 
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  result = (bool)(arg1)->setInfo(arg2,(std::list< ArArgumentBuilder * > const *)arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setInfo_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  int arg2 ;
  std::list< ArArgumentBuilder * > *arg3 = (std::list< ArArgumentBuilder * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::list< ArArgumentBuilder * > **)&jarg3; 
  result = (bool)(arg1)->setInfo(arg2,(std::list< ArArgumentBuilder * > const *)arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setMapInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  std::list< ArArgumentBuilder * > *arg2 = (std::list< ArArgumentBuilder * > *) 0 ;
  ArMapChangeDetails *arg3 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(std::list< ArArgumentBuilder * > **)&jarg2; 
  arg3 = *(ArMapChangeDetails **)&jarg3; 
  result = (bool)(arg1)->setMapInfo((std::list< ArArgumentBuilder * > const *)arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setMapInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  std::list< ArArgumentBuilder * > *arg2 = (std::list< ArArgumentBuilder * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(std::list< ArArgumentBuilder * > **)&jarg2; 
  result = (bool)(arg1)->setMapInfo((std::list< ArArgumentBuilder * > const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1writeInfoToFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeInfoToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getInfoName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getInfoName(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1findFirstMapObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = jarg4 ? true : false; 
  result = (ArMapObject *)(arg1)->findFirstMapObject((char const *)arg2,(char const *)arg3,arg4);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1findFirstMapObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArMapObject *)(arg1)->findFirstMapObject((char const *)arg2,(char const *)arg3);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1findMapObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = jarg4 ? true : false; 
  result = (ArMapObject *)(arg1)->findMapObject((char const *)arg2,(char const *)arg3,arg4);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1findMapObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArMapObject *)(arg1)->findMapObject((char const *)arg2,(char const *)arg3);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1findMapObject_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArMapObject *)(arg1)->findMapObject((char const *)arg2);
  *(ArMapObject **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1findMapObjectsOfType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  std::list< ArMapObject * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (arg1)->findMapObjectsOfType((char const *)arg2,arg3);
  *(std::list< ArMapObject * > **)&jresult = new std::list< ArMapObject * >((const std::list< ArMapObject * > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1findMapObjectsOfType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  std::list< ArMapObject * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->findMapObjectsOfType((char const *)arg2);
  *(std::list< ArMapObject * > **)&jresult = new std::list< ArMapObject * >((const std::list< ArMapObject * > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getMapObjects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  std::list< ArMapObject * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (std::list< ArMapObject * > *)(arg1)->getMapObjects();
  *(std::list< ArMapObject * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setMapObjects_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  std::list< ArMapObject * > *arg2 = (std::list< ArMapObject * > *) 0 ;
  bool arg3 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(std::list< ArMapObject * > **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  (arg1)->setMapObjects((std::list< ArMapObject * > const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setMapObjects_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  std::list< ArMapObject * > *arg2 = (std::list< ArMapObject * > *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(std::list< ArMapObject * > **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setMapObjects((std::list< ArMapObject * > const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setMapObjects_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  std::list< ArMapObject * > *arg2 = (std::list< ArMapObject * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(std::list< ArMapObject * > **)&jarg2; 
  (arg1)->setMapObjects((std::list< ArMapObject * > const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1writeObjectListToFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeObjectListToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1hasOriginLatLongAlt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (bool)(arg1)->hasOriginLatLongAlt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getOriginLatLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (arg1)->getOriginLatLong();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getOriginAltitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (double)(arg1)->getOriginAltitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setOriginLatLongAlt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jdouble jarg4, jlong jarg5) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  bool arg2 ;
  ArPose *arg3 = 0 ;
  double arg4 ;
  ArMapChangeDetails *arg5 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(ArPose **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose const & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  arg5 = *(ArMapChangeDetails **)&jarg5; 
  (arg1)->setOriginLatLongAlt(arg2,(ArPose const &)*arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setOriginLatLongAlt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  bool arg2 ;
  ArPose *arg3 = 0 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(ArPose **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArPose const & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  (arg1)->setOriginLatLongAlt(arg2,(ArPose const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1writeSupplementToFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeSupplementToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getDisplayString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->getDisplayString((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getDisplayString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (char *)(arg1)->getDisplayString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getPoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< ArPose > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (std::vector< ArPose > *)(arg1)->getPoints((char const *)arg2);
  *(std::vector< ArPose > **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getPoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  std::vector< ArPose > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (std::vector< ArPose > *)(arg1)->getPoints();
  *(std::vector< ArPose > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getMinPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getMinPose((char const *)arg2);
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getMinPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (arg1)->getMinPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getMaxPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getMaxPose((char const *)arg2);
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getMaxPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (arg1)->getMaxPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getNumPoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->getNumPoints((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getNumPoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (int)(arg1)->getNumPoints();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1isSortedPoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((ArMapSimple const *)arg1)->isSortedPoints((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1isSortedPoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (bool)((ArMapSimple const *)arg1)->isSortedPoints();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setPoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4, jlong jarg5) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapChangeDetails *arg5 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(std::vector< ArPose > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  arg5 = *(ArMapChangeDetails **)&jarg5; 
  (arg1)->setPoints((std::vector< ArPose > const *)arg2,(char const *)arg3,arg4,arg5);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setPoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(std::vector< ArPose > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  (arg1)->setPoints((std::vector< ArPose > const *)arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setPoints_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(std::vector< ArPose > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setPoints((std::vector< ArPose > const *)arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setPoints_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  std::vector< ArPose > *arg2 = (std::vector< ArPose > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(std::vector< ArPose > **)&jarg2; 
  (arg1)->setPoints((std::vector< ArPose > const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getLines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< ArLineSegment > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (std::vector< ArLineSegment > *)(arg1)->getLines((char const *)arg2);
  *(std::vector< ArLineSegment > **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getLines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  std::vector< ArLineSegment > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (std::vector< ArLineSegment > *)(arg1)->getLines();
  *(std::vector< ArLineSegment > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getLineMinPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getLineMinPose((char const *)arg2);
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getLineMinPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (arg1)->getLineMinPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getLineMaxPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getLineMaxPose((char const *)arg2);
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getLineMaxPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (arg1)->getLineMaxPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getNumLines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->getNumLines((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getNumLines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (int)(arg1)->getNumLines();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1isSortedLines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((ArMapSimple const *)arg1)->isSortedLines((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1isSortedLines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (bool)((ArMapSimple const *)arg1)->isSortedLines();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setLines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4, jlong jarg5) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  ArMapChangeDetails *arg5 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(std::vector< ArLineSegment > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  arg5 = *(ArMapChangeDetails **)&jarg5; 
  (arg1)->setLines((std::vector< ArLineSegment > const *)arg2,(char const *)arg3,arg4,arg5);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setLines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(std::vector< ArLineSegment > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  (arg1)->setLines((std::vector< ArLineSegment > const *)arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setLines_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(std::vector< ArLineSegment > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setLines((std::vector< ArLineSegment > const *)arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setLines_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  std::vector< ArLineSegment > *arg2 = (std::vector< ArLineSegment > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(std::vector< ArLineSegment > **)&jarg2; 
  (arg1)->setLines((std::vector< ArLineSegment > const *)arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getResolution_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->getResolution((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getResolution_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (int)(arg1)->getResolution();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setResolution_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  (arg1)->setResolution(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setResolution_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setResolution(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setResolution_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setResolution(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1writeScanToFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->writeScanToFunctor(arg2,(char const *)arg3,(char const *)arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1writeScanToFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeScanToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1writePointsToFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor2< int,std::vector< ArPose > * > *arg2 = (ArFunctor2< int,std::vector< ArPose > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor1< char const * > *arg4 = (ArFunctor1< char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArPose > * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(ArFunctor1< char const * > **)&jarg4; 
  (arg1)->writePointsToFunctor(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1writePointsToFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor2< int,std::vector< ArPose > * > *arg2 = (ArFunctor2< int,std::vector< ArPose > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArPose > * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writePointsToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1writePointsToFunctor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor2< int,std::vector< ArPose > * > *arg2 = (ArFunctor2< int,std::vector< ArPose > * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArPose > * > **)&jarg2; 
  (arg1)->writePointsToFunctor(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1writeLinesToFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor2< int,std::vector< ArLineSegment > * > *arg2 = (ArFunctor2< int,std::vector< ArLineSegment > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor1< char const * > *arg4 = (ArFunctor1< char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArLineSegment > * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = *(ArFunctor1< char const * > **)&jarg4; 
  (arg1)->writeLinesToFunctor(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1writeLinesToFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor2< int,std::vector< ArLineSegment > * > *arg2 = (ArFunctor2< int,std::vector< ArLineSegment > * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArLineSegment > * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeLinesToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1writeLinesToFunctor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor2< int,std::vector< ArLineSegment > * > *arg2 = (ArFunctor2< int,std::vector< ArLineSegment > * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor2< int,std::vector< ArLineSegment > * > **)&jarg2; 
  (arg1)->writeLinesToFunctor(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1addToFileParser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFileParser **)&jarg2; 
  result = (bool)(arg1)->addToFileParser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1remFromFileParser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFileParser *arg2 = (ArFileParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFileParser **)&jarg2; 
  result = (bool)(arg1)->remFromFileParser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1readDataPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->readDataPoint(arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1readLineSegment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->readLineSegment(arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1loadDataPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->loadDataPoint(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1loadLineSegment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->loadLineSegment(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1mapChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  (arg1)->mapChanged();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1addMapChangedCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addMapChangedCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1addMapChangedCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addMapChangedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1remMapChangedCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remMapChangedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1addPreMapChangedCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addPreMapChangedCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1addPreMapChangedCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addPreMapChangedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1remPreMapChangedCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remPreMapChangedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setMapChangedLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArLog::LogLevel arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  (arg1)->setMapChangedLogLevel(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getMapChangedLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArLog::LogLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (ArLog::LogLevel)(arg1)->getMapChangedLogLevel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1writeToFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1writeObjectsToFunctor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4, jstring jarg5) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  (arg1)->writeObjectsToFunctor(arg2,(char const *)arg3,arg4,(char const *)arg5);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1writeObjectsToFunctor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  (arg1)->writeObjectsToFunctor(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1writeObjectsToFunctor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeObjectsToFunctor(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1addPreWriteFileCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addPreWriteFileCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1addPreWriteFileCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addPreWriteFileCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1remPreWriteFileCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remPreWriteFileCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1addPostWriteFileCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addPostWriteFileCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1addPostWriteFileCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addPostWriteFileCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1remPostWriteFileCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remPostWriteFileCB(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1readFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  size_t arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  arg5 = *(unsigned char **)&jarg5; 
  arg6 = (size_t)jarg6; 
  result = (bool)(arg1)->readFile((char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1readFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  arg5 = *(unsigned char **)&jarg5; 
  result = (bool)(arg1)->readFile((char const *)arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1readFile_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->readFile((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1readFile_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->readFile((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1readFile_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->readFile((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1writeFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  size_t arg5 ;
  time_t arg6 ;
  time_t *argp6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = *(unsigned char **)&jarg4; 
  arg5 = (size_t)jarg5; 
  argp6 = *(time_t **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return 0;
  }
  arg6 = *argp6; 
  result = (bool)(arg1)->writeFile((char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1writeFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4, jlong jarg5) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  size_t arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = *(unsigned char **)&jarg4; 
  arg5 = (size_t)jarg5; 
  result = (bool)(arg1)->writeFile((char const *)arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1writeFile_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = *(unsigned char **)&jarg4; 
  result = (bool)(arg1)->writeFile((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1writeFile_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->writeFile((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1writeFile_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->writeFile((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getMapId_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArMapId *arg2 = (ArMapId *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArMapId **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->getMapId(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getMapId_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArMapId *arg2 = (ArMapId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(ArMapId **)&jarg2; 
  result = (bool)(arg1)->getMapId(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1calculateChecksum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)(arg1)->calculateChecksum(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getBaseDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (char *)((ArMapSimple const *)arg1)->getBaseDirectory();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setBaseDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setBaseDirectory((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getTempDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (char *)((ArMapSimple const *)arg1)->getTempDirectory();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setTempDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setTempDirectory((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1createRealFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->createRealFileName((char const *)arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (char *)((ArMapSimple const *)arg1)->getFileName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setSourceFileName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  (arg1)->setSourceFileName((char const *)arg2,(char const *)arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setSourceFileName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setSourceFileName((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1refresh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (bool)(arg1)->refresh();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setIgnoreEmptyFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIgnoreEmptyFileName(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getIgnoreEmptyFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (bool)(arg1)->getIgnoreEmptyFileName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setIgnoreCase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIgnoreCase(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setIgnoreCase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  (arg1)->setIgnoreCase();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getIgnoreCase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (bool)(arg1)->getIgnoreCase();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getInactiveInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArMapInfoInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (ArMapInfoInterface *)(arg1)->getInactiveInfo();
  *(ArMapInfoInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getInactiveObjects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArMapObjectsInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (ArMapObjectsInterface *)(arg1)->getInactiveObjects();
  *(ArMapObjectsInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getChildObjects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  ArMapObjectsInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (ArMapObjectsInterface *)(arg1)->getChildObjects();
  *(ArMapObjectsInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1findMapObjectParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  ArArgumentBuilder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArArgumentBuilder *)(arg1)->findMapObjectParams((char const *)arg2);
  *(ArArgumentBuilder **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setMapObjectParams_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  ArArgumentBuilder *arg3 = (ArArgumentBuilder *) 0 ;
  ArMapChangeDetails *arg4 = (ArMapChangeDetails *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(ArArgumentBuilder **)&jarg3; 
  arg4 = *(ArMapChangeDetails **)&jarg4; 
  result = (bool)(arg1)->setMapObjectParams((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setMapObjectParams_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  ArArgumentBuilder *arg3 = (ArArgumentBuilder *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(ArArgumentBuilder **)&jarg3; 
  result = (bool)(arg1)->setMapObjectParams((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1getRemainder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  std::list< ArArgumentBuilder * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (std::list< ArArgumentBuilder * > *)(arg1)->getRemainder();
  *(std::list< ArArgumentBuilder * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1setQuiet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setQuiet(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1parseLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->parseLine(arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1parsingComplete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  (arg1)->parsingComplete();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1isLoadingDataStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (bool)(arg1)->isLoadingDataStarted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1isLoadingLinesAndDataStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMapSimple *arg1 = (ArMapSimple *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapSimple **)&jarg1; 
  result = (bool)(arg1)->isLoadingLinesAndDataStarted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapSimple_1findMapObjectParamInfo(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  std::list< ArArgumentBuilder * > *arg2 = 0 ;
  SwigValueWrapper< std::list< ArArgumentBuilder * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(std::list< ArArgumentBuilder * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< ArArgumentBuilder * > & reference is null");
    return 0;
  } 
  result = ArMapSimple::findMapObjectParamInfo((char const *)arg1,*arg2);
  *(std::list< ArArgumentBuilder * >::iterator **)&jresult = new std::list< ArArgumentBuilder * >::iterator((const std::list< ArArgumentBuilder * >::iterator &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1createMapObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  result = (ArMapObject *)ArMapObject::createMapObject(arg1);
  *(ArMapObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1TYPE_1ARG_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArMapObject::ArgIndex result;
  
  (void)jenv;
  (void)jcls;
  result = (ArMapObject::ArgIndex)ArMapObject::TYPE_ARG_INDEX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1POSE_1X_1ARG_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArMapObject::ArgIndex result;
  
  (void)jenv;
  (void)jcls;
  result = (ArMapObject::ArgIndex)ArMapObject::POSE_X_ARG_INDEX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1POSE_1Y_1ARG_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArMapObject::ArgIndex result;
  
  (void)jenv;
  (void)jcls;
  result = (ArMapObject::ArgIndex)ArMapObject::POSE_Y_ARG_INDEX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1TH_1ARG_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArMapObject::ArgIndex result;
  
  (void)jenv;
  (void)jcls;
  result = (ArMapObject::ArgIndex)ArMapObject::TH_ARG_INDEX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1DESC_1ARG_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArMapObject::ArgIndex result;
  
  (void)jenv;
  (void)jcls;
  result = (ArMapObject::ArgIndex)ArMapObject::DESC_ARG_INDEX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1ICON_1ARG_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArMapObject::ArgIndex result;
  
  (void)jenv;
  (void)jcls;
  result = (ArMapObject::ArgIndex)ArMapObject::ICON_ARG_INDEX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1NAME_1ARG_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArMapObject::ArgIndex result;
  
  (void)jenv;
  (void)jcls;
  result = (ArMapObject::ArgIndex)ArMapObject::NAME_ARG_INDEX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1LAST_1POSE_1ARG_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArMapObject::ArgIndex result;
  
  (void)jenv;
  (void)jcls;
  result = (ArMapObject::ArgIndex)ArMapObject::LAST_POSE_ARG_INDEX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1FROM_1X_1ARG_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArMapObject::ArgIndex result;
  
  (void)jenv;
  (void)jcls;
  result = (ArMapObject::ArgIndex)ArMapObject::FROM_X_ARG_INDEX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1FROM_1Y_1ARG_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArMapObject::ArgIndex result;
  
  (void)jenv;
  (void)jcls;
  result = (ArMapObject::ArgIndex)ArMapObject::FROM_Y_ARG_INDEX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1TO_1X_1ARG_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArMapObject::ArgIndex result;
  
  (void)jenv;
  (void)jcls;
  result = (ArMapObject::ArgIndex)ArMapObject::TO_X_ARG_INDEX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1TO_1Y_1ARG_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArMapObject::ArgIndex result;
  
  (void)jenv;
  (void)jcls;
  result = (ArMapObject::ArgIndex)ArMapObject::TO_Y_ARG_INDEX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1LAST_1ARG_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArMapObject::ArgIndex result;
  
  (void)jenv;
  (void)jcls;
  result = (ArMapObject::ArgIndex)ArMapObject::LAST_ARG_INDEX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1ARG_1INDEX_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArMapObject::ARG_INDEX_COUNT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jstring jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArPose arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArPose arg7 ;
  ArPose arg8 ;
  ArPose *argp2 ;
  ArPose *argp7 ;
  ArPose *argp8 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  argp7 = *(ArPose **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg7 = *argp7; 
  argp8 = *(ArPose **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg8 = *argp8; 
  result = (ArMapObject *)new ArMapObject((char const *)arg1,arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,arg6,arg7,arg8);
  *(ArMapObject **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapObject *arg1 = 0 ;
  ArMapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObject **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArMapObject const & reference is null");
    return 0;
  } 
  result = (ArMapObject *)new ArMapObject((ArMapObject const &)*arg1);
  *(ArMapObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArMapObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArMapObject **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObject **)&jarg1; 
  result = (char *)((ArMapObject const *)arg1)->getType();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1getBaseType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObject **)&jarg1; 
  result = (char *)((ArMapObject const *)arg1)->getBaseType();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObject **)&jarg1; 
  result = (char *)((ArMapObject const *)arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObject **)&jarg1; 
  result = (char *)((ArMapObject const *)arg1)->getDescription();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1getIconName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObject **)&jarg1; 
  result = (char *)((ArMapObject const *)arg1)->getIconName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObject **)&jarg1; 
  result = (int)((ArMapObject const *)arg1)->getId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1setDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObject **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setDescription((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1getPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObject **)&jarg1; 
  result = ((ArMapObject const *)arg1)->getPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1hasFromTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObject **)&jarg1; 
  result = (bool)((ArMapObject const *)arg1)->hasFromTo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1getFromPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObject **)&jarg1; 
  result = ((ArMapObject const *)arg1)->getFromPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1getToPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObject **)&jarg1; 
  result = ((ArMapObject const *)arg1)->getToPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1getFromToRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObject **)&jarg1; 
  result = (double)((ArMapObject const *)arg1)->getFromToRotation();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1getFromToSegments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  std::list< ArLineSegment > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObject **)&jarg1; 
  result = (arg1)->getFromToSegments();
  *(std::list< ArLineSegment > **)&jresult = new std::list< ArLineSegment >((const std::list< ArLineSegment > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1getFromToSegment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  SwigValueWrapper< ArLineSegment > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObject **)&jarg1; 
  result = (arg1)->getFromToSegment();
  *(ArLineSegment **)&jresult = new ArLineSegment((const ArLineSegment &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1findCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObject **)&jarg1; 
  result = ((ArMapObject const *)arg1)->findCenter();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObject **)&jarg1; 
  result = (char *)((ArMapObject const *)arg1)->toString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1getStringRepresentation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObject **)&jarg1; 
  result = (char *)((ArMapObject const *)arg1)->getStringRepresentation();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1log_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObject **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  ((ArMapObject const *)arg1)->log((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1log_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObject **)&jarg1; 
  ((ArMapObject const *)arg1)->log();
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapObject_1getFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMapObject *arg1 = (ArMapObject *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapObject **)&jarg1; 
  result = (char *)((ArMapObject const *)arg1)->getFileName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapId_1create(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArMapId *arg2 = (ArMapId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArMapId **)&jarg2; 
  result = (bool)ArMapId::create((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapId_1toPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapId *arg1 = 0 ;
  ArBasePacket *arg2 = (ArBasePacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapId **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArMapId const & reference is null");
    return 0;
  } 
  arg2 = *(ArBasePacket **)&jarg2; 
  result = (bool)ArMapId::toPacket((ArMapId const &)*arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapId_1fromPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArBasePacket *arg1 = (ArBasePacket *) 0 ;
  ArMapId *arg2 = (ArMapId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArBasePacket **)&jarg1; 
  arg2 = *(ArMapId **)&jarg2; 
  result = (bool)ArMapId::fromPacket(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapId_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArMapId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArMapId *)new ArMapId();
  *(ArMapId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapId_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jint jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  size_t arg4 ;
  long arg5 ;
  time_t arg6 ;
  time_t const *argp6 ;
  ArMapId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(unsigned char **)&jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (long)jarg5; 
  argp6 = *(time_t **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t const");
    return 0;
  }
  arg6 = *argp6; 
  result = (ArMapId *)new ArMapId((char const *)arg1,(char const *)arg2,(unsigned char const *)arg3,arg4,arg5,arg6);
  *(ArMapId **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMapId_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapId *arg1 = 0 ;
  ArMapId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapId **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArMapId const & reference is null");
    return 0;
  } 
  result = (ArMapId *)new ArMapId((ArMapId const &)*arg1);
  *(ArMapId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArMapId(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArMapId *arg1 = (ArMapId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArMapId **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapId_1isNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMapId *arg1 = (ArMapId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapId **)&jarg1; 
  result = (bool)((ArMapId const *)arg1)->isNull();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapId_1getSourceName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMapId *arg1 = (ArMapId *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapId **)&jarg1; 
  result = (char *)((ArMapId const *)arg1)->getSourceName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapId_1getFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMapId *arg1 = (ArMapId *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapId **)&jarg1; 
  result = (char *)((ArMapId const *)arg1)->getFileName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapId_1getChecksum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapId *arg1 = (ArMapId *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapId **)&jarg1; 
  result = (unsigned char *)((ArMapId const *)arg1)->getChecksum();
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapId_1getChecksumLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapId *arg1 = (ArMapId *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapId **)&jarg1; 
  result = ((ArMapId const *)arg1)->getChecksumLength();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapId_1getDisplayChecksum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMapId *arg1 = (ArMapId *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapId **)&jarg1; 
  result = (char *)((ArMapId const *)arg1)->getDisplayChecksum();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapId_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMapId *arg1 = (ArMapId *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapId **)&jarg1; 
  result = (long)((ArMapId const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapId_1getTimestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMapId *arg1 = (ArMapId *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapId **)&jarg1; 
  result = ((ArMapId const *)arg1)->getTimestamp();
  *(time_t **)&jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapId_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMapId *arg1 = (ArMapId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapId **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapId_1setSourceName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArMapId *arg1 = (ArMapId *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapId **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setSourceName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapId_1setFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArMapId *arg1 = (ArMapId *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapId **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setFileName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapId_1setChecksum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  ArMapId *arg1 = (ArMapId *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapId **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->setChecksum((unsigned char const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapId_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArMapId *arg1 = (ArMapId *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapId **)&jarg1; 
  arg2 = (long)jarg2; 
  (arg1)->setSize(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapId_1setTimestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArMapId *arg1 = (ArMapId *) 0 ;
  time_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapId **)&jarg1; 
  arg2 = *(time_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "time_t const & reference is null");
    return ;
  } 
  (arg1)->setTimestamp((time_t const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapId_1isSameFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapId *arg1 = (ArMapId *) 0 ;
  ArMapId *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapId **)&jarg1; 
  arg2 = *(ArMapId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArMapId const & reference is null");
    return 0;
  } 
  result = (bool)((ArMapId const *)arg1)->isSameFile((ArMapId const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapId_1isVersionOfSameFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArMapId *arg1 = (ArMapId *) 0 ;
  ArMapId *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArMapId **)&jarg1; 
  arg2 = *(ArMapId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArMapId const & reference is null");
    return 0;
  } 
  result = (bool)((ArMapId const *)arg1)->isVersionOfSameFile((ArMapId const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapId_1isValidTimestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMapId *arg1 = (ArMapId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapId **)&jarg1; 
  result = (bool)((ArMapId const *)arg1)->isValidTimestamp();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMapId_1log(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArMapId *arg1 = (ArMapId *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMapId **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  ((ArMapId const *)arg1)->log((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArMode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArMode *arg1 = (ArMode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArMode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMode_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArMode *arg1 = (ArMode *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMode **)&jarg1; 
  result = (char *)(arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMode_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMode *arg1 = (ArMode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMode **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMode_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMode *arg1 = (ArMode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMode **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMode_1userTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMode *arg1 = (ArMode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMode **)&jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMode_1help(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArMode *arg1 = (ArMode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMode **)&jarg1; 
  (arg1)->help();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMode_1baseActivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMode *arg1 = (ArMode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMode **)&jarg1; 
  result = (bool)(arg1)->baseActivate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMode_1baseDeactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMode *arg1 = (ArMode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMode **)&jarg1; 
  result = (bool)(arg1)->baseDeactivate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMode_1baseHelp(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArMode::baseHelp();
}


SWIGEXPORT jchar JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMode_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  ArMode *arg1 = (ArMode *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMode **)&jarg1; 
  result = (char)(arg1)->getKey();
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMode_1getKey2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  ArMode *arg1 = (ArMode *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMode **)&jarg1; 
  result = (char)(arg1)->getKey2();
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArModeTeleop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3, jchar jarg4) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeTeleop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeTeleop *)new ArModeTeleop(arg1,(char const *)arg2,arg3,arg4);
  *(ArModeTeleop **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArModeTeleop(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArModeTeleop *arg1 = (ArModeTeleop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArModeTeleop **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeTeleop_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeTeleop *arg1 = (ArModeTeleop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeTeleop **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeTeleop_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeTeleop *arg1 = (ArModeTeleop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeTeleop **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeTeleop_1help(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeTeleop *arg1 = (ArModeTeleop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeTeleop **)&jarg1; 
  (arg1)->help();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeTeleop_1userTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeTeleop *arg1 = (ArModeTeleop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeTeleop **)&jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArModeUnguardedTeleop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3, jchar jarg4) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeUnguardedTeleop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeUnguardedTeleop *)new ArModeUnguardedTeleop(arg1,(char const *)arg2,arg3,arg4);
  *(ArModeUnguardedTeleop **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArModeUnguardedTeleop(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArModeUnguardedTeleop *arg1 = (ArModeUnguardedTeleop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArModeUnguardedTeleop **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeUnguardedTeleop_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeUnguardedTeleop *arg1 = (ArModeUnguardedTeleop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeUnguardedTeleop **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeUnguardedTeleop_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeUnguardedTeleop *arg1 = (ArModeUnguardedTeleop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeUnguardedTeleop **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeUnguardedTeleop_1help(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeUnguardedTeleop *arg1 = (ArModeUnguardedTeleop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeUnguardedTeleop **)&jarg1; 
  (arg1)->help();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeUnguardedTeleop_1userTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeUnguardedTeleop *arg1 = (ArModeUnguardedTeleop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeUnguardedTeleop **)&jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArModeWander(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3, jchar jarg4) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeWander *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeWander *)new ArModeWander(arg1,(char const *)arg2,arg3,arg4);
  *(ArModeWander **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArModeWander(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArModeWander *arg1 = (ArModeWander *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArModeWander **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeWander_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeWander *arg1 = (ArModeWander *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeWander **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeWander_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeWander *arg1 = (ArModeWander *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeWander **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeWander_1help(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeWander *arg1 = (ArModeWander *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeWander **)&jarg1; 
  (arg1)->help();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeWander_1userTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeWander *arg1 = (ArModeWander *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeWander **)&jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArModeGripper(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3, jchar jarg4) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeGripper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeGripper *)new ArModeGripper(arg1,(char const *)arg2,arg3,arg4);
  *(ArModeGripper **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArModeGripper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArModeGripper *arg1 = (ArModeGripper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArModeGripper **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeGripper_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeGripper *arg1 = (ArModeGripper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeGripper **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeGripper_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeGripper *arg1 = (ArModeGripper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeGripper **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeGripper_1userTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeGripper *arg1 = (ArModeGripper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeGripper **)&jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeGripper_1help(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeGripper *arg1 = (ArModeGripper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeGripper **)&jarg1; 
  (arg1)->help();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeGripper_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeGripper *arg1 = (ArModeGripper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeGripper **)&jarg1; 
  (arg1)->open();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeGripper_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeGripper *arg1 = (ArModeGripper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeGripper **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeGripper_1up(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeGripper *arg1 = (ArModeGripper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeGripper **)&jarg1; 
  (arg1)->up();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeGripper_1down(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeGripper *arg1 = (ArModeGripper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeGripper **)&jarg1; 
  (arg1)->down();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeGripper_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeGripper *arg1 = (ArModeGripper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeGripper **)&jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeGripper_1exercise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeGripper *arg1 = (ArModeGripper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeGripper **)&jarg1; 
  (arg1)->exercise();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArModeCamera(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3, jchar jarg4) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeCamera *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeCamera *)new ArModeCamera(arg1,(char const *)arg2,arg3,arg4);
  *(ArModeCamera **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArModeCamera(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArModeCamera **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1userTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1help(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->help();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1up(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->up();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1down(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->down();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1left(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->left();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1right(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->right();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1center(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->center();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1zoomIn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->zoomIn();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1zoomOut(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->zoomOut();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1exercise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->exercise();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1toggleAutoFocus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->toggleAutoFocus();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1sony(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->sony();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1canon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->canon();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1dpptu(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->dpptu();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1amptu(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->amptu();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1canonInverted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->canonInverted();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1sonySerial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->sonySerial();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1canonSerial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->canonSerial();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1dpptuSerial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->dpptuSerial();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1amptuSerial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->amptuSerial();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1canonInvertedSerial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->canonInvertedSerial();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1rvisionSerial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->rvisionSerial();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1com1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->com1();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1com2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->com2();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1com3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->com3();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1com4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->com4();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1aux1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->aux1();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCamera_1aux2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCamera *arg1 = (ArModeCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCamera **)&jarg1; 
  (arg1)->aux2();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArModeSonar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3, jchar jarg4) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeSonar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeSonar *)new ArModeSonar(arg1,(char const *)arg2,arg3,arg4);
  *(ArModeSonar **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArModeSonar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArModeSonar *arg1 = (ArModeSonar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArModeSonar **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeSonar_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeSonar *arg1 = (ArModeSonar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeSonar **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeSonar_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeSonar *arg1 = (ArModeSonar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeSonar **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeSonar_1userTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeSonar *arg1 = (ArModeSonar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeSonar **)&jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeSonar_1help(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeSonar *arg1 = (ArModeSonar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeSonar **)&jarg1; 
  (arg1)->help();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeSonar_1allSonar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeSonar *arg1 = (ArModeSonar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeSonar **)&jarg1; 
  (arg1)->allSonar();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeSonar_1firstSonar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeSonar *arg1 = (ArModeSonar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeSonar **)&jarg1; 
  (arg1)->firstSonar();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeSonar_1secondSonar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeSonar *arg1 = (ArModeSonar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeSonar **)&jarg1; 
  (arg1)->secondSonar();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeSonar_1thirdSonar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeSonar *arg1 = (ArModeSonar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeSonar **)&jarg1; 
  (arg1)->thirdSonar();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeSonar_1fourthSonar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeSonar *arg1 = (ArModeSonar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeSonar **)&jarg1; 
  (arg1)->fourthSonar();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArModeBumps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3, jchar jarg4) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeBumps *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeBumps *)new ArModeBumps(arg1,(char const *)arg2,arg3,arg4);
  *(ArModeBumps **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArModeBumps(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArModeBumps *arg1 = (ArModeBumps *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArModeBumps **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeBumps_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeBumps *arg1 = (ArModeBumps *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeBumps **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeBumps_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeBumps *arg1 = (ArModeBumps *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeBumps **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeBumps_1userTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeBumps *arg1 = (ArModeBumps *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeBumps **)&jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeBumps_1help(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeBumps *arg1 = (ArModeBumps *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeBumps **)&jarg1; 
  (arg1)->help();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArModePosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3, jchar jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArAnalogGyro *arg5 = (ArAnalogGyro *) 0 ;
  ArModePosition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  arg5 = *(ArAnalogGyro **)&jarg5; 
  result = (ArModePosition *)new ArModePosition(arg1,(char const *)arg2,arg3,arg4,arg5);
  *(ArModePosition **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArModePosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3, jchar jarg4) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModePosition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModePosition *)new ArModePosition(arg1,(char const *)arg2,arg3,arg4);
  *(ArModePosition **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArModePosition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArModePosition **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModePosition_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModePosition **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModePosition_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModePosition **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModePosition_1userTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModePosition **)&jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModePosition_1help(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModePosition **)&jarg1; 
  (arg1)->help();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModePosition_1up(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModePosition **)&jarg1; 
  (arg1)->up();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModePosition_1down(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModePosition **)&jarg1; 
  (arg1)->down();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModePosition_1left(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModePosition **)&jarg1; 
  (arg1)->left();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModePosition_1right(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModePosition **)&jarg1; 
  (arg1)->right();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModePosition_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModePosition **)&jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModePosition_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModePosition **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModePosition_1mode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModePosition **)&jarg1; 
  (arg1)->mode();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModePosition_1gyro(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModePosition **)&jarg1; 
  (arg1)->gyro();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModePosition_1incDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModePosition **)&jarg1; 
  (arg1)->incDistance();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModePosition_1decDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModePosition *arg1 = (ArModePosition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModePosition **)&jarg1; 
  (arg1)->decDistance();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArModeIO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3, jchar jarg4) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeIO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeIO *)new ArModeIO(arg1,(char const *)arg2,arg3,arg4);
  *(ArModeIO **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArModeIO(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArModeIO *arg1 = (ArModeIO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArModeIO **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeIO_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeIO *arg1 = (ArModeIO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeIO **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeIO_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeIO *arg1 = (ArModeIO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeIO **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeIO_1userTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeIO *arg1 = (ArModeIO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeIO **)&jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeIO_1help(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeIO *arg1 = (ArModeIO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeIO **)&jarg1; 
  (arg1)->help();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArModeLaser_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3, jchar jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArSick *arg5 = (ArSick *) 0 ;
  ArModeLaser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  arg5 = *(ArSick **)&jarg5; 
  result = (ArModeLaser *)new ArModeLaser(arg1,(char const *)arg2,arg3,arg4,arg5);
  *(ArModeLaser **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArModeLaser_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3, jchar jarg4) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeLaser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeLaser *)new ArModeLaser(arg1,(char const *)arg2,arg3,arg4);
  *(ArModeLaser **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArModeLaser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArModeLaser *arg1 = (ArModeLaser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArModeLaser **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeLaser_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeLaser *arg1 = (ArModeLaser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeLaser **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeLaser_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeLaser *arg1 = (ArModeLaser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeLaser **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeLaser_1userTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeLaser *arg1 = (ArModeLaser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeLaser **)&jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeLaser_1help(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeLaser *arg1 = (ArModeLaser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeLaser **)&jarg1; 
  (arg1)->help();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeLaser_1switchToLaser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArModeLaser *arg1 = (ArModeLaser *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeLaser **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->switchToLaser(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArModeActs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3, jchar jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArACTS_1_2 *arg5 = (ArACTS_1_2 *) 0 ;
  ArModeActs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  arg5 = *(ArACTS_1_2 **)&jarg5; 
  result = (ArModeActs *)new ArModeActs(arg1,(char const *)arg2,arg3,arg4,arg5);
  *(ArModeActs **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArModeActs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3, jchar jarg4) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeActs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeActs *)new ArModeActs(arg1,(char const *)arg2,arg3,arg4);
  *(ArModeActs **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArModeActs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArModeActs **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeActs_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeActs **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeActs_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeActs **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeActs_1help(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeActs **)&jarg1; 
  (arg1)->help();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeActs_1userTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeActs **)&jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeActs_1channel1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeActs **)&jarg1; 
  (arg1)->channel1();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeActs_1channel2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeActs **)&jarg1; 
  (arg1)->channel2();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeActs_1channel3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeActs **)&jarg1; 
  (arg1)->channel3();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeActs_1channel4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeActs **)&jarg1; 
  (arg1)->channel4();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeActs_1channel5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeActs **)&jarg1; 
  (arg1)->channel5();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeActs_1channel6(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeActs **)&jarg1; 
  (arg1)->channel6();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeActs_1channel7(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeActs **)&jarg1; 
  (arg1)->channel7();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeActs_1channel8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeActs **)&jarg1; 
  (arg1)->channel8();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeActs_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeActs **)&jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeActs_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeActs **)&jarg1; 
  (arg1)->start();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeActs_1toggleAcquire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeActs *arg1 = (ArModeActs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeActs **)&jarg1; 
  (arg1)->toggleAcquire();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArModeCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3, jchar jarg4) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeCommand *)new ArModeCommand(arg1,(char const *)arg2,arg3,arg4);
  *(ArModeCommand **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArModeCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArModeCommand *arg1 = (ArModeCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArModeCommand **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCommand_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCommand *arg1 = (ArModeCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCommand **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCommand_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCommand *arg1 = (ArModeCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCommand **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeCommand_1help(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeCommand *arg1 = (ArModeCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeCommand **)&jarg1; 
  (arg1)->help();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArModeTCM2_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3, jchar jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArTCM2 *arg5 = (ArTCM2 *) 0 ;
  ArModeTCM2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  arg5 = *(ArTCM2 **)&jarg5; 
  result = (ArModeTCM2 *)new ArModeTCM2(arg1,(char const *)arg2,arg3,arg4,arg5);
  *(ArModeTCM2 **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArModeTCM2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3, jchar jarg4) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeTCM2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeTCM2 *)new ArModeTCM2(arg1,(char const *)arg2,arg3,arg4);
  *(ArModeTCM2 **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArModeTCM2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArModeTCM2 *arg1 = (ArModeTCM2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArModeTCM2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeTCM2_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeTCM2 *arg1 = (ArModeTCM2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeTCM2 **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeTCM2_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeTCM2 *arg1 = (ArModeTCM2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeTCM2 **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeTCM2_1help(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeTCM2 *arg1 = (ArModeTCM2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeTCM2 **)&jarg1; 
  (arg1)->help();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeTCM2_1userTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeTCM2 *arg1 = (ArModeTCM2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeTCM2 **)&jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArModeConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3, jchar jarg4) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeConfig *)new ArModeConfig(arg1,(char const *)arg2,arg3,arg4);
  *(ArModeConfig **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeConfig_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeConfig *arg1 = (ArModeConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeConfig **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeConfig_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeConfig *arg1 = (ArModeConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeConfig **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeConfig_1help(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeConfig *arg1 = (ArModeConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeConfig **)&jarg1; 
  (arg1)->help();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArModeConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArModeConfig *arg1 = (ArModeConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArModeConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArModeRobotStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3, jchar jarg4) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  char arg4 ;
  ArModeRobotStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (ArModeRobotStatus *)new ArModeRobotStatus(arg1,(char const *)arg2,arg3,arg4);
  *(ArModeRobotStatus **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeRobotStatus_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeRobotStatus *arg1 = (ArModeRobotStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeRobotStatus **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeRobotStatus_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeRobotStatus *arg1 = (ArModeRobotStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeRobotStatus **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeRobotStatus_1help(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeRobotStatus *arg1 = (ArModeRobotStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeRobotStatus **)&jarg1; 
  (arg1)->help();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModeRobotStatus_1userTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArModeRobotStatus *arg1 = (ArModeRobotStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModeRobotStatus **)&jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArModeRobotStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArModeRobotStatus *arg1 = (ArModeRobotStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArModeRobotStatus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArModule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArModule *arg1 = (ArModule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArModule **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModule_1init_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  ArModule *arg1 = (ArModule *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArModule **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  result = (bool)(arg1)->init(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModule_1init_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArModule *arg1 = (ArModule *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArModule **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (bool)(arg1)->init(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModule_1exit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArModule *arg1 = (ArModule *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModule **)&jarg1; 
  result = (bool)(arg1)->exit();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModule_1getRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArModule *arg1 = (ArModule *) 0 ;
  ArRobot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArModule **)&jarg1; 
  result = (ArRobot *)(arg1)->getRobot();
  *(ArRobot **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModule_1setRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArModule *arg1 = (ArModule *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArModule **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModuleLoader_1STATUS_1SUCCESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArModuleLoader::Status result;
  
  (void)jenv;
  (void)jcls;
  result = (ArModuleLoader::Status)ArModuleLoader::STATUS_SUCCESS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModuleLoader_1load_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jboolean jarg4) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  void *arg3 = (void *) 0 ;
  bool arg4 ;
  ArModuleLoader::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArModuleLoader::Status)ArModuleLoader::load((char const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModuleLoader_1load_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  void *arg3 = (void *) 0 ;
  ArModuleLoader::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  result = (ArModuleLoader::Status)ArModuleLoader::load((char const *)arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModuleLoader_1load_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArModuleLoader::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArRobot **)&jarg2; 
  result = (ArModuleLoader::Status)ArModuleLoader::load((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModuleLoader_1reload_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jboolean jarg4) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  void *arg3 = (void *) 0 ;
  bool arg4 ;
  ArModuleLoader::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArModuleLoader::Status)ArModuleLoader::reload((char const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModuleLoader_1reload_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  void *arg3 = (void *) 0 ;
  ArModuleLoader::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  result = (ArModuleLoader::Status)ArModuleLoader::reload((char const *)arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModuleLoader_1reload_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArModuleLoader::Status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArRobot **)&jarg2; 
  result = (ArModuleLoader::Status)ArModuleLoader::reload((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModuleLoader_1close_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ArModuleLoader::Status result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  result = (ArModuleLoader::Status)ArModuleLoader::close((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModuleLoader_1close_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArModuleLoader::Status result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArModuleLoader::Status)ArModuleLoader::close((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArModuleLoader_1closeAll(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArModuleLoader::closeAll();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArModuleLoader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArModuleLoader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArModuleLoader *)new ArModuleLoader();
  *(ArModuleLoader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArModuleLoader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArModuleLoader *arg1 = (ArModuleLoader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArModuleLoader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMutex_1STATUS_1FAILED_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArMutex::Status result;
  
  (void)jenv;
  (void)jcls;
  result = (ArMutex::Status)ArMutex::STATUS_FAILED_INIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMutex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  ArMutex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (ArMutex *)new ArMutex(arg1);
  *(ArMutex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMutex_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArMutex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArMutex *)new ArMutex();
  *(ArMutex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArMutex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArMutex *arg1 = (ArMutex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArMutex **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMutex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMutex *arg1 = 0 ;
  ArMutex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMutex **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArMutex const & reference is null");
    return 0;
  } 
  result = (ArMutex *)new ArMutex((ArMutex const &)*arg1);
  *(ArMutex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMutex_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMutex *arg1 = (ArMutex *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMutex **)&jarg1; 
  result = (int)(arg1)->lock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMutex_1tryLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMutex *arg1 = (ArMutex *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMutex **)&jarg1; 
  result = (int)(arg1)->tryLock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMutex_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMutex *arg1 = (ArMutex *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMutex **)&jarg1; 
  result = (int)(arg1)->unlock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMutex_1getError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArMutex *arg1 = (ArMutex *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMutex **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArMutex const *)arg1)->getError(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMutex_1setLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArMutex *arg1 = (ArMutex *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMutex **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLog(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMutex_1setLogName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArMutex *arg1 = (ArMutex *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMutex **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setLogName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMutex_1getMutex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMutex *arg1 = (ArMutex *) 0 ;
  ArMutex::MutexType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMutex **)&jarg1; 
  result = (ArMutex::MutexType *) &(arg1)->getMutex();
  *(ArMutex::MutexType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMutex_1setLockWarningTime(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  double arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  ArMutex::setLockWarningTime(arg1);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMutex_1getLockWarningTime(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)ArMutex::getLockWarningTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMutex_1setUnlockWarningTime(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  double arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  ArMutex::setUnlockWarningTime(arg1);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMutex_1getUnlockWarningTime(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)ArMutex::getUnlockWarningTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArNMEAParser_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArNMEAParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArNMEAParser *)new ArNMEAParser((char const *)arg1);
  *(ArNMEAParser **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArNMEAParser_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArNMEAParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArNMEAParser *)new ArNMEAParser();
  *(ArNMEAParser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNMEAParser_1ParseFinished_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArNMEAParser::ParseFinished;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNMEAParser_1ParseError_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArNMEAParser::ParseError;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNMEAParser_1ParseData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArNMEAParser::ParseData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNMEAParser_1ParseUpdated_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArNMEAParser::ParseUpdated;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNMEAParser_1ParseFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArNMEAParser *arg1 = (ArNMEAParser *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNMEAParser **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1 && sizeof(int) == sizeof((arg1)->ParseFlags)) *(int*)(void*)&((arg1)->ParseFlags) = arg2;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNMEAParser_1ParseFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArNMEAParser *arg1 = (ArNMEAParser *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNMEAParser **)&jarg1; 
  result = (int) ((arg1)->ParseFlags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNMEAParser_1setIgnoreChecksum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArNMEAParser *arg1 = (ArNMEAParser *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNMEAParser **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIgnoreChecksum(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNMEAParser_1addHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  ArNMEAParser *arg1 = (ArNMEAParser *) 0 ;
  char *arg2 = (char *) 0 ;
  ArNMEAParser::Handler *arg3 = (ArNMEAParser::Handler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNMEAParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(ArNMEAParser::Handler **)&jarg3; 
  (arg1)->addHandler((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNMEAParser_1removeHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArNMEAParser *arg1 = (ArNMEAParser *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNMEAParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->removeHandler((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNMEAParser_1parse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  ArNMEAParser *arg1 = (ArNMEAParser *) 0 ;
  ArDeviceConnection *arg2 = (ArDeviceConnection *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArNMEAParser **)&jarg1; 
  arg2 = *(ArDeviceConnection **)&jarg2; 
  result = (int)(arg1)->parse(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNMEAParser_1parse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  ArNMEAParser *arg1 = (ArNMEAParser *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNMEAParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (int)(arg1)->parse((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNMEAParser_1getHandlersRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArNMEAParser *arg1 = (ArNMEAParser *) 0 ;
  ArNMEAParser::HandlerMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNMEAParser **)&jarg1; 
  result = (ArNMEAParser::HandlerMap *) &((ArNMEAParser const *)arg1)->getHandlersRef();
  *(ArNMEAParser::HandlerMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArNMEAParser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArNMEAParser *arg1 = (ArNMEAParser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArNMEAParser **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNMEAParser_1Message_1message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArNMEAParser_Message *arg1 = (ArNMEAParser_Message *) 0 ;
  ArNMEAParser::MessageVector *arg2 = (ArNMEAParser::MessageVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNMEAParser_Message **)&jarg1; 
  arg2 = *(ArNMEAParser::MessageVector **)&jarg2; 
  if (arg1) (arg1)->message = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNMEAParser_1Message_1message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArNMEAParser_Message *arg1 = (ArNMEAParser_Message *) 0 ;
  ArNMEAParser::MessageVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNMEAParser_Message **)&jarg1; 
  result = (ArNMEAParser::MessageVector *) ((arg1)->message);
  *(ArNMEAParser::MessageVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNMEAParser_1Message_1timeParseStarted_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArNMEAParser_Message *arg1 = (ArNMEAParser_Message *) 0 ;
  ArTime *arg2 = (ArTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArNMEAParser_Message **)&jarg1; 
  arg2 = *(ArTime **)&jarg2; 
  if (arg1) (arg1)->timeParseStarted = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNMEAParser_1Message_1timeParseStarted_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArNMEAParser_Message *arg1 = (ArNMEAParser_Message *) 0 ;
  ArTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNMEAParser_Message **)&jarg1; 
  result = (ArTime *)& ((arg1)->timeParseStarted);
  *(ArTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArNMEAParser_1Message(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArNMEAParser_Message *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArNMEAParser_Message *)new ArNMEAParser_Message();
  *(ArNMEAParser_Message **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArNMEAParser_1Message(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArNMEAParser_Message *arg1 = (ArNMEAParser_Message *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArNMEAParser_Message **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArNetServer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1, jboolean jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  bool arg1 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  ArNetServer *arg4 = (ArNetServer *) 0 ;
  ArNetServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArNetServer **)&jarg4; 
  result = (ArNetServer *)new ArNetServer(arg1,arg2,(char const *)arg3,arg4);
  *(ArNetServer **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArNetServer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jboolean jarg1, jboolean jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  bool arg1 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  ArNetServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArNetServer *)new ArNetServer(arg1,arg2,(char const *)arg3);
  *(ArNetServer **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArNetServer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jboolean jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  bool arg1 ;
  bool arg2 ;
  ArNetServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  result = (ArNetServer *)new ArNetServer(arg1,arg2);
  *(ArNetServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArNetServer_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  ArNetServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (ArNetServer *)new ArNetServer(arg1);
  *(ArNetServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArNetServer_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArNetServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArNetServer *)new ArNetServer();
  *(ArNetServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArNetServer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArNetServer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1open_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4, jboolean jarg5, jstring jarg6) {
  jboolean jresult = 0 ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArNetServer **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = jarg5 ? true : false; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (bool)(arg1)->open(arg2,arg3,(char const *)arg4,arg5,(char const *)arg6);
  jresult = (jboolean)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1open_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArNetServer **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->open(arg2,arg3,(char const *)arg4,arg5);
  jresult = (jboolean)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1open_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArNetServer **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (bool)(arg1)->open(arg2,arg3,(char const *)arg4);
  jresult = (jboolean)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetServer **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1addCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char *arg2 = (char *) 0 ;
  ArFunctor3< char **,int,ArSocket * > *arg3 = (ArFunctor3< char **,int,ArSocket * > *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetServer **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(ArFunctor3< char **,int,ArSocket * > **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (bool)(arg1)->addCommand((char const *)arg2,arg3,(char const *)arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1remCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetServer **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->remCommand((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetServer **)&jarg1; 
  result = (char *)(arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1sendToAllClientsPlain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetServer **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->sendToAllClientsPlain((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1sendToAllClientsNextCyclePlain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetServer **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->sendToAllClientsNextCyclePlain((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1sendToAllClientsNextCyclePlainBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetServer **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->sendToAllClientsNextCyclePlainBool((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1sendToClientPlain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArNetServer **)&jarg1; 
  arg2 = *(ArSocket **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->sendToClientPlain(arg2,(char const *)arg3,(char const *)arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1isOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetServer **)&jarg1; 
  result = (bool)(arg1)->isOpen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1setLoggingDataSent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetServer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLoggingDataSent(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1getLoggingDataSent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetServer **)&jarg1; 
  result = (bool)(arg1)->getLoggingDataSent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1setLoggingDataReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetServer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLoggingDataReceived(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1getLoggingDataReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetServer **)&jarg1; 
  result = (bool)(arg1)->getLoggingDataReceived();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1setUseWrongEndChars(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetServer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseWrongEndChars(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1getUseWrongEndChars(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetServer **)&jarg1; 
  result = (bool)(arg1)->getUseWrongEndChars();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1runOnce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetServer **)&jarg1; 
  (arg1)->runOnce();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1internalGreeting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArNetServer **)&jarg1; 
  arg2 = *(ArSocket **)&jarg2; 
  (arg1)->internalGreeting(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1internalHelp_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArNetServer **)&jarg1; 
  arg2 = *(ArSocket **)&jarg2; 
  (arg1)->internalHelp(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1internalHelp_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  ArSocket *arg4 = (ArSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArNetServer **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(ArSocket **)&jarg4; 
  (arg1)->internalHelp(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1internalEcho(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  ArSocket *arg4 = (ArSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArNetServer **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(ArSocket **)&jarg4; 
  (arg1)->internalEcho(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1internalQuit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  ArSocket *arg4 = (ArSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArNetServer **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(ArSocket **)&jarg4; 
  (arg1)->internalQuit(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1internalShutdownServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  ArSocket *arg4 = (ArSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArNetServer **)&jarg1; 
  arg2 = *(char ***)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(ArSocket **)&jarg4; 
  (arg1)->internalShutdownServer(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1parseCommandOnSocket_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  ArSocket *arg3 = (ArSocket *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArNetServer **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  arg3 = *(ArSocket **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->parseCommandOnSocket(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1parseCommandOnSocket_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  ArSocket *arg3 = (ArSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArNetServer **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  arg3 = *(ArSocket **)&jarg3; 
  (arg1)->parseCommandOnSocket(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1internalAddSocketToList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArNetServer **)&jarg1; 
  arg2 = *(ArSocket **)&jarg2; 
  (arg1)->internalAddSocketToList(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1internalAddSocketToDeleteList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArNetServer **)&jarg1; 
  arg2 = *(ArSocket **)&jarg2; 
  (arg1)->internalAddSocketToDeleteList(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1squelchNormal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetServer **)&jarg1; 
  (arg1)->squelchNormal();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1setExtraString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetServer **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setExtraString((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1getExtraString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetServer **)&jarg1; 
  result = (char *)(arg1)->getExtraString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetServer **)&jarg1; 
  result = (int)(arg1)->lock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1tryLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetServer **)&jarg1; 
  result = (int)(arg1)->tryLock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNetServer_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArNetServer *arg1 = (ArNetServer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetServer **)&jarg1; 
  result = (int)(arg1)->unlock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArNovatelGPS(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArNovatelGPS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArNovatelGPS *)new ArNovatelGPS();
  *(ArNovatelGPS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArNovatelGPS(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArNovatelGPS *arg1 = (ArNovatelGPS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArNovatelGPS **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNovatelSPAN_1GPSLatitude_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNovatelSPAN **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->GPSLatitude = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNovatelSPAN_1GPSLatitude_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNovatelSPAN **)&jarg1; 
  result = (double) ((arg1)->GPSLatitude);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNovatelSPAN_1GPSLongitude_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNovatelSPAN **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->GPSLongitude = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNovatelSPAN_1GPSLongitude_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNovatelSPAN **)&jarg1; 
  result = (double) ((arg1)->GPSLongitude);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNovatelSPAN_1haveGPSPosition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNovatelSPAN **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->haveGPSPosition = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNovatelSPAN_1haveGPSPosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNovatelSPAN **)&jarg1; 
  result = (bool) ((arg1)->haveGPSPosition);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNovatelSPAN_1GPSValidFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNovatelSPAN **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->GPSValidFlag = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNovatelSPAN_1GPSValidFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNovatelSPAN **)&jarg1; 
  result = (bool) ((arg1)->GPSValidFlag);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNovatelSPAN_1timeGotGPSPosition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  ArTime *arg2 = (ArTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArNovatelSPAN **)&jarg1; 
  arg2 = *(ArTime **)&jarg2; 
  if (arg1) (arg1)->timeGotGPSPosition = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNovatelSPAN_1timeGotGPSPosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  ArTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNovatelSPAN **)&jarg1; 
  result = (ArTime *)& ((arg1)->timeGotGPSPosition);
  *(ArTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNovatelSPAN_1GPSTimestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  ArTime *arg2 = (ArTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArNovatelSPAN **)&jarg1; 
  arg2 = *(ArTime **)&jarg2; 
  if (arg1) (arg1)->GPSTimestamp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArNovatelSPAN_1GPSTimestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  ArTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNovatelSPAN **)&jarg1; 
  result = (ArTime *)& ((arg1)->GPSTimestamp);
  *(ArTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArNovatelSPAN(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArNovatelSPAN *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArNovatelSPAN *)new ArNovatelSPAN();
  *(ArNovatelSPAN **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArNovatelSPAN(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArNovatelSPAN *arg1 = (ArNovatelSPAN *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArNovatelSPAN **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1P2ArmJoint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  P2ArmJoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (P2ArmJoint *)new P2ArmJoint();
  *(P2ArmJoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1P2ArmJoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(P2ArmJoint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_P2ArmJoint_1myPos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(P2ArmJoint **)&jarg1; 
  arg2 = (ArTypes::UByte)jarg2; 
  if (arg1) (arg1)->myPos = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_P2ArmJoint_1myPos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(P2ArmJoint **)&jarg1; 
  result = (ArTypes::UByte) ((arg1)->myPos);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_P2ArmJoint_1myVel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(P2ArmJoint **)&jarg1; 
  arg2 = (ArTypes::UByte)jarg2; 
  if (arg1) (arg1)->myVel = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_P2ArmJoint_1myVel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(P2ArmJoint **)&jarg1; 
  result = (ArTypes::UByte) ((arg1)->myVel);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_P2ArmJoint_1myHome_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(P2ArmJoint **)&jarg1; 
  arg2 = (ArTypes::UByte)jarg2; 
  if (arg1) (arg1)->myHome = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_P2ArmJoint_1myHome_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(P2ArmJoint **)&jarg1; 
  result = (ArTypes::UByte) ((arg1)->myHome);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_P2ArmJoint_1myMin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(P2ArmJoint **)&jarg1; 
  arg2 = (ArTypes::UByte)jarg2; 
  if (arg1) (arg1)->myMin = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_P2ArmJoint_1myMin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(P2ArmJoint **)&jarg1; 
  result = (ArTypes::UByte) ((arg1)->myMin);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_P2ArmJoint_1myCenter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(P2ArmJoint **)&jarg1; 
  arg2 = (ArTypes::UByte)jarg2; 
  if (arg1) (arg1)->myCenter = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_P2ArmJoint_1myCenter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(P2ArmJoint **)&jarg1; 
  result = (ArTypes::UByte) ((arg1)->myCenter);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_P2ArmJoint_1myMax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(P2ArmJoint **)&jarg1; 
  arg2 = (ArTypes::UByte)jarg2; 
  if (arg1) (arg1)->myMax = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_P2ArmJoint_1myMax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(P2ArmJoint **)&jarg1; 
  result = (ArTypes::UByte) ((arg1)->myMax);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_P2ArmJoint_1myTicksPer90_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(P2ArmJoint **)&jarg1; 
  arg2 = (ArTypes::UByte)jarg2; 
  if (arg1) (arg1)->myTicksPer90 = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_P2ArmJoint_1myTicksPer90_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  P2ArmJoint *arg1 = (P2ArmJoint *) 0 ;
  ArTypes::UByte result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(P2ArmJoint **)&jarg1; 
  result = (ArTypes::UByte) ((arg1)->myTicksPer90);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1StatusOff_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArP2Arm::StatusType result;
  
  (void)jenv;
  (void)jcls;
  result = (ArP2Arm::StatusType)ArP2Arm::StatusOff;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1StatusSingle_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArP2Arm::StatusType result;
  
  (void)jenv;
  (void)jcls;
  result = (ArP2Arm::StatusType)ArP2Arm::StatusSingle;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1StatusContinuous_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArP2Arm::StatusType result;
  
  (void)jenv;
  (void)jcls;
  result = (ArP2Arm::StatusType)ArP2Arm::StatusContinuous;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1ArmJoint1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)ArP2Arm::ArmJoint1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1ArmJoint2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)ArP2Arm::ArmJoint2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1ArmJoint3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)ArP2Arm::ArmJoint3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1ArmJoint4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)ArP2Arm::ArmJoint4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1ArmJoint5_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)ArP2Arm::ArmJoint5;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1ArmJoint6_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)ArP2Arm::ArmJoint6;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1ArmGood_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)ArP2Arm::ArmGood;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1ArmInited_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)ArP2Arm::ArmInited;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1ArmPower_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)ArP2Arm::ArmPower;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1ArmHoming_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)ArP2Arm::ArmHoming;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1NumJoints_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  ArP2Arm::NumJoints = arg1;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1NumJoints_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArP2Arm::NumJoints;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArP2Arm(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArP2Arm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArP2Arm *)new ArP2Arm();
  *(ArP2Arm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArP2Arm(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArP2Arm **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1setRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArP2Arm **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArP2Arm::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  result = (ArP2Arm::State)(arg1)->init();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1uninit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArP2Arm::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  result = (ArP2Arm::State)(arg1)->uninit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1powerOn_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  bool arg2 ;
  ArP2Arm::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ArP2Arm::State)(arg1)->powerOn(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1powerOn_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArP2Arm::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  result = (ArP2Arm::State)(arg1)->powerOn();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1powerOff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArP2Arm::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  result = (ArP2Arm::State)(arg1)->powerOff();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1requestInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArP2Arm::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  result = (ArP2Arm::State)(arg1)->requestInfo();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1requestStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArP2Arm::StatusType arg2 ;
  ArP2Arm::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  arg2 = (ArP2Arm::StatusType)jarg2; 
  result = (ArP2Arm::State)(arg1)->requestStatus(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1requestInit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArP2Arm::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  result = (ArP2Arm::State)(arg1)->requestInit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1checkArm_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  bool arg2 ;
  ArP2Arm::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ArP2Arm::State)(arg1)->checkArm(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1checkArm_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArP2Arm::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  result = (ArP2Arm::State)(arg1)->checkArm();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1home_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  ArP2Arm::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ArP2Arm::State)(arg1)->home(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1home_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArP2Arm::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  result = (ArP2Arm::State)(arg1)->home();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1park(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArP2Arm::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  result = (ArP2Arm::State)(arg1)->park();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1moveTo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jshort jarg4) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  float arg3 ;
  unsigned char arg4 ;
  ArP2Arm::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (unsigned char)jarg4; 
  result = (ArP2Arm::State)(arg1)->moveTo(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1moveTo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  float arg3 ;
  ArP2Arm::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (ArP2Arm::State)(arg1)->moveTo(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1moveToTicks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  ArP2Arm::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char)jarg3; 
  result = (ArP2Arm::State)(arg1)->moveToTicks(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1moveStep_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jshort jarg4) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  float arg3 ;
  unsigned char arg4 ;
  ArP2Arm::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (unsigned char)jarg4; 
  result = (ArP2Arm::State)(arg1)->moveStep(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1moveStep_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  float arg3 ;
  ArP2Arm::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (ArP2Arm::State)(arg1)->moveStep(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1moveStepTicks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jbyte jarg3) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  signed char arg3 ;
  ArP2Arm::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (signed char)jarg3; 
  result = (ArP2Arm::State)(arg1)->moveStepTicks(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1moveVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  int arg3 ;
  ArP2Arm::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (ArP2Arm::State)(arg1)->moveVel(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArP2Arm::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  result = (ArP2Arm::State)(arg1)->stop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1setAutoParkTimer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  ArP2Arm::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ArP2Arm::State)(arg1)->setAutoParkTimer(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1setGripperParkTimer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  ArP2Arm::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ArP2Arm::State)(arg1)->setGripperParkTimer(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1setStoppedCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArP2Arm **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->setStoppedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1setPacketCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArFunctor1< ArP2Arm::PacketType > *arg2 = (ArFunctor1< ArP2Arm::PacketType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  arg2 = *(ArFunctor1< ArP2Arm::PacketType > **)&jarg2; 
  (arg1)->setPacketCB(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1getArmVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  result = (arg1)->getArmVersion();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1getJointPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float)(arg1)->getJointPos(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1getJointPosTicks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned char)(arg1)->getJointPosTicks(arg2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1getMoving_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->getMoving(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1getMoving_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  result = (bool)(arg1)->getMoving();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1isPowered(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  result = (bool)(arg1)->isPowered();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1isGood(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  result = (bool)(arg1)->isGood();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  result = (int)(arg1)->getStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1getLastStatusTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  result = (arg1)->getLastStatusTime();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1getRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  ArRobot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  result = (ArRobot *)(arg1)->getRobot();
  *(ArRobot **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1getJoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  P2ArmJoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (P2ArmJoint *)(arg1)->getJoint(arg2);
  *(P2ArmJoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1convertDegToTicks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  float arg3 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = *(unsigned char **)&jarg4; 
  result = (bool)(arg1)->convertDegToTicks(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArP2Arm_1convertTicksToDeg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArP2Arm *arg1 = (ArP2Arm *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  float *arg4 = (float *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArP2Arm **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = *(float **)&jarg4; 
  result = (bool)(arg1)->convertTicksToDeg(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArPriorityResolver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArPriorityResolver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArPriorityResolver *)new ArPriorityResolver();
  *(ArPriorityResolver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArPriorityResolver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArPriorityResolver *arg1 = (ArPriorityResolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArPriorityResolver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPriorityResolver_1resolve_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jlong jresult = 0 ;
  ArPriorityResolver *arg1 = (ArPriorityResolver *) 0 ;
  ArResolver::ActionMap *arg2 = (ArResolver::ActionMap *) 0 ;
  ArRobot *arg3 = (ArRobot *) 0 ;
  bool arg4 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArPriorityResolver **)&jarg1; 
  arg2 = *(ArResolver::ActionMap **)&jarg2; 
  arg3 = *(ArRobot **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArActionDesired *)(arg1)->resolve(arg2,arg3,arg4);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArPriorityResolver_1resolve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  ArPriorityResolver *arg1 = (ArPriorityResolver *) 0 ;
  ArResolver::ActionMap *arg2 = (ArResolver::ActionMap *) 0 ;
  ArRobot *arg3 = (ArRobot *) 0 ;
  ArActionDesired *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArPriorityResolver **)&jarg1; 
  arg2 = *(ArResolver::ActionMap **)&jarg2; 
  arg3 = *(ArRobot **)&jarg3; 
  result = (ArActionDesired *)(arg1)->resolve(arg2,arg3);
  *(ArActionDesired **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRangeBuffer(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  ArRangeBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (ArRangeBuffer *)new ArRangeBuffer(arg1);
  *(ArRangeBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRangeBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  result = ((ArRangeBuffer const *)arg1)->getSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setSize(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1getPoseTaken(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  result = ((ArRangeBuffer const *)arg1)->getPoseTaken();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1setPoseTaken(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setPoseTaken(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1getEncoderPoseTaken(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  result = ((ArRangeBuffer const *)arg1)->getEncoderPoseTaken();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1setEncoderPoseTaken(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setEncoderPoseTaken(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1addReading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->addReading(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1addReadingConditional_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  bool *arg5 = (bool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(bool **)&jarg5; 
  (arg1)->addReadingConditional(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1addReadingConditional_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->addReadingConditional(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1beginInvalidationSweep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  (arg1)->beginInvalidationSweep();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1invalidateReading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  SwigValueWrapper< std::list< ArPoseWithTime * >::iterator > arg2 ;
  std::list< ArPoseWithTime * >::iterator *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  argp2 = *(std::list< ArPoseWithTime * >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::list< ArPoseWithTime * >::iterator");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->invalidateReading(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1endInvalidationSweep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  (arg1)->endInvalidationSweep();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1getBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  std::list< ArPoseWithTime * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  result = (std::list< ArPoseWithTime * > *)(arg1)->getBuffer();
  *(std::list< ArPoseWithTime * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1getClosestPolar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6) {
  jdouble jresult = 0 ;
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  double arg2 ;
  double arg3 ;
  ArPose arg4 ;
  unsigned int arg5 ;
  double *arg6 = (double *) 0 ;
  ArPose *argp4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  argp4 = *(ArPose **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (double)((ArRangeBuffer const *)arg1)->getClosestPolar(arg2,arg3,arg4,arg5,arg6);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1getClosestPolar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jdouble jresult = 0 ;
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  double arg2 ;
  double arg3 ;
  ArPose arg4 ;
  unsigned int arg5 ;
  ArPose *argp4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  argp4 = *(ArPose **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (unsigned int)jarg5; 
  result = (double)((ArRangeBuffer const *)arg1)->getClosestPolar(arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1getClosestBox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_) {
  jdouble jresult = 0 ;
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose arg6 ;
  unsigned int arg7 ;
  ArPose *arg8 = (ArPose *) 0 ;
  ArPose arg9 ;
  ArPose *argp6 ;
  ArPose *argp9 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  (void)jarg8_;
  (void)jarg9_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  argp6 = *(ArPose **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = *(ArPose **)&jarg8; 
  argp9 = *(ArPose **)&jarg9; 
  if (!argp9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg9 = *argp9; 
  result = (double)((ArRangeBuffer const *)arg1)->getClosestBox(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1getClosestBox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jlong jarg8, jobject jarg8_) {
  jdouble jresult = 0 ;
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose arg6 ;
  unsigned int arg7 ;
  ArPose *arg8 = (ArPose *) 0 ;
  ArPose *argp6 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  (void)jarg8_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  argp6 = *(ArPose **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = *(ArPose **)&jarg8; 
  result = (double)((ArRangeBuffer const *)arg1)->getClosestBox(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1getClosestBox_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jlong jarg7) {
  jdouble jresult = 0 ;
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose arg6 ;
  unsigned int arg7 ;
  ArPose *argp6 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  argp6 = *(ArPose **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (unsigned int)jarg7; 
  result = (double)((ArRangeBuffer const *)arg1)->getClosestBox(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1applyTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  ArTransform arg2 ;
  ArTransform *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  argp2 = *(ArTransform **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTransform");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->applyTransform(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1clearOlderThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->clearOlderThan(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1clearOlderThanSeconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->clearOlderThanSeconds(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1beginRedoBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  (arg1)->beginRedoBuffer();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1redoReading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->redoReading(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1endRedoBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  (arg1)->endRedoBuffer();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1getBufferAsVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRangeBuffer *arg1 = (ArRangeBuffer *) 0 ;
  std::vector< ArPoseWithTime > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRangeBuffer **)&jarg1; 
  result = (std::vector< ArPoseWithTime > *)(arg1)->getBufferAsVector();
  *(std::vector< ArPoseWithTime > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1getClosestPolarInList(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  ArPose arg3 ;
  unsigned int arg4 ;
  double *arg5 = (double *) 0 ;
  std::list< ArPoseWithTime * > *arg6 = (std::list< ArPoseWithTime * > *) 0 ;
  ArPose *argp3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg6_;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  argp3 = *(ArPose **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(std::list< ArPoseWithTime * > **)&jarg6; 
  result = (double)ArRangeBuffer::getClosestPolarInList(arg1,arg2,arg3,arg4,arg5,(std::list< ArPoseWithTime * > const *)arg6);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRangeBuffer_1getClosestBoxInList(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_, jlong jarg9, jobject jarg9_) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  ArPose arg5 ;
  unsigned int arg6 ;
  ArPose *arg7 = (ArPose *) 0 ;
  ArPose arg8 ;
  std::list< ArPoseWithTime * > *arg9 = (std::list< ArPoseWithTime * > *) 0 ;
  ArPose *argp5 ;
  ArPose *argp8 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  (void)jarg7_;
  (void)jarg8_;
  (void)jarg9_;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  argp5 = *(ArPose **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = *(ArPose **)&jarg7; 
  argp8 = *(ArPose **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg8 = *argp8; 
  arg9 = *(std::list< ArPoseWithTime * > **)&jarg9; 
  result = (double)ArRangeBuffer::getClosestBoxInList(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,(std::list< ArPoseWithTime * > const *)arg9);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRatioInputJoydrive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionRatioInput *arg2 = (ArActionRatioInput *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  ArRatioInputJoydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArActionRatioInput **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (ArRatioInputJoydrive *)new ArRatioInputJoydrive(arg1,arg2,arg3,arg4,arg5);
  *(ArRatioInputJoydrive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRatioInputJoydrive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionRatioInput *arg2 = (ArActionRatioInput *) 0 ;
  int arg3 ;
  bool arg4 ;
  ArRatioInputJoydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArActionRatioInput **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArRatioInputJoydrive *)new ArRatioInputJoydrive(arg1,arg2,arg3,arg4);
  *(ArRatioInputJoydrive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRatioInputJoydrive_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionRatioInput *arg2 = (ArActionRatioInput *) 0 ;
  int arg3 ;
  ArRatioInputJoydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArActionRatioInput **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (ArRatioInputJoydrive *)new ArRatioInputJoydrive(arg1,arg2,arg3);
  *(ArRatioInputJoydrive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRatioInputJoydrive_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionRatioInput *arg2 = (ArActionRatioInput *) 0 ;
  ArRatioInputJoydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArActionRatioInput **)&jarg2; 
  result = (ArRatioInputJoydrive *)new ArRatioInputJoydrive(arg1,arg2);
  *(ArRatioInputJoydrive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRatioInputJoydrive(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRatioInputJoydrive *arg1 = (ArRatioInputJoydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRatioInputJoydrive **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRatioInputJoydrive_1joystickInited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRatioInputJoydrive *arg1 = (ArRatioInputJoydrive *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRatioInputJoydrive **)&jarg1; 
  result = (bool)(arg1)->joystickInited();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRatioInputJoydrive_1setStopIfNoButtonPressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRatioInputJoydrive *arg1 = (ArRatioInputJoydrive *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRatioInputJoydrive **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStopIfNoButtonPressed(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRatioInputJoydrive_1getStopIfNoButtonPressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRatioInputJoydrive *arg1 = (ArRatioInputJoydrive *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRatioInputJoydrive **)&jarg1; 
  result = (bool)(arg1)->getStopIfNoButtonPressed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRatioInputJoydrive_1setUseOSCal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRatioInputJoydrive *arg1 = (ArRatioInputJoydrive *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRatioInputJoydrive **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseOSCal(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRatioInputJoydrive_1getUseOSCal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRatioInputJoydrive *arg1 = (ArRatioInputJoydrive *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRatioInputJoydrive **)&jarg1; 
  result = (bool)(arg1)->getUseOSCal();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRatioInputJoydrive_1getJoyHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRatioInputJoydrive *arg1 = (ArRatioInputJoydrive *) 0 ;
  ArJoyHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRatioInputJoydrive **)&jarg1; 
  result = (ArJoyHandler *)(arg1)->getJoyHandler();
  *(ArJoyHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRatioInputKeydrive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionRatioInput *arg2 = (ArActionRatioInput *) 0 ;
  int arg3 ;
  double arg4 ;
  ArRatioInputKeydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArActionRatioInput **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  result = (ArRatioInputKeydrive *)new ArRatioInputKeydrive(arg1,arg2,arg3,arg4);
  *(ArRatioInputKeydrive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRatioInputKeydrive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionRatioInput *arg2 = (ArActionRatioInput *) 0 ;
  int arg3 ;
  ArRatioInputKeydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArActionRatioInput **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (ArRatioInputKeydrive *)new ArRatioInputKeydrive(arg1,arg2,arg3);
  *(ArRatioInputKeydrive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRatioInputKeydrive_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionRatioInput *arg2 = (ArActionRatioInput *) 0 ;
  ArRatioInputKeydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArActionRatioInput **)&jarg2; 
  result = (ArRatioInputKeydrive *)new ArRatioInputKeydrive(arg1,arg2);
  *(ArRatioInputKeydrive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRatioInputKeydrive(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRatioInputKeydrive *arg1 = (ArRatioInputKeydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRatioInputKeydrive **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRatioInputKeydrive_1takeKeys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRatioInputKeydrive *arg1 = (ArRatioInputKeydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRatioInputKeydrive **)&jarg1; 
  (arg1)->takeKeys();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRatioInputKeydrive_1giveUpKeys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRatioInputKeydrive *arg1 = (ArRatioInputKeydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRatioInputKeydrive **)&jarg1; 
  (arg1)->giveUpKeys();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRatioInputKeydrive_1up(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRatioInputKeydrive *arg1 = (ArRatioInputKeydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRatioInputKeydrive **)&jarg1; 
  (arg1)->up();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRatioInputKeydrive_1down(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRatioInputKeydrive *arg1 = (ArRatioInputKeydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRatioInputKeydrive **)&jarg1; 
  (arg1)->down();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRatioInputKeydrive_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRatioInputKeydrive *arg1 = (ArRatioInputKeydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRatioInputKeydrive **)&jarg1; 
  (arg1)->z();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRatioInputKeydrive_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRatioInputKeydrive *arg1 = (ArRatioInputKeydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRatioInputKeydrive **)&jarg1; 
  (arg1)->x();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRatioInputKeydrive_1left(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRatioInputKeydrive *arg1 = (ArRatioInputKeydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRatioInputKeydrive **)&jarg1; 
  (arg1)->left();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRatioInputKeydrive_1right(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRatioInputKeydrive *arg1 = (ArRatioInputKeydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRatioInputKeydrive **)&jarg1; 
  (arg1)->right();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRatioInputKeydrive_1space(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRatioInputKeydrive *arg1 = (ArRatioInputKeydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRatioInputKeydrive **)&jarg1; 
  (arg1)->space();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRatioInputKeydrive_1getFireCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRatioInputKeydrive *arg1 = (ArRatioInputKeydrive *) 0 ;
  ArFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRatioInputKeydrive **)&jarg1; 
  result = (ArFunctor *)(arg1)->getFireCB();
  *(ArFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRatioInputRobotJoydrive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionRatioInput *arg2 = (ArActionRatioInput *) 0 ;
  int arg3 ;
  bool arg4 ;
  ArRatioInputRobotJoydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArActionRatioInput **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArRatioInputRobotJoydrive *)new ArRatioInputRobotJoydrive(arg1,arg2,arg3,arg4);
  *(ArRatioInputRobotJoydrive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRatioInputRobotJoydrive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionRatioInput *arg2 = (ArActionRatioInput *) 0 ;
  int arg3 ;
  ArRatioInputRobotJoydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArActionRatioInput **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (ArRatioInputRobotJoydrive *)new ArRatioInputRobotJoydrive(arg1,arg2,arg3);
  *(ArRatioInputRobotJoydrive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRatioInputRobotJoydrive_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArActionRatioInput *arg2 = (ArActionRatioInput *) 0 ;
  ArRatioInputRobotJoydrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArActionRatioInput **)&jarg2; 
  result = (ArRatioInputRobotJoydrive *)new ArRatioInputRobotJoydrive(arg1,arg2);
  *(ArRatioInputRobotJoydrive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRatioInputRobotJoydrive(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRatioInputRobotJoydrive *arg1 = (ArRatioInputRobotJoydrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRatioInputRobotJoydrive **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRecurrentTask(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRecurrentTask *arg1 = (ArRecurrentTask *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRecurrentTask **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRecurrentTask_1task(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRecurrentTask *arg1 = (ArRecurrentTask *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRecurrentTask **)&jarg1; 
  (arg1)->task();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRecurrentTask_1go(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRecurrentTask *arg1 = (ArRecurrentTask *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRecurrentTask **)&jarg1; 
  (arg1)->go();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRecurrentTask_1done(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRecurrentTask *arg1 = (ArRecurrentTask *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRecurrentTask **)&jarg1; 
  result = (int)(arg1)->done();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRecurrentTask_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRecurrentTask *arg1 = (ArRecurrentTask *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRecurrentTask **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRecurrentTask_1kill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRecurrentTask *arg1 = (ArRecurrentTask *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRecurrentTask **)&jarg1; 
  (arg1)->kill();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRecurrentTask_1runThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ArRecurrentTask *arg1 = (ArRecurrentTask *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRecurrentTask **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (void *)(arg1)->runThread(arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1CHARGING_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArRobot::ChargeState result;
  
  (void)jenv;
  (void)jcls;
  result = (ArRobot::ChargeState)ArRobot::CHARGING_UNKNOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1CHARGING_1NOT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArRobot::ChargeState result;
  
  (void)jenv;
  (void)jcls;
  result = (ArRobot::ChargeState)ArRobot::CHARGING_NOT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1CHARGING_1BULK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArRobot::ChargeState result;
  
  (void)jenv;
  (void)jcls;
  result = (ArRobot::ChargeState)ArRobot::CHARGING_BULK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1CHARGING_1OVERCHARGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArRobot::ChargeState result;
  
  (void)jenv;
  (void)jcls;
  result = (ArRobot::ChargeState)ArRobot::CHARGING_OVERCHARGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1CHARGING_1FLOAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArRobot::ChargeState result;
  
  (void)jenv;
  (void)jcls;
  result = (ArRobot::ChargeState)ArRobot::CHARGING_FLOAT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1CHARGING_1BALANCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArRobot::ChargeState result;
  
  (void)jenv;
  (void)jcls;
  result = (ArRobot::ChargeState)ArRobot::CHARGING_BALANCE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobot_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jboolean jarg3, jboolean jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  ArRobot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (ArRobot *)new ArRobot((char const *)arg1,arg2,arg3,arg4,arg5);
  *(ArRobot **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobot_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  ArRobot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (ArRobot *)new ArRobot((char const *)arg1,arg2,arg3,arg4);
  *(ArRobot **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobot_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool arg3 ;
  ArRobot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (ArRobot *)new ArRobot((char const *)arg1,arg2,arg3);
  *(ArRobot **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobot_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ArRobot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  result = (ArRobot *)new ArRobot((char const *)arg1,arg2);
  *(ArRobot **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobot_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArRobot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArRobot *)new ArRobot((char const *)arg1);
  *(ArRobot **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobot_1_1SWIG_15(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRobot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRobot *)new ArRobot();
  *(ArRobot **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRobot(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRobot **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1run_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->run(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1run_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->run(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1runAsync_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->runAsync(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1runAsync_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->runAsync(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isRunning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->isRunning();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1stopRunning_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->stopRunning(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1stopRunning_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->stopRunning();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setDeviceConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArDeviceConnection *arg2 = (ArDeviceConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArDeviceConnection **)&jarg2; 
  (arg1)->setDeviceConnection(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getDeviceConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArDeviceConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArDeviceConnection *)((ArRobot const *)arg1)->getDeviceConnection();
  *(ArDeviceConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->isConnected();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1blockingConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)(arg1)->blockingConnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1asyncConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)(arg1)->asyncConnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)(arg1)->disconnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1clearDirectMotion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->clearDirectMotion();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isDirectMotion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->isDirectMotion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1stopStateReflection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->stopStateReflection();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1enableMotors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->enableMotors();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1disableMotors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->disableMotors();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1enableSonar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->enableSonar();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1enableAutonomousDrivingSonar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->enableAutonomousDrivingSonar();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1disableSonar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->disableSonar();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setVel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setVel2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setVel2(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1move(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->move(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isMoveDone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->isMoveDone(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isMoveDone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)(arg1)->isMoveDone();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setMoveDoneDist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMoveDoneDist(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getMoveDoneDist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)(arg1)->getMoveDoneDist();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setHeading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setHeading(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setRotVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRotVel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setDeltaHeading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDeltaHeading(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isHeadingDone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)((ArRobot const *)arg1)->isHeadingDone(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isHeadingDone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->isHeadingDone();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setHeadingDoneDiff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setHeadingDoneDiff(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getHeadingDoneDiff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getHeadingDoneDiff();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setLatVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLatVel(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isStopped_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->isStopped(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isStopped_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->isStopped(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isStopped_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->isStopped(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isStopped_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)(arg1)->isStopped();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setStoppedVels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setStoppedVels(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setDirectMotionPrecedenceTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDirectMotionPrecedenceTime(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getDirectMotionPrecedenceTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (unsigned int)((ArRobot const *)arg1)->getDirectMotionPrecedenceTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1com(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned char arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  result = (bool)(arg1)->com(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1comInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jshort jarg3) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned char arg2 ;
  short arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (short)jarg3; 
  result = (bool)(arg1)->comInt(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1com2Bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jchar jarg3, jchar jarg4) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned char arg2 ;
  char arg3 ;
  char arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (bool)(arg1)->com2Bytes(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1comStr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned char arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->comStr(arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1comStrN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jstring jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned char arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->comStrN(arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1comDataN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jstring jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned char arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->comDataN(arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getRobotName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (char *)((ArRobot const *)arg1)->getRobotName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getRobotType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (char *)((ArRobot const *)arg1)->getRobotType();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getRobotSubType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (char *)((ArRobot const *)arg1)->getRobotSubType();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getAbsoluteMaxTransVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getAbsoluteMaxTransVel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setAbsoluteMaxTransVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setAbsoluteMaxTransVel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getAbsoluteMaxTransNegVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getAbsoluteMaxTransNegVel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setAbsoluteMaxTransNegVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setAbsoluteMaxTransNegVel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getAbsoluteMaxTransAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getAbsoluteMaxTransAccel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setAbsoluteMaxTransAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setAbsoluteMaxTransAccel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getAbsoluteMaxTransDecel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getAbsoluteMaxTransDecel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setAbsoluteMaxTransDecel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setAbsoluteMaxTransDecel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getAbsoluteMaxRotVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getAbsoluteMaxRotVel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setAbsoluteMaxRotVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setAbsoluteMaxRotVel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getAbsoluteMaxRotAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getAbsoluteMaxRotAccel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setAbsoluteMaxRotAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setAbsoluteMaxRotAccel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getAbsoluteMaxRotDecel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getAbsoluteMaxRotDecel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setAbsoluteMaxRotDecel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setAbsoluteMaxRotDecel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getAbsoluteMaxLatVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getAbsoluteMaxLatVel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setAbsoluteMaxLatVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setAbsoluteMaxLatVel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getAbsoluteMaxLatAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getAbsoluteMaxLatAccel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setAbsoluteMaxLatAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setAbsoluteMaxLatAccel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getAbsoluteMaxLatDecel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getAbsoluteMaxLatDecel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setAbsoluteMaxLatDecel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setAbsoluteMaxLatDecel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = ((ArRobot const *)arg1)->getPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getTh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getTh();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1findDistanceTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  ArPose const *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose const");
    return 0;
  }
  arg2 = *argp2; 
  result = (double)(arg1)->findDistanceTo(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1findAngleTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  ArPose const *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose const");
    return 0;
  }
  arg2 = *argp2; 
  result = (double)(arg1)->findAngleTo(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1findDeltaHeadingTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  ArPose const *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose const");
    return 0;
  }
  arg2 = *argp2; 
  result = (double)(arg1)->findDeltaHeadingTo(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getVel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getRotVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getRotVel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getLatVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getLatVel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1hasLatVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->hasLatVel();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getRobotRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getRobotRadius();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getRobotWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getRobotWidth();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getRobotLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getRobotLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getRobotLengthFront(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getRobotLengthFront();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getRobotLengthRear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getRobotLengthRear();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getRobotDiagonal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getRobotDiagonal();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getBatteryVoltage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getBatteryVoltage();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getBatteryVoltageNow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getBatteryVoltageNow();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getRealBatteryVoltage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getRealBatteryVoltage();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getRealBatteryVoltageNow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getRealBatteryVoltageNow();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1haveStateOfCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->haveStateOfCharge();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1hasStateOfCHarge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->hasStateOfCHarge();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getStateOfCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getStateOfCharge();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getStateOfChargeSetTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = ((ArRobot const *)arg1)->getStateOfChargeSetTime();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getStateOfChargeLow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getStateOfChargeLow();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getStateOfChargeShutdown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getStateOfChargeShutdown();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getLeftVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getLeftVel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getRightVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getRightVel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getStallValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (int)((ArRobot const *)arg1)->getStallValue();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isLeftMotorStalled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->isLeftMotorStalled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isRightMotorStalled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->isRightMotorStalled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isFrontBumperTriggered(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->isFrontBumperTriggered();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isRearBumperTriggered(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->isRearBumperTriggered();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getControl();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setKeepControlRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setKeepControlRaw(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getKeepControlRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)(arg1)->getKeepControlRaw();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (int)((ArRobot const *)arg1)->getFlags();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getFaultFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (int)((ArRobot const *)arg1)->getFaultFlags();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1hasFaultFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->hasFaultFlags();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getFlags3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (int)((ArRobot const *)arg1)->getFlags3();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1hasFlags3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->hasFlags3();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1areMotorsEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->areMotorsEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1areSonarsEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->areSonarsEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1areAutonomousDrivingSonarsEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->areAutonomousDrivingSonarsEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1areSonarsEnabledLegacy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->areSonarsEnabledLegacy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isEStopPressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->isEStopPressed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getEstop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)(arg1)->getEstop();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getCompass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getCompass();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getAnalogPortSelected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (int)((ArRobot const *)arg1)->getAnalogPortSelected();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getAnalog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (unsigned char)((ArRobot const *)arg1)->getAnalog();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getDigIn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (unsigned char)((ArRobot const *)arg1)->getDigIn();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getDigOut(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (unsigned char)((ArRobot const *)arg1)->getDigOut();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getChargeState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobot::ChargeState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArRobot::ChargeState)((ArRobot const *)arg1)->getChargeState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getChargeStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (char *)((ArRobot const *)arg1)->getChargeStateName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isChargerPowerGood(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->isChargerPowerGood();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getIOAnalogSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (int)((ArRobot const *)arg1)->getIOAnalogSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getIODigInSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (int)((ArRobot const *)arg1)->getIODigInSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getIODigOutSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (int)((ArRobot const *)arg1)->getIODigOutSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getIOAnalog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobot const *)arg1)->getIOAnalog(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getIOAnalogVoltage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((ArRobot const *)arg1)->getIOAnalogVoltage(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getIODigIn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned char)((ArRobot const *)arg1)->getIODigIn(arg2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getIODigOut(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned char)((ArRobot const *)arg1)->getIODigOut(arg2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1hasTableSensingIR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->hasTableSensingIR();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isLeftTableSensingIRTriggered(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->isLeftTableSensingIRTriggered();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isRightTableSensingIRTriggered(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->isRightTableSensingIRTriggered();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isLeftBreakBeamTriggered(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->isLeftBreakBeamTriggered();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isRightBreakBeamTriggered(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->isRightBreakBeamTriggered();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getIOPacketTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = ((ArRobot const *)arg1)->getIOPacketTime();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1hasFrontBumpers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->hasFrontBumpers();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getNumFrontBumpers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (unsigned int)((ArRobot const *)arg1)->getNumFrontBumpers();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1hasRearBumpers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->hasRearBumpers();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getNumRearBumpers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (unsigned int)((ArRobot const *)arg1)->getNumRearBumpers();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getEncoderPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = ((ArRobot const *)arg1)->getEncoderPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getEncoderX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getEncoderX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getEncoderY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getEncoderY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getEncoderTh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getEncoderTh();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isTryingToMove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)(arg1)->isTryingToMove();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1forceTryingToMove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->forceTryingToMove();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getMotorPacCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (int)((ArRobot const *)arg1)->getMotorPacCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getSonarPacCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (int)((ArRobot const *)arg1)->getSonarPacCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getSonarRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobot const *)arg1)->getSonarRange(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isSonarNew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ArRobot const *)arg1)->isSonarNew(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getNumSonar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (int)((ArRobot const *)arg1)->getNumSonar();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getSonarReading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  ArSensorReading *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ArSensorReading *)((ArRobot const *)arg1)->getSonarReading(arg2);
  *(ArSensorReading **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getClosestSonarRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (int)((ArRobot const *)arg1)->getClosestSonarRange(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getClosestSonarNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (int)((ArRobot const *)arg1)->getClosestSonarNumber(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (char *)((ArRobot const *)arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1moveTo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  bool arg3 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->moveTo(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1moveTo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->moveTo(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1moveTo_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  ArPose arg3 ;
  bool arg4 ;
  ArPose *argp2 ;
  ArPose *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArRobot **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ArPose **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->moveTo(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1moveTo_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  ArPose arg3 ;
  ArPose *argp2 ;
  ArPose *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArRobot **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ArPose **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->moveTo(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setStateOfCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setStateOfCharge(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setStateOfChargeLow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setStateOfChargeLow(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setStateOfChargeShutdown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setStateOfChargeShutdown(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setChargeState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobot::ChargeState arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (ArRobot::ChargeState)jarg2; 
  (arg1)->setChargeState(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setIsChargerPowerGood(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIsChargerPowerGood(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setIgnoreMicroControllerBatteryInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIgnoreMicroControllerBatteryInfo(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setBatteryInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4, jdouble jarg5) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (double)jarg5; 
  (arg1)->setBatteryInfo(arg2,arg3,arg4,arg5);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getBatteryVoltageAverageOfNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (arg1)->getBatteryVoltageAverageOfNum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setBatteryVoltageAverageOfNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setBatteryVoltageAverageOfNum(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getRealBatteryVoltageAverageOfNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (arg1)->getRealBatteryVoltageAverageOfNum();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setRealBatteryVoltageAverageOfNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setRealBatteryVoltageAverageOfNum(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1hasTemperature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)(arg1)->hasTemperature();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getTemperature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (int)((ArRobot const *)arg1)->getTemperature();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1requestEncoderPackets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->requestEncoderPackets();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1requestIOPackets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->requestIOPackets();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1stopEncoderPackets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->stopEncoderPackets();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1stopIOPackets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->stopIOPackets();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1haveRequestedEncoderPackets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)(arg1)->haveRequestedEncoderPackets();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1haveRequestedIOPackets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)(arg1)->haveRequestedIOPackets();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getLeftEncoder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (long)(arg1)->getLeftEncoder();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getRightEncoder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (long)(arg1)->getRightEncoder();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setEncoderTransform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  ArPose arg3 ;
  ArPose *argp2 ;
  ArPose *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArRobot **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ArPose **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setEncoderTransform(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setEncoderTransform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setEncoderTransform(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setEncoderTransform_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTransform arg2 ;
  ArTransform *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  argp2 = *(ArTransform **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTransform");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setEncoderTransform(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setEncoderPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setEncoderPose(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setRawEncoderPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setRawEncoderPose(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addSetEncoderTransformCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addSetEncoderTransformCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addSetEncoderTransformCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addSetEncoderTransformCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remSetEncoderTransformCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remSetEncoderTransformCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setMTXTimeUSecCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1< bool,ArTypes::UByte4 * > *arg2 = (ArRetFunctor1< bool,ArTypes::UByte4 * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArRetFunctor1< bool,ArTypes::UByte4 * > **)&jarg2; 
  (arg1)->setMTXTimeUSecCB(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getEncoderTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTransform result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = ((ArRobot const *)arg1)->getEncoderTransform();
  *(ArTransform **)&jresult = new ArTransform((const ArTransform &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getToGlobalTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTransform result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = ((ArRobot const *)arg1)->getToGlobalTransform();
  *(ArTransform **)&jresult = new ArTransform((const ArTransform &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getToLocalTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTransform result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = ((ArRobot const *)arg1)->getToLocalTransform();
  *(ArTransform **)&jresult = new ArTransform((const ArTransform &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1applyTransform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTransform arg2 ;
  bool arg3 ;
  ArTransform *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  argp2 = *(ArTransform **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTransform");
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->applyTransform(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1applyTransform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTransform arg2 ;
  ArTransform *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  argp2 = *(ArTransform **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTransform");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->applyTransform(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setDeadReconPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setDeadReconPose(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getTripOdometerDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)(arg1)->getTripOdometerDistance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getTripOdometerDegrees(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)(arg1)->getTripOdometerDegrees();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getTripOdometerTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)(arg1)->getTripOdometerTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1resetTripOdometer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->resetTripOdometer();
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getOdometerDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)(arg1)->getOdometerDistance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getOdometerDistanceMeters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)(arg1)->getOdometerDistanceMeters();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getOdometerDegrees(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)(arg1)->getOdometerDegrees();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getOdometerTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)(arg1)->getOdometerTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getOdometerTimeMinutes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)(arg1)->getOdometerTimeMinutes();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addRangeDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRangeDevice *arg2 = (ArRangeDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArRangeDevice **)&jarg2; 
  (arg1)->addRangeDevice(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remRangeDevice_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->remRangeDevice((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remRangeDevice_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRangeDevice *arg2 = (ArRangeDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArRangeDevice **)&jarg2; 
  (arg1)->remRangeDevice(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1findRangeDevice_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  ArRangeDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (ArRangeDevice *)((ArRobot const *)arg1)->findRangeDevice((char const *)arg2,arg3);
  *(ArRangeDevice **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1findRangeDevice_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  ArRangeDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArRangeDevice *)((ArRobot const *)arg1)->findRangeDevice((char const *)arg2);
  *(ArRangeDevice **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getRangeDeviceList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  std::list< ArRangeDevice * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (std::list< ArRangeDevice * > *)(arg1)->getRangeDeviceList();
  *(std::list< ArRangeDevice * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1hasRangeDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRangeDevice *arg2 = (ArRangeDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArRangeDevice **)&jarg2; 
  result = (bool)((ArRobot const *)arg1)->hasRangeDevice(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1checkRangeDevicesCurrentPolar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jlong jarg5, jboolean jarg6) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  ArRangeDevice **arg5 = (ArRangeDevice **) 0 ;
  bool arg6 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(ArRangeDevice ***)&jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCurrentPolar(arg2,arg3,arg4,(ArRangeDevice const **)arg5,arg6);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1checkRangeDevicesCurrentPolar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jlong jarg5) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  ArRangeDevice **arg5 = (ArRangeDevice **) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(ArRangeDevice ***)&jarg5; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCurrentPolar(arg2,arg3,arg4,(ArRangeDevice const **)arg5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1checkRangeDevicesCurrentPolar_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCurrentPolar(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1checkRangeDevicesCurrentPolar_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCurrentPolar(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1checkRangeDevicesCumulativePolar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jlong jarg5, jboolean jarg6) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  ArRangeDevice **arg5 = (ArRangeDevice **) 0 ;
  bool arg6 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(ArRangeDevice ***)&jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCumulativePolar(arg2,arg3,arg4,(ArRangeDevice const **)arg5,arg6);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1checkRangeDevicesCumulativePolar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jlong jarg5) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  ArRangeDevice **arg5 = (ArRangeDevice **) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(ArRangeDevice ***)&jarg5; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCumulativePolar(arg2,arg3,arg4,(ArRangeDevice const **)arg5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1checkRangeDevicesCumulativePolar_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCumulativePolar(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1checkRangeDevicesCumulativePolar_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCumulativePolar(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1checkRangeDevicesCurrentBox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jboolean jarg8) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose *arg6 = (ArPose *) 0 ;
  ArRangeDevice **arg7 = (ArRangeDevice **) 0 ;
  bool arg8 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(ArPose **)&jarg6; 
  arg7 = *(ArRangeDevice ***)&jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCurrentBox(arg2,arg3,arg4,arg5,arg6,(ArRangeDevice const **)arg7,arg8);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1checkRangeDevicesCurrentBox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jlong jarg7) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose *arg6 = (ArPose *) 0 ;
  ArRangeDevice **arg7 = (ArRangeDevice **) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(ArPose **)&jarg6; 
  arg7 = *(ArRangeDevice ***)&jarg7; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCurrentBox(arg2,arg3,arg4,arg5,arg6,(ArRangeDevice const **)arg7);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1checkRangeDevicesCurrentBox_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose *arg6 = (ArPose *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(ArPose **)&jarg6; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCurrentBox(arg2,arg3,arg4,arg5,arg6);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1checkRangeDevicesCurrentBox_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCurrentBox(arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1checkRangeDevicesCumulativeBox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jboolean jarg8) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose *arg6 = (ArPose *) 0 ;
  ArRangeDevice **arg7 = (ArRangeDevice **) 0 ;
  bool arg8 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(ArPose **)&jarg6; 
  arg7 = *(ArRangeDevice ***)&jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCumulativeBox(arg2,arg3,arg4,arg5,arg6,(ArRangeDevice const **)arg7,arg8);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1checkRangeDevicesCumulativeBox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_, jlong jarg7) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose *arg6 = (ArPose *) 0 ;
  ArRangeDevice **arg7 = (ArRangeDevice **) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(ArPose **)&jarg6; 
  arg7 = *(ArRangeDevice ***)&jarg7; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCumulativeBox(arg2,arg3,arg4,arg5,arg6,(ArRangeDevice const **)arg7);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1checkRangeDevicesCumulativeBox_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6, jobject jarg6_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  ArPose *arg6 = (ArPose *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(ArPose **)&jarg6; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCumulativeBox(arg2,arg3,arg4,arg5,arg6);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1checkRangeDevicesCumulativeBox_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (double)((ArRobot const *)arg1)->checkRangeDevicesCumulativeBox(arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addLaser_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->addLaser(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addLaser_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->addLaser(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remLaser_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->remLaser(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remLaser_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  result = (bool)(arg1)->remLaser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remLaser_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->remLaser(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remLaser_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remLaser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1findLaser_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  ArLaser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ArLaser *)((ArRobot const *)arg1)->findLaser(arg2);
  *(ArLaser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getLaserMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  std::map< int,ArLaser * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (std::map< int,ArLaser * > *)((ArRobot const *)arg1)->getLaserMap();
  *(std::map< int,ArLaser * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1hasLaser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLaser *arg2 = (ArLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArLaser **)&jarg2; 
  result = (bool)((ArRobot const *)arg1)->hasLaser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addBattery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArBatteryMTX *arg2 = (ArBatteryMTX *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArBatteryMTX **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->addBattery(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remBattery_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArBatteryMTX *arg2 = (ArBatteryMTX *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArBatteryMTX **)&jarg2; 
  result = (bool)(arg1)->remBattery(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remBattery_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remBattery(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1findBattery_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  ArBatteryMTX *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ArBatteryMTX *)((ArRobot const *)arg1)->findBattery(arg2);
  *(ArBatteryMTX **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getBatteryMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  std::map< int,ArBatteryMTX * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (std::map< int,ArBatteryMTX * > *)((ArRobot const *)arg1)->getBatteryMap();
  *(std::map< int,ArBatteryMTX * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1hasBattery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArBatteryMTX *arg2 = (ArBatteryMTX *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArBatteryMTX **)&jarg2; 
  result = (bool)((ArRobot const *)arg1)->hasBattery(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addLCD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLCDMTX *arg2 = (ArLCDMTX *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArLCDMTX **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->addLCD(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remLCD_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLCDMTX *arg2 = (ArLCDMTX *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArLCDMTX **)&jarg2; 
  result = (bool)(arg1)->remLCD(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remLCD_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remLCD(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1findLCD_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  ArLCDMTX *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ArLCDMTX *)((ArRobot const *)arg1)->findLCD(arg2);
  *(ArLCDMTX **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1findLCD_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLCDMTX *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArLCDMTX *)((ArRobot const *)arg1)->findLCD();
  *(ArLCDMTX **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getLCDMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  std::map< int,ArLCDMTX * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (std::map< int,ArLCDMTX * > *)((ArRobot const *)arg1)->getLCDMap();
  *(std::map< int,ArLCDMTX * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1hasLCD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArLCDMTX *arg2 = (ArLCDMTX *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArLCDMTX **)&jarg2; 
  result = (bool)((ArRobot const *)arg1)->hasLCD(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addSonar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArSonarMTX *arg2 = (ArSonarMTX *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArSonarMTX **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->addSonar(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remSonar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArSonarMTX *arg2 = (ArSonarMTX *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArSonarMTX **)&jarg2; 
  result = (bool)(arg1)->remSonar(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remSonar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remSonar(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1findSonar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  ArSonarMTX *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ArSonarMTX *)((ArRobot const *)arg1)->findSonar(arg2);
  *(ArSonarMTX **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getSonarMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  std::map< int,ArSonarMTX * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (std::map< int,ArSonarMTX * > *)((ArRobot const *)arg1)->getSonarMap();
  *(std::map< int,ArSonarMTX * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1hasSonar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArSonarMTX *arg2 = (ArSonarMTX *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArSonarMTX **)&jarg2; 
  result = (bool)((ArRobot const *)arg1)->hasSonar(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setPTZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPTZ *arg2 = (ArPTZ *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArPTZ **)&jarg2; 
  (arg1)->setPTZ(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getPTZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPTZ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArPTZ *)(arg1)->getPTZ();
  *(ArPTZ **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setStateReflectionRefreshTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStateReflectionRefreshTime(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getStateReflectionRefreshTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (int)((ArRobot const *)arg1)->getStateReflectionRefreshTime();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addPacketHandler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1< bool,ArRobotPacket * > *arg2 = (ArRetFunctor1< bool,ArRobotPacket * > *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArRetFunctor1< bool,ArRobotPacket * > **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addPacketHandler(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addPacketHandler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1< bool,ArRobotPacket * > *arg2 = (ArRetFunctor1< bool,ArRobotPacket * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArRetFunctor1< bool,ArRobotPacket * > **)&jarg2; 
  (arg1)->addPacketHandler(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remPacketHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1< bool,ArRobotPacket * > *arg2 = (ArRetFunctor1< bool,ArRobotPacket * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArRetFunctor1< bool,ArRobotPacket * > **)&jarg2; 
  (arg1)->remPacketHandler(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addConnectCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addConnectCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addConnectCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addConnectCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remConnectCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remConnectCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addFailedConnectCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addFailedConnectCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addFailedConnectCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addFailedConnectCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remFailedConnectCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remFailedConnectCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addDisconnectNormallyCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addDisconnectNormallyCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addDisconnectNormallyCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addDisconnectNormallyCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remDisconnectNormallyCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remDisconnectNormallyCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addDisconnectOnErrorCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addDisconnectOnErrorCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addDisconnectOnErrorCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addDisconnectOnErrorCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remDisconnectOnErrorCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remDisconnectOnErrorCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addRunExitCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addRunExitCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addRunExitCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addRunExitCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remRunExitCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remRunExitCB(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1waitForConnect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int arg2 ;
  ArRobot::WaitState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ArRobot::WaitState)(arg1)->waitForConnect(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1waitForConnect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobot::WaitState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArRobot::WaitState)(arg1)->waitForConnect();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1waitForConnectOrConnFail_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int arg2 ;
  ArRobot::WaitState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ArRobot::WaitState)(arg1)->waitForConnectOrConnFail(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1waitForConnectOrConnFail_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobot::WaitState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArRobot::WaitState)(arg1)->waitForConnectOrConnFail();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1waitForRunExit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int arg2 ;
  ArRobot::WaitState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ArRobot::WaitState)(arg1)->waitForRunExit(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1waitForRunExit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobot::WaitState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArRobot::WaitState)(arg1)->waitForRunExit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1wakeAllWaitingThreads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->wakeAllWaitingThreads();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1wakeAllConnWaitingThreads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->wakeAllConnWaitingThreads();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1wakeAllConnOrFailWaitingThreads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->wakeAllConnOrFailWaitingThreads();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1wakeAllRunExitWaitingThreads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->wakeAllRunExitWaitingThreads();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addUserTask_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  ArFunctor *arg4 = (ArFunctor *) 0 ;
  ArTaskState::State *arg5 = (ArTaskState::State *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(ArFunctor **)&jarg4; 
  arg5 = *(ArTaskState::State **)&jarg5; 
  result = (bool)(arg1)->addUserTask((char const *)arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addUserTask_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  ArFunctor *arg4 = (ArFunctor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(ArFunctor **)&jarg4; 
  result = (bool)(arg1)->addUserTask((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remUserTask_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->remUserTask((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remUserTask_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remUserTask(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1findUserTask_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  ArSyncTask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArSyncTask *)(arg1)->findUserTask((char const *)arg2);
  *(ArSyncTask **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1findUserTask_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArSyncTask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  result = (ArSyncTask *)(arg1)->findUserTask(arg2);
  *(ArSyncTask **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1logUserTasks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  ((ArRobot const *)arg1)->logUserTasks();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1logAllTasks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  ((ArRobot const *)arg1)->logAllTasks();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addSensorInterpTask_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  ArFunctor *arg4 = (ArFunctor *) 0 ;
  ArTaskState::State *arg5 = (ArTaskState::State *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(ArFunctor **)&jarg4; 
  arg5 = *(ArTaskState::State **)&jarg5; 
  result = (bool)(arg1)->addSensorInterpTask((char const *)arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addSensorInterpTask_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  ArFunctor *arg4 = (ArFunctor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(ArFunctor **)&jarg4; 
  result = (bool)(arg1)->addSensorInterpTask((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remSensorInterpTask_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->remSensorInterpTask((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remSensorInterpTask_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remSensorInterpTask(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1findTask_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  ArSyncTask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArSyncTask *)(arg1)->findTask((char const *)arg2);
  *(ArSyncTask **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1findTask_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArSyncTask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  result = (ArSyncTask *)(arg1)->findTask(arg2);
  *(ArSyncTask **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArAction *arg2 = (ArAction *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArAction **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->addAction(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remAction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArAction *arg2 = (ArAction *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArAction **)&jarg2; 
  result = (bool)(arg1)->remAction(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remAction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->remAction((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1findAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  ArAction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArAction *)(arg1)->findAction((char const *)arg2);
  *(ArAction **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getActionMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArResolver::ActionMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArResolver::ActionMap *)(arg1)->getActionMap();
  *(ArResolver::ActionMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1deactivateActions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->deactivateActions();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1logActions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  ((ArRobot const *)arg1)->logActions(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1logActions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  ((ArRobot const *)arg1)->logActions();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getResolver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArResolver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArResolver *)(arg1)->getResolver();
  *(ArResolver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setResolver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArResolver *arg2 = (ArResolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArResolver **)&jarg2; 
  (arg1)->setResolver(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setEncoderCorrectionCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1< double,ArPoseWithTime > *arg2 = (ArRetFunctor1< double,ArPoseWithTime > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArRetFunctor1< double,ArPoseWithTime > **)&jarg2; 
  (arg1)->setEncoderCorrectionCallback(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getEncoderCorrectionCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1< double,ArPoseWithTime > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArRetFunctor1< double,ArPoseWithTime > *)((ArRobot const *)arg1)->getEncoderCorrectionCallback();
  *(ArRetFunctor1< double,ArPoseWithTime > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getConnectionOpenedTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = ((ArRobot const *)arg1)->getConnectionOpenedTime();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setCycleTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setCycleTime(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getCycleTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (unsigned int)((ArRobot const *)arg1)->getCycleTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setCycleWarningTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setCycleWarningTime(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getCycleWarningTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (unsigned int)((ArRobot const *)arg1)->getCycleWarningTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setConnectionCycleMultiplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setConnectionCycleMultiplier(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getConnectionCycleMultiplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (unsigned int)((ArRobot const *)arg1)->getConnectionCycleMultiplier();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setCycleChained(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setCycleChained(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isCycleChained(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->isCycleChained();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setConnectionTimeoutTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setConnectionTimeoutTime(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getConnectionTimeoutTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (int)(arg1)->getConnectionTimeoutTime();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getLastPacketTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (arg1)->getLastPacketTime();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getLastOdometryTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (arg1)->getLastOdometryTime();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setPoseInterpNumReadings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setPoseInterpNumReadings(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getPoseInterpNumReadings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = ((ArRobot const *)arg1)->getPoseInterpNumReadings();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getPoseInterpPosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTime arg2 ;
  ArPose *arg3 = (ArPose *) 0 ;
  ArPoseWithTime *arg4 = (ArPoseWithTime *) 0 ;
  ArTime *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(ArRobot **)&jarg1; 
  argp2 = *(ArTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(ArPose **)&jarg3; 
  arg4 = *(ArPoseWithTime **)&jarg4; 
  result = (int)(arg1)->getPoseInterpPosition(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getPoseInterpPosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTime arg2 ;
  ArPose *arg3 = (ArPose *) 0 ;
  ArTime *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArRobot **)&jarg1; 
  argp2 = *(ArTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(ArPose **)&jarg3; 
  result = (int)(arg1)->getPoseInterpPosition(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getPoseInterpolation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArInterpolation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArInterpolation *)(arg1)->getPoseInterpolation();
  *(ArInterpolation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getPoseInterpPositionCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *)(arg1)->getPoseInterpPositionCallback();
  *(ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setEncoderPoseInterpNumReadings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->setEncoderPoseInterpNumReadings(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getEncoderPoseInterpNumReadings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = ((ArRobot const *)arg1)->getEncoderPoseInterpNumReadings();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getEncoderPoseInterpPosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTime arg2 ;
  ArPose *arg3 = (ArPose *) 0 ;
  ArPoseWithTime *arg4 = (ArPoseWithTime *) 0 ;
  ArTime *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(ArRobot **)&jarg1; 
  argp2 = *(ArTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(ArPose **)&jarg3; 
  arg4 = *(ArPoseWithTime **)&jarg4; 
  result = (int)(arg1)->getEncoderPoseInterpPosition(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getEncoderPoseInterpPosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTime arg2 ;
  ArPose *arg3 = (ArPose *) 0 ;
  ArTime *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArRobot **)&jarg1; 
  argp2 = *(ArTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(ArPose **)&jarg3; 
  result = (int)(arg1)->getEncoderPoseInterpPosition(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getEncoderPoseInterpolation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArInterpolation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArInterpolation *)(arg1)->getEncoderPoseInterpolation();
  *(ArInterpolation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getEncoderPoseInterpPositionCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *)(arg1)->getEncoderPoseInterpPositionCallback();
  *(ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1applyEncoderOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPoseWithTime arg2 ;
  ArTime arg3 ;
  ArPose *arg4 = (ArPose *) 0 ;
  ArPoseWithTime *argp2 ;
  ArTime *argp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(ArRobot **)&jarg1; 
  argp2 = *(ArPoseWithTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPoseWithTime");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(ArTime **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(ArPose **)&jarg4; 
  result = (int)(arg1)->applyEncoderOffset(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getCounter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (unsigned int)((ArRobot const *)arg1)->getCounter();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getRobotParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArRobotParams *)((ArRobot const *)arg1)->getRobotParams();
  *(ArRobotParams **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setRequireConfigPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRequireConfigPacket(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getOrigRobotConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotConfigPacketReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArRobotConfigPacketReader *)((ArRobot const *)arg1)->getOrigRobotConfig();
  *(ArRobotConfigPacketReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getBatteryPacketReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotBatteryPacketReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArRobotBatteryPacketReader *)(arg1)->getBatteryPacketReader();
  *(ArRobotBatteryPacketReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setTransVelMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTransVelMax(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setTransNegVelMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTransNegVelMax(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setTransAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTransAccel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setTransDecel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTransDecel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setRotVelMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRotVelMax(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setRotAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRotAccel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setRotDecel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRotDecel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setLatVelMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLatVelMax(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setLatAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLatAccel(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setLatDecel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLatDecel(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1hasSettableVelMaxes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->hasSettableVelMaxes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getTransVelMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getTransVelMax();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getTransNegVelMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getTransNegVelMax();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getRotVelMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getRotVelMax();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1hasSettableAccsDecs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)((ArRobot const *)arg1)->hasSettableAccsDecs();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getTransAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getTransAccel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getTransDecel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getTransDecel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getRotAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getRotAccel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getRotDecel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getRotDecel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getLatVelMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getLatVelMax();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getLatAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getLatAccel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getLatDecel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (double)((ArRobot const *)arg1)->getLatDecel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1loadParamFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->loadParamFile((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setRobotParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotParams *arg2 = (ArRobotParams *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArRobotParams **)&jarg2; 
  (arg1)->setRobotParams(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1attachKeyHandler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArKeyHandler *arg2 = (ArKeyHandler *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArKeyHandler **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->attachKeyHandler(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1attachKeyHandler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArKeyHandler *arg2 = (ArKeyHandler *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArKeyHandler **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->attachKeyHandler(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1attachKeyHandler_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArKeyHandler *arg2 = (ArKeyHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArKeyHandler **)&jarg2; 
  (arg1)->attachKeyHandler(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getKeyHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArKeyHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArKeyHandler *)((ArRobot const *)arg1)->getKeyHandler();
  *(ArKeyHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (int)(arg1)->lock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1tryLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (int)(arg1)->tryLock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (int)(arg1)->unlock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setMutexLogging(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMutexLogging(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setMutexLockWarningTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMutexLockWarningTime(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setMutexUnlockWarningTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMutexUnlockWarningTime(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1isStabilizing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)(arg1)->isStabilizing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setStabilizingTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStabilizingTime(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getStabilizingTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (int)((ArRobot const *)arg1)->getStabilizingTime();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addStabilizingCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addStabilizingCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1addStabilizingCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addStabilizingCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1remStabilizingCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remStabilizingCB(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getSyncTaskRoot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArSyncTask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArSyncTask *)(arg1)->getSyncTaskRoot();
  *(ArSyncTask **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1loopOnce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->loopOnce();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setOdometryDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setOdometryDelay(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getOdometryDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (int)(arg1)->getOdometryDelay();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getLogMovementSent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)(arg1)->getLogMovementSent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setLogMovementSent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLogMovementSent(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getLogMovementReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)(arg1)->getLogMovementReceived();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setLogMovementReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLogMovementReceived(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getLogVelocitiesReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)(arg1)->getLogVelocitiesReceived();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setLogVelocitiesReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLogVelocitiesReceived(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getPacketsReceivedTracking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)(arg1)->getPacketsReceivedTracking();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setPacketsReceivedTracking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPacketsReceivedTracking(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getLogSIPContents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)(arg1)->getLogSIPContents();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setLogSIPContents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLogSIPContents(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getPacketsSentTracking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)(arg1)->getPacketsSentTracking();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setPacketsSentTracking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPacketsSentTracking(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getLogActions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)(arg1)->getLogActions();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setLogActions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLogActions(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setDoNotSwitchBaud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDoNotSwitchBaud(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getDoNotSwitchBaud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)(arg1)->getDoNotSwitchBaud();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1incCounter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->incCounter();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1packetHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->packetHandler();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1actionHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->actionHandler();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1stateReflector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->stateReflector();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1robotLocker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->robotLocker();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1robotUnlocker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->robotUnlocker();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1packetHandlerNonThreaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->packetHandlerNonThreaded();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1packetHandlerThreadedProcessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->packetHandlerThreadedProcessor();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1packetHandlerThreadedReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->packetHandlerThreadedReader();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1keyHandlerExit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->keyHandlerExit();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1processMotorPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArRobotPacket **)&jarg2; 
  result = (bool)(arg1)->processMotorPacket(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1processNewSonar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  char arg2 ;
  int arg3 ;
  ArTime arg4 ;
  ArTime *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = *(ArTime **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->processNewSonar(arg2,arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1processEncoderPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArRobotPacket **)&jarg2; 
  result = (bool)(arg1)->processEncoderPacket(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1processIOPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArRobotPacket **)&jarg2; 
  result = (bool)(arg1)->processIOPacket(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->init();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setUpSyncList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->setUpSyncList();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setUpPacketHandlers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->setUpPacketHandlers();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myMotorPacketCB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *arg2 = (ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > **)&jarg2; 
  if (arg1) (arg1)->myMotorPacketCB = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myMotorPacketCB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *)& ((arg1)->myMotorPacketCB);
  *(ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myEncoderPacketCB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *arg2 = (ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > **)&jarg2; 
  if (arg1) (arg1)->myEncoderPacketCB = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myEncoderPacketCB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *)& ((arg1)->myEncoderPacketCB);
  *(ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myIOPacketCB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *arg2 = (ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > **)&jarg2; 
  if (arg1) (arg1)->myIOPacketCB = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myIOPacketCB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > *)& ((arg1)->myIOPacketCB);
  *(ArRetFunctor1C< bool,ArRobot,ArRobotPacket * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myPacketHandlerCB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *arg2 = (ArFunctorC< ArRobot > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctorC< ArRobot > **)&jarg2; 
  if (arg1) (arg1)->myPacketHandlerCB = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myPacketHandlerCB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArFunctorC< ArRobot > *)& ((arg1)->myPacketHandlerCB);
  *(ArFunctorC< ArRobot > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myActionHandlerCB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *arg2 = (ArFunctorC< ArRobot > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctorC< ArRobot > **)&jarg2; 
  if (arg1) (arg1)->myActionHandlerCB = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myActionHandlerCB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArFunctorC< ArRobot > *)& ((arg1)->myActionHandlerCB);
  *(ArFunctorC< ArRobot > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myStateReflectorCB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *arg2 = (ArFunctorC< ArRobot > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctorC< ArRobot > **)&jarg2; 
  if (arg1) (arg1)->myStateReflectorCB = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myStateReflectorCB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArFunctorC< ArRobot > *)& ((arg1)->myStateReflectorCB);
  *(ArFunctorC< ArRobot > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myRobotLockerCB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *arg2 = (ArFunctorC< ArRobot > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctorC< ArRobot > **)&jarg2; 
  if (arg1) (arg1)->myRobotLockerCB = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myRobotLockerCB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArFunctorC< ArRobot > *)& ((arg1)->myRobotLockerCB);
  *(ArFunctorC< ArRobot > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myRobotUnlockerCB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *arg2 = (ArFunctorC< ArRobot > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctorC< ArRobot > **)&jarg2; 
  if (arg1) (arg1)->myRobotUnlockerCB = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myRobotUnlockerCB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArFunctorC< ArRobot > *)& ((arg1)->myRobotUnlockerCB);
  *(ArFunctorC< ArRobot > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myKeyHandlerExitCB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *arg2 = (ArFunctorC< ArRobot > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctorC< ArRobot > **)&jarg2; 
  if (arg1) (arg1)->myKeyHandlerExitCB = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myKeyHandlerExitCB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArRobot > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArFunctorC< ArRobot > *)& ((arg1)->myKeyHandlerExitCB);
  *(ArFunctorC< ArRobot > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myKeyHandlerCB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArKeyHandler > *arg2 = (ArFunctorC< ArKeyHandler > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArFunctorC< ArKeyHandler > **)&jarg2; 
  if (arg1) (arg1)->myKeyHandlerCB = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myKeyHandlerCB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArFunctorC< ArKeyHandler > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArFunctorC< ArKeyHandler > *) ((arg1)->myKeyHandlerCB);
  *(ArFunctorC< ArKeyHandler > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1asyncConnectHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->asyncConnectHandler(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1dropConnection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->dropConnection((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1dropConnection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->dropConnection((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1dropConnection_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->dropConnection();
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getDropConnectionReason(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (char *)(arg1)->getDropConnectionReason();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getDropConnectionUserReason(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (char *)(arg1)->getDropConnectionUserReason();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1failedConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->failedConnect();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1madeConnection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->madeConnection(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1madeConnection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)(arg1)->madeConnection();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1startStabilization(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->startStabilization();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1finishedConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->finishedConnection();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1cancelConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->cancelConnection();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1handlePacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArRobotPacket **)&jarg2; 
  result = (bool)(arg1)->handlePacket(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getRunExitListCopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  std::list< ArFunctor * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (std::list< ArFunctor * > *)(arg1)->getRunExitListCopy();
  *(std::list< ArFunctor * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1processParamFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->processParamFile();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getRawEncoderPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = ((ArRobot const *)arg1)->getRawEncoderPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getNoTimeWarningThisCycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (bool)(arg1)->getNoTimeWarningThisCycle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setNoTimeWarningThisCycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setNoTimeWarningThisCycle(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myGetCycleWarningTimeCB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctorC< unsigned int,ArRobot > *arg2 = (ArRetFunctorC< unsigned int,ArRobot > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArRetFunctorC< unsigned int,ArRobot > **)&jarg2; 
  if (arg1) (arg1)->myGetCycleWarningTimeCB = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myGetCycleWarningTimeCB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctorC< unsigned int,ArRobot > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArRetFunctorC< unsigned int,ArRobot > *)& ((arg1)->myGetCycleWarningTimeCB);
  *(ArRetFunctorC< unsigned int,ArRobot > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myGetNoTimeWarningThisCycleCB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctorC< bool,ArRobot > *arg2 = (ArRetFunctorC< bool,ArRobot > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = *(ArRetFunctorC< bool,ArRobot > **)&jarg2; 
  if (arg1) (arg1)->myGetNoTimeWarningThisCycleCB = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1myGetNoTimeWarningThisCycleCB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRetFunctorC< bool,ArRobot > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArRetFunctorC< bool,ArRobot > *)& ((arg1)->myGetNoTimeWarningThisCycleCB);
  *(ArRetFunctorC< bool,ArRobot > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1ariaExitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->ariaExitCallback();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1setConnectWithNoParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setConnectWithNoParams(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getOSThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArThread::ThreadType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (arg1)->getOSThread();
  *(ArThread::ThreadType **)&jresult = new ArThread::ThreadType((const ArThread::ThreadType &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getAsyncConnectState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (int)(arg1)->getAsyncConnectState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getPacketSender(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotPacketSender *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArRobotPacketSender *)(arg1)->getPacketSender();
  *(ArRobotPacketSender **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getPacketReceiver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotPacketReceiver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArRobotPacketReceiver *)(arg1)->getPacketReceiver();
  *(ArRobotPacketReceiver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1getRobotParamsInternal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArRobotParams *)(arg1)->getRobotParamsInternal();
  *(ArRobotParams **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1internalSetFakeFirstEncoderPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->internalSetFakeFirstEncoderPose(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobot_1internalIgnoreNextPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  (arg1)->internalIgnoreNextPacket();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArRobotConfig *)new ArRobotConfig(arg1);
  *(ArRobotConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRobotConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRobotConfig *arg1 = (ArRobotConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRobotConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfig_1addAnalogGyro(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobotConfig *arg1 = (ArRobotConfig *) 0 ;
  ArAnalogGyro *arg2 = (ArAnalogGyro *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobotConfig **)&jarg1; 
  arg2 = *(ArAnalogGyro **)&jarg2; 
  (arg1)->addAnalogGyro(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfig_1processFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotConfig *arg1 = (ArRobotConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfig **)&jarg1; 
  result = (bool)(arg1)->processFile();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfig_1connectCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobotConfig *arg1 = (ArRobotConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfig **)&jarg1; 
  (arg1)->connectCallback();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotConfigPacketReader_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  ArFunctor *arg3 = (ArFunctor *) 0 ;
  ArRobotConfigPacketReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = *(ArFunctor **)&jarg3; 
  result = (ArRobotConfigPacketReader *)new ArRobotConfigPacketReader(arg1,arg2,arg3);
  *(ArRobotConfigPacketReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotConfigPacketReader_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  ArRobotConfigPacketReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ArRobotConfigPacketReader *)new ArRobotConfigPacketReader(arg1,arg2);
  *(ArRobotConfigPacketReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotConfigPacketReader_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotConfigPacketReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArRobotConfigPacketReader *)new ArRobotConfigPacketReader(arg1);
  *(ArRobotConfigPacketReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRobotConfigPacketReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1requestPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (bool)(arg1)->requestPacket();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1hasPacketBeenRequested(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (bool)((ArRobotConfigPacketReader const *)arg1)->hasPacketBeenRequested();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1hasPacketArrived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (bool)((ArRobotConfigPacketReader const *)arg1)->hasPacketArrived();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getRobotPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  ArRobotPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (ArRobotPacket *)((ArRobotConfigPacketReader const *)arg1)->getRobotPacket();
  *(ArRobotPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1log(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  ((ArRobotConfigPacketReader const *)arg1)->log();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1logMovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  ((ArRobotConfigPacketReader const *)arg1)->logMovement();
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1buildString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = ((ArRobotConfigPacketReader const *)arg1)->buildString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1buildStringMovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = ((ArRobotConfigPacketReader const *)arg1)->buildStringMovement();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (char *)((ArRobotConfigPacketReader const *)arg1)->getType();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getSubType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (char *)((ArRobotConfigPacketReader const *)arg1)->getSubType();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getSerialNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (char *)((ArRobotConfigPacketReader const *)arg1)->getSerialNumber();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getRotVelTop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getRotVelTop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getTransVelTop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getTransVelTop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getRotAccelTop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getRotAccelTop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getTransAccelTop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getTransAccelTop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getPwmMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getPwmMax();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (char *)((ArRobotConfigPacketReader const *)arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getSipCycleTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getSipCycleTime();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getHostBaud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getHostBaud();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getAux1Baud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getAux1Baud();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getHasGripper(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (bool)((ArRobotConfigPacketReader const *)arg1)->getHasGripper();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getFrontSonar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (bool)((ArRobotConfigPacketReader const *)arg1)->getFrontSonar();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getRearSonar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (bool)((ArRobotConfigPacketReader const *)arg1)->getRearSonar();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getLowBattery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getLowBattery();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getRevCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getRevCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getWatchdog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getWatchdog();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getNormalMPacs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (bool)((ArRobotConfigPacketReader const *)arg1)->getNormalMPacs();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getStallVal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getStallVal();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getStallCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getStallCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getJoyVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getJoyVel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getJoyRotVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getJoyRotVel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getRotVelMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getRotVelMax();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getTransVelMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getTransVelMax();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getRotAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getRotAccel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getRotDecel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getRotDecel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getRotKP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getRotKP();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getRotKV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getRotKV();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getRotKI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getRotKI();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getTransAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getTransAccel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getTransDecel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getTransDecel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getTransKP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getTransKP();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getTransKV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getTransKV();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getTransKI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getTransKI();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getFrontBumps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getFrontBumps();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getRearBumps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getRearBumps();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getHasCharger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getHasCharger();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getSonarCycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getSonarCycle();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getResetBaud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (bool)((ArRobotConfigPacketReader const *)arg1)->getResetBaud();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getHasGyro(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (bool)((ArRobotConfigPacketReader const *)arg1)->getHasGyro();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getGyroType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getGyroType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getDriftFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getDriftFactor();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getAux2Baud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getAux2Baud();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getAux3Baud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getAux3Baud();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getTicksMM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getTicksMM();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getShutdownVoltage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getShutdownVoltage();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getFirmwareVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (char *)((ArRobotConfigPacketReader const *)arg1)->getFirmwareVersion();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getGyroCW(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getGyroCW();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getGyroCCW(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getGyroCCW();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getKinematicsDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getKinematicsDelay();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getLatVelTop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getLatVelTop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getLatAccelTop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getLatAccelTop();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getLatVelMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getLatVelMax();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getLatAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getLatAccel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getLatDecel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getLatDecel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getPowerbotChargeThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getPowerbotChargeThreshold();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getPDBPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (unsigned char)((ArRobotConfigPacketReader const *)arg1)->getPDBPort();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getGyroRateLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getGyroRateLimit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getHighTemperatureShutdown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (char)((ArRobotConfigPacketReader const *)arg1)->getHighTemperatureShutdown();
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getPowerBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getPowerBits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getBatteryType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (unsigned char)((ArRobotConfigPacketReader const *)arg1)->getBatteryType();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getStateOfChargeLow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getStateOfChargeLow();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getStateOfChargeShutdown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getStateOfChargeShutdown();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getFirmwareBootloaderVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (char *)((ArRobotConfigPacketReader const *)arg1)->getFirmwareBootloaderVersion();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getConfigFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (unsigned int)((ArRobotConfigPacketReader const *)arg1)->getConfigFlags();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1getGyroFWVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  result = (int)((ArRobotConfigPacketReader const *)arg1)->getGyroFWVersion();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1packetHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  arg2 = *(ArRobotPacket **)&jarg2; 
  result = (bool)(arg1)->packetHandler(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConfigPacketReader_1connected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobotConfigPacketReader *arg1 = (ArRobotConfigPacketReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConfigPacketReader **)&jarg1; 
  (arg1)->connected();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotConnector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool arg3 ;
  bool arg4 ;
  ArRobotConnector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (ArRobotConnector *)new ArRobotConnector(arg1,arg2,arg3,arg4);
  *(ArRobotConnector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotConnector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool arg3 ;
  ArRobotConnector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (ArRobotConnector *)new ArRobotConnector(arg1,arg2,arg3);
  *(ArRobotConnector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotConnector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArRobotConnector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (ArRobotConnector *)new ArRobotConnector(arg1,arg2);
  *(ArRobotConnector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRobotConnector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRobotConnector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConnector_1setupRobot_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConnector **)&jarg1; 
  result = (bool)(arg1)->setupRobot();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConnector_1setupRobot_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobotConnector **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (bool)(arg1)->setupRobot(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConnector_1connectRobot_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConnector **)&jarg1; 
  result = (bool)(arg1)->connectRobot();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConnector_1connectRobot_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobotConnector **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (bool)(arg1)->connectRobot(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConnector_1parseArgs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConnector **)&jarg1; 
  result = (bool)(arg1)->parseArgs();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConnector_1parseArgs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  ArArgumentParser *arg2 = (ArArgumentParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobotConnector **)&jarg1; 
  arg2 = *(ArArgumentParser **)&jarg2; 
  result = (bool)(arg1)->parseArgs(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConnector_1logOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConnector **)&jarg1; 
  ((ArRobotConnector const *)arg1)->logOptions();
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConnector_1getRemoteHost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConnector **)&jarg1; 
  result = (char *)((ArRobotConnector const *)arg1)->getRemoteHost();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConnector_1getRemoteIsSim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConnector **)&jarg1; 
  result = (bool)((ArRobotConnector const *)arg1)->getRemoteIsSim();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConnector_1setRemoteIsSim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConnector **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRemoteIsSim(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConnector_1getRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  ArRobot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConnector **)&jarg1; 
  result = (ArRobot *)(arg1)->getRobot();
  *(ArRobot **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotConnector_1disconnectAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotConnector *arg1 = (ArRobotConnector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotConnector **)&jarg1; 
  result = (bool)(arg1)->disconnectAll();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotJoyHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRobotJoyHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArRobotJoyHandler *)new ArRobotJoyHandler(arg1);
  *(ArRobotJoyHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRobotJoyHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRobotJoyHandler *arg1 = (ArRobotJoyHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRobotJoyHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotJoyHandler_1getDoubles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  ArRobotJoyHandler *arg1 = (ArRobotJoyHandler *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double temp2 ;
  double temp3 ;
  double temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotJoyHandler **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg2 = &temp2; 
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg3 = &temp3; 
  }
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg4 = &temp4; 
  }
  (arg1)->getDoubles(arg2,arg3,arg4);
  {
    jdouble jvalue = (jdouble)temp2;
    jenv->SetDoubleArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp3;
    jenv->SetDoubleArrayRegion(jarg3, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp4;
    jenv->SetDoubleArrayRegion(jarg4, 0, 1, &jvalue);
  }
  
  
  
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotJoyHandler_1getButton1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotJoyHandler *arg1 = (ArRobotJoyHandler *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotJoyHandler **)&jarg1; 
  result = (bool)(arg1)->getButton1();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotJoyHandler_1getButton2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotJoyHandler *arg1 = (ArRobotJoyHandler *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotJoyHandler **)&jarg1; 
  result = (bool)(arg1)->getButton2();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotJoyHandler_1getDataReceivedTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobotJoyHandler *arg1 = (ArRobotJoyHandler *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotJoyHandler **)&jarg1; 
  result = (arg1)->getDataReceivedTime();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotJoyHandler_1gotData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotJoyHandler *arg1 = (ArRobotJoyHandler *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotJoyHandler **)&jarg1; 
  result = (bool)(arg1)->gotData();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotJoyHandler_1addToConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArRobotJoyHandler *arg1 = (ArRobotJoyHandler *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobotJoyHandler **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->addToConfig(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotJoyHandler_1getRawX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotJoyHandler *arg1 = (ArRobotJoyHandler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotJoyHandler **)&jarg1; 
  result = (int)(arg1)->getRawX();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotJoyHandler_1getRawY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotJoyHandler *arg1 = (ArRobotJoyHandler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotJoyHandler **)&jarg1; 
  result = (int)(arg1)->getRawY();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotJoyHandler_1getRawThrottle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotJoyHandler *arg1 = (ArRobotJoyHandler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotJoyHandler **)&jarg1; 
  result = (int)(arg1)->getRawThrottle();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotPacket_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  ArRobotPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  result = (ArRobotPacket *)new ArRobotPacket(arg1,arg2);
  *(ArRobotPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotPacket_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  unsigned char arg1 ;
  ArRobotPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned char)jarg1; 
  result = (ArRobotPacket *)new ArRobotPacket(arg1);
  *(ArRobotPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotPacket_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRobotPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRobotPacket *)new ArRobotPacket();
  *(ArRobotPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRobotPacket(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRobotPacket *arg1 = (ArRobotPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRobotPacket **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacket_1verifyCheckSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotPacket *arg1 = (ArRobotPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacket **)&jarg1; 
  result = (bool)(arg1)->verifyCheckSum();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacket_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ArRobotPacket *arg1 = (ArRobotPacket *) 0 ;
  ArTypes::UByte result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacket **)&jarg1; 
  result = (ArTypes::UByte)(arg1)->getID();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacket_1setID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ArRobotPacket *arg1 = (ArRobotPacket *) 0 ;
  ArTypes::UByte arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacket **)&jarg1; 
  arg2 = (ArTypes::UByte)jarg2; 
  (arg1)->setID(arg2);
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacket_1calcCheckSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ArRobotPacket *arg1 = (ArRobotPacket *) 0 ;
  ArTypes::Byte2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacket **)&jarg1; 
  result = (ArTypes::Byte2)(arg1)->calcCheckSum();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacket_1finalizePacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobotPacket *arg1 = (ArRobotPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacket **)&jarg1; 
  (arg1)->finalizePacket();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacket_1getTimeReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobotPacket *arg1 = (ArRobotPacket *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacket **)&jarg1; 
  result = (arg1)->getTimeReceived();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacket_1setTimeReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobotPacket *arg1 = (ArRobotPacket *) 0 ;
  ArTime arg2 ;
  ArTime *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobotPacket **)&jarg1; 
  argp2 = *(ArTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setTimeReceived(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacket_1log(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobotPacket *arg1 = (ArRobotPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacket **)&jarg1; 
  (arg1)->log();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotPacketReceiver_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1, jshort jarg2, jshort jarg3) {
  jlong jresult = 0 ;
  bool arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  ArRobotPacketReceiver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  result = (ArRobotPacketReceiver *)new ArRobotPacketReceiver(arg1,arg2,arg3);
  *(ArRobotPacketReceiver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotPacketReceiver_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jboolean jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  bool arg1 ;
  unsigned char arg2 ;
  ArRobotPacketReceiver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = (unsigned char)jarg2; 
  result = (ArRobotPacketReceiver *)new ArRobotPacketReceiver(arg1,arg2);
  *(ArRobotPacketReceiver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotPacketReceiver_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  ArRobotPacketReceiver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (ArRobotPacketReceiver *)new ArRobotPacketReceiver(arg1);
  *(ArRobotPacketReceiver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotPacketReceiver_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRobotPacketReceiver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRobotPacketReceiver *)new ArRobotPacketReceiver();
  *(ArRobotPacketReceiver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotPacketReceiver_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jshort jarg3, jshort jarg4) {
  jlong jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  bool arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  ArRobotPacketReceiver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  result = (ArRobotPacketReceiver *)new ArRobotPacketReceiver(arg1,arg2,arg3,arg4);
  *(ArRobotPacketReceiver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotPacketReceiver_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jshort jarg3) {
  jlong jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  bool arg2 ;
  unsigned char arg3 ;
  ArRobotPacketReceiver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (unsigned char)jarg3; 
  result = (ArRobotPacketReceiver *)new ArRobotPacketReceiver(arg1,arg2,arg3);
  *(ArRobotPacketReceiver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotPacketReceiver_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  bool arg2 ;
  ArRobotPacketReceiver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ArRobotPacketReceiver *)new ArRobotPacketReceiver(arg1,arg2);
  *(ArRobotPacketReceiver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotPacketReceiver_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  ArRobotPacketReceiver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  result = (ArRobotPacketReceiver *)new ArRobotPacketReceiver(arg1);
  *(ArRobotPacketReceiver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotPacketReceiver_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jshort jarg3, jshort jarg4, jboolean jarg5, jstring jarg6) {
  jlong jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  bool arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  bool arg5 ;
  char *arg6 = (char *) 0 ;
  ArRobotPacketReceiver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (ArRobotPacketReceiver *)new ArRobotPacketReceiver(arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  *(ArRobotPacketReceiver **)&jresult = result; 
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRobotPacketReceiver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRobotPacketReceiver *arg1 = (ArRobotPacketReceiver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRobotPacketReceiver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacketReceiver_1receivePacket_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ArRobotPacketReceiver *arg1 = (ArRobotPacketReceiver *) 0 ;
  unsigned int arg2 ;
  ArRobotPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacketReceiver **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ArRobotPacket *)(arg1)->receivePacket(arg2);
  *(ArRobotPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacketReceiver_1receivePacket_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobotPacketReceiver *arg1 = (ArRobotPacketReceiver *) 0 ;
  ArRobotPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacketReceiver **)&jarg1; 
  result = (ArRobotPacket *)(arg1)->receivePacket();
  *(ArRobotPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacketReceiver_1setDeviceConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobotPacketReceiver *arg1 = (ArRobotPacketReceiver *) 0 ;
  ArDeviceConnection *arg2 = (ArDeviceConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobotPacketReceiver **)&jarg1; 
  arg2 = *(ArDeviceConnection **)&jarg2; 
  (arg1)->setDeviceConnection(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacketReceiver_1getDeviceConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobotPacketReceiver *arg1 = (ArRobotPacketReceiver *) 0 ;
  ArDeviceConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacketReceiver **)&jarg1; 
  result = (ArDeviceConnection *)(arg1)->getDeviceConnection();
  *(ArDeviceConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacketReceiver_1isAllocatingPackets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotPacketReceiver *arg1 = (ArRobotPacketReceiver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacketReceiver **)&jarg1; 
  result = (bool)(arg1)->isAllocatingPackets();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacketReceiver_1setAllocatingPackets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobotPacketReceiver *arg1 = (ArRobotPacketReceiver *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacketReceiver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAllocatingPackets(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacketReceiver_1setTracking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobotPacketReceiver *arg1 = (ArRobotPacketReceiver *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacketReceiver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setTracking(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacketReceiver_1setTrackingLogName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArRobotPacketReceiver *arg1 = (ArRobotPacketReceiver *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacketReceiver **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setTrackingLogName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacketReceiver_1setPacketReceivedCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobotPacketReceiver *arg1 = (ArRobotPacketReceiver *) 0 ;
  ArFunctor1< ArRobotPacket * > *arg2 = (ArFunctor1< ArRobotPacket * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobotPacketReceiver **)&jarg1; 
  arg2 = *(ArFunctor1< ArRobotPacket * > **)&jarg2; 
  (arg1)->setPacketReceivedCallback(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotPacketSender_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  ArRobotPacketSender *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  result = (ArRobotPacketSender *)new ArRobotPacketSender(arg1,arg2);
  *(ArRobotPacketSender **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotPacketSender_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  unsigned char arg1 ;
  ArRobotPacketSender *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned char)jarg1; 
  result = (ArRobotPacketSender *)new ArRobotPacketSender(arg1);
  *(ArRobotPacketSender **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotPacketSender_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRobotPacketSender *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRobotPacketSender *)new ArRobotPacketSender();
  *(ArRobotPacketSender **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotPacketSender_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jshort jarg3) {
  jlong jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  ArRobotPacketSender *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  result = (ArRobotPacketSender *)new ArRobotPacketSender(arg1,arg2,arg3);
  *(ArRobotPacketSender **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotPacketSender_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  unsigned char arg2 ;
  ArRobotPacketSender *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  result = (ArRobotPacketSender *)new ArRobotPacketSender(arg1,arg2);
  *(ArRobotPacketSender **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotPacketSender_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  ArRobotPacketSender *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  result = (ArRobotPacketSender *)new ArRobotPacketSender(arg1);
  *(ArRobotPacketSender **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotPacketSender_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jshort jarg3, jboolean jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  ArRobotPacketSender *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (ArRobotPacketSender *)new ArRobotPacketSender(arg1,arg2,arg3,arg4,(char const *)arg5);
  *(ArRobotPacketSender **)&jresult = result; 
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRobotPacketSender(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRobotPacketSender **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacketSender_1com(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jboolean jresult = 0 ;
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  unsigned char arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacketSender **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  result = (bool)(arg1)->com(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacketSender_1comInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jshort jarg3) {
  jboolean jresult = 0 ;
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  unsigned char arg2 ;
  short arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacketSender **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (short)jarg3; 
  result = (bool)(arg1)->comInt(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacketSender_1com2Bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jchar jarg3, jchar jarg4) {
  jboolean jresult = 0 ;
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  unsigned char arg2 ;
  char arg3 ;
  char arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacketSender **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  result = (bool)(arg1)->com2Bytes(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacketSender_1comStr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  unsigned char arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacketSender **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->comStr(arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacketSender_1comStrN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jstring jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  unsigned char arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacketSender **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->comStrN(arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacketSender_1comDataN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jstring jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  unsigned char arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacketSender **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->comDataN(arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacketSender_1sendPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobotPacketSender **)&jarg1; 
  arg2 = *(ArRobotPacket **)&jarg2; 
  result = (bool)(arg1)->sendPacket(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacketSender_1setDeviceConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  ArDeviceConnection *arg2 = (ArDeviceConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobotPacketSender **)&jarg1; 
  arg2 = *(ArDeviceConnection **)&jarg2; 
  (arg1)->setDeviceConnection(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacketSender_1getDeviceConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  ArDeviceConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacketSender **)&jarg1; 
  result = (ArDeviceConnection *)(arg1)->getDeviceConnection();
  *(ArDeviceConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacketSender_1setPacketSentCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  ArFunctor1< ArRobotPacket * > *arg2 = (ArFunctor1< ArRobotPacket * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArRobotPacketSender **)&jarg1; 
  arg2 = *(ArFunctor1< ArRobotPacket * > **)&jarg2; 
  (arg1)->setPacketSentCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacketSender_1setTracking_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacketSender **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setTracking(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacketSender_1setTracking_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacketSender **)&jarg1; 
  (arg1)->setTracking();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotPacketSender_1setTrackingLogName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArRobotPacketSender *arg1 = (ArRobotPacketSender *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotPacketSender **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setTrackingLogName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRobotParams(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRobotParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRobotParams *)new ArRobotParams();
  *(ArRobotParams **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRobotParams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRobotParams **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getClassName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getClassName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSubClassName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getSubClassName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getRobotRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getRobotRadius();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getRobotDiagonal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getRobotDiagonal();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getRobotWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getRobotWidth();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getRobotLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getRobotLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getRobotLengthFront(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getRobotLengthFront();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getRobotLengthRear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getRobotLengthRear();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1isHolonomic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->isHolonomic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1hasMoveCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->hasMoveCommand();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getAbsoluteMaxVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getAbsoluteMaxVelocity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getAbsoluteMaxRotVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getAbsoluteMaxRotVelocity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getAbsoluteMaxLatVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getAbsoluteMaxLatVelocity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getRequestIOPackets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->getRequestIOPackets();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getRequestEncoderPackets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->getRequestEncoderPackets();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSwitchToBaudRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getSwitchToBaudRate();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getAngleConvFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getAngleConvFactor();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getDistConvFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getDistConvFactor();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getVelConvFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getVelConvFactor();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getRangeConvFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getRangeConvFactor();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getDiffConvFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getDiffConvFactor();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getVel2Divisor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getVel2Divisor();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getGyroScaler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getGyroScaler();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1haveTableSensingIR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->haveTableSensingIR();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1haveNewTableSensingIR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->haveNewTableSensingIR();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1haveFrontBumpers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->haveFrontBumpers();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1numFrontBumpers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->numFrontBumpers();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1haveRearBumpers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->haveRearBumpers();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1numRearBumpers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->numRearBumpers();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getNumIR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getNumIR();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1haveIR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ArRobotParams const *)arg1)->haveIR(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getIRX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getIRX(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getIRY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getIRY(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getIRType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getIRType(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getIRCycles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getIRCycles(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getNumSonar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getNumSonar();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserPossessed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->getLaserPossessed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserType(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserType();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserPortType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserPortType(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserPortType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserPortType();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserPort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserPort(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserPort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserPort();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getConnectLaser_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ArRobotParams const *)arg1)->getConnectLaser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getConnectLaser_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->getConnectLaser();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserFlipped_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ArRobotParams const *)arg1)->getLaserFlipped(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserFlipped_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->getLaserFlipped();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserPowerControlled_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ArRobotParams const *)arg1)->getLaserPowerControlled(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserPowerControlled_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->getLaserPowerControlled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserMaxRange_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getLaserMaxRange(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserMaxRange_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getLaserMaxRange();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserCumulativeBufferSize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getLaserCumulativeBufferSize(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserCumulativeBufferSize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getLaserCumulativeBufferSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserX_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getLaserX(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserX_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getLaserX();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserY_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getLaserY(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserY_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getLaserY();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserTh_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((ArRobotParams const *)arg1)->getLaserTh(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserTh_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (double)((ArRobotParams const *)arg1)->getLaserTh();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserZ_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getLaserZ(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserZ_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getLaserZ();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserIgnore_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserIgnore(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserIgnore_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserIgnore();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserStartDegrees_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserStartDegrees(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserStartDegrees_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserStartDegrees();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserEndDegrees_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserEndDegrees(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserEndDegrees_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserEndDegrees();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserDegreesChoice_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserDegreesChoice(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserDegreesChoice_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserDegreesChoice();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserIncrement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserIncrement(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserIncrement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserIncrement();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserIncrementChoice_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserIncrementChoice(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserIncrementChoice_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserIncrementChoice();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserUnitsChoice_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserUnitsChoice(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserUnitsChoice_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserUnitsChoice();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserReflectorBitsChoice_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserReflectorBitsChoice(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserReflectorBitsChoice_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserReflectorBitsChoice();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserStartingBaudChoice_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserStartingBaudChoice(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserStartingBaudChoice_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserStartingBaudChoice();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserAutoBaudChoice_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserAutoBaudChoice(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserAutoBaudChoice_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserAutoBaudChoice();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserSection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserSection(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserSection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserSection();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserPowerOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserPowerOutput(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLaserPowerOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLaserPowerOutput();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getBatteryMTXBoardType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getBatteryMTXBoardType(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getBatteryMTXBoardType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getBatteryMTXBoardType();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getBatteryMTXBoardPortType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getBatteryMTXBoardPortType(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getBatteryMTXBoardPortType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getBatteryMTXBoardPortType();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getBatteryMTXBoardPort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getBatteryMTXBoardPort(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getBatteryMTXBoardPort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getBatteryMTXBoardPort();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getBatteryMTXBoardBaud_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getBatteryMTXBoardBaud(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getBatteryMTXBoardBaud_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getBatteryMTXBoardBaud();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getBatteryMTXBoardAutoConn_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ArRobotParams const *)arg1)->getBatteryMTXBoardAutoConn(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getBatteryMTXBoardAutoConn_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->getBatteryMTXBoardAutoConn();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLCDMTXBoardType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLCDMTXBoardType(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLCDMTXBoardType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLCDMTXBoardType();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLCDMTXBoardPortType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLCDMTXBoardPortType(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLCDMTXBoardPortType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLCDMTXBoardPortType();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLCDMTXBoardPort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLCDMTXBoardPort(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLCDMTXBoardPort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLCDMTXBoardPort();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLCDMTXBoardBaud_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getLCDMTXBoardBaud(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLCDMTXBoardBaud_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getLCDMTXBoardBaud();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLCDMTXBoardAutoConn_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ArRobotParams const *)arg1)->getLCDMTXBoardAutoConn(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLCDMTXBoardAutoConn_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->getLCDMTXBoardAutoConn();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLCDMTXBoardConnFailOption_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ArRobotParams const *)arg1)->getLCDMTXBoardConnFailOption(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLCDMTXBoardConnFailOption_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->getLCDMTXBoardConnFailOption();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLCDMTXBoardPowerOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getLCDMTXBoardPowerOutput(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLCDMTXBoardPowerOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getLCDMTXBoardPowerOutput();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoardType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getSonarMTXBoardType(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoardType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getSonarMTXBoardType();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoardPortType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getSonarMTXBoardPortType(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoardPortType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getSonarMTXBoardPortType();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoardPort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getSonarMTXBoardPort(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoardPort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getSonarMTXBoardPort();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoardBaud_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardBaud(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoardBaud_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardBaud();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoardAutoConn_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ArRobotParams const *)arg1)->getSonarMTXBoardAutoConn(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoardAutoConn_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->getSonarMTXBoardAutoConn();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoardDelay_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardDelay(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoardDelay_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardDelay();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoardGain_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardGain(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoardGain_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardGain();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoardDetectionThreshold_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardDetectionThreshold(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoardDetectionThreshold_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardDetectionThreshold();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoardMaxRange_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardMaxRange(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoardMaxRange_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardMaxRange();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoardUseForAutonomousDriving_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardUseForAutonomousDriving(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoardUseForAutonomousDriving_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardUseForAutonomousDriving();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoardPowerOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((ArRobotParams const *)arg1)->getSonarMTXBoardPowerOutput(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoardPowerOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getSonarMTXBoardPowerOutput();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getNumSonarOnMTXBoard_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getNumSonarOnMTXBoard(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getNumSonarOnMTXBoard_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getNumSonarOnMTXBoard();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getNumSonarUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getNumSonarUnits();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1haveSonar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((ArRobotParams const *)arg1)->haveSonar(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarX(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarY(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarTh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarTh(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarGain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarGain(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarDetectionThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarDetectionThreshold(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMaxRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMaxRange(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarUseForAutonomousDriving(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarUseForAutonomousDriving(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoard(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoard(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getSonarMTXBoardUnitPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((ArRobotParams const *)arg1)->getSonarMTXBoardUnitPosition(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1hasSettableVelMaxes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->hasSettableVelMaxes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getTransVelMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getTransVelMax();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getRotVelMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getRotVelMax();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1hasSettableAccsDecs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->hasSettableAccsDecs();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getTransAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getTransAccel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getTransDecel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getTransDecel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getRotAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getRotAccel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getRotDecel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getRotDecel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1hasLatVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (bool)((ArRobotParams const *)arg1)->hasLatVel();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLatVelMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getLatVelMax();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLatAccel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getLatAccel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getLatDecel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getLatDecel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1save(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (bool)(arg1)->save();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getGPSX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getGPSX();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getGPSY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getGPSY();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getGPSBaud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (int)((ArRobotParams const *)arg1)->getGPSBaud();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getGPSPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getGPSPort();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getGPSType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getGPSType();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getCompassType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getCompassType();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getCompassPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (char *)((ArRobotParams const *)arg1)->getCompassPort();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getVideoParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  std::vector< ArVideoParams > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (std::vector< ArVideoParams > *) &((ArRobotParams const *)arg1)->getVideoParams();
  *(std::vector< ArVideoParams > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRobotParams_1getPTZParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobotParams *arg1 = (ArRobotParams *) 0 ;
  std::vector< ArPTZParams > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotParams **)&jarg1; 
  result = (std::vector< ArPTZParams > *) &((ArRobotParams const *)arg1)->getPTZParams();
  *(std::vector< ArPTZParams > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRVisionPacket_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  ArTypes::UByte2 arg1 ;
  ArRVisionPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArTypes::UByte2)jarg1; 
  result = (ArRVisionPacket *)new ArRVisionPacket(arg1);
  *(ArRVisionPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRVisionPacket_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRVisionPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRVisionPacket *)new ArRVisionPacket();
  *(ArRVisionPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRVisionPacket(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRVisionPacket *arg1 = (ArRVisionPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRVisionPacket **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPacket_1uByteToBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ArRVisionPacket *arg1 = (ArRVisionPacket *) 0 ;
  ArTypes::UByte arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRVisionPacket **)&jarg1; 
  arg2 = (ArTypes::UByte)jarg2; 
  (arg1)->uByteToBuf(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPacket_1byte2ToBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ArRVisionPacket *arg1 = (ArRVisionPacket *) 0 ;
  ArTypes::Byte2 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRVisionPacket **)&jarg1; 
  arg2 = (ArTypes::Byte2)jarg2; 
  (arg1)->byte2ToBuf(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPacket_1byte2ToBufAtPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3) {
  ArRVisionPacket *arg1 = (ArRVisionPacket *) 0 ;
  ArTypes::Byte2 arg2 ;
  ArTypes::UByte2 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRVisionPacket **)&jarg1; 
  arg2 = (ArTypes::Byte2)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  (arg1)->byte2ToBufAtPos(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArRVisionPTZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArRVisionPTZ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArRVisionPTZ *)new ArRVisionPTZ(arg1);
  *(ArRVisionPTZ **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArRVisionPTZ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArRVisionPTZ **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPTZ_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRVisionPTZ **)&jarg1; 
  result = (bool)(arg1)->init();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPTZ_1getTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRVisionPTZ **)&jarg1; 
  result = (char *)(arg1)->getTypeName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPTZ_1setPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRVisionPTZ **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setPort((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPTZ_1canZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRVisionPTZ **)&jarg1; 
  result = (bool)((ArRVisionPTZ const *)arg1)->canZoom();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPTZ_1zoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRVisionPTZ **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->zoom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPTZ_1zoomRel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRVisionPTZ **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->zoomRel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPTZ_1getZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRVisionPTZ **)&jarg1; 
  result = (int)((ArRVisionPTZ const *)arg1)->getZoom();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPTZ_1canGetRealPanTilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRVisionPTZ **)&jarg1; 
  result = (bool)((ArRVisionPTZ const *)arg1)->canGetRealPanTilt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPTZ_1canGetRealZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRVisionPTZ **)&jarg1; 
  result = (bool)((ArRVisionPTZ const *)arg1)->canGetRealZoom();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPTZ_1canGetFOV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRVisionPTZ **)&jarg1; 
  result = (bool)(arg1)->canGetFOV();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPTZ_1getFOVAtMaxZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRVisionPTZ **)&jarg1; 
  result = (double)(arg1)->getFOVAtMaxZoom();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPTZ_1getFOVAtMinZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRVisionPTZ **)&jarg1; 
  result = (double)(arg1)->getFOVAtMinZoom();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPTZ_1readPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRVisionPTZ *arg1 = (ArRVisionPTZ *) 0 ;
  ArBasePacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRVisionPTZ **)&jarg1; 
  result = (ArBasePacket *)(arg1)->readPacket();
  *(ArBasePacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPTZ_1MAX_1PAN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArRVisionPTZ::MAX_PAN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPTZ_1MIN_1PAN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArRVisionPTZ::MIN_PAN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPTZ_1MIN_1TILT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArRVisionPTZ::MIN_TILT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPTZ_1MAX_1TILT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArRVisionPTZ::MAX_TILT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPTZ_1MIN_1ZOOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArRVisionPTZ::MIN_ZOOM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPTZ_1MAX_1ZOOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArRVisionPTZ::MAX_ZOOM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPTZ_1TILT_1OFFSET_1IN_1DEGREES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArRVisionPTZ::TILT_OFFSET_IN_DEGREES;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArRVisionPTZ_1PAN_1OFFSET_1IN_1DEGREES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArRVisionPTZ::PAN_OFFSET_IN_DEGREES;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSensorReading_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  ArSensorReading *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (ArSensorReading *)new ArSensorReading(arg1,arg2,arg3);
  *(ArSensorReading **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSensorReading_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  ArSensorReading *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (ArSensorReading *)new ArSensorReading(arg1,arg2);
  *(ArSensorReading **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSensorReading_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  ArSensorReading *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (ArSensorReading *)new ArSensorReading(arg1);
  *(ArSensorReading **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSensorReading_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArSensorReading *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArSensorReading *)new ArSensorReading();
  *(ArSensorReading **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSensorReading_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSensorReading *arg1 = 0 ;
  ArSensorReading *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArSensorReading const & reference is null");
    return 0;
  } 
  result = (ArSensorReading *)new ArSensorReading((ArSensorReading const &)*arg1);
  *(ArSensorReading **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArSensorReading(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArSensorReading **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  result = (unsigned int)((ArSensorReading const *)arg1)->getRange();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1isNew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)((ArSensorReading const *)arg1)->isNew(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1getY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1getPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  result = ((ArSensorReading const *)arg1)->getPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1getLocalX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getLocalX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1getLocalY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getLocalY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1getLocalPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  result = ((ArSensorReading const *)arg1)->getLocalPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1getPoseTaken(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  result = ((ArSensorReading const *)arg1)->getPoseTaken();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1getEncoderPoseTaken(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  result = ((ArSensorReading const *)arg1)->getEncoderPoseTaken();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1getSensorX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getSensorX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1getSensorY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getSensorY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1getSensorTh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getSensorTh();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1getIgnoreThisReading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  result = (bool)((ArSensorReading const *)arg1)->getIgnoreThisReading();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1getExtraInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  result = (int)((ArSensorReading const *)arg1)->getExtraInt();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1getSensorPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  result = ((ArSensorReading const *)arg1)->getSensorPosition();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1getSensorDX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getSensorDX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1getSensorDY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getSensorDY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1getXTaken(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getXTaken();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1getYTaken(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getYTaken();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1getThTaken(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  result = (double)((ArSensorReading const *)arg1)->getThTaken();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1getCounterTaken(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  result = (unsigned int)((ArSensorReading const *)arg1)->getCounterTaken();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1getTimeTaken(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  result = ((ArSensorReading const *)arg1)->getTimeTaken();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1newData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jobject jarg7_, jboolean jarg8, jint jarg9) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  int arg2 ;
  ArPose arg3 ;
  ArPose arg4 ;
  ArTransform arg5 ;
  unsigned int arg6 ;
  ArTime arg7 ;
  bool arg8 ;
  int arg9 ;
  ArPose *argp3 ;
  ArPose *argp4 ;
  ArTransform *argp5 ;
  ArTime *argp7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg7_;
  arg1 = *(ArSensorReading **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(ArPose **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(ArPose **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(ArTransform **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTransform");
    return ;
  }
  arg5 = *argp5; 
  arg6 = (unsigned int)jarg6; 
  argp7 = *(ArTime **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return ;
  }
  arg7 = *argp7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (int)jarg9; 
  (arg1)->newData(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1newData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jobject jarg7_, jboolean jarg8) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  int arg2 ;
  ArPose arg3 ;
  ArPose arg4 ;
  ArTransform arg5 ;
  unsigned int arg6 ;
  ArTime arg7 ;
  bool arg8 ;
  ArPose *argp3 ;
  ArPose *argp4 ;
  ArTransform *argp5 ;
  ArTime *argp7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg7_;
  arg1 = *(ArSensorReading **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(ArPose **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(ArPose **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(ArTransform **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTransform");
    return ;
  }
  arg5 = *argp5; 
  arg6 = (unsigned int)jarg6; 
  argp7 = *(ArTime **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return ;
  }
  arg7 = *argp7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->newData(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1newData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jobject jarg7_) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  int arg2 ;
  ArPose arg3 ;
  ArPose arg4 ;
  ArTransform arg5 ;
  unsigned int arg6 ;
  ArTime arg7 ;
  ArPose *argp3 ;
  ArPose *argp4 ;
  ArTransform *argp5 ;
  ArTime *argp7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg7_;
  arg1 = *(ArSensorReading **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(ArPose **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(ArPose **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(ArTransform **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTransform");
    return ;
  }
  arg5 = *argp5; 
  arg6 = (unsigned int)jarg6; 
  argp7 = *(ArTime **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return ;
  }
  arg7 = *argp7; 
  (arg1)->newData(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1newData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jlong jarg8, jobject jarg8_, jboolean jarg9, jint jarg10) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  int arg2 ;
  int arg3 ;
  ArPose arg4 ;
  ArPose arg5 ;
  ArTransform arg6 ;
  unsigned int arg7 ;
  ArTime arg8 ;
  bool arg9 ;
  int arg10 ;
  ArPose *argp4 ;
  ArPose *argp5 ;
  ArTransform *argp6 ;
  ArTime *argp8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg8_;
  arg1 = *(ArSensorReading **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = *(ArPose **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(ArPose **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg5 = *argp5; 
  argp6 = *(ArTransform **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTransform");
    return ;
  }
  arg6 = *argp6; 
  arg7 = (unsigned int)jarg7; 
  argp8 = *(ArTime **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return ;
  }
  arg8 = *argp8; 
  arg9 = jarg9 ? true : false; 
  arg10 = (int)jarg10; 
  (arg1)->newData(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1newData_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jlong jarg8, jobject jarg8_, jboolean jarg9) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  int arg2 ;
  int arg3 ;
  ArPose arg4 ;
  ArPose arg5 ;
  ArTransform arg6 ;
  unsigned int arg7 ;
  ArTime arg8 ;
  bool arg9 ;
  ArPose *argp4 ;
  ArPose *argp5 ;
  ArTransform *argp6 ;
  ArTime *argp8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg8_;
  arg1 = *(ArSensorReading **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = *(ArPose **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(ArPose **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg5 = *argp5; 
  argp6 = *(ArTransform **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTransform");
    return ;
  }
  arg6 = *argp6; 
  arg7 = (unsigned int)jarg7; 
  argp8 = *(ArTime **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return ;
  }
  arg8 = *argp8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->newData(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1newData_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jlong jarg8, jobject jarg8_) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  int arg2 ;
  int arg3 ;
  ArPose arg4 ;
  ArPose arg5 ;
  ArTransform arg6 ;
  unsigned int arg7 ;
  ArTime arg8 ;
  ArPose *argp4 ;
  ArPose *argp5 ;
  ArTransform *argp6 ;
  ArTime *argp8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg8_;
  arg1 = *(ArSensorReading **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = *(ArPose **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(ArPose **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg5 = *argp5; 
  argp6 = *(ArTransform **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTransform");
    return ;
  }
  arg6 = *argp6; 
  arg7 = (unsigned int)jarg7; 
  argp8 = *(ArTime **)&jarg8; 
  if (!argp8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTime");
    return ;
  }
  arg8 = *argp8; 
  (arg1)->newData(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1resetSensorPosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jboolean jarg5) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->resetSensorPosition(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1resetSensorPosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->resetSensorPosition(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1setIgnoreThisReading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIgnoreThisReading(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1setExtraInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setExtraInt(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1applyTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  ArTransform arg2 ;
  ArTransform *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSensorReading **)&jarg1; 
  argp2 = *(ArTransform **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTransform");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->applyTransform(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1applyEncoderTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  ArTransform arg2 ;
  ArTransform *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSensorReading **)&jarg1; 
  argp2 = *(ArTransform **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArTransform");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->applyEncoderTransform(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1getAdjusted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  result = (bool)(arg1)->getAdjusted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSensorReading_1setAdjusted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArSensorReading *arg1 = (ArSensorReading *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSensorReading **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAdjusted(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSerialConnection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  ArSerialConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (ArSerialConnection *)new ArSerialConnection(arg1);
  *(ArSerialConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSerialConnection_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArSerialConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArSerialConnection *)new ArSerialConnection();
  *(ArSerialConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArSerialConnection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArSerialConnection **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1open_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSerialConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->open((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1open_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSerialConnection **)&jarg1; 
  result = (int)(arg1)->open();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1setPort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSerialConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setPort((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1setPort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSerialConnection **)&jarg1; 
  (arg1)->setPort();
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1getPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSerialConnection **)&jarg1; 
  result = (char *)(arg1)->getPort();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1openSimple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSerialConnection **)&jarg1; 
  result = (bool)(arg1)->openSimple();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSerialConnection **)&jarg1; 
  result = (int)(arg1)->getStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSerialConnection **)&jarg1; 
  result = (bool)(arg1)->close();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSerialConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (int)(arg1)->read((char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSerialConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (unsigned int)jarg3; 
  result = (int)(arg1)->read((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSerialConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (unsigned int)jarg3; 
  result = (int)(arg1)->write((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1getOpenMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSerialConnection **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getOpenMessage(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1setBaud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSerialConnection **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setBaud(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1getBaud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSerialConnection **)&jarg1; 
  result = (int)(arg1)->getBaud();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1setHardwareControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSerialConnection **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setHardwareControl(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1getHardwareControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSerialConnection **)&jarg1; 
  result = (bool)(arg1)->getHardwareControl();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1getCTS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSerialConnection **)&jarg1; 
  result = (bool)(arg1)->getCTS();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1getDSR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSerialConnection **)&jarg1; 
  result = (bool)(arg1)->getDSR();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1getDCD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSerialConnection **)&jarg1; 
  result = (bool)(arg1)->getDCD();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1getRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSerialConnection **)&jarg1; 
  result = (bool)(arg1)->getRing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1internalOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSerialConnection **)&jarg1; 
  result = (int)(arg1)->internalOpen();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1OPEN_1COULD_1NOT_1OPEN_1PORT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArSerialConnection::Open result;
  
  (void)jenv;
  (void)jcls;
  result = (ArSerialConnection::Open)ArSerialConnection::OPEN_COULD_NOT_OPEN_PORT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1getTimeRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  int arg2 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSerialConnection **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getTimeRead(arg2);
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSerialConnection_1isTimeStamping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSerialConnection *arg1 = (ArSerialConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSerialConnection **)&jarg1; 
  result = (bool)(arg1)->isTimeStamping();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSignalHandler_1SigHUP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArSignalHandler::Signal result;
  
  (void)jenv;
  (void)jcls;
  result = (ArSignalHandler::Signal)ArSignalHandler::SigHUP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSignalHandler_1createHandlerNonThreaded(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArSignalHandler::createHandlerNonThreaded();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSignalHandler_1createHandlerThreaded(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArSignalHandler::createHandlerThreaded();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSignalHandler_1blockCommon(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArSignalHandler::blockCommon();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSignalHandler_1unblockAll(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArSignalHandler::unblockAll();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSignalHandler_1block(JNIEnv *jenv, jclass jcls, jint jarg1) {
  ArSignalHandler::Signal arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArSignalHandler::Signal)jarg1; 
  ArSignalHandler::block(arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSignalHandler_1unblock(JNIEnv *jenv, jclass jcls, jint jarg1) {
  ArSignalHandler::Signal arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArSignalHandler::Signal)jarg1; 
  ArSignalHandler::unblock(arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSignalHandler_1handle(JNIEnv *jenv, jclass jcls, jint jarg1) {
  ArSignalHandler::Signal arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArSignalHandler::Signal)jarg1; 
  ArSignalHandler::handle(arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSignalHandler_1unhandle(JNIEnv *jenv, jclass jcls, jint jarg1) {
  ArSignalHandler::Signal arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArSignalHandler::Signal)jarg1; 
  ArSignalHandler::unhandle(arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSignalHandler_1addHandlerCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArFunctor1< int > *arg1 = (ArFunctor1< int > *) 0 ;
  ArListPos::Pos arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor1< int > **)&jarg1; 
  arg2 = (ArListPos::Pos)jarg2; 
  ArSignalHandler::addHandlerCB(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSignalHandler_1delHandlerCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArFunctor1< int > *arg1 = (ArFunctor1< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor1< int > **)&jarg1; 
  ArSignalHandler::delHandlerCB(arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSignalHandler_1delAllHandlerCBs(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArSignalHandler::delAllHandlerCBs();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSignalHandler_1getHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArSignalHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArSignalHandler *)ArSignalHandler::getHandler();
  *(ArSignalHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSignalHandler_1nameSignal(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (char *)ArSignalHandler::nameSignal(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSignalHandler_1blockCommonThisThread(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArSignalHandler::blockCommonThisThread();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSignalHandler_1blockAllThisThread(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArSignalHandler::blockAllThisThread();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArSignalHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArSignalHandler *arg1 = (ArSignalHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArSignalHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSignalHandler_1runThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ArSignalHandler *arg1 = (ArSignalHandler *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSignalHandler **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (void *)(arg1)->runThread(arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSignalHandler_1signalCB(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  ArSignalHandler::signalCB(arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSignalHandler_1logThread(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArSignalHandler::logThread();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSimpleConnector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jobjectArray jarg1) {
  jlong jresult = 0 ;
  int *arg1 = (int *) 0 ;
  char **arg2 = (char **) 0 ;
  jint size1 ;
  ArSimpleConnector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    /* (begin %typemap(in) for (int *argc, char **argv) */
    size1 = jenv->GetArrayLength((jarray)jarg1);
    int tmpArgc = size1;
    int i;
    arg2 = (char**)malloc( (size1+1) * sizeof(char*) );
    for(i = 0; i < size1; i++) {
      jstring js = (jstring) jenv->GetObjectArrayElement((jobjectArray)jarg1, i);
      const char *cs = jenv->GetStringUTFChars(js, 0);
      arg2[i] = (char*)malloc(strlen(cs)+1 * sizeof(const char));
      strcpy(arg2[i], cs);
      jenv->ReleaseStringUTFChars(js, cs);
      jenv->DeleteLocalRef(js);
    }
    arg2[i] = 0;
    int *newArgc = (int*) malloc(sizeof(int));
    *newArgc = tmpArgc;
    arg1 = newArgc;
    /* (end %typemap(in) for (int *argc, char **argv) */
  }
  result = (ArSimpleConnector *)new ArSimpleConnector(arg1,arg2);
  *(ArSimpleConnector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSimpleConnector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  ArSimpleConnector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  result = (ArSimpleConnector *)new ArSimpleConnector(arg1);
  *(ArSimpleConnector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSimpleConnector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArSimpleConnector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  result = (ArSimpleConnector *)new ArSimpleConnector(arg1);
  *(ArSimpleConnector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArSimpleConnector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArSimpleConnector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimpleConnector_1setupRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSimpleConnector **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (bool)(arg1)->setupRobot(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimpleConnector_1connectRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSimpleConnector **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (bool)(arg1)->connectRobot(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimpleConnector_1setupLaser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  ArSick *arg2 = (ArSick *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimpleConnector **)&jarg1; 
  arg2 = *(ArSick **)&jarg2; 
  result = (bool)(arg1)->setupLaser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimpleConnector_1setupSecondLaser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  ArSick *arg2 = (ArSick *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimpleConnector **)&jarg1; 
  arg2 = *(ArSick **)&jarg2; 
  result = (bool)(arg1)->setupSecondLaser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimpleConnector_1setupLaserArbitrary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  ArSick *arg2 = (ArSick *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimpleConnector **)&jarg1; 
  arg2 = *(ArSick **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->setupLaserArbitrary(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimpleConnector_1connectLaser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  ArSick *arg2 = (ArSick *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimpleConnector **)&jarg1; 
  arg2 = *(ArSick **)&jarg2; 
  result = (bool)(arg1)->connectLaser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimpleConnector_1connectSecondLaser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  ArSick *arg2 = (ArSick *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimpleConnector **)&jarg1; 
  arg2 = *(ArSick **)&jarg2; 
  result = (bool)(arg1)->connectSecondLaser(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimpleConnector_1connectLaserArbitrary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  ArSick *arg2 = (ArSick *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimpleConnector **)&jarg1; 
  arg2 = *(ArSick **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->connectLaserArbitrary(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimpleConnector_1parseArgs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimpleConnector **)&jarg1; 
  result = (bool)(arg1)->parseArgs();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimpleConnector_1parseArgs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  ArArgumentParser *arg2 = (ArArgumentParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSimpleConnector **)&jarg1; 
  arg2 = *(ArArgumentParser **)&jarg2; 
  result = (bool)(arg1)->parseArgs(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimpleConnector_1logOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimpleConnector **)&jarg1; 
  ((ArSimpleConnector const *)arg1)->logOptions();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimpleConnector_1setMaxNumLasers_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimpleConnector **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaxNumLasers(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimpleConnector_1setMaxNumLasers_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSimpleConnector *arg1 = (ArSimpleConnector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimpleConnector **)&jarg1; 
  (arg1)->setMaxNumLasers();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSimulatedLaser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArLaser *arg1 = (ArLaser *) 0 ;
  ArSimulatedLaser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArLaser **)&jarg1; 
  result = (ArSimulatedLaser *)new ArSimulatedLaser(arg1);
  *(ArSimulatedLaser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArSimulatedLaser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArSimulatedLaser *arg1 = (ArSimulatedLaser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArSimulatedLaser **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimulatedLaser_1blockingConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSimulatedLaser *arg1 = (ArSimulatedLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimulatedLaser **)&jarg1; 
  result = (bool)(arg1)->blockingConnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimulatedLaser_1asyncConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSimulatedLaser *arg1 = (ArSimulatedLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimulatedLaser **)&jarg1; 
  result = (bool)(arg1)->asyncConnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimulatedLaser_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSimulatedLaser *arg1 = (ArSimulatedLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimulatedLaser **)&jarg1; 
  result = (bool)(arg1)->disconnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimulatedLaser_1isConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSimulatedLaser *arg1 = (ArSimulatedLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimulatedLaser **)&jarg1; 
  result = (bool)(arg1)->isConnected();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSimulatedLaser_1isTryingToConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSimulatedLaser *arg1 = (ArSimulatedLaser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSimulatedLaser **)&jarg1; 
  result = (bool)(arg1)->isTryingToConnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSocket_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArSocket *)new ArSocket();
  *(ArSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSocket_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ArSocket::Type arg3 ;
  ArSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = (ArSocket::Type)jarg3; 
  result = (ArSocket *)new ArSocket((char const *)arg1,arg2,arg3);
  *(ArSocket **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSocket_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  bool arg2 ;
  ArSocket::Type arg3 ;
  ArSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (ArSocket::Type)jarg3; 
  result = (ArSocket *)new ArSocket(arg1,arg2,arg3);
  *(ArSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArSocket(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArSocket **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1init(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)ArSocket::init();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1shutdown(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArSocket::shutdown();
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1toString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  ArSocket::Type arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArSocket::Type)jarg1; 
  result = (char *)ArSocket::toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1ourInitialized_1set(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  ArSocket::ourInitialized = arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1ourInitialized_1get(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)ArSocket::ourInitialized;
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->copy(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = *(ArSocket **)&jarg2; 
  (arg1)->copy(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1transfer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = *(ArSocket **)&jarg2; 
  (arg1)->transfer(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1connect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  ArSocket::Type arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (ArSocket::Type)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (bool)(arg1)->connect((char const *)arg2,arg3,arg4,(char const *)arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1connect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  ArSocket::Type arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (ArSocket::Type)jarg4; 
  result = (bool)(arg1)->connect((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1connect_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->connect((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1open_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  int arg2 ;
  ArSocket::Type arg3 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ArSocket::Type)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (bool)(arg1)->open(arg2,arg3,(char const *)arg4);
  jresult = (jboolean)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1open_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  int arg2 ;
  ArSocket::Type arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ArSocket::Type)jarg3; 
  result = (bool)(arg1)->open(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  ArSocket::Type arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = (ArSocket::Type)jarg2; 
  result = (bool)(arg1)->create(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1findValidPort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->findValidPort(arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1findValidPort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->findValidPort(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1connectTo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->connectTo((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1connectTo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  sockaddr_in *arg2 = (sockaddr_in *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = *(sockaddr_in **)&jarg2; 
  result = (bool)(arg1)->connectTo(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1accept(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = *(ArSocket **)&jarg2; 
  result = (bool)(arg1)->accept(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (bool)(arg1)->close();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (size_t)jarg3; 
  result = (int)(arg1)->write((void const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  unsigned int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (int)(arg1)->read(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (size_t)jarg3; 
  result = (int)(arg1)->read(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1sendTo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->sendTo((void const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1sendTo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  sockaddr_in *arg4 = (sockaddr_in *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(sockaddr_in **)&jarg4; 
  result = (int)(arg1)->sendTo((void const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1recvFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  sockaddr_in *arg4 = (sockaddr_in *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(sockaddr_in **)&jarg4; 
  result = (int)(arg1)->recvFrom(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1hostAddr(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  in_addr *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(in_addr **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "in_addr & reference is null");
    return 0;
  } 
  result = (bool)ArSocket::hostAddr((char const *)arg1,*arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1addrHost(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  in_addr *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(in_addr **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "in_addr & reference is null");
    return 0;
  } 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)ArSocket::addrHost(*arg1,arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1getHostName(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = ArSocket::getHostName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1getSockName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (bool)(arg1)->getSockName();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1sockAddrIn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  sockaddr_in *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (sockaddr_in *)(arg1)->sockAddrIn();
  *(sockaddr_in **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1inAddr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  in_addr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (in_addr *)(arg1)->inAddr();
  *(in_addr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1inPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (unsigned short)(arg1)->inPort();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1inToA(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  in_addr *arg1 = (in_addr *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(in_addr **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  ArSocket::inToA(arg1,arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1sockAddrLen(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = ArSocket::sockAddrLen();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1maxHostNameLen(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = ArSocket::maxHostNameLen();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1hostToNetOrder(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (unsigned int)ArSocket::hostToNetOrder(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1netToHostOrder(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (unsigned int)ArSocket::netToHostOrder(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1setLinger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setLinger(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1setBroadcast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (bool)(arg1)->setBroadcast();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1setReuseAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (bool)(arg1)->setReuseAddress();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1setNonBlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (bool)(arg1)->setNonBlock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1setDoClose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDoClose(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1setFakeWrites(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setFakeWrites(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1getFD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (int)((ArSocket const *)arg1)->getFD();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  ArSocket::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (ArSocket::Type)((ArSocket const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1getErrorStr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (std::string *) &((ArSocket const *)arg1)->getErrorStr();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1getError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  ArSocket::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (ArSocket::Error)((ArSocket const *)arg1)->getError();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1setErrorTracking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setErrorTracking(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1getErrorTracking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (bool)(arg1)->getErrorTracking();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1getBadWrite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (bool)((ArSocket const *)arg1)->getBadWrite();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1getBadRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (bool)((ArSocket const *)arg1)->getBadRead();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1writeStringPlain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->writeStringPlain((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1readString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  unsigned int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (char *)(arg1)->readString(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1readString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (char *)(arg1)->readString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1setReadStringIgnoreReturn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setReadStringIgnoreReturn(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1clearPartialReadString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  (arg1)->clearPartialReadString();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1comparePartialReadString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->comparePartialReadString((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1getLastStringReadTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (arg1)->getLastStringReadTime();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1setEcho(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setEcho(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1getEcho(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (bool)(arg1)->getEcho();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1setLogWriteStrings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLogWriteStrings(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1getLogWriteStrings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (bool)(arg1)->getLogWriteStrings();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1setStringUseWrongEndChars(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setStringUseWrongEndChars(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1getStringUseWrongEndChars(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (bool)(arg1)->getStringUseWrongEndChars();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1getRawIPString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (char *)((ArSocket const *)arg1)->getRawIPString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1getIPString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (char *)((ArSocket const *)arg1)->getIPString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1setIPString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setIPString((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1setCloseCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->setCloseCallback(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1getCloseCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  ArFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (ArFunctor *)(arg1)->getCloseCallback();
  *(ArFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1getSends(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (long)(arg1)->getSends();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1getBytesSent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (long)(arg1)->getBytesSent();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1getRecvs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (long)(arg1)->getRecvs();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1getBytesRecvd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (long)(arg1)->getBytesRecvd();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1resetTracking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSocket *arg1 = (ArSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  (arg1)->resetTracking();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1setNoDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setNoDelay(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1isOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  result = (bool)(arg1)->isOpen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1read_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  size_t arg2 ;
  unsigned int arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = ArSocket_read__SWIG_2(arg1,arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSocket_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  std::string arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)ArSocket_write__SWIG_1(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSonarAutoDisabler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArSonarAutoDisabler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArSonarAutoDisabler *)new ArSonarAutoDisabler(arg1);
  *(ArSonarAutoDisabler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArSonarAutoDisabler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArSonarAutoDisabler *arg1 = (ArSonarAutoDisabler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArSonarAutoDisabler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonarAutoDisabler_1supress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSonarAutoDisabler *arg1 = (ArSonarAutoDisabler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonarAutoDisabler **)&jarg1; 
  (arg1)->supress();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonarAutoDisabler_1getSupressCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSonarAutoDisabler *arg1 = (ArSonarAutoDisabler *) 0 ;
  ArFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonarAutoDisabler **)&jarg1; 
  result = (ArFunctor *)(arg1)->getSupressCallback();
  *(ArFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonarAutoDisabler_1unsupress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSonarAutoDisabler *arg1 = (ArSonarAutoDisabler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonarAutoDisabler **)&jarg1; 
  (arg1)->unsupress();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonarAutoDisabler_1getUnsupressCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSonarAutoDisabler *arg1 = (ArSonarAutoDisabler *) 0 ;
  ArFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonarAutoDisabler **)&jarg1; 
  result = (ArFunctor *)(arg1)->getUnsupressCallback();
  *(ArFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonarAutoDisabler_1setAutonomousDriving(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSonarAutoDisabler *arg1 = (ArSonarAutoDisabler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonarAutoDisabler **)&jarg1; 
  (arg1)->setAutonomousDriving();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonarAutoDisabler_1getSetAutonomousDrivingCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSonarAutoDisabler *arg1 = (ArSonarAutoDisabler *) 0 ;
  ArFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonarAutoDisabler **)&jarg1; 
  result = (ArFunctor *)(arg1)->getSetAutonomousDrivingCallback();
  *(ArFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonarAutoDisabler_1clearAutonomousDriving(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSonarAutoDisabler *arg1 = (ArSonarAutoDisabler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonarAutoDisabler **)&jarg1; 
  (arg1)->clearAutonomousDriving();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonarAutoDisabler_1getClearAutonomousDrivingCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSonarAutoDisabler *arg1 = (ArSonarAutoDisabler *) 0 ;
  ArFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonarAutoDisabler **)&jarg1; 
  result = (ArFunctor *)(arg1)->getClearAutonomousDrivingCallback();
  *(ArFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSonarDevice_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  ArSonarDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArSonarDevice *)new ArSonarDevice(arg1,arg2,(char const *)arg3);
  *(ArSonarDevice **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSonarDevice_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  ArSonarDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (ArSonarDevice *)new ArSonarDevice(arg1,arg2);
  *(ArSonarDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSonarDevice_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  ArSonarDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (ArSonarDevice *)new ArSonarDevice(arg1);
  *(ArSonarDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSonarDevice_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArSonarDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArSonarDevice *)new ArSonarDevice();
  *(ArSonarDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArSonarDevice(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArSonarDevice *arg1 = (ArSonarDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArSonarDevice **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonarDevice_1processReadings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSonarDevice *arg1 = (ArSonarDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonarDevice **)&jarg1; 
  (arg1)->processReadings();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonarDevice_1setRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSonarDevice *arg1 = (ArSonarDevice *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSonarDevice **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonarDevice_1addReading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArSonarDevice *arg1 = (ArSonarDevice *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonarDevice **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->addReading(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonarDevice_1setIgnoreReadingCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArSonarDevice *arg1 = (ArSonarDevice *) 0 ;
  ArRetFunctor1< bool,ArPose > *arg2 = (ArRetFunctor1< bool,ArPose > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonarDevice **)&jarg1; 
  arg2 = *(ArRetFunctor1< bool,ArPose > **)&jarg2; 
  (arg1)->setIgnoreReadingCB(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonarDevice_1getIgnoreReadingCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSonarDevice *arg1 = (ArSonarDevice *) 0 ;
  ArRetFunctor1< bool,ArPose > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonarDevice **)&jarg1; 
  result = (ArRetFunctor1< bool,ArPose > *)(arg1)->getIgnoreReadingCB();
  *(ArRetFunctor1< bool,ArPose > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonarDevice_1setCumulativeMaxRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArSonarDevice *arg1 = (ArSonarDevice *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonarDevice **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setCumulativeMaxRange(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSonyPacket_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  ArTypes::UByte2 arg1 ;
  ArSonyPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArTypes::UByte2)jarg1; 
  result = (ArSonyPacket *)new ArSonyPacket(arg1);
  *(ArSonyPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSonyPacket_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArSonyPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArSonyPacket *)new ArSonyPacket();
  *(ArSonyPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArSonyPacket(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArSonyPacket *arg1 = (ArSonyPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArSonyPacket **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonyPacket_1uByteToBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ArSonyPacket *arg1 = (ArSonyPacket *) 0 ;
  ArTypes::UByte arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonyPacket **)&jarg1; 
  arg2 = (ArTypes::UByte)jarg2; 
  (arg1)->uByteToBuf(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonyPacket_1byte2ToBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ArSonyPacket *arg1 = (ArSonyPacket *) 0 ;
  ArTypes::Byte2 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonyPacket **)&jarg1; 
  arg2 = (ArTypes::Byte2)jarg2; 
  (arg1)->byte2ToBuf(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonyPacket_1byte2ToBufAtPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3) {
  ArSonyPacket *arg1 = (ArSonyPacket *) 0 ;
  ArTypes::Byte2 arg2 ;
  ArTypes::UByte2 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonyPacket **)&jarg1; 
  arg2 = (ArTypes::Byte2)jarg2; 
  arg3 = (ArTypes::UByte2)jarg3; 
  (arg1)->byte2ToBufAtPos(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSonyPTZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArSonyPTZ *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArSonyPTZ *)new ArSonyPTZ(arg1);
  *(ArSonyPTZ **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArSonyPTZ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArSonyPTZ **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonyPTZ_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonyPTZ **)&jarg1; 
  result = (bool)(arg1)->init();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonyPTZ_1getTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonyPTZ **)&jarg1; 
  result = (char *)(arg1)->getTypeName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonyPTZ_1canZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonyPTZ **)&jarg1; 
  result = (bool)((ArSonyPTZ const *)arg1)->canZoom();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonyPTZ_1zoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonyPTZ **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->zoom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonyPTZ_1zoomRel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonyPTZ **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->zoomRel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonyPTZ_1getZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonyPTZ **)&jarg1; 
  result = (int)((ArSonyPTZ const *)arg1)->getZoom();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonyPTZ_1canGetFOV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonyPTZ **)&jarg1; 
  result = (bool)(arg1)->canGetFOV();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonyPTZ_1getFOVAtMaxZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonyPTZ **)&jarg1; 
  result = (double)(arg1)->getFOVAtMaxZoom();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonyPTZ_1getFOVAtMinZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonyPTZ **)&jarg1; 
  result = (double)(arg1)->getFOVAtMinZoom();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonyPTZ_1backLightingOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonyPTZ **)&jarg1; 
  result = (bool)(arg1)->backLightingOn();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSonyPTZ_1backLightingOff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSonyPTZ *arg1 = (ArSonyPTZ *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSonyPTZ **)&jarg1; 
  result = (bool)(arg1)->backLightingOff();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundPlayer_1playWavFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)ArSoundPlayer::playWavFile((char const *)arg1,(char const *)arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundPlayer_1playWavFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)ArSoundPlayer::playWavFile((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundPlayer_1playNativeFile(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)ArSoundPlayer::playNativeFile((char const *)arg1,(char const *)arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundPlayer_1stopPlaying(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArSoundPlayer::stopPlaying();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundPlayer_1getPlayWavFileCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRetFunctor2< bool,char const *,char const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRetFunctor2< bool,char const *,char const * > *)ArSoundPlayer::getPlayWavFileCallback();
  *(ArRetFunctor2< bool,char const *,char const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundPlayer_1getStopPlayingCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArFunctor *)ArSoundPlayer::getStopPlayingCallback();
  *(ArFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundPlayer_1playSoundPCM16(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (bool)ArSoundPlayer::playSoundPCM16(arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundPlayer_1setVolume(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  double arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  ArSoundPlayer::setVolume(arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundPlayer_1setVolumePercent(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  double arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  ArSoundPlayer::setVolumePercent(arg1);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSoundPlayer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArSoundPlayer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArSoundPlayer *)new ArSoundPlayer();
  *(ArSoundPlayer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArSoundPlayer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArSoundPlayer *arg1 = (ArSoundPlayer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArSoundPlayer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSoundsQueue_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArSoundsQueue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArSoundsQueue *)new ArSoundsQueue();
  *(ArSoundsQueue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSoundsQueue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg2 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  ArSoundsQueue::InterruptItemFunctor *arg3 = (ArSoundsQueue::InterruptItemFunctor *) 0 ;
  ArRetFunctor< bool > *arg4 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg5 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  ArSoundsQueue::InterruptItemFunctor *arg6 = (ArSoundsQueue::InterruptItemFunctor *) 0 ;
  ArSoundsQueue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg6_;
  arg1 = *(ArRetFunctor< bool > **)&jarg1; 
  arg2 = *(ArSoundsQueue::PlayItemFunctor **)&jarg2; 
  arg3 = *(ArSoundsQueue::InterruptItemFunctor **)&jarg3; 
  arg4 = *(ArRetFunctor< bool > **)&jarg4; 
  arg5 = *(ArSoundsQueue::PlayItemFunctor **)&jarg5; 
  arg6 = *(ArSoundsQueue::InterruptItemFunctor **)&jarg6; 
  result = (ArSoundsQueue *)new ArSoundsQueue(arg1,arg2,arg3,arg4,arg5,arg6);
  *(ArSoundsQueue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSoundsQueue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg2 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  ArSoundsQueue::InterruptItemFunctor *arg3 = (ArSoundsQueue::InterruptItemFunctor *) 0 ;
  ArRetFunctor< bool > *arg4 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg5 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  ArSoundsQueue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(ArRetFunctor< bool > **)&jarg1; 
  arg2 = *(ArSoundsQueue::PlayItemFunctor **)&jarg2; 
  arg3 = *(ArSoundsQueue::InterruptItemFunctor **)&jarg3; 
  arg4 = *(ArRetFunctor< bool > **)&jarg4; 
  arg5 = *(ArSoundsQueue::PlayItemFunctor **)&jarg5; 
  result = (ArSoundsQueue *)new ArSoundsQueue(arg1,arg2,arg3,arg4,arg5);
  *(ArSoundsQueue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSoundsQueue_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg2 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  ArSoundsQueue::InterruptItemFunctor *arg3 = (ArSoundsQueue::InterruptItemFunctor *) 0 ;
  ArRetFunctor< bool > *arg4 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(ArRetFunctor< bool > **)&jarg1; 
  arg2 = *(ArSoundsQueue::PlayItemFunctor **)&jarg2; 
  arg3 = *(ArSoundsQueue::InterruptItemFunctor **)&jarg3; 
  arg4 = *(ArRetFunctor< bool > **)&jarg4; 
  result = (ArSoundsQueue *)new ArSoundsQueue(arg1,arg2,arg3,arg4);
  *(ArSoundsQueue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSoundsQueue_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg2 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  ArSoundsQueue::InterruptItemFunctor *arg3 = (ArSoundsQueue::InterruptItemFunctor *) 0 ;
  ArSoundsQueue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArRetFunctor< bool > **)&jarg1; 
  arg2 = *(ArSoundsQueue::PlayItemFunctor **)&jarg2; 
  arg3 = *(ArSoundsQueue::InterruptItemFunctor **)&jarg3; 
  result = (ArSoundsQueue *)new ArSoundsQueue(arg1,arg2,arg3);
  *(ArSoundsQueue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSoundsQueue_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg2 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  ArSoundsQueue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor< bool > **)&jarg1; 
  arg2 = *(ArSoundsQueue::PlayItemFunctor **)&jarg2; 
  result = (ArSoundsQueue *)new ArSoundsQueue(arg1,arg2);
  *(ArSoundsQueue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSoundsQueue_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor< bool > **)&jarg1; 
  result = (ArSoundsQueue *)new ArSoundsQueue(arg1);
  *(ArSoundsQueue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSoundsQueue_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  ArRetFunctor< bool > *arg2 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg3 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  ArSoundsQueue::InterruptItemFunctor *arg4 = (ArSoundsQueue::InterruptItemFunctor *) 0 ;
  ArSoundsQueue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  arg2 = *(ArRetFunctor< bool > **)&jarg2; 
  arg3 = *(ArSoundsQueue::PlayItemFunctor **)&jarg3; 
  arg4 = *(ArSoundsQueue::InterruptItemFunctor **)&jarg4; 
  result = (ArSoundsQueue *)new ArSoundsQueue(arg1,arg2,arg3,arg4);
  *(ArSoundsQueue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSoundsQueue_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  ArRetFunctor< bool > *arg2 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg3 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  ArSoundsQueue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  arg2 = *(ArRetFunctor< bool > **)&jarg2; 
  arg3 = *(ArSoundsQueue::PlayItemFunctor **)&jarg3; 
  result = (ArSoundsQueue *)new ArSoundsQueue(arg1,arg2,arg3);
  *(ArSoundsQueue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSoundsQueue_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  ArRetFunctor< bool > *arg2 = (ArRetFunctor< bool > *) 0 ;
  ArSoundsQueue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  arg2 = *(ArRetFunctor< bool > **)&jarg2; 
  result = (ArSoundsQueue *)new ArSoundsQueue(arg1,arg2);
  *(ArSoundsQueue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSoundsQueue_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  ArSoundsQueue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  result = (ArSoundsQueue *)new ArSoundsQueue(arg1);
  *(ArSoundsQueue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArSoundsQueue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1addInitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArRetFunctor< bool > *arg2 = (ArRetFunctor< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = *(ArRetFunctor< bool > **)&jarg2; 
  (arg1)->addInitCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1setSpeakInitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArRetFunctor< bool > *arg2 = (ArRetFunctor< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = *(ArRetFunctor< bool > **)&jarg2; 
  (arg1)->setSpeakInitCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1addItem_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::Item arg2 ;
  ArSoundsQueue::Item *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  argp2 = *(ArSoundsQueue::Item **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArSoundsQueue::Item");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->addItem(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1addItem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4, jint jarg5, jstring jarg6) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::ItemType arg2 ;
  char *arg3 = (char *) 0 ;
  SwigValueWrapper< std::list< ArRetFunctor2< bool,char const *,char const * > * > > arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  std::list< ArSoundsQueue::PlayItemFunctor * > *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = (ArSoundsQueue::ItemType)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  argp4 = *(std::list< ArSoundsQueue::PlayItemFunctor * > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::list< ArSoundsQueue::PlayItemFunctor * >");
    return ;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return ;
  }
  (arg1)->addItem(arg2,(char const *)arg3,arg4,arg5,(char const *)arg6);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1addItem_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4, jint jarg5) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::ItemType arg2 ;
  char *arg3 = (char *) 0 ;
  SwigValueWrapper< std::list< ArRetFunctor2< bool,char const *,char const * > * > > arg4 ;
  int arg5 ;
  std::list< ArSoundsQueue::PlayItemFunctor * > *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = (ArSoundsQueue::ItemType)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  argp4 = *(std::list< ArSoundsQueue::PlayItemFunctor * > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::list< ArSoundsQueue::PlayItemFunctor * >");
    return ;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  (arg1)->addItem(arg2,(char const *)arg3,arg4,arg5);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1addItem_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::ItemType arg2 ;
  char *arg3 = (char *) 0 ;
  SwigValueWrapper< std::list< ArRetFunctor2< bool,char const *,char const * > * > > arg4 ;
  std::list< ArSoundsQueue::PlayItemFunctor * > *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = (ArSoundsQueue::ItemType)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  argp4 = *(std::list< ArSoundsQueue::PlayItemFunctor * > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::list< ArSoundsQueue::PlayItemFunctor * >");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->addItem(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1isInitialized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  result = (bool)(arg1)->isInitialized();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1isSpeakingOrPlaying(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  result = (bool)(arg1)->isSpeakingOrPlaying();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1isPlaying(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  result = (bool)(arg1)->isPlaying();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1isSpeaking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  result = (bool)(arg1)->isSpeaking();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  (arg1)->run();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1runAsync(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  (arg1)->runAsync();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1pause(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  (arg1)->pause();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  (arg1)->resume();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1isPaused(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  result = (bool)(arg1)->isPaused();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1clearQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  (arg1)->clearQueue();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  (arg1)->stop();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1getPauseCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  result = (ArFunctor *)(arg1)->getPauseCallback();
  *(ArFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1getResumeCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  result = (ArFunctor *)(arg1)->getResumeCallback();
  *(ArFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1getCurrentQueueSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  result = (arg1)->getCurrentQueueSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1addSoundStartedCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addSoundStartedCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1remSoundStartedCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remSoundStartedCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1addSoundFinishedCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addSoundFinishedCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1remSoundFinishedCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remSoundFinishedCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1addSoundItemStartedCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor1< ArSoundsQueue::Item > *arg2 = (ArFunctor1< ArSoundsQueue::Item > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = *(ArFunctor1< ArSoundsQueue::Item > **)&jarg2; 
  (arg1)->addSoundItemStartedCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1remSoundItemStartedCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor1< ArSoundsQueue::Item > *arg2 = (ArFunctor1< ArSoundsQueue::Item > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = *(ArFunctor1< ArSoundsQueue::Item > **)&jarg2; 
  (arg1)->remSoundItemStartedCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1addSoundItemFinishedCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor1< ArSoundsQueue::Item > *arg2 = (ArFunctor1< ArSoundsQueue::Item > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = *(ArFunctor1< ArSoundsQueue::Item > **)&jarg2; 
  (arg1)->addSoundItemFinishedCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1remSoundItemFinishedCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor1< ArSoundsQueue::Item > *arg2 = (ArFunctor1< ArSoundsQueue::Item > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = *(ArFunctor1< ArSoundsQueue::Item > **)&jarg2; 
  (arg1)->remSoundItemFinishedCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1addQueueNonemptyCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addQueueNonemptyCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1remQueueNonemptyCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remQueueNonemptyCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1addQueueEmptyCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addQueueEmptyCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1remQueueEmptyCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remQueueEmptyCallback(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1findPendingItems(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  char *arg2 = (char *) 0 ;
  std::set< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->findPendingItems((char const *)arg2);
  *(std::set< int > **)&jresult = new std::set< int >((const std::set< int > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1removePendingItems_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  char *arg2 = (char *) 0 ;
  ArSoundsQueue::ItemType arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (ArSoundsQueue::ItemType)jarg3; 
  (arg1)->removePendingItems((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1removePendingItems_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->removePendingItems((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1removePendingItemsByPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->removePendingItems(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1removePendingItemsByPriorityWithType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  int arg2 ;
  ArSoundsQueue::ItemType arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ArSoundsQueue::ItemType)jarg3; 
  (arg1)->removePendingItems(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1removePendingItemsByType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::ItemType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = (ArSoundsQueue::ItemType)jarg2; 
  (arg1)->removePendingItems(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1removeItems_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->removeItems(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1removeItems_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::Item arg2 ;
  ArSoundsQueue::Item *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  argp2 = *(ArSoundsQueue::Item **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArSoundsQueue::Item");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->removeItems(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1nextItemByType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::ItemType arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = (ArSoundsQueue::ItemType)jarg2; 
  result = (arg1)->nextItem(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1nextItemByPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->nextItem(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1nextItemByTypeAndPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jstring jresult = 0 ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::ItemType arg2 ;
  int arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = (ArSoundsQueue::ItemType)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->nextItem(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1setSpeakCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg2 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = *(ArSoundsQueue::PlayItemFunctor **)&jarg2; 
  (arg1)->setSpeakCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1setInterruptSpeechCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::InterruptItemFunctor *arg2 = (ArSoundsQueue::InterruptItemFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = *(ArSoundsQueue::InterruptItemFunctor **)&jarg2; 
  (arg1)->setInterruptSpeechCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1setPlayFileCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg2 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = *(ArSoundsQueue::PlayItemFunctor **)&jarg2; 
  (arg1)->setPlayFileCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1setPlayWavFileCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::PlayItemFunctor *arg2 = (ArSoundsQueue::PlayItemFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = *(ArSoundsQueue::PlayItemFunctor **)&jarg2; 
  (arg1)->setPlayWavFileCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1setInterruptFileCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::InterruptItemFunctor *arg2 = (ArSoundsQueue::InterruptItemFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = *(ArSoundsQueue::InterruptItemFunctor **)&jarg2; 
  (arg1)->setInterruptFileCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1setInterruptWavFileCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::InterruptItemFunctor *arg2 = (ArSoundsQueue::InterruptItemFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = *(ArSoundsQueue::InterruptItemFunctor **)&jarg2; 
  (arg1)->setInterruptWavFileCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1speak(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->speak((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1play(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->play((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1createDefaultSpeechItem_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  char *arg2 = (char *) 0 ;
  ArSoundsQueue::Item result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->createDefaultSpeechItem((char const *)arg2);
  *(ArSoundsQueue::Item **)&jresult = new ArSoundsQueue::Item((const ArSoundsQueue::Item &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1createDefaultSpeechItem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::Item result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  result = (arg1)->createDefaultSpeechItem();
  *(ArSoundsQueue::Item **)&jresult = new ArSoundsQueue::Item((const ArSoundsQueue::Item &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1createDefaultFileItem_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  char *arg2 = (char *) 0 ;
  ArSoundsQueue::Item result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->createDefaultFileItem((char const *)arg2);
  *(ArSoundsQueue::Item **)&jresult = new ArSoundsQueue::Item((const ArSoundsQueue::Item &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1createDefaultFileItem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::Item result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  result = (arg1)->createDefaultFileItem();
  *(ArSoundsQueue::Item **)&jresult = new ArSoundsQueue::Item((const ArSoundsQueue::Item &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1setDefaultPlayConditionCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  ArSoundsQueue::PlaybackConditionFunctor *arg2 = (ArSoundsQueue::PlaybackConditionFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = *(ArSoundsQueue::PlaybackConditionFunctor **)&jarg2; 
  (arg1)->setDefaultPlayConditionCB(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSoundsQueue_1runThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ArSoundsQueue *arg1 = (ArSoundsQueue *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSoundsQueue **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (void *)(arg1)->runThread(arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArSpeechSynth(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSpeechSynth_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  result = (bool)(arg1)->init();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSpeechSynth_1addToConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  (arg1)->addToConfig(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSpeechSynth_1speak_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jint jarg5) {
  jboolean jresult = 0 ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArRetFunctor2< bool,ArTypes::Byte2 *,int > *arg4 = (ArRetFunctor2< bool,ArTypes::Byte2 *,int > *) 0 ;
  unsigned short arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArRetFunctor2< bool,ArTypes::Byte2 *,int > **)&jarg4; 
  arg5 = (unsigned short)jarg5; 
  result = (bool)(arg1)->speak((char const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSpeechSynth_1speak_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArRetFunctor2< bool,ArTypes::Byte2 *,int > *arg4 = (ArRetFunctor2< bool,ArTypes::Byte2 *,int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArRetFunctor2< bool,ArTypes::Byte2 *,int > **)&jarg4; 
  result = (bool)(arg1)->speak((char const *)arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSpeechSynth_1speak_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->speak((char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSpeechSynth_1speak_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->speak((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSpeechSynth_1speakf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->speakf((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSpeechSynth_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSpeechSynth_1getInitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  ArRetFunctorC< bool,ArSpeechSynth > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  result = (ArRetFunctorC< bool,ArSpeechSynth > *)(arg1)->getInitCallback();
  *(ArRetFunctorC< bool,ArSpeechSynth > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSpeechSynth_1getSpeakCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  ArRetFunctor2C< bool,ArSpeechSynth,char const *,char const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  result = (ArRetFunctor2C< bool,ArSpeechSynth,char const *,char const * > *)(arg1)->getSpeakCallback();
  *(ArRetFunctor2C< bool,ArSpeechSynth,char const *,char const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSpeechSynth_1getInterruptCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  ArFunctorC< ArSpeechSynth > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  result = (ArFunctorC< ArSpeechSynth > *)(arg1)->getInterruptCallback();
  *(ArFunctorC< ArSpeechSynth > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSpeechSynth_1setAudioCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  ArRetFunctor2< bool,ArTypes::Byte2 *,int > *arg2 = (ArRetFunctor2< bool,ArTypes::Byte2 *,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  arg2 = *(ArRetFunctor2< bool,ArTypes::Byte2 *,int > **)&jarg2; 
  (arg1)->setAudioCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSpeechSynth_1setAudioSampleRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setAudioSampleRate(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSpeechSynth_1getAudioSampleRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  result = (int)(arg1)->getAudioSampleRate();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSpeechSynth_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  (arg1)->lock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSpeechSynth_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  (arg1)->unlock();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSpeechSynth_1setVoice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->setVoice((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSpeechSynth_1getCurrentVoiceName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  result = (char *)(arg1)->getCurrentVoiceName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSpeechSynth_1getVoiceNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSpeechSynth *arg1 = (ArSpeechSynth *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSpeechSynth **)&jarg1; 
  result = (arg1)->getVoiceNames();
  *(std::list< std::string > **)&jresult = new std::list< std::string >((const std::list< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArStringInfoGroup(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArStringInfoGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArStringInfoGroup *)new ArStringInfoGroup();
  *(ArStringInfoGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArStringInfoGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArStringInfoGroup **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoGroup_1addString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArFunctor2< char *,ArTypes::UByte2 > *arg4 = (ArFunctor2< char *,ArTypes::UByte2 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArStringInfoGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = *(ArFunctor2< char *,ArTypes::UByte2 > **)&jarg4; 
  result = (bool)(arg1)->addString((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoGroup_1addStringInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jstring jarg5) {
  jboolean jresult = 0 ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< int > *arg4 = (ArRetFunctor< int > *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArStringInfoGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = *(ArRetFunctor< int > **)&jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (bool)(arg1)->addStringInt((char const *)arg2,arg3,arg4,(char const *)arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoGroup_1addStringInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< int > *arg4 = (ArRetFunctor< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArStringInfoGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = *(ArRetFunctor< int > **)&jarg4; 
  result = (bool)(arg1)->addStringInt((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoGroup_1addStringDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jstring jarg5) {
  jboolean jresult = 0 ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< double > *arg4 = (ArRetFunctor< double > *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArStringInfoGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = *(ArRetFunctor< double > **)&jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (bool)(arg1)->addStringDouble((char const *)arg2,arg3,arg4,(char const *)arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoGroup_1addStringDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< double > *arg4 = (ArRetFunctor< double > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArStringInfoGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = *(ArRetFunctor< double > **)&jarg4; 
  result = (bool)(arg1)->addStringDouble((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoGroup_1addStringBool_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jstring jarg5) {
  jboolean jresult = 0 ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< bool > *arg4 = (ArRetFunctor< bool > *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArStringInfoGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = *(ArRetFunctor< bool > **)&jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (bool)(arg1)->addStringBool((char const *)arg2,arg3,arg4,(char const *)arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoGroup_1addStringBool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< bool > *arg4 = (ArRetFunctor< bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArStringInfoGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = *(ArRetFunctor< bool > **)&jarg4; 
  result = (bool)(arg1)->addStringBool((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoGroup_1addStringString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< char const * > *arg4 = (ArRetFunctor< char const * > *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArStringInfoGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = *(ArRetFunctor< char const * > **)&jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (bool)(arg1)->addStringString((char const *)arg2,arg3,arg4,(char const *)arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoGroup_1addStringString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< char const * > *arg4 = (ArRetFunctor< char const * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArStringInfoGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = *(ArRetFunctor< char const * > **)&jarg4; 
  result = (bool)(arg1)->addStringString((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoGroup_1addStringUnsignedLong_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< unsigned long > *arg4 = (ArRetFunctor< unsigned long > *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArStringInfoGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = *(ArRetFunctor< unsigned long > **)&jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (bool)(arg1)->addStringUnsignedLong((char const *)arg2,arg3,arg4,(char const *)arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoGroup_1addStringUnsignedLong_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< unsigned long > *arg4 = (ArRetFunctor< unsigned long > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArStringInfoGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = *(ArRetFunctor< unsigned long > **)&jarg4; 
  result = (bool)(arg1)->addStringUnsignedLong((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoGroup_1addStringLong_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< long > *arg4 = (ArRetFunctor< long > *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArStringInfoGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = *(ArRetFunctor< long > **)&jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (bool)(arg1)->addStringLong((char const *)arg2,arg3,arg4,(char const *)arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoGroup_1addStringLong_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArRetFunctor< long > *arg4 = (ArRetFunctor< long > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArStringInfoGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = *(ArRetFunctor< long > **)&jarg4; 
  result = (bool)(arg1)->addStringLong((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoGroup_1addAddStringCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  ArFunctor3< char const *,ArTypes::UByte2,ArFunctor2< char *,ArTypes::UByte2 > * > *arg2 = (ArFunctor3< char const *,ArTypes::UByte2,ArFunctor2< char *,ArTypes::UByte2 > * > *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArStringInfoGroup **)&jarg1; 
  arg2 = *(ArFunctor3< char const *,ArTypes::UByte2,ArFunctor2< char *,ArTypes::UByte2 > * > **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addAddStringCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArStringInfoGroup_1addAddStringCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArStringInfoGroup *arg1 = (ArStringInfoGroup *) 0 ;
  ArFunctor3< char const *,ArTypes::UByte2,ArFunctor2< char *,ArTypes::UByte2 > * > *arg2 = (ArFunctor3< char const *,ArTypes::UByte2,ArFunctor2< char *,ArTypes::UByte2 > * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArStringInfoGroup **)&jarg1; 
  arg2 = *(ArFunctor3< char const *,ArTypes::UByte2,ArFunctor2< char *,ArTypes::UByte2 > * > **)&jarg2; 
  (arg1)->addAddStringCallback(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSyncLoop(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArSyncLoop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArSyncLoop *)new ArSyncLoop();
  *(ArSyncLoop **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArSyncLoop(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArSyncLoop *arg1 = (ArSyncLoop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArSyncLoop **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncLoop_1setRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSyncLoop *arg1 = (ArSyncLoop *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSyncLoop **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  (arg1)->setRobot(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncLoop_1stopRunIfNotConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArSyncLoop *arg1 = (ArSyncLoop *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSyncLoop **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->stopRunIfNotConnected(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncLoop_1runThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ArSyncLoop *arg1 = (ArSyncLoop *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSyncLoop **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (void *)(arg1)->runThread(arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncLoop_1getThreadActivity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArSyncLoop *arg1 = (ArSyncLoop *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSyncLoop **)&jarg1; 
  result = (char *)(arg1)->getThreadActivity();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSyncTask_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArTaskState::State *arg3 = (ArTaskState::State *) 0 ;
  ArSyncTask *arg4 = (ArSyncTask *) 0 ;
  ArSyncTask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = *(ArTaskState::State **)&jarg3; 
  arg4 = *(ArSyncTask **)&jarg4; 
  result = (ArSyncTask *)new ArSyncTask((char const *)arg1,arg2,arg3,arg4);
  *(ArSyncTask **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSyncTask_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArTaskState::State *arg3 = (ArTaskState::State *) 0 ;
  ArSyncTask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = *(ArTaskState::State **)&jarg3; 
  result = (ArSyncTask *)new ArSyncTask((char const *)arg1,arg2,arg3);
  *(ArSyncTask **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSyncTask_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArSyncTask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArFunctor **)&jarg2; 
  result = (ArSyncTask *)new ArSyncTask((char const *)arg1,arg2);
  *(ArSyncTask **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSyncTask_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArSyncTask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArSyncTask *)new ArSyncTask((char const *)arg1);
  *(ArSyncTask **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArSyncTask(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArSyncTask **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncTask_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSyncTask **)&jarg1; 
  (arg1)->run();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncTask_1log_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSyncTask **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->log(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncTask_1log_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSyncTask **)&jarg1; 
  (arg1)->log();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncTask_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  ArTaskState::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSyncTask **)&jarg1; 
  result = (ArTaskState::State)(arg1)->getState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncTask_1setState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  ArTaskState::State arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSyncTask **)&jarg1; 
  arg2 = (ArTaskState::State)jarg2; 
  (arg1)->setState(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncTask_1findNonRecursive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  char *arg2 = (char *) 0 ;
  ArSyncTask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSyncTask **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArSyncTask *)(arg1)->findNonRecursive((char const *)arg2);
  *(ArSyncTask **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncTask_1findNonRecursive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArSyncTask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSyncTask **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  result = (ArSyncTask *)(arg1)->findNonRecursive(arg2);
  *(ArSyncTask **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncTask_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  char *arg2 = (char *) 0 ;
  ArSyncTask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSyncTask **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArSyncTask *)(arg1)->find((char const *)arg2);
  *(ArSyncTask **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncTask_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArSyncTask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSyncTask **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  result = (ArSyncTask *)(arg1)->find(arg2);
  *(ArSyncTask **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncTask_1getRunning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  ArSyncTask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSyncTask **)&jarg1; 
  result = (ArSyncTask *)(arg1)->getRunning();
  *(ArSyncTask **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncTask_1addNewBranch_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  ArTaskState::State *arg4 = (ArTaskState::State *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSyncTask **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  arg4 = *(ArTaskState::State **)&jarg4; 
  (arg1)->addNewBranch((char const *)arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncTask_1addNewBranch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSyncTask **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  (arg1)->addNewBranch((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncTask_1addNewLeaf_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  ArFunctor *arg4 = (ArFunctor *) 0 ;
  ArTaskState::State *arg5 = (ArTaskState::State *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArSyncTask **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  arg4 = *(ArFunctor **)&jarg4; 
  arg5 = *(ArTaskState::State **)&jarg5; 
  (arg1)->addNewLeaf((char const *)arg2,arg3,arg4,arg5);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncTask_1addNewLeaf_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  ArFunctor *arg4 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArSyncTask **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  arg4 = *(ArFunctor **)&jarg4; 
  (arg1)->addNewLeaf((char const *)arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncTask_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSyncTask **)&jarg1; 
  result = (arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncTask_1getFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  ArFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSyncTask **)&jarg1; 
  result = (ArFunctor *)(arg1)->getFunctor();
  *(ArFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncTask_1setWarningTimeCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  ArRetFunctor< unsigned int > *arg2 = (ArRetFunctor< unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSyncTask **)&jarg1; 
  arg2 = *(ArRetFunctor< unsigned int > **)&jarg2; 
  (arg1)->setWarningTimeCB(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncTask_1getWarningTimeCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  ArRetFunctor< unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSyncTask **)&jarg1; 
  result = (ArRetFunctor< unsigned int > *)(arg1)->getWarningTimeCB();
  *(ArRetFunctor< unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncTask_1setNoTimeWarningCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  ArRetFunctor< bool > *arg2 = (ArRetFunctor< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSyncTask **)&jarg1; 
  arg2 = *(ArRetFunctor< bool > **)&jarg2; 
  (arg1)->setNoTimeWarningCB(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncTask_1getNoTimeWarningCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  ArRetFunctor< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSyncTask **)&jarg1; 
  result = (ArRetFunctor< bool > *)(arg1)->getNoTimeWarningCB();
  *(ArRetFunctor< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncTask_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  ArSyncTask *arg2 = (ArSyncTask *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArSyncTask **)&jarg1; 
  arg2 = *(ArSyncTask **)&jarg2; 
  (arg1)->remove(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSyncTask_1isDeleting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArSyncTask *arg1 = (ArSyncTask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSyncTask **)&jarg1; 
  result = (bool)(arg1)->isDeleting();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1startPeriodicUpdate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  int arg1 ;
  ArLog::LogLevel arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (ArLog::LogLevel)jarg2; 
  ArSystemStatus::startPeriodicUpdate(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1startPeriodicUpdate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  ArSystemStatus::startPeriodicUpdate(arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1startPeriodicUpdate_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArSystemStatus::startPeriodicUpdate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1stopPeriodicUpdate(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArSystemStatus::stopPeriodicUpdate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1runRefreshThread_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  ArSystemStatus::runRefreshThread(arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1runRefreshThread_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArSystemStatus::runRefreshThread();
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getCPU(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)ArSystemStatus::getCPU();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getCPUPercent(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)ArSystemStatus::getCPUPercent();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getCPUPercentAsString(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = ArSystemStatus::getCPUPercentAsString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getUptime(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned long)ArSystemStatus::getUptime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getProgramUptime(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned long)ArSystemStatus::getProgramUptime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getUptimeHours(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)ArSystemStatus::getUptimeHours();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getUptimeHoursAsString(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = ArSystemStatus::getUptimeHoursAsString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getCPUPercentFunctor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRetFunctor< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRetFunctor< double > *)ArSystemStatus::getCPUPercentFunctor();
  *(ArRetFunctor< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getUptimeHoursFunctor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRetFunctor< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRetFunctor< double > *)ArSystemStatus::getUptimeHoursFunctor();
  *(ArRetFunctor< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getUptimeFunctor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRetFunctor< unsigned long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRetFunctor< unsigned long > *)ArSystemStatus::getUptimeFunctor();
  *(ArRetFunctor< unsigned long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getProgramUptimeFunctor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRetFunctor< unsigned long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRetFunctor< unsigned long > *)ArSystemStatus::getProgramUptimeFunctor();
  *(ArRetFunctor< unsigned long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getWirelessLinkQuality(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArSystemStatus::getWirelessLinkQuality();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getWirelessLinkSignal(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArSystemStatus::getWirelessLinkSignal();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getWirelessLinkNoise(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArSystemStatus::getWirelessLinkNoise();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getWirelessDiscardedPackets(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArSystemStatus::getWirelessDiscardedPackets();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getWirelessDiscardedPacketsBecauseNetConflict(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArSystemStatus::getWirelessDiscardedPacketsBecauseNetConflict();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getMTXWirelessLink(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArSystemStatus::getMTXWirelessLink();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getMTXWirelessQuality(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArSystemStatus::getMTXWirelessQuality();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getMTXWirelessIpAddress1(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArSystemStatus::getMTXWirelessIpAddress1();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getMTXWirelessIpAddress2(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArSystemStatus::getMTXWirelessIpAddress2();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getMTXWirelessIpAddress3(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArSystemStatus::getMTXWirelessIpAddress3();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getMTXWirelessIpAddress4(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArSystemStatus::getMTXWirelessIpAddress4();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getMTXWirelessIpAddressString(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArSystemStatus::getMTXWirelessIpAddressString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getWirelessLinkQualityFunctor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRetFunctor< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRetFunctor< int > *)ArSystemStatus::getWirelessLinkQualityFunctor();
  *(ArRetFunctor< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getWirelessLinkNoiseFunctor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRetFunctor< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRetFunctor< int > *)ArSystemStatus::getWirelessLinkNoiseFunctor();
  *(ArRetFunctor< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getWirelessLinkSignalFunctor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRetFunctor< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRetFunctor< int > *)ArSystemStatus::getWirelessLinkSignalFunctor();
  *(ArRetFunctor< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getMTXWirelessLinkFunctor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRetFunctor< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRetFunctor< int > *)ArSystemStatus::getMTXWirelessLinkFunctor();
  *(ArRetFunctor< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1getMTXWirelessQualityFunctor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRetFunctor< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRetFunctor< int > *)ArSystemStatus::getMTXWirelessQualityFunctor();
  *(ArRetFunctor< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1invalidate(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArSystemStatus::invalidate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArSystemStatus_1refresh(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ArSystemStatus::refresh();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArSystemStatus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArSystemStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArSystemStatus *)new ArSystemStatus();
  *(ArSystemStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArSystemStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArSystemStatus *arg1 = (ArSystemStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArSystemStatus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ARTCM2_1DEFAULT_1SERIAL_1PORT_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *) "/dev/ttyS3";
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArTCM2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArTCM2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (bool)(arg1)->connect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1blockingConnect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  unsigned long arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (bool)(arg1)->blockingConnect(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1blockingConnect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (bool)(arg1)->blockingConnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1getHeading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (double)((ArTCM2 const *)arg1)->getHeading();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1haveHeading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (bool)((ArTCM2 const *)arg1)->haveHeading();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1getCompass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (double)((ArTCM2 const *)arg1)->getCompass();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1getPitch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (double)((ArTCM2 const *)arg1)->getPitch();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1havePitch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (bool)((ArTCM2 const *)arg1)->havePitch();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1getRoll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (double)((ArTCM2 const *)arg1)->getRoll();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1haveRoll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (bool)((ArTCM2 const *)arg1)->haveRoll();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1getXMagnetic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (double)((ArTCM2 const *)arg1)->getXMagnetic();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1haveXMagnetic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (bool)((ArTCM2 const *)arg1)->haveXMagnetic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1getYMagnetic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (double)((ArTCM2 const *)arg1)->getYMagnetic();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1haveYMagnetic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (bool)((ArTCM2 const *)arg1)->haveYMagnetic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1getZMagnetic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (double)((ArTCM2 const *)arg1)->getZMagnetic();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1haveZMagnetic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (bool)((ArTCM2 const *)arg1)->haveZMagnetic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1getTemperature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (double)((ArTCM2 const *)arg1)->getTemperature();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1haveTemperature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (bool)((ArTCM2 const *)arg1)->haveTemperature();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1getError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (int)((ArTCM2 const *)arg1)->getError();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1getCalibrationH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (double)((ArTCM2 const *)arg1)->getCalibrationH();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1haveCalibrationH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (bool)((ArTCM2 const *)arg1)->haveCalibrationH();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1getCalibrationV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (double)((ArTCM2 const *)arg1)->getCalibrationV();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1haveCalibrationV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (bool)((ArTCM2 const *)arg1)->haveCalibrationV();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1getCalibrationM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (double)((ArTCM2 const *)arg1)->getCalibrationM();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1haveCalibrationM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (bool)((ArTCM2 const *)arg1)->haveCalibrationM();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1commandOff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  (arg1)->commandOff();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1commandOnePacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  (arg1)->commandOnePacket();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1commandContinuousPackets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  (arg1)->commandContinuousPackets();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1commandUserCalibration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  (arg1)->commandUserCalibration();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1commandAutoCalibration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  (arg1)->commandAutoCalibration();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1commandStopCalibration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  (arg1)->commandStopCalibration();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1commandSoftReset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  (arg1)->commandSoftReset();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1commandJustCompass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  (arg1)->commandJustCompass();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1getPacCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  result = (int)(arg1)->getPacCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCM2_1addHeadingDataCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArTCM2 *arg1 = (ArTCM2 *) 0 ;
  ArFunctor1< double > *arg2 = (ArFunctor1< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCM2 **)&jarg1; 
  arg2 = *(ArFunctor1< double > **)&jarg2; 
  (arg1)->addHeadingDataCallback(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArCompassConnector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArCompassConnector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  result = (ArCompassConnector *)new ArCompassConnector(arg1);
  *(ArCompassConnector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArCompassConnector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArCompassConnector *arg1 = (ArCompassConnector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArCompassConnector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCompassConnector_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArCompassConnector *arg1 = (ArCompassConnector *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArTCM2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArCompassConnector **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (ArTCM2 *)(arg1)->create(arg2);
  *(ArTCM2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArCompassConnector_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArCompassConnector *arg1 = (ArCompassConnector *) 0 ;
  ArTCM2 *arg2 = (ArTCM2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArCompassConnector **)&jarg1; 
  arg2 = *(ArTCM2 **)&jarg2; 
  result = (bool)((ArCompassConnector const *)arg1)->connect(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArTCMCompassDirect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArDeviceConnection *arg1 = (ArDeviceConnection *) 0 ;
  ArTCMCompassDirect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArDeviceConnection **)&jarg1; 
  result = (ArTCMCompassDirect *)new ArTCMCompassDirect(arg1);
  *(ArTCMCompassDirect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArTCMCompassDirect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArTCMCompassDirect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArTCMCompassDirect *)new ArTCMCompassDirect((char const *)arg1);
  *(ArTCMCompassDirect **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArTCMCompassDirect_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArTCMCompassDirect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArTCMCompassDirect *)new ArTCMCompassDirect();
  *(ArTCMCompassDirect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArTCMCompassDirect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArTCMCompassDirect **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCMCompassDirect_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCMCompassDirect **)&jarg1; 
  result = (bool)(arg1)->connect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCMCompassDirect_1blockingConnect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  unsigned long arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCMCompassDirect **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (bool)(arg1)->blockingConnect(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCMCompassDirect_1blockingConnect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCMCompassDirect **)&jarg1; 
  result = (bool)(arg1)->blockingConnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCMCompassDirect_1commandAutoCalibration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCMCompassDirect **)&jarg1; 
  (arg1)->commandAutoCalibration();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCMCompassDirect_1commandUserCalibration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCMCompassDirect **)&jarg1; 
  (arg1)->commandUserCalibration();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCMCompassDirect_1commandStopCalibration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCMCompassDirect **)&jarg1; 
  (arg1)->commandStopCalibration();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCMCompassDirect_1commandContinuousPackets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCMCompassDirect **)&jarg1; 
  (arg1)->commandContinuousPackets();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCMCompassDirect_1commandOnePacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCMCompassDirect **)&jarg1; 
  (arg1)->commandOnePacket();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCMCompassDirect_1commandOff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCMCompassDirect **)&jarg1; 
  (arg1)->commandOff();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCMCompassDirect_1commandSoftReset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCMCompassDirect **)&jarg1; 
  (arg1)->commandSoftReset();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCMCompassDirect_1commandJustCompass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCMCompassDirect **)&jarg1; 
  (arg1)->commandJustCompass();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCMCompassDirect_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  unsigned int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCMCompassDirect **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->read(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCMCompassDirect_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCMCompassDirect **)&jarg1; 
  result = (int)(arg1)->read();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCMCompassDirect_1setDeviceConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  ArDeviceConnection *arg2 = (ArDeviceConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArTCMCompassDirect **)&jarg1; 
  arg2 = *(ArDeviceConnection **)&jarg2; 
  (arg1)->setDeviceConnection(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCMCompassDirect_1getDeviceConnetion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArTCMCompassDirect *arg1 = (ArTCMCompassDirect *) 0 ;
  ArDeviceConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCMCompassDirect **)&jarg1; 
  result = (ArDeviceConnection *)(arg1)->getDeviceConnetion();
  *(ArDeviceConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArTCMCompassRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArTCMCompassRobot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArTCMCompassRobot *)new ArTCMCompassRobot(arg1);
  *(ArTCMCompassRobot **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArTCMCompassRobot(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArTCMCompassRobot *arg1 = (ArTCMCompassRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArTCMCompassRobot **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCMCompassRobot_1commandOff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCMCompassRobot *arg1 = (ArTCMCompassRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCMCompassRobot **)&jarg1; 
  (arg1)->commandOff();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCMCompassRobot_1commandJustCompass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCMCompassRobot *arg1 = (ArTCMCompassRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCMCompassRobot **)&jarg1; 
  (arg1)->commandJustCompass();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCMCompassRobot_1commandOnePacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCMCompassRobot *arg1 = (ArTCMCompassRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCMCompassRobot **)&jarg1; 
  (arg1)->commandOnePacket();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCMCompassRobot_1commandContinuousPackets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCMCompassRobot *arg1 = (ArTCMCompassRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCMCompassRobot **)&jarg1; 
  (arg1)->commandContinuousPackets();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCMCompassRobot_1commandUserCalibration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCMCompassRobot *arg1 = (ArTCMCompassRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCMCompassRobot **)&jarg1; 
  (arg1)->commandUserCalibration();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCMCompassRobot_1commandAutoCalibration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCMCompassRobot *arg1 = (ArTCMCompassRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCMCompassRobot **)&jarg1; 
  (arg1)->commandAutoCalibration();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCMCompassRobot_1commandStopCalibration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCMCompassRobot *arg1 = (ArTCMCompassRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCMCompassRobot **)&jarg1; 
  (arg1)->commandStopCalibration();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTCMCompassRobot_1commandSoftReset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTCMCompassRobot *arg1 = (ArTCMCompassRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTCMCompassRobot **)&jarg1; 
  (arg1)->commandSoftReset();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTaskState_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArTaskState::State result;
  
  (void)jenv;
  (void)jcls;
  result = (ArTaskState::State)ArTaskState::INIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTaskState_1USER_1START_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArTaskState::State result;
  
  (void)jenv;
  (void)jcls;
  result = (ArTaskState::State)ArTaskState::USER_START;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArTaskState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArTaskState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArTaskState *)new ArTaskState();
  *(ArTaskState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArTaskState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArTaskState *arg1 = (ArTaskState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArTaskState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArTcpConnection(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArTcpConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArTcpConnection *)new ArTcpConnection();
  *(ArTcpConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArTcpConnection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArTcpConnection **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTcpConnection_1open_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTcpConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (int)(arg1)->open((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTcpConnection_1open_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTcpConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->open((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTcpConnection_1open_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTcpConnection **)&jarg1; 
  result = (int)(arg1)->open();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTcpConnection_1setPort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTcpConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  (arg1)->setPort((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTcpConnection_1setPort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTcpConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setPort((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTcpConnection_1setPort_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTcpConnection **)&jarg1; 
  (arg1)->setPort();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTcpConnection_1openSimple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTcpConnection **)&jarg1; 
  result = (bool)(arg1)->openSimple();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTcpConnection_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTcpConnection **)&jarg1; 
  result = (int)(arg1)->getStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTcpConnection_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTcpConnection **)&jarg1; 
  result = (bool)(arg1)->close();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTcpConnection_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTcpConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (int)(arg1)->read((char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTcpConnection_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTcpConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (unsigned int)jarg3; 
  result = (int)(arg1)->read((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTcpConnection_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTcpConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (unsigned int)jarg3; 
  result = (int)(arg1)->write((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTcpConnection_1getOpenMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTcpConnection **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getOpenMessage(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTcpConnection_1getTimeRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  int arg2 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTcpConnection **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getTimeRead(arg2);
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTcpConnection_1isTimeStamping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTcpConnection **)&jarg1; 
  result = (bool)(arg1)->isTimeStamping();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTcpConnection_1getHost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTcpConnection **)&jarg1; 
  result = (arg1)->getHost();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTcpConnection_1getPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTcpConnection **)&jarg1; 
  result = (int)(arg1)->getPort();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTcpConnection_1internalOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTcpConnection **)&jarg1; 
  result = (int)(arg1)->internalOpen();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTcpConnection_1setSocket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArTcpConnection **)&jarg1; 
  arg2 = *(ArSocket **)&jarg2; 
  (arg1)->setSocket(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTcpConnection_1getSocket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  ArSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTcpConnection **)&jarg1; 
  result = (ArSocket *)(arg1)->getSocket();
  *(ArSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTcpConnection_1setStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArTcpConnection *arg1 = (ArTcpConnection *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTcpConnection **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStatus(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTcpConnection_1OPEN_1NET_1FAIL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArTcpConnection::Open result;
  
  (void)jenv;
  (void)jcls;
  result = (ArTcpConnection::Open)ArTcpConnection::OPEN_NET_FAIL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArTransform_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArTransform *)new ArTransform();
  *(ArTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArTransform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArPose arg1 ;
  ArPose *argp1 ;
  ArTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(ArPose **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg1 = *argp1; 
  result = (ArTransform *)new ArTransform(arg1);
  *(ArTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArTransform_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArPose arg1 ;
  ArPose arg2 ;
  ArPose *argp1 ;
  ArPose *argp2 ;
  ArTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(ArPose **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg2 = *argp2; 
  result = (ArTransform *)new ArTransform(arg1,arg2);
  *(ArTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArTransform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArTransform *arg1 = (ArTransform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArTransform **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTransform_1doTransform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArTransform *arg1 = (ArTransform *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArTransform **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->doTransform(arg2);
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTransform_1doTransform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArTransform *arg1 = (ArTransform *) 0 ;
  ArPoseWithTime arg2 ;
  ArPoseWithTime *argp2 ;
  ArPoseWithTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArTransform **)&jarg1; 
  argp2 = *(ArPoseWithTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPoseWithTime");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->doTransform(arg2);
  *(ArPoseWithTime **)&jresult = new ArPoseWithTime((const ArPoseWithTime &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTransform_1doInvTransform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArTransform *arg1 = (ArTransform *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArTransform **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->doInvTransform(arg2);
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTransform_1doInvTransform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArTransform *arg1 = (ArTransform *) 0 ;
  ArPoseWithTime arg2 ;
  ArPoseWithTime *argp2 ;
  ArPoseWithTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArTransform **)&jarg1; 
  argp2 = *(ArPoseWithTime **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPoseWithTime");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->doInvTransform(arg2);
  *(ArPoseWithTime **)&jresult = new ArPoseWithTime((const ArPoseWithTime &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTransform_1doTransform_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArTransform *arg1 = (ArTransform *) 0 ;
  std::list< ArPose * > *arg2 = (std::list< ArPose * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArTransform **)&jarg1; 
  arg2 = *(std::list< ArPose * > **)&jarg2; 
  (arg1)->doTransform(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTransform_1doTransform_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArTransform *arg1 = (ArTransform *) 0 ;
  std::list< ArPoseWithTime * > *arg2 = (std::list< ArPoseWithTime * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArTransform **)&jarg1; 
  arg2 = *(std::list< ArPoseWithTime * > **)&jarg2; 
  (arg1)->doTransform(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTransform_1setTransform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArTransform *arg1 = (ArTransform *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArTransform **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setTransform(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTransform_1setTransform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArTransform *arg1 = (ArTransform *) 0 ;
  ArPose arg2 ;
  ArPose arg3 ;
  ArPose *argp2 ;
  ArPose *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArTransform **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(ArPose **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setTransform(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTransform_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArTransform *arg1 = (ArTransform *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTransform **)&jarg1; 
  result = (double)(arg1)->getX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTransform_1getY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArTransform *arg1 = (ArTransform *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTransform **)&jarg1; 
  result = (double)(arg1)->getY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTransform_1getTh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArTransform *arg1 = (ArTransform *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTransform **)&jarg1; 
  result = (double)(arg1)->getTh();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTransform_1setTransformLowLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  ArTransform *arg1 = (ArTransform *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTransform **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setTransformLowLevel(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArTrimbleGPS(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArTrimbleGPS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArTrimbleGPS *)new ArTrimbleGPS();
  *(ArTrimbleGPS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArTrimbleGPS(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArTrimbleGPS *arg1 = (ArTrimbleGPS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArTrimbleGPS **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArTrimbleGPS_1sendTSIPCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArTrimbleGPS *arg1 = (ArTrimbleGPS *) 0 ;
  char arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArTrimbleGPS **)&jarg1; 
  arg2 = (char)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  result = (bool)(arg1)->sendTSIPCommand(arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArUrg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  ArUrg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArUrg *)new ArUrg(arg1,(char const *)arg2);
  *(ArUrg **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArUrg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  ArUrg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (ArUrg *)new ArUrg(arg1);
  *(ArUrg **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArUrg(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArUrg *arg1 = (ArUrg *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArUrg **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUrg_1blockingConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArUrg *arg1 = (ArUrg *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArUrg **)&jarg1; 
  result = (bool)(arg1)->blockingConnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUrg_1asyncConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArUrg *arg1 = (ArUrg *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArUrg **)&jarg1; 
  result = (bool)(arg1)->asyncConnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUrg_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArUrg *arg1 = (ArUrg *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArUrg **)&jarg1; 
  result = (bool)(arg1)->disconnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUrg_1isConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArUrg *arg1 = (ArUrg *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArUrg **)&jarg1; 
  result = (bool)(arg1)->isConnected();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUrg_1isTryingToConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArUrg *arg1 = (ArUrg *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArUrg **)&jarg1; 
  result = (bool)(arg1)->isTryingToConnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArUrg_1log(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArUrg *arg1 = (ArUrg *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArUrg **)&jarg1; 
  (arg1)->log();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_MAX_1RESPONSE_1BYTES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 14;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_BIDIRECTIONAL_1TIMEOUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 5000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_UNIDIRECTIONAL_1TIMEOUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 300;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_AUTO_1UPDATE_1TIME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 2000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_TOLERANCE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double) .1;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1DELIM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::DELIM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1DEVICEID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::DEVICEID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1PANSLEW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::PANSLEW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1TILTSLEW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::TILTSLEW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1STOP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::STOP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::INIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1SLEWREQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::SLEWREQ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1ANGLEREQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::ANGLEREQ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1PANTILT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::PANTILT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1SETRANGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::SETRANGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1PANTILTREQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::PANTILTREQ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1INFRARED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::INFRARED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1PRODUCTNAME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::PRODUCTNAME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1LEDCONTROL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::LEDCONTROL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1CONTROL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::CONTROL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1POWER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::POWER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1AUTOFOCUS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::AUTOFOCUS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1ZOOMSTOP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::ZOOMSTOP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1GAIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::GAIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1FOCUS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::FOCUS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1ZOOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::ZOOM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1ZOOMREQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::ZOOMREQ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1IRCUTFILTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::IRCUTFILTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1DIGITALZOOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::DIGITALZOOM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1FOOTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::FOOTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1RESPONSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::RESPONSE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Commands_1HEADER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArVCC4Commands::Command result;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands::Command)ArVCC4Commands::HEADER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArVCC4Commands(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArVCC4Commands *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Commands *)new ArVCC4Commands();
  *(ArVCC4Commands **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArVCC4Commands(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArVCC4Commands *arg1 = (ArVCC4Commands *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArVCC4Commands **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArVCC4Packet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  ArTypes::UByte2 arg1 ;
  ArVCC4Packet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArTypes::UByte2)jarg1; 
  result = (ArVCC4Packet *)new ArVCC4Packet(arg1);
  *(ArVCC4Packet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArVCC4Packet_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArVCC4Packet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArVCC4Packet *)new ArVCC4Packet();
  *(ArVCC4Packet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArVCC4Packet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArVCC4Packet *arg1 = (ArVCC4Packet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArVCC4Packet **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Packet_1byte2ToBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArVCC4Packet *arg1 = (ArVCC4Packet *) 0 ;
  ArTypes::Byte4 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4Packet **)&jarg1; 
  arg2 = (ArTypes::Byte4)jarg2; 
  (arg1)->byte2ToBuf(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4Packet_1finalizePacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArVCC4Packet *arg1 = (ArVCC4Packet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4Packet **)&jarg1; 
  (arg1)->finalizePacket();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArVCC4_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3, jboolean jarg4, jboolean jarg5, jint jarg6) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  ArVCC4::CommState arg3 ;
  bool arg4 ;
  bool arg5 ;
  ArVCC4::CameraType arg6 ;
  ArVCC4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (ArVCC4::CommState)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (ArVCC4::CameraType)jarg6; 
  result = (ArVCC4 *)new ArVCC4(arg1,arg2,arg3,arg4,arg5,arg6);
  *(ArVCC4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArVCC4_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3, jboolean jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  ArVCC4::CommState arg3 ;
  bool arg4 ;
  bool arg5 ;
  ArVCC4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (ArVCC4::CommState)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (ArVCC4 *)new ArVCC4(arg1,arg2,arg3,arg4,arg5);
  *(ArVCC4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArVCC4_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  ArVCC4::CommState arg3 ;
  bool arg4 ;
  ArVCC4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (ArVCC4::CommState)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArVCC4 *)new ArVCC4(arg1,arg2,arg3,arg4);
  *(ArVCC4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArVCC4_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  ArVCC4::CommState arg3 ;
  ArVCC4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (ArVCC4::CommState)jarg3; 
  result = (ArVCC4 *)new ArVCC4(arg1,arg2,arg3);
  *(ArVCC4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArVCC4_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  bool arg2 ;
  ArVCC4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ArVCC4 *)new ArVCC4(arg1,arg2);
  *(ArVCC4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArVCC4_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArRobot *arg1 = (ArRobot *) 0 ;
  ArVCC4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  result = (ArVCC4 *)new ArVCC4(arg1);
  *(ArVCC4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArVCC4(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArVCC4 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1power(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->power(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1getPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (bool)(arg1)->getPower();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (bool)(arg1)->init();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1getTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (char *)(arg1)->getTypeName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1isInitted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (bool)(arg1)->isInitted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1connectHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  (arg1)->connectHandler();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1packetHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  ArBasePacket *arg2 = (ArBasePacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArVCC4 **)&jarg1; 
  arg2 = *(ArBasePacket **)&jarg2; 
  result = (bool)(arg1)->packetHandler(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1getRealPanTilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  (arg1)->getRealPanTilt();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1getRealZoomPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  (arg1)->getRealZoomPos();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1canZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (bool)((ArVCC4 const *)arg1)->canZoom();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1zoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->zoom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1digitalZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->digitalZoom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1addErrorCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArVCC4 **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addErrorCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1remErrorCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArVCC4 **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remErrorCB(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1haltPanTilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (bool)(arg1)->haltPanTilt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1haltZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (bool)(arg1)->haltZoom();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1panSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->panSlew(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1tiltSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->tiltSlew(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1canSetPanTiltSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (bool)(arg1)->canSetPanTiltSlew();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1preparePacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  ArVCC4Packet *arg2 = (ArVCC4Packet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArVCC4 **)&jarg1; 
  arg2 = *(ArVCC4Packet **)&jarg2; 
  (arg1)->preparePacket(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1getZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (int)((ArVCC4 const *)arg1)->getZoom();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1getDigitalZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (double)((ArVCC4 const *)arg1)->getDigitalZoom();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1canGetRealPanTilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (bool)((ArVCC4 const *)arg1)->canGetRealPanTilt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1canGetRealZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (bool)((ArVCC4 const *)arg1)->canGetRealZoom();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1canSetFocus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (bool)((ArVCC4 const *)arg1)->canSetFocus();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1autoFocus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (bool)(arg1)->autoFocus();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1manualFocus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (bool)(arg1)->manualFocus();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1focusNear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (bool)(arg1)->focusNear();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1focusFar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (bool)(arg1)->focusFar();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1setAutoFocus_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setAutoFocus(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1setAutoFocus_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (bool)(arg1)->setAutoFocus();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1getPanSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (double)(arg1)->getPanSlew();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1getMaxPanSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (double)(arg1)->getMaxPanSlew();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1getMinPanSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (double)(arg1)->getMinPanSlew();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1getTiltSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (double)(arg1)->getTiltSlew();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1getMaxTiltSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (double)(arg1)->getMaxTiltSlew();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1getMinTiltSlew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (double)(arg1)->getMinTiltSlew();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1getMaxZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (int)((ArVCC4 const *)arg1)->getMaxZoom();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1getMinZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (int)((ArVCC4 const *)arg1)->getMinZoom();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1canGetFOV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (bool)(arg1)->canGetFOV();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1getFOVAtMaxZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (double)(arg1)->getFOVAtMaxZoom();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1getFOVAtMinZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (double)(arg1)->getFOVAtMinZoom();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1wasError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (bool)(arg1)->wasError();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1enableAutoUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  (arg1)->enableAutoUpdate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1disableAutoUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  (arg1)->disableAutoUpdate();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1getAutoUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (bool)(arg1)->getAutoUpdate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1setLEDControlMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLEDControlMode(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1enableIRLEDs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  (arg1)->enableIRLEDs();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1disableIRLEDs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  (arg1)->disableIRLEDs();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1getIRLEDsEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (bool)(arg1)->getIRLEDsEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1enableIRFilterMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  (arg1)->enableIRFilterMode();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1disableIRFilterMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  (arg1)->disableIRFilterMode();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVCC4_1getIRFilterModeEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArVCC4 *arg1 = (ArVCC4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVCC4 **)&jarg1; 
  result = (bool)(arg1)->getIRFilterModeEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArVersalogicIO_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArVersalogicIO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArVersalogicIO *)new ArVersalogicIO((char const *)arg1);
  *(ArVersalogicIO **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArVersalogicIO_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArVersalogicIO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArVersalogicIO *)new ArVersalogicIO();
  *(ArVersalogicIO **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArVersalogicIO(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArVersalogicIO **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVersalogicIO_1closeIO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVersalogicIO **)&jarg1; 
  result = (bool)(arg1)->closeIO();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVersalogicIO_1isEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVersalogicIO **)&jarg1; 
  result = (bool)(arg1)->isEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVersalogicIO_1isAnalogSupported(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVersalogicIO **)&jarg1; 
  result = (bool)(arg1)->isAnalogSupported();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVersalogicIO_1getAnalogValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVersalogicIO **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getAnalogValue(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVersalogicIO_1getAnalogValueRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVersalogicIO **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (bool)(arg1)->getAnalogValueRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVersalogicIO_1getDigitalBankDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  int arg2 ;
  ArVersalogicIO::Direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVersalogicIO **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ArVersalogicIO::Direction)(arg1)->getDigitalBankDirection(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVersalogicIO_1setDigitalBankDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  int arg2 ;
  ArVersalogicIO::Direction arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVersalogicIO **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ArVersalogicIO::Direction)jarg3; 
  result = (bool)(arg1)->setDigitalBankDirection(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVersalogicIO_1getDigitalBankInputs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVersalogicIO **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(unsigned char **)&jarg3; 
  result = (bool)(arg1)->getDigitalBankInputs(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVersalogicIO_1getDigitalBankOutputs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVersalogicIO **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(unsigned char **)&jarg3; 
  result = (bool)(arg1)->getDigitalBankOutputs(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVersalogicIO_1setDigitalBankOutputs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  jboolean jresult = 0 ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVersalogicIO **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char)jarg3; 
  result = (bool)(arg1)->setDigitalBankOutputs(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVersalogicIO_1getSpecialControlRegister(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVersalogicIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getSpecialControlRegister(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVersalogicIO_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVersalogicIO **)&jarg1; 
  result = (int)(arg1)->lock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVersalogicIO_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVersalogicIO **)&jarg1; 
  result = (int)(arg1)->unlock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArVersalogicIO_1tryLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArVersalogicIO *arg1 = (ArVersalogicIO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArVersalogicIO **)&jarg1; 
  result = (int)(arg1)->tryLock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMTXIO_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArMTXIO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArMTXIO *)new ArMTXIO((char const *)arg1);
  *(ArMTXIO **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArMTXIO_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArMTXIO *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArMTXIO *)new ArMTXIO();
  *(ArMTXIO **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArMTXIO(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArMTXIO **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1closeIO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  result = (bool)(arg1)->closeIO();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1isEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  result = (bool)(arg1)->isEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1isAnalogSupported(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  result = (bool)(arg1)->isAnalogSupported();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getAnalogValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->getAnalogValue(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getAnalogValueRaw_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (bool)(arg1)->getAnalogValueRaw(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getDigitalBankDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  ArMTXIO::Direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ArMTXIO::Direction)(arg1)->getDigitalBankDirection(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1setDigitalBankOutputs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char)jarg3; 
  result = (bool)(arg1)->setDigitalBankOutputs(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getDigitalBankInputs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(unsigned char **)&jarg3; 
  result = (bool)(arg1)->getDigitalBankInputs(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getDigitalBankOutputs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(unsigned char **)&jarg3; 
  result = (bool)(arg1)->getDigitalBankOutputs(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1setDigitalOutputBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->setDigitalOutputBit(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getDigitalInputBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->getDigitalInputBit(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1setPeripheralPowerBankOutputs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char)jarg3; 
  result = (bool)(arg1)->setPeripheralPowerBankOutputs(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getPeripheralPowerBankOutputs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(unsigned char **)&jarg3; 
  result = (bool)(arg1)->getPeripheralPowerBankOutputs(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1setPowerOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->setPowerOutput(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  result = (int)(arg1)->lock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  result = (int)(arg1)->unlock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1tryLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  result = (int)(arg1)->tryLock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getFirmwareRevision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  result = (unsigned char)(arg1)->getFirmwareRevision();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getFirmwareVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  result = (unsigned char)(arg1)->getFirmwareVersion();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getCompatibilityCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  result = (unsigned char)(arg1)->getCompatibilityCode();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getFPGAType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  result = (unsigned char)(arg1)->getFPGAType();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getDigitalIOInputMon1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getDigitalIOInputMon1(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getDigitalIOInputMon2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getDigitalIOInputMon2(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getDigitalIOOutputMon1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getDigitalIOOutputMon1(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getDigitalIOOutputMon2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getDigitalIOOutputMon2(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getLightPole(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getLightPole(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1setLightPole(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->setLightPole(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getLPCTimeUSec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  ArTypes::UByte4 *arg2 = (ArTypes::UByte4 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(ArTypes::UByte4 **)&jarg2; 
  result = (bool)(arg1)->getLPCTimeUSec(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getLPCTimeUSecCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  ArRetFunctor1< bool,ArTypes::UByte4 * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  result = (ArRetFunctor1< bool,ArTypes::UByte4 * > *)(arg1)->getLPCTimeUSecCB();
  *(ArRetFunctor1< bool,ArTypes::UByte4 * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1setSemaphore1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->setSemaphore1(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getSemaphore1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getSemaphore1(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1setSemaphore2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->setSemaphore2(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getSemaphore2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getSemaphore2(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1setSemaphore3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->setSemaphore3(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getSemaphore3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getSemaphore3(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1setSemaphore4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->setSemaphore4(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getSemaphore4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getSemaphore4(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getBumperInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getBumperInput(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getPowerStatus1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getPowerStatus1(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getPowerStatus2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getPowerStatus2(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getLIDARSafety(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getLIDARSafety(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getESTOPStatus1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getESTOPStatus1(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getESTOPStatus2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getESTOPStatus2(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getESTOPStatus3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getESTOPStatus3(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getESTOPStatus4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getESTOPStatus4(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1compareESTOPStatus4HighNibbleAgainst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->compareESTOPStatus4HighNibbleAgainst(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getDigitalOutputControl1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getDigitalOutputControl1(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1setDigitalOutputControl1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->setDigitalOutputControl1(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getDigitalOutputControl2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getDigitalOutputControl2(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1setDigitalOutputControl2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->setDigitalOutputControl2(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getPeripheralPower1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getPeripheralPower1(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1setPeripheralPower1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->setPeripheralPower1(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getPeripheralPower2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getPeripheralPower2(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1setPeripheralPower2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->setPeripheralPower2(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getPeripheralPower3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getPeripheralPower3(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1setPeripheralPower3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->setPeripheralPower3(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getMotionPowerStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getMotionPowerStatus(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getLIDARControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->getLIDARControl(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1setLIDARControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  result = (bool)(arg1)->setLIDARControl(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getAnalogIOBlock1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(unsigned short **)&jarg3; 
  result = (bool)(arg1)->getAnalogIOBlock1(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getAnalogIOBlock2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(unsigned short **)&jarg3; 
  result = (bool)(arg1)->getAnalogIOBlock2(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1setAnalogIOBlock2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int arg2 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(unsigned short **)&jarg3; 
  result = (bool)(arg1)->setAnalogIOBlock2(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getAnalogValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->getAnalogValue(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArMTXIO_1getAnalogValueRaw_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArMTXIO *arg1 = (ArMTXIO *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArMTXIO **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  result = (bool)(arg1)->getAnalogValueRaw(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1init_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2, jboolean jarg3) {
  Aria::SigHandleMethod arg1 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Aria::SigHandleMethod)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  Aria::init(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1init_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  Aria::SigHandleMethod arg1 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Aria::SigHandleMethod)jarg1; 
  arg2 = jarg2 ? true : false; 
  Aria::init(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1init_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  Aria::SigHandleMethod arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Aria::SigHandleMethod)jarg1; 
  Aria::init(arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1init_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  Aria::init();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1uninit(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  Aria::uninit();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1addInitCallBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  ArListPos::Pos arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor **)&jarg1; 
  arg2 = (ArListPos::Pos)jarg2; 
  Aria::addInitCallBack(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1addUninitCallBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  ArListPos::Pos arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor **)&jarg1; 
  arg2 = (ArListPos::Pos)jarg2; 
  Aria::addUninitCallBack(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1shutdown(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  Aria::shutdown();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1exit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  Aria::exit(arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1exit_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  Aria::exit();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1getRunning(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)Aria::getRunning();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1setDirectory(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  Aria::setDirectory((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1getDirectory(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)Aria::getDirectory();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1parseArgs(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)Aria::parseArgs();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1logOptions(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  Aria::logOptions();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1setKeyHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArKeyHandler *arg1 = (ArKeyHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArKeyHandler **)&jarg1; 
  Aria::setKeyHandler(arg1);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1getKeyHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArKeyHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArKeyHandler *)Aria::getKeyHandler();
  *(ArKeyHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1setJoyHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArJoyHandler *arg1 = (ArJoyHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyHandler **)&jarg1; 
  Aria::setJoyHandler(arg1);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1getJoyHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArJoyHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArJoyHandler *)Aria::getJoyHandler();
  *(ArJoyHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1addExitCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor **)&jarg1; 
  arg2 = (int)jarg2; 
  Aria::addExitCallback(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1addExitCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor **)&jarg1; 
  Aria::addExitCallback(arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1remExitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor **)&jarg1; 
  Aria::remExitCallback(arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1setExitCallbacksLogLevel(JNIEnv *jenv, jclass jcls, jint jarg1) {
  ArLog::LogLevel arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArLog::LogLevel)jarg1; 
  Aria::setExitCallbacksLogLevel(arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1exitOld_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  Aria::exitOld(arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1exitOld_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  Aria::exitOld();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1signalHandlerCB(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  Aria::signalHandlerCB(arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1callExitCallbacks(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  Aria::callExitCallbacks();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1addParseArgsCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor< bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  Aria::addParseArgsCB(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1addParseArgsCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRetFunctor< bool > *arg1 = (ArRetFunctor< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRetFunctor< bool > **)&jarg1; 
  Aria::addParseArgsCB(arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1setParseArgLogLevel(JNIEnv *jenv, jclass jcls, jint jarg1) {
  ArLog::LogLevel arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArLog::LogLevel)jarg1; 
  Aria::setParseArgLogLevel(arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1addLogOptionsCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor **)&jarg1; 
  arg2 = (int)jarg2; 
  Aria::addLogOptionsCB(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1addLogOptionsCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArFunctor *arg1 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor **)&jarg1; 
  Aria::addLogOptionsCB(arg1);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1deviceConnectionAddCreator(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArRetFunctor3< ArDeviceConnection *,char const *,char const *,char const * > *arg2 = (ArRetFunctor3< ArDeviceConnection *,char const *,char const *,char const * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArRetFunctor3< ArDeviceConnection *,char const *,char const *,char const * > **)&jarg2; 
  result = (bool)Aria::deviceConnectionAddCreator((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1deviceConnectionGetTypes(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)Aria::deviceConnectionGetTypes();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1deviceConnectionGetChoices(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)Aria::deviceConnectionGetChoices();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1deviceConnectionCreate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  ArDeviceConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (ArDeviceConnection *)Aria::deviceConnectionCreate((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  *(ArDeviceConnection **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1deviceConnectionCreate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArDeviceConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArDeviceConnection *)Aria::deviceConnectionCreate((char const *)arg1,(char const *)arg2,(char const *)arg3);
  *(ArDeviceConnection **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1setRobotJoyHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobotJoyHandler *arg1 = (ArRobotJoyHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobotJoyHandler **)&jarg1; 
  Aria::setRobotJoyHandler(arg1);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1getRobotJoyHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArRobotJoyHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArRobotJoyHandler *)Aria::getRobotJoyHandler();
  *(ArRobotJoyHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1getConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArConfig *)Aria::getConfig();
  *(ArConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1getInfoGroup(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArStringInfoGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArStringInfoGroup *)Aria::getInfoGroup();
  *(ArStringInfoGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1addRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  Aria::addRobot(arg1);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1delRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArRobot *arg1 = (ArRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArRobot **)&jarg1; 
  Aria::delRobot(arg1);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1findRobot(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArRobot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArRobot *)Aria::findRobot(arg1);
  *(ArRobot **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1getRobotList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< ArRobot * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< ArRobot * > *)Aria::getRobotList();
  *(std::list< ArRobot * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1getMaxNumLasers(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Aria::getMaxNumLasers();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1setMaxNumLasers(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  Aria::setMaxNumLasers(arg1);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1getMaxNumSonarBoards(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Aria::getMaxNumSonarBoards();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1setMaxNumSonarBoards(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  Aria::setMaxNumSonarBoards(arg1);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1getMaxNumBatteries(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Aria::getMaxNumBatteries();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1setMaxNumBatteries(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  Aria::setMaxNumBatteries(arg1);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1getMaxNumLCDs(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Aria::getMaxNumLCDs();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1setMaxNumLCDs(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  Aria::setMaxNumLCDs(arg1);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1laserCreate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  ArLaser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArLaser *)Aria::laserCreate((char const *)arg1,arg2,(char const *)arg3);
  *(ArLaser **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1laserCreate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ArLaser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (ArLaser *)Aria::laserCreate((char const *)arg1,arg2);
  *(ArLaser **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1laserAddCreator(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArRetFunctor2< ArLaser *,int,char const * > *arg2 = (ArRetFunctor2< ArLaser *,int,char const * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArRetFunctor2< ArLaser *,int,char const * > **)&jarg2; 
  result = (bool)Aria::laserAddCreator((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1laserGetTypes(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)Aria::laserGetTypes();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1laserGetChoices(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)Aria::laserGetChoices();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1batteryCreate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  ArBatteryMTX *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArBatteryMTX *)Aria::batteryCreate((char const *)arg1,arg2,(char const *)arg3);
  *(ArBatteryMTX **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1batteryCreate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ArBatteryMTX *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (ArBatteryMTX *)Aria::batteryCreate((char const *)arg1,arg2);
  *(ArBatteryMTX **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1batteryAddCreator(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArRetFunctor2< ArBatteryMTX *,int,char const * > *arg2 = (ArRetFunctor2< ArBatteryMTX *,int,char const * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArRetFunctor2< ArBatteryMTX *,int,char const * > **)&jarg2; 
  result = (bool)Aria::batteryAddCreator((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1batteryGetTypes(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)Aria::batteryGetTypes();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1batteryGetChoices(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)Aria::batteryGetChoices();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1lcdCreate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  ArLCDMTX *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArLCDMTX *)Aria::lcdCreate((char const *)arg1,arg2,(char const *)arg3);
  *(ArLCDMTX **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1lcdCreate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ArLCDMTX *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (ArLCDMTX *)Aria::lcdCreate((char const *)arg1,arg2);
  *(ArLCDMTX **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1lcdAddCreator(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArRetFunctor2< ArLCDMTX *,int,char const * > *arg2 = (ArRetFunctor2< ArLCDMTX *,int,char const * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArRetFunctor2< ArLCDMTX *,int,char const * > **)&jarg2; 
  result = (bool)Aria::lcdAddCreator((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1lcdGetTypes(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)Aria::lcdGetTypes();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1lcdGetChoices(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)Aria::lcdGetChoices();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1sonarCreate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  ArSonarMTX *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArSonarMTX *)Aria::sonarCreate((char const *)arg1,arg2,(char const *)arg3);
  *(ArSonarMTX **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1sonarCreate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ArSonarMTX *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (ArSonarMTX *)Aria::sonarCreate((char const *)arg1,arg2);
  *(ArSonarMTX **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1sonarAddCreator(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArRetFunctor2< ArSonarMTX *,int,char const * > *arg2 = (ArRetFunctor2< ArSonarMTX *,int,char const * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArRetFunctor2< ArSonarMTX *,int,char const * > **)&jarg2; 
  result = (bool)Aria::sonarAddCreator((char const *)arg1,arg2);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1sonarGetTypes(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)Aria::sonarGetTypes();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1sonarGetChoices(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)Aria::sonarGetChoices();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1setMaxNumVideoDevices(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  size_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  Aria::setMaxNumVideoDevices(arg1);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1getMaxNumVideoDevices(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = Aria::getMaxNumVideoDevices();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1setMaxNumPTZs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  size_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  Aria::setMaxNumPTZs(arg1);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1getMaxNumPTZs(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = Aria::getMaxNumPTZs();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1getIdentifier(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)Aria::getIdentifier();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_Aria_1setIdentifier(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  Aria::setIdentifier((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1Aria(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Aria *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Aria *)new Aria();
  *(Aria **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1Aria(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Aria *arg1 = (Aria *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Aria **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1Bool_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg_Bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArConfigArg_Bool *)new ArConfigArg_Bool((char const *)arg1,arg2,(char const *)arg3);
  *(ArConfigArg_Bool **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1Bool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ArConfigArg_Bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  result = (ArConfigArg_Bool *)new ArConfigArg_Bool((char const *)arg1,arg2);
  *(ArConfigArg_Bool **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArConfigArg_1Bool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArConfigArg_Bool *arg1 = (ArConfigArg_Bool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArConfigArg_Bool **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1Int_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  ArConfigArg_Int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (ArConfigArg_Int *)new ArConfigArg_Int((char const *)arg1,arg2,(char const *)arg3,arg4,arg5);
  *(ArConfigArg_Int **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1Int_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  ArConfigArg_Int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (ArConfigArg_Int *)new ArConfigArg_Int((char const *)arg1,arg2,(char const *)arg3,arg4);
  *(ArConfigArg_Int **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1Int_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg_Int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArConfigArg_Int *)new ArConfigArg_Int((char const *)arg1,arg2,(char const *)arg3);
  *(ArConfigArg_Int **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1Int_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ArConfigArg_Int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (ArConfigArg_Int *)new ArConfigArg_Int((char const *)arg1,arg2);
  *(ArConfigArg_Int **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArConfigArg_1Int(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArConfigArg_Int *arg1 = (ArConfigArg_Int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArConfigArg_Int **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1Double_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jstring jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  double arg5 ;
  ArConfigArg_Double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (ArConfigArg_Double *)new ArConfigArg_Double((char const *)arg1,arg2,(char const *)arg3,arg4,arg5);
  *(ArConfigArg_Double **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1Double_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jstring jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  ArConfigArg_Double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  result = (ArConfigArg_Double *)new ArConfigArg_Double((char const *)arg1,arg2,(char const *)arg3,arg4);
  *(ArConfigArg_Double **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1Double_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg_Double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArConfigArg_Double *)new ArConfigArg_Double((char const *)arg1,arg2,(char const *)arg3);
  *(ArConfigArg_Double **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1Double_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  ArConfigArg_Double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  result = (ArConfigArg_Double *)new ArConfigArg_Double((char const *)arg1,arg2);
  *(ArConfigArg_Double **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArConfigArg_1Double(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArConfigArg_Double *arg1 = (ArConfigArg_Double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArConfigArg_Double **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArConfigArg_1String(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArConfigArg_String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArConfigArg_String *)new ArConfigArg_String((char const *)arg1,arg2,(char const *)arg3);
  *(ArConfigArg_String **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArConfigArg_1String(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArConfigArg_String *arg1 = (ArConfigArg_String *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArConfigArg_String **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyVec3f_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArJoyVec3f *arg1 = (ArJoyVec3f *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyVec3f **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyVec3f_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArJoyVec3f *arg1 = (ArJoyVec3f *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyVec3f **)&jarg1; 
  result = (double) ((arg1)->x);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyVec3f_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArJoyVec3f *arg1 = (ArJoyVec3f *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyVec3f **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyVec3f_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArJoyVec3f *arg1 = (ArJoyVec3f *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyVec3f **)&jarg1; 
  result = (double) ((arg1)->y);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyVec3f_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArJoyVec3f *arg1 = (ArJoyVec3f *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyVec3f **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyVec3f_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArJoyVec3f *arg1 = (ArJoyVec3f *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyVec3f **)&jarg1; 
  result = (double) ((arg1)->z);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArJoyVec3f(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArJoyVec3f *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArJoyVec3f *)new ArJoyVec3f();
  *(ArJoyVec3f **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArJoyVec3f(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArJoyVec3f *arg1 = (ArJoyVec3f *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArJoyVec3f **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyVec3i_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArJoyVec3i *arg1 = (ArJoyVec3i *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyVec3i **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyVec3i_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArJoyVec3i *arg1 = (ArJoyVec3i *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyVec3i **)&jarg1; 
  result = (int) ((arg1)->x);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyVec3i_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArJoyVec3i *arg1 = (ArJoyVec3i *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyVec3i **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyVec3i_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArJoyVec3i *arg1 = (ArJoyVec3i *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyVec3i **)&jarg1; 
  result = (int) ((arg1)->y);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyVec3i_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArJoyVec3i *arg1 = (ArJoyVec3i *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyVec3i **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_ArJoyVec3i_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArJoyVec3i *arg1 = (ArJoyVec3i *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArJoyVec3i **)&jarg1; 
  result = (int) ((arg1)->z);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_new_1ArJoyVec3i(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArJoyVec3i *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArJoyVec3i *)new ArJoyVec3i();
  *(ArJoyVec3i **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_delete_1ArJoyVec3i(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArJoyVec3i *arg1 = (ArJoyVec3i *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArJoyVec3i **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArPoseWithTimeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArPose **)&baseptr = *(ArPoseWithTime **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArRangeDeviceThreadedUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArRangeDevice **)&baseptr = *(ArRangeDeviceThreaded **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArLaserUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArRangeDeviceThreaded **)&baseptr = *(ArLaser **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArRetFunctor_1VoidPUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArFunctor **)&baseptr = *(ArRetFunctor< void * > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArRetFunctor_1BoolUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArFunctor **)&baseptr = *(ArRetFunctor< bool > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArFunctor1_1CStringUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArFunctor **)&baseptr = *(ArFunctor1< char const * > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArFunctor1_1IntUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArFunctor **)&baseptr = *(ArFunctor1< int > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArFunctor1_1ArRobotPacketPUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArFunctor **)&baseptr = *(ArFunctor1< ArRobotPacket * > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArRetFunctor_1IntUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArFunctor **)&baseptr = *(ArRetFunctor< int > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArRetFunctor_1DoubleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArFunctor **)&baseptr = *(ArRetFunctor< double > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArRetFunctor_1UnsignedIntUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArFunctor **)&baseptr = *(ArRetFunctor< unsigned int > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArRetFunctor1_1Double_1ArPoseWithTimeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArRetFunctor< double > **)&baseptr = *(ArRetFunctor1< double,ArPoseWithTime > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArRetFunctor1_1Bool_1ArRobotPacketPUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArRetFunctor< bool > **)&baseptr = *(ArRetFunctor1< bool,ArRobotPacket * > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArRetFunctor1_1Bool_1ArgumentBuilderUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArRetFunctor< bool > **)&baseptr = *(ArRetFunctor1< bool,ArArgumentBuilder > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArRetFunctor1_1Bool_1ArgumentBuilderPUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArRetFunctor< bool > **)&baseptr = *(ArRetFunctor1< bool,ArArgumentBuilder * > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArRetFunctor1_1VoidP_1VoidPUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArRetFunctor< void * > **)&baseptr = *(ArRetFunctor1< void *,void * > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArAMPTUPacketUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArBasePacket **)&baseptr = *(ArAMPTUPacket **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArAMPTUUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArPTZ **)&baseptr = *(ArAMPTU **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArASyncTaskUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArThread **)&baseptr = *(ArASyncTask **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionAvoidFrontUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArAction **)&baseptr = *(ArActionAvoidFront **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionAvoidSideUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArAction **)&baseptr = *(ArActionAvoidSide **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionBumpersUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArAction **)&baseptr = *(ArActionBumpers **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionColorFollowUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArAction **)&baseptr = *(ArActionColorFollow **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionConstantVelocityUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArAction **)&baseptr = *(ArActionConstantVelocity **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionDeceleratingLimiterUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArAction **)&baseptr = *(ArActionDeceleratingLimiter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionDriveDistanceUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArAction **)&baseptr = *(ArActionDriveDistance **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionGotoUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArAction **)&baseptr = *(ArActionGoto **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionGotoStraightUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArAction **)&baseptr = *(ArActionGotoStraight **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionGroupInputUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArActionGroup **)&baseptr = *(ArActionGroupInput **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionGroupStopUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArActionGroup **)&baseptr = *(ArActionGroupStop **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionGroupTeleopUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArActionGroup **)&baseptr = *(ArActionGroupTeleop **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionGroupUnguardedTeleopUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArActionGroup **)&baseptr = *(ArActionGroupUnguardedTeleop **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionGroupWanderUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArActionGroup **)&baseptr = *(ArActionGroupWander **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionGroupColorFollowUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArActionGroup **)&baseptr = *(ArActionGroupColorFollow **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionGroupRatioDriveUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArActionGroup **)&baseptr = *(ArActionGroupRatioDrive **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionGroupRatioDriveUnsafeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArActionGroup **)&baseptr = *(ArActionGroupRatioDriveUnsafe **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionIRsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArAction **)&baseptr = *(ArActionIRs **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionInputUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArAction **)&baseptr = *(ArActionInput **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionJoydriveUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArAction **)&baseptr = *(ArActionJoydrive **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionKeydriveUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArAction **)&baseptr = *(ArActionKeydrive **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionLimiterBackwardsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArAction **)&baseptr = *(ArActionLimiterBackwards **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionLimiterForwardsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArAction **)&baseptr = *(ArActionLimiterForwards **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionLimiterTableSensorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArAction **)&baseptr = *(ArActionLimiterTableSensor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionMovementParametersUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArAction **)&baseptr = *(ArActionMovementParameters **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionRatioInputUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArAction **)&baseptr = *(ArActionRatioInput **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionRobotJoydriveUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArAction **)&baseptr = *(ArActionRobotJoydrive **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionStallRecoverUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArAction **)&baseptr = *(ArActionStallRecover **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionStopUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArAction **)&baseptr = *(ArActionStop **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionTriangleDriveToUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArAction **)&baseptr = *(ArActionTriangleDriveTo **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArActionTurnUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArAction **)&baseptr = *(ArActionTurn **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArBumpersUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArRangeDevice **)&baseptr = *(ArBumpers **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArCameraParameterSourceUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArCameraCollectionItem **)&baseptr = *(ArCameraParameterSource **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArDPPTUPacketUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArBasePacket **)&baseptr = *(ArDPPTUPacket **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArDPPTUUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArPTZ **)&baseptr = *(ArDPPTU **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArForbiddenRangeDeviceUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArRangeDevice **)&baseptr = *(ArForbiddenRangeDevice **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArFunctorASyncTaskUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArASyncTask **)&baseptr = *(ArFunctorASyncTask **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArSimulatedGPSUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArGPS **)&baseptr = *(ArSimulatedGPS **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArECEFCoordsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ar3DPoint **)&baseptr = *(ArECEFCoords **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArLLACoordsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ar3DPoint **)&baseptr = *(ArLLACoords **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArENUCoordsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ar3DPoint **)&baseptr = *(ArENUCoords **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArMapGPSCoordsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArENUCoords **)&baseptr = *(ArMapGPSCoords **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArIRsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArRangeDevice **)&baseptr = *(ArIRs **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArIrrfDeviceUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArRangeDevice **)&baseptr = *(ArIrrfDevice **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArLaserFilterUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArLaser **)&baseptr = *(ArLaserFilter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArLaserReflectorDeviceUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArRangeDevice **)&baseptr = *(ArLaserReflectorDevice **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArLineFinderSegmentUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArLineSegment **)&baseptr = *(ArLineFinderSegment **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArLogFileConnectionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArDeviceConnection **)&baseptr = *(ArLogFileConnection **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArMapInterfaceUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArMapInfoInterface **)&baseptr = *(ArMapInterface **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArMapUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArMapInterface **)&baseptr = *(ArMap **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArMapScanUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArMapScanInterface **)&baseptr = *(ArMapScan **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArMapObjectsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArMapObjectsInterface **)&baseptr = *(ArMapObjects **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArMapInfoUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArMapInfoInterface **)&baseptr = *(ArMapInfo **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArMapSupplementUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArMapSupplementInterface **)&baseptr = *(ArMapSupplement **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArMapSimpleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArMapInterface **)&baseptr = *(ArMapSimple **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArModeTeleopUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArMode **)&baseptr = *(ArModeTeleop **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArModeUnguardedTeleopUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArMode **)&baseptr = *(ArModeUnguardedTeleop **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArModeWanderUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArMode **)&baseptr = *(ArModeWander **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArModeGripperUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArMode **)&baseptr = *(ArModeGripper **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArModeCameraUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArMode **)&baseptr = *(ArModeCamera **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArModeSonarUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArMode **)&baseptr = *(ArModeSonar **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArModeBumpsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArMode **)&baseptr = *(ArModeBumps **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArModePositionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArMode **)&baseptr = *(ArModePosition **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArModeIOUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArMode **)&baseptr = *(ArModeIO **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArModeLaserUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArMode **)&baseptr = *(ArModeLaser **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArModeActsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArMode **)&baseptr = *(ArModeActs **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArModeCommandUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArMode **)&baseptr = *(ArModeCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArModeTCM2Upcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArMode **)&baseptr = *(ArModeTCM2 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArModeConfigUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArMode **)&baseptr = *(ArModeConfig **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArModeRobotStatusUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArMode **)&baseptr = *(ArModeRobotStatus **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArNovatelGPSUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArGPS **)&baseptr = *(ArNovatelGPS **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArNovatelSPANUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArNovatelGPS **)&baseptr = *(ArNovatelSPAN **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArPriorityResolverUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArResolver **)&baseptr = *(ArPriorityResolver **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArRecurrentTaskUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArASyncTask **)&baseptr = *(ArRecurrentTask **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArRobotPacketUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArBasePacket **)&baseptr = *(ArRobotPacket **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArRobotParamsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArConfig **)&baseptr = *(ArRobotParams **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArRVisionPacketUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArBasePacket **)&baseptr = *(ArRVisionPacket **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArRVisionPTZUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArPTZ **)&baseptr = *(ArRVisionPTZ **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArSerialConnectionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArDeviceConnection **)&baseptr = *(ArSerialConnection **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArSignalHandlerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArASyncTask **)&baseptr = *(ArSignalHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArSimulatedLaserUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArLaser **)&baseptr = *(ArSimulatedLaser **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArSonarDeviceUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArRangeDevice **)&baseptr = *(ArSonarDevice **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArSonyPacketUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArBasePacket **)&baseptr = *(ArSonyPacket **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArSonyPTZUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArPTZ **)&baseptr = *(ArSonyPTZ **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArSoundsQueueUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArASyncTask **)&baseptr = *(ArSoundsQueue **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArSyncLoopUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArASyncTask **)&baseptr = *(ArSyncLoop **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArTCMCompassDirectUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArTCM2 **)&baseptr = *(ArTCMCompassDirect **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArTCMCompassRobotUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArTCM2 **)&baseptr = *(ArTCMCompassRobot **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArTcpConnectionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArDeviceConnection **)&baseptr = *(ArTcpConnection **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArTrimbleGPSUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArGPS **)&baseptr = *(ArTrimbleGPS **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArUrgUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArLaser **)&baseptr = *(ArUrg **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArVCC4PacketUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArBasePacket **)&baseptr = *(ArVCC4Packet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArVCC4Upcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArPTZ **)&baseptr = *(ArVCC4 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArConfigArg_1BoolUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArConfigArg **)&baseptr = *(ArConfigArg_Bool **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArConfigArg_1IntUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArConfigArg **)&baseptr = *(ArConfigArg_Int **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArConfigArg_1DoubleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArConfigArg **)&baseptr = *(ArConfigArg_Double **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_SWIGArConfigArg_1StringUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArConfigArg **)&baseptr = *(ArConfigArg_String **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_com_mobilerobots_Aria_AriaJavaJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[204] = {
    {
      "SwigDirector_ArFunctor_invoke", "(Lcom/mobilerobots/Aria/ArFunctor;)V" 
    },
    {
      "SwigDirector_ArFunctor_getName", "(Lcom/mobilerobots/Aria/ArFunctor;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArFunctor_setName", "(Lcom/mobilerobots/Aria/ArFunctor;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ArRetFunctor_VoidP_invoke", "(Lcom/mobilerobots/Aria/ArRetFunctor_VoidP;)V" 
    },
    {
      "SwigDirector_ArRetFunctor_VoidP_getName", "(Lcom/mobilerobots/Aria/ArRetFunctor_VoidP;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArRetFunctor_VoidP_setName", "(Lcom/mobilerobots/Aria/ArRetFunctor_VoidP;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ArRetFunctor_VoidP_invokeR", "(Lcom/mobilerobots/Aria/ArRetFunctor_VoidP;)J" 
    },
    {
      "SwigDirector_ArRetFunctor_Bool_invoke", "(Lcom/mobilerobots/Aria/ArRetFunctor_Bool;)V" 
    },
    {
      "SwigDirector_ArRetFunctor_Bool_getName", "(Lcom/mobilerobots/Aria/ArRetFunctor_Bool;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArRetFunctor_Bool_setName", "(Lcom/mobilerobots/Aria/ArRetFunctor_Bool;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ArRetFunctor_Bool_invokeR", "(Lcom/mobilerobots/Aria/ArRetFunctor_Bool;)Z" 
    },
    {
      "SwigDirector_ArFunctor1_ArRobotPacketP_invoke__SWIG_0", "(Lcom/mobilerobots/Aria/ArFunctor1_ArRobotPacketP;)V" 
    },
    {
      "SwigDirector_ArFunctor1_ArRobotPacketP_getName", "(Lcom/mobilerobots/Aria/ArFunctor1_ArRobotPacketP;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArFunctor1_ArRobotPacketP_setName", "(Lcom/mobilerobots/Aria/ArFunctor1_ArRobotPacketP;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ArFunctor1_ArRobotPacketP_invoke__SWIG_1", "(Lcom/mobilerobots/Aria/ArFunctor1_ArRobotPacketP;J)V" 
    },
    {
      "SwigDirector_ArRetFunctor_Int_invoke", "(Lcom/mobilerobots/Aria/ArRetFunctor_Int;)V" 
    },
    {
      "SwigDirector_ArRetFunctor_Int_getName", "(Lcom/mobilerobots/Aria/ArRetFunctor_Int;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArRetFunctor_Int_setName", "(Lcom/mobilerobots/Aria/ArRetFunctor_Int;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ArRetFunctor_Int_invokeR", "(Lcom/mobilerobots/Aria/ArRetFunctor_Int;)I" 
    },
    {
      "SwigDirector_ArRetFunctor_Double_invoke", "(Lcom/mobilerobots/Aria/ArRetFunctor_Double;)V" 
    },
    {
      "SwigDirector_ArRetFunctor_Double_getName", "(Lcom/mobilerobots/Aria/ArRetFunctor_Double;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArRetFunctor_Double_setName", "(Lcom/mobilerobots/Aria/ArRetFunctor_Double;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ArRetFunctor_Double_invokeR", "(Lcom/mobilerobots/Aria/ArRetFunctor_Double;)D" 
    },
    {
      "SwigDirector_ArRetFunctor_UnsignedInt_invoke", "(Lcom/mobilerobots/Aria/ArRetFunctor_UnsignedInt;)V" 
    },
    {
      "SwigDirector_ArRetFunctor_UnsignedInt_getName", "(Lcom/mobilerobots/Aria/ArRetFunctor_UnsignedInt;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArRetFunctor_UnsignedInt_setName", "(Lcom/mobilerobots/Aria/ArRetFunctor_UnsignedInt;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ArRetFunctor_UnsignedInt_invokeR", "(Lcom/mobilerobots/Aria/ArRetFunctor_UnsignedInt;)J" 
    },
    {
      "SwigDirector_ArRetFunctor1_Double_ArPoseWithTime_invoke", "(Lcom/mobilerobots/Aria/ArRetFunctor1_Double_ArPoseWithTime;)V" 
    },
    {
      "SwigDirector_ArRetFunctor1_Double_ArPoseWithTime_getName", "(Lcom/mobilerobots/Aria/ArRetFunctor1_Double_ArPoseWithTime;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArRetFunctor1_Double_ArPoseWithTime_setName", "(Lcom/mobilerobots/Aria/ArRetFunctor1_Double_ArPoseWithTime;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ArRetFunctor1_Double_ArPoseWithTime_invokeR__SWIG_0", "(Lcom/mobilerobots/Aria/ArRetFunctor1_Double_ArPoseWithTime;)D" 
    },
    {
      "SwigDirector_ArRetFunctor1_Double_ArPoseWithTime_invokeR__SWIG_1", "(Lcom/mobilerobots/Aria/ArRetFunctor1_Double_ArPoseWithTime;J)D" 
    },
    {
      "SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP_invoke", "(Lcom/mobilerobots/Aria/ArRetFunctor1_Bool_ArRobotPacketP;)V" 
    },
    {
      "SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP_getName", "(Lcom/mobilerobots/Aria/ArRetFunctor1_Bool_ArRobotPacketP;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP_setName", "(Lcom/mobilerobots/Aria/ArRetFunctor1_Bool_ArRobotPacketP;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP_invokeR__SWIG_0", "(Lcom/mobilerobots/Aria/ArRetFunctor1_Bool_ArRobotPacketP;)Z" 
    },
    {
      "SwigDirector_ArRetFunctor1_Bool_ArRobotPacketP_invokeR__SWIG_1", "(Lcom/mobilerobots/Aria/ArRetFunctor1_Bool_ArRobotPacketP;J)Z" 
    },
    {
      "SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder_invoke", "(Lcom/mobilerobots/Aria/ArRetFunctor1_Bool_ArgumentBuilder;)V" 
    },
    {
      "SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder_getName", "(Lcom/mobilerobots/Aria/ArRetFunctor1_Bool_ArgumentBuilder;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder_setName", "(Lcom/mobilerobots/Aria/ArRetFunctor1_Bool_ArgumentBuilder;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder_invokeR__SWIG_0", "(Lcom/mobilerobots/Aria/ArRetFunctor1_Bool_ArgumentBuilder;)Z" 
    },
    {
      "SwigDirector_ArRetFunctor1_Bool_ArgumentBuilder_invokeR__SWIG_1", "(Lcom/mobilerobots/Aria/ArRetFunctor1_Bool_ArgumentBuilder;J)Z" 
    },
    {
      "SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP_invoke", "(Lcom/mobilerobots/Aria/ArRetFunctor1_Bool_ArgumentBuilderP;)V" 
    },
    {
      "SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP_getName", "(Lcom/mobilerobots/Aria/ArRetFunctor1_Bool_ArgumentBuilderP;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP_setName", "(Lcom/mobilerobots/Aria/ArRetFunctor1_Bool_ArgumentBuilderP;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP_invokeR__SWIG_0", "(Lcom/mobilerobots/Aria/ArRetFunctor1_Bool_ArgumentBuilderP;)Z" 
    },
    {
      "SwigDirector_ArRetFunctor1_Bool_ArgumentBuilderP_invokeR__SWIG_1", "(Lcom/mobilerobots/Aria/ArRetFunctor1_Bool_ArgumentBuilderP;J)Z" 
    },
    {
      "SwigDirector_ArRetFunctor1_VoidP_VoidP_invoke", "(Lcom/mobilerobots/Aria/ArRetFunctor1_VoidP_VoidP;)V" 
    },
    {
      "SwigDirector_ArRetFunctor1_VoidP_VoidP_getName", "(Lcom/mobilerobots/Aria/ArRetFunctor1_VoidP_VoidP;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArRetFunctor1_VoidP_VoidP_setName", "(Lcom/mobilerobots/Aria/ArRetFunctor1_VoidP_VoidP;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ArRetFunctor1_VoidP_VoidP_invokeR__SWIG_0", "(Lcom/mobilerobots/Aria/ArRetFunctor1_VoidP_VoidP;)J" 
    },
    {
      "SwigDirector_ArRetFunctor1_VoidP_VoidP_invokeR__SWIG_1", "(Lcom/mobilerobots/Aria/ArRetFunctor1_VoidP_VoidP;J)J" 
    },
    {
      "SwigDirector_ArAction_isActive", "(Lcom/mobilerobots/Aria/ArAction;)Z" 
    },
    {
      "SwigDirector_ArAction_activate", "(Lcom/mobilerobots/Aria/ArAction;)V" 
    },
    {
      "SwigDirector_ArAction_deactivate", "(Lcom/mobilerobots/Aria/ArAction;)V" 
    },
    {
      "SwigDirector_ArAction_fire", "(Lcom/mobilerobots/Aria/ArAction;J)J" 
    },
    {
      "SwigDirector_ArAction_setRobot", "(Lcom/mobilerobots/Aria/ArAction;J)V" 
    },
    {
      "SwigDirector_ArAction_getNumArgs", "(Lcom/mobilerobots/Aria/ArAction;)I" 
    },
    {
      "SwigDirector_ArAction_getArg", "(Lcom/mobilerobots/Aria/ArAction;I)J" 
    },
    {
      "SwigDirector_ArAction_getName", "(Lcom/mobilerobots/Aria/ArAction;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArAction_getDescription", "(Lcom/mobilerobots/Aria/ArAction;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArAction_getDesired__SWIG_0", "(Lcom/mobilerobots/Aria/ArAction;)J" 
    },
    {
      "SwigDirector_ArAction_getDesired__SWIG_1", "(Lcom/mobilerobots/Aria/ArAction;)J" 
    },
    {
      "SwigDirector_ArAction_log__SWIG_0", "(Lcom/mobilerobots/Aria/ArAction;Z)V" 
    },
    {
      "SwigDirector_ArAction_log__SWIG_1", "(Lcom/mobilerobots/Aria/ArAction;)V" 
    },
    {
      "SwigDirector_ArMap_getInfoCount", "(Lcom/mobilerobots/Aria/ArMap;)I" 
    },
    {
      "SwigDirector_ArMap_getInfoNames", "(Lcom/mobilerobots/Aria/ArMap;)J" 
    },
    {
      "SwigDirector_ArMap_getInfo__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;)J" 
    },
    {
      "SwigDirector_ArMap_getInfo__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;I)J" 
    },
    {
      "SwigDirector_ArMap_getMapInfo", "(Lcom/mobilerobots/Aria/ArMap;)J" 
    },
    {
      "SwigDirector_ArMap_setInfo__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;JJ)Z" 
    },
    {
      "SwigDirector_ArMap_setInfo__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;J)Z" 
    },
    {
      "SwigDirector_ArMap_setInfo__SWIG_2", "(Lcom/mobilerobots/Aria/ArMap;IJJ)Z" 
    },
    {
      "SwigDirector_ArMap_setInfo__SWIG_3", "(Lcom/mobilerobots/Aria/ArMap;IJ)Z" 
    },
    {
      "SwigDirector_ArMap_setMapInfo__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;JJ)Z" 
    },
    {
      "SwigDirector_ArMap_setMapInfo__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;J)Z" 
    },
    {
      "SwigDirector_ArMap_writeInfoToFunctor", "(Lcom/mobilerobots/Aria/ArMap;JLjava/lang/String;)V" 
    },
    {
      "SwigDirector_ArMap_getInfoName", "(Lcom/mobilerobots/Aria/ArMap;I)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArMap_clear", "(Lcom/mobilerobots/Aria/ArMap;)V" 
    },
    {
      "SwigDirector_ArMap_set", "(Lcom/mobilerobots/Aria/ArMap;J)Z" 
    },
    {
      "SwigDirector_ArMap_cloneMap", "(Lcom/mobilerobots/Aria/ArMap;)J" 
    },
    {
      "SwigDirector_ArMap_getScanTypes", "(Lcom/mobilerobots/Aria/ArMap;)J" 
    },
    {
      "SwigDirector_ArMap_setScanTypes", "(Lcom/mobilerobots/Aria/ArMap;J)Z" 
    },
    {
      "SwigDirector_ArMap_lock", "(Lcom/mobilerobots/Aria/ArMap;)I" 
    },
    {
      "SwigDirector_ArMap_tryLock", "(Lcom/mobilerobots/Aria/ArMap;)I" 
    },
    {
      "SwigDirector_ArMap_unlock", "(Lcom/mobilerobots/Aria/ArMap;)I" 
    },
    {
      "SwigDirector_ArMap_mapChanged", "(Lcom/mobilerobots/Aria/ArMap;)V" 
    },
    {
      "SwigDirector_ArMap_addMapChangedCBPos", "(Lcom/mobilerobots/Aria/ArMap;JI)V" 
    },
    {
      "SwigDirector_ArMap_addMapChangedCB__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;JI)V" 
    },
    {
      "SwigDirector_ArMap_addMapChangedCB__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;J)V" 
    },
    {
      "SwigDirector_ArMap_remMapChangedCB", "(Lcom/mobilerobots/Aria/ArMap;J)V" 
    },
    {
      "SwigDirector_ArMap_addPreMapChangedCBPos", "(Lcom/mobilerobots/Aria/ArMap;JI)V" 
    },
    {
      "SwigDirector_ArMap_addPreMapChangedCB__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;JI)V" 
    },
    {
      "SwigDirector_ArMap_addPreMapChangedCB__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;J)V" 
    },
    {
      "SwigDirector_ArMap_remPreMapChangedCB", "(Lcom/mobilerobots/Aria/ArMap;J)V" 
    },
    {
      "SwigDirector_ArMap_setMapChangedLogLevel", "(Lcom/mobilerobots/Aria/ArMap;I)V" 
    },
    {
      "SwigDirector_ArMap_getMapChangedLogLevel", "(Lcom/mobilerobots/Aria/ArMap;)I" 
    },
    {
      "SwigDirector_ArMap_writeToFunctor", "(Lcom/mobilerobots/Aria/ArMap;JLjava/lang/String;)V" 
    },
    {
      "SwigDirector_ArMap_writeObjectsToFunctor__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;JLjava/lang/String;ZLjava/lang/String;)V" 
    },
    {
      "SwigDirector_ArMap_writeObjectsToFunctor__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;JLjava/lang/String;Z)V" 
    },
    {
      "SwigDirector_ArMap_writeObjectsToFunctor__SWIG_2", "(Lcom/mobilerobots/Aria/ArMap;JLjava/lang/String;)V" 
    },
    {
      "SwigDirector_ArMap_addPreWriteFileCB__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;JI)V" 
    },
    {
      "SwigDirector_ArMap_addPreWriteFileCB__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;J)V" 
    },
    {
      "SwigDirector_ArMap_remPreWriteFileCB", "(Lcom/mobilerobots/Aria/ArMap;J)V" 
    },
    {
      "SwigDirector_ArMap_addPostWriteFileCB__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;JI)V" 
    },
    {
      "SwigDirector_ArMap_addPostWriteFileCB__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;J)V" 
    },
    {
      "SwigDirector_ArMap_remPostWriteFileCB", "(Lcom/mobilerobots/Aria/ArMap;J)V" 
    },
    {
      "SwigDirector_ArMap_getMapId__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;JZ)Z" 
    },
    {
      "SwigDirector_ArMap_getMapId__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;J)Z" 
    },
    {
      "SwigDirector_ArMap_calculateChecksum", "(Lcom/mobilerobots/Aria/ArMap;JJ)Z" 
    },
    {
      "SwigDirector_ArMap_getBaseDirectory", "(Lcom/mobilerobots/Aria/ArMap;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArMap_setBaseDirectory", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ArMap_getTempDirectory", "(Lcom/mobilerobots/Aria/ArMap;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArMap_setTempDirectory", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ArMap_createRealFileName", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArMap_getFileName", "(Lcom/mobilerobots/Aria/ArMap;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArMap_setSourceFileName__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;Ljava/lang/String;Z)V" 
    },
    {
      "SwigDirector_ArMap_setSourceFileName__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ArMap_refresh", "(Lcom/mobilerobots/Aria/ArMap;)Z" 
    },
    {
      "SwigDirector_ArMap_setIgnoreEmptyFileName", "(Lcom/mobilerobots/Aria/ArMap;Z)V" 
    },
    {
      "SwigDirector_ArMap_getIgnoreEmptyFileName", "(Lcom/mobilerobots/Aria/ArMap;)Z" 
    },
    {
      "SwigDirector_ArMap_setIgnoreCase__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;Z)V" 
    },
    {
      "SwigDirector_ArMap_setIgnoreCase__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;)V" 
    },
    {
      "SwigDirector_ArMap_getIgnoreCase", "(Lcom/mobilerobots/Aria/ArMap;)Z" 
    },
    {
      "SwigDirector_ArMap_getInactiveInfo", "(Lcom/mobilerobots/Aria/ArMap;)J" 
    },
    {
      "SwigDirector_ArMap_getInactiveObjects", "(Lcom/mobilerobots/Aria/ArMap;)J" 
    },
    {
      "SwigDirector_ArMap_getChildObjects", "(Lcom/mobilerobots/Aria/ArMap;)J" 
    },
    {
      "SwigDirector_ArMap_findMapObjectParams", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;)J" 
    },
    {
      "SwigDirector_ArMap_setMapObjectParams__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;JJ)Z" 
    },
    {
      "SwigDirector_ArMap_setMapObjectParams__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;J)Z" 
    },
    {
      "SwigDirector_ArMap_getRemainder", "(Lcom/mobilerobots/Aria/ArMap;)J" 
    },
    {
      "SwigDirector_ArMap_setQuiet", "(Lcom/mobilerobots/Aria/ArMap;Z)V" 
    },
    {
      "SwigDirector_ArMap_parseLine", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;)Z" 
    },
    {
      "SwigDirector_ArMap_parsingComplete", "(Lcom/mobilerobots/Aria/ArMap;)V" 
    },
    {
      "SwigDirector_ArMap_isLoadingDataStarted", "(Lcom/mobilerobots/Aria/ArMap;)Z" 
    },
    {
      "SwigDirector_ArMap_isLoadingLinesAndDataStarted", "(Lcom/mobilerobots/Aria/ArMap;)Z" 
    },
    {
      "SwigDirector_ArMap_getDisplayString__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArMap_getDisplayString__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArMap_getPoints__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;)J" 
    },
    {
      "SwigDirector_ArMap_getPoints__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;)J" 
    },
    {
      "SwigDirector_ArMap_getMinPose__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;)J" 
    },
    {
      "SwigDirector_ArMap_getMinPose__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;)J" 
    },
    {
      "SwigDirector_ArMap_getMaxPose__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;)J" 
    },
    {
      "SwigDirector_ArMap_getMaxPose__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;)J" 
    },
    {
      "SwigDirector_ArMap_getNumPoints__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;)I" 
    },
    {
      "SwigDirector_ArMap_getNumPoints__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;)I" 
    },
    {
      "SwigDirector_ArMap_isSortedPoints__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;)Z" 
    },
    {
      "SwigDirector_ArMap_isSortedPoints__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;)Z" 
    },
    {
      "SwigDirector_ArMap_setPoints__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;JLjava/lang/String;ZJ)V" 
    },
    {
      "SwigDirector_ArMap_setPoints__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;JLjava/lang/String;Z)V" 
    },
    {
      "SwigDirector_ArMap_setPoints__SWIG_2", "(Lcom/mobilerobots/Aria/ArMap;JLjava/lang/String;)V" 
    },
    {
      "SwigDirector_ArMap_setPoints__SWIG_3", "(Lcom/mobilerobots/Aria/ArMap;J)V" 
    },
    {
      "SwigDirector_ArMap_getLines__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;)J" 
    },
    {
      "SwigDirector_ArMap_getLines__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;)J" 
    },
    {
      "SwigDirector_ArMap_getLineMinPose__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;)J" 
    },
    {
      "SwigDirector_ArMap_getLineMinPose__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;)J" 
    },
    {
      "SwigDirector_ArMap_getLineMaxPose__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;)J" 
    },
    {
      "SwigDirector_ArMap_getLineMaxPose__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;)J" 
    },
    {
      "SwigDirector_ArMap_getNumLines__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;)I" 
    },
    {
      "SwigDirector_ArMap_getNumLines__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;)I" 
    },
    {
      "SwigDirector_ArMap_isSortedLines__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;)Z" 
    },
    {
      "SwigDirector_ArMap_isSortedLines__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;)Z" 
    },
    {
      "SwigDirector_ArMap_setLines__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;JLjava/lang/String;ZJ)V" 
    },
    {
      "SwigDirector_ArMap_setLines__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;JLjava/lang/String;Z)V" 
    },
    {
      "SwigDirector_ArMap_setLines__SWIG_2", "(Lcom/mobilerobots/Aria/ArMap;JLjava/lang/String;)V" 
    },
    {
      "SwigDirector_ArMap_setLines__SWIG_3", "(Lcom/mobilerobots/Aria/ArMap;J)V" 
    },
    {
      "SwigDirector_ArMap_getResolution__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;)I" 
    },
    {
      "SwigDirector_ArMap_getResolution__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;)I" 
    },
    {
      "SwigDirector_ArMap_setResolution__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;ILjava/lang/String;J)V" 
    },
    {
      "SwigDirector_ArMap_setResolution__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;ILjava/lang/String;)V" 
    },
    {
      "SwigDirector_ArMap_setResolution__SWIG_2", "(Lcom/mobilerobots/Aria/ArMap;I)V" 
    },
    {
      "SwigDirector_ArMap_writeScanToFunctor__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;JLjava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ArMap_writeScanToFunctor__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;JLjava/lang/String;)V" 
    },
    {
      "SwigDirector_ArMap_writePointsToFunctor__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;JLjava/lang/String;J)V" 
    },
    {
      "SwigDirector_ArMap_writePointsToFunctor__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;JLjava/lang/String;)V" 
    },
    {
      "SwigDirector_ArMap_writePointsToFunctor__SWIG_2", "(Lcom/mobilerobots/Aria/ArMap;J)V" 
    },
    {
      "SwigDirector_ArMap_writeLinesToFunctor__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;JLjava/lang/String;J)V" 
    },
    {
      "SwigDirector_ArMap_writeLinesToFunctor__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;JLjava/lang/String;)V" 
    },
    {
      "SwigDirector_ArMap_writeLinesToFunctor__SWIG_2", "(Lcom/mobilerobots/Aria/ArMap;J)V" 
    },
    {
      "SwigDirector_ArMap_addToFileParser", "(Lcom/mobilerobots/Aria/ArMap;J)Z" 
    },
    {
      "SwigDirector_ArMap_remFromFileParser", "(Lcom/mobilerobots/Aria/ArMap;J)Z" 
    },
    {
      "SwigDirector_ArMap_readDataPoint", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;)Z" 
    },
    {
      "SwigDirector_ArMap_readLineSegment", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;)Z" 
    },
    {
      "SwigDirector_ArMap_loadDataPoint", "(Lcom/mobilerobots/Aria/ArMap;DD)V" 
    },
    {
      "SwigDirector_ArMap_loadLineSegment", "(Lcom/mobilerobots/Aria/ArMap;DDDD)V" 
    },
    {
      "SwigDirector_ArMap_findFirstMapObject__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;Ljava/lang/String;Z)J" 
    },
    {
      "SwigDirector_ArMap_findFirstMapObject__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;Ljava/lang/String;)J" 
    },
    {
      "SwigDirector_ArMap_findMapObject__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;Ljava/lang/String;Z)J" 
    },
    {
      "SwigDirector_ArMap_findMapObject__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;Ljava/lang/String;)J" 
    },
    {
      "SwigDirector_ArMap_findMapObject__SWIG_2", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;)J" 
    },
    {
      "SwigDirector_ArMap_findMapObjectsOfType__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;Z)J" 
    },
    {
      "SwigDirector_ArMap_findMapObjectsOfType__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;)J" 
    },
    {
      "SwigDirector_ArMap_getMapObjects", "(Lcom/mobilerobots/Aria/ArMap;)J" 
    },
    {
      "SwigDirector_ArMap_setMapObjects__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;JZJ)V" 
    },
    {
      "SwigDirector_ArMap_setMapObjects__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;JZ)V" 
    },
    {
      "SwigDirector_ArMap_setMapObjects__SWIG_2", "(Lcom/mobilerobots/Aria/ArMap;J)V" 
    },
    {
      "SwigDirector_ArMap_writeObjectListToFunctor", "(Lcom/mobilerobots/Aria/ArMap;JLjava/lang/String;)V" 
    },
    {
      "SwigDirector_ArMap_hasOriginLatLongAlt", "(Lcom/mobilerobots/Aria/ArMap;)Z" 
    },
    {
      "SwigDirector_ArMap_getOriginLatLong", "(Lcom/mobilerobots/Aria/ArMap;)J" 
    },
    {
      "SwigDirector_ArMap_getOriginAltitude", "(Lcom/mobilerobots/Aria/ArMap;)D" 
    },
    {
      "SwigDirector_ArMap_setOriginLatLongAlt__SWIG_0", "(Lcom/mobilerobots/Aria/ArMap;ZJDJ)V" 
    },
    {
      "SwigDirector_ArMap_setOriginLatLongAlt__SWIG_1", "(Lcom/mobilerobots/Aria/ArMap;ZJD)V" 
    },
    {
      "SwigDirector_ArMap_writeSupplementToFunctor", "(Lcom/mobilerobots/Aria/ArMap;JLjava/lang/String;)V" 
    },
    {
      "SwigDirector_ArMap_writeFile", "(Lcom/mobilerobots/Aria/ArMap;Ljava/lang/String;)Z" 
    }
  };
  Swig::jclass_AriaJavaJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_AriaJavaJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

