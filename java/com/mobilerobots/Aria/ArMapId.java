/*
Adept MobileRobots Robotics Interface for Applications (ARIA)
Copyright (C) 2004-2005 ActivMedia Robotics LLC
Copyright (C) 2006-2010 MobileRobots Inc.
Copyright (C) 2011-2014 Adept Technology

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

If you wish to redistribute ARIA under different terms, contact 
Adept MobileRobots for information about a commercial version of ARIA at 
robots@mobilerobots.com or 
Adept MobileRobots, 10 Columbia Drive, Amherst, NH 03031; +1-603-881-7960
*/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.mobilerobots.Aria;

public class ArMapId {
  /* (begin code from javabody typemap) */

  private long swigCPtr;
  protected boolean swigCMemOwn;

  /* for internal use by swig only */
  public ArMapId(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /* for internal use by swig only */
  public static long getCPtr(ArMapId obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /* (end code from javabody typemap) */

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        AriaJavaJNI.delete_ArMapId(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static boolean create(String fileName, ArMapId mapIdOut) {
    return AriaJavaJNI.ArMapId_create(fileName, ArMapId.getCPtr(mapIdOut), mapIdOut);
  }

  public static boolean toPacket(ArMapId mapId, ArBasePacket packetOut) {
    return AriaJavaJNI.ArMapId_toPacket(ArMapId.getCPtr(mapId), mapId, ArBasePacket.getCPtr(packetOut), packetOut);
  }

  public static boolean fromPacket(ArBasePacket packetIn, ArMapId mapIdOut) {
    return AriaJavaJNI.ArMapId_fromPacket(ArBasePacket.getCPtr(packetIn), packetIn, ArMapId.getCPtr(mapIdOut), mapIdOut);
  }

  public ArMapId() {
    this(AriaJavaJNI.new_ArMapId__SWIG_0(), true);
  }

  public ArMapId(String sourceName, String fileName, SWIGTYPE_p_unsigned_char checksum, long checksumLength, int size, SWIGTYPE_p_time_t timestamp) {
    this(AriaJavaJNI.new_ArMapId__SWIG_1(sourceName, fileName, SWIGTYPE_p_unsigned_char.getCPtr(checksum), checksumLength, size, SWIGTYPE_p_time_t.getCPtr(timestamp)), true);
  }

  public ArMapId(ArMapId other) {
    this(AriaJavaJNI.new_ArMapId__SWIG_2(ArMapId.getCPtr(other), other), true);
  }

  public boolean isNull() {
    return AriaJavaJNI.ArMapId_isNull(swigCPtr, this);
  }

  public String getSourceName() {
    return AriaJavaJNI.ArMapId_getSourceName(swigCPtr, this);
  }

  public String getFileName() {
    return AriaJavaJNI.ArMapId_getFileName(swigCPtr, this);
  }

  public SWIGTYPE_p_unsigned_char getChecksum() {
    long cPtr = AriaJavaJNI.ArMapId_getChecksum(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public long getChecksumLength() {
    return AriaJavaJNI.ArMapId_getChecksumLength(swigCPtr, this);
  }

  public String getDisplayChecksum() {
    return AriaJavaJNI.ArMapId_getDisplayChecksum(swigCPtr, this);
  }

  public int getSize() {
    return AriaJavaJNI.ArMapId_getSize(swigCPtr, this);
  }

  public SWIGTYPE_p_time_t getTimestamp() {
    return new SWIGTYPE_p_time_t(AriaJavaJNI.ArMapId_getTimestamp(swigCPtr, this), true);
  }

  public void clear() {
    AriaJavaJNI.ArMapId_clear(swigCPtr, this);
  }

  public void setSourceName(String sourceName) {
    AriaJavaJNI.ArMapId_setSourceName(swigCPtr, this, sourceName);
  }

  public void setFileName(String fileName) {
    AriaJavaJNI.ArMapId_setFileName(swigCPtr, this, fileName);
  }

  public void setChecksum(SWIGTYPE_p_unsigned_char checksum, long checksumLen) {
    AriaJavaJNI.ArMapId_setChecksum(swigCPtr, this, SWIGTYPE_p_unsigned_char.getCPtr(checksum), checksumLen);
  }

  public void setSize(int size) {
    AriaJavaJNI.ArMapId_setSize(swigCPtr, this, size);
  }

  public void setTimestamp(SWIGTYPE_p_time_t timestamp) {
    AriaJavaJNI.ArMapId_setTimestamp(swigCPtr, this, SWIGTYPE_p_time_t.getCPtr(timestamp));
  }

  public boolean isSameFile(ArMapId other) {
    return AriaJavaJNI.ArMapId_isSameFile(swigCPtr, this, ArMapId.getCPtr(other), other);
  }

  public boolean isVersionOfSameFile(ArMapId other) {
    return AriaJavaJNI.ArMapId_isVersionOfSameFile(swigCPtr, this, ArMapId.getCPtr(other), other);
  }

  public boolean isValidTimestamp() {
    return AriaJavaJNI.ArMapId_isValidTimestamp(swigCPtr, this);
  }

  public void log(String prefix) {
    AriaJavaJNI.ArMapId_log(swigCPtr, this, prefix);
  }

}
