/*
Adept MobileRobots Robotics Interface for Applications (ARIA)
Copyright (C) 2004-2005 ActivMedia Robotics LLC
Copyright (C) 2006-2010 MobileRobots Inc.
Copyright (C) 2011-2014 Adept Technology

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

If you wish to redistribute ARIA under different terms, contact 
Adept MobileRobots for information about a commercial version of ARIA at 
robots@mobilerobots.com or 
Adept MobileRobots, 10 Columbia Drive, Amherst, NH 03031; +1-603-881-7960
*/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.mobilerobots.Aria;

public class ArRobotPacketReceiver {
  /* (begin code from javabody typemap) */

  private long swigCPtr;
  protected boolean swigCMemOwn;

  /* for internal use by swig only */
  public ArRobotPacketReceiver(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /* for internal use by swig only */
  public static long getCPtr(ArRobotPacketReceiver obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /* (end code from javabody typemap) */

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        AriaJavaJNI.delete_ArRobotPacketReceiver(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public ArRobotPacketReceiver(boolean allocatePackets, short sync1, short sync2) {
    this(AriaJavaJNI.new_ArRobotPacketReceiver__SWIG_0(allocatePackets, sync1, sync2), true);
  }

  public ArRobotPacketReceiver(boolean allocatePackets, short sync1) {
    this(AriaJavaJNI.new_ArRobotPacketReceiver__SWIG_1(allocatePackets, sync1), true);
  }

  public ArRobotPacketReceiver(boolean allocatePackets) {
    this(AriaJavaJNI.new_ArRobotPacketReceiver__SWIG_2(allocatePackets), true);
  }

  public ArRobotPacketReceiver() {
    this(AriaJavaJNI.new_ArRobotPacketReceiver__SWIG_3(), true);
  }

  public ArRobotPacketReceiver(ArDeviceConnection deviceConnection, boolean allocatePackets, short sync1, short sync2) {
    this(AriaJavaJNI.new_ArRobotPacketReceiver__SWIG_4(ArDeviceConnection.getCPtr(deviceConnection), deviceConnection, allocatePackets, sync1, sync2), true);
  }

  public ArRobotPacketReceiver(ArDeviceConnection deviceConnection, boolean allocatePackets, short sync1) {
    this(AriaJavaJNI.new_ArRobotPacketReceiver__SWIG_5(ArDeviceConnection.getCPtr(deviceConnection), deviceConnection, allocatePackets, sync1), true);
  }

  public ArRobotPacketReceiver(ArDeviceConnection deviceConnection, boolean allocatePackets) {
    this(AriaJavaJNI.new_ArRobotPacketReceiver__SWIG_6(ArDeviceConnection.getCPtr(deviceConnection), deviceConnection, allocatePackets), true);
  }

  public ArRobotPacketReceiver(ArDeviceConnection deviceConnection) {
    this(AriaJavaJNI.new_ArRobotPacketReceiver__SWIG_7(ArDeviceConnection.getCPtr(deviceConnection), deviceConnection), true);
  }

  public ArRobotPacketReceiver(ArDeviceConnection deviceConnection, boolean allocatePackets, short sync1, short sync2, boolean tracking, String trackingLogName) {
    this(AriaJavaJNI.new_ArRobotPacketReceiver__SWIG_8(ArDeviceConnection.getCPtr(deviceConnection), deviceConnection, allocatePackets, sync1, sync2, tracking, trackingLogName), true);
  }

  public ArRobotPacket receivePacket(long msWait) {
    long cPtr = AriaJavaJNI.ArRobotPacketReceiver_receivePacket__SWIG_0(swigCPtr, this, msWait);
    return (cPtr == 0) ? null : new ArRobotPacket(cPtr, false);
  }

  public ArRobotPacket receivePacket() {
    long cPtr = AriaJavaJNI.ArRobotPacketReceiver_receivePacket__SWIG_1(swigCPtr, this);
    return (cPtr == 0) ? null : new ArRobotPacket(cPtr, false);
  }

  public void setDeviceConnection(ArDeviceConnection deviceConnection) {
    AriaJavaJNI.ArRobotPacketReceiver_setDeviceConnection(swigCPtr, this, ArDeviceConnection.getCPtr(deviceConnection), deviceConnection);
  }

  public ArDeviceConnection getDeviceConnection() {
    long cPtr = AriaJavaJNI.ArRobotPacketReceiver_getDeviceConnection(swigCPtr, this);
    return (cPtr == 0) ? null : new ArDeviceConnection(cPtr, false);
  }

  public boolean isAllocatingPackets() {
    return AriaJavaJNI.ArRobotPacketReceiver_isAllocatingPackets(swigCPtr, this);
  }

  public void setAllocatingPackets(boolean allocatePackets) {
    AriaJavaJNI.ArRobotPacketReceiver_setAllocatingPackets(swigCPtr, this, allocatePackets);
  }

  public void setTracking(boolean tracking) {
    AriaJavaJNI.ArRobotPacketReceiver_setTracking(swigCPtr, this, tracking);
  }

  public void setTrackingLogName(String trackingLogName) {
    AriaJavaJNI.ArRobotPacketReceiver_setTrackingLogName(swigCPtr, this, trackingLogName);
  }

  public void setPacketReceivedCallback(ArFunctor1_ArRobotPacketP functor) {
    AriaJavaJNI.ArRobotPacketReceiver_setPacketReceivedCallback(swigCPtr, this, ArFunctor1_ArRobotPacketP.getCPtr(functor), functor);
  }

}
