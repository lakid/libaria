/*
Adept MobileRobots Robotics Interface for Applications (ARIA)
Copyright (C) 2004-2005 ActivMedia Robotics LLC
Copyright (C) 2006-2010 MobileRobots Inc.
Copyright (C) 2011-2014 Adept Technology

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

If you wish to redistribute ARIA under different terms, contact 
Adept MobileRobots for information about a commercial version of ARIA at 
robots@mobilerobots.com or 
Adept MobileRobots, 10 Columbia Drive, Amherst, NH 03031; +1-603-881-7960
*/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.mobilerobots.Aria;

public class ArMapInfoInterface {
  /* (begin code from javabody typemap) */

  private long swigCPtr;
  protected boolean swigCMemOwn;

  /* for internal use by swig only */
  public ArMapInfoInterface(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /* for internal use by swig only */
  public static long getCPtr(ArMapInfoInterface obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /* (end code from javabody typemap) */

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        AriaJavaJNI.delete_ArMapInfoInterface(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static void setMAP_INFO_NAME(String value) {
    AriaJavaJNI.ArMapInfoInterface_MAP_INFO_NAME_set(value);
  }

  public static String getMAP_INFO_NAME() {
    return AriaJavaJNI.ArMapInfoInterface_MAP_INFO_NAME_get();
  }

  public static void setMETA_INFO_NAME(String value) {
    AriaJavaJNI.ArMapInfoInterface_META_INFO_NAME_set(value);
  }

  public static String getMETA_INFO_NAME() {
    return AriaJavaJNI.ArMapInfoInterface_META_INFO_NAME_get();
  }

  public static void setTASK_INFO_NAME(String value) {
    AriaJavaJNI.ArMapInfoInterface_TASK_INFO_NAME_set(value);
  }

  public static String getTASK_INFO_NAME() {
    return AriaJavaJNI.ArMapInfoInterface_TASK_INFO_NAME_get();
  }

  public static void setROUTE_INFO_NAME(String value) {
    AriaJavaJNI.ArMapInfoInterface_ROUTE_INFO_NAME_set(value);
  }

  public static String getROUTE_INFO_NAME() {
    return AriaJavaJNI.ArMapInfoInterface_ROUTE_INFO_NAME_get();
  }

  public static void setSCHED_TASK_INFO_NAME(String value) {
    AriaJavaJNI.ArMapInfoInterface_SCHED_TASK_INFO_NAME_set(value);
  }

  public static String getSCHED_TASK_INFO_NAME() {
    return AriaJavaJNI.ArMapInfoInterface_SCHED_TASK_INFO_NAME_get();
  }

  public static void setSCHED_INFO_NAME(String value) {
    AriaJavaJNI.ArMapInfoInterface_SCHED_INFO_NAME_set(value);
  }

  public static String getSCHED_INFO_NAME() {
    return AriaJavaJNI.ArMapInfoInterface_SCHED_INFO_NAME_get();
  }

  public static void setCAIRN_INFO_NAME(String value) {
    AriaJavaJNI.ArMapInfoInterface_CAIRN_INFO_NAME_set(value);
  }

  public static String getCAIRN_INFO_NAME() {
    return AriaJavaJNI.ArMapInfoInterface_CAIRN_INFO_NAME_get();
  }

  public static void setCUSTOM_INFO_NAME(String value) {
    AriaJavaJNI.ArMapInfoInterface_CUSTOM_INFO_NAME_set(value);
  }

  public static String getCUSTOM_INFO_NAME() {
    return AriaJavaJNI.ArMapInfoInterface_CUSTOM_INFO_NAME_get();
  }

  public int getInfoCount() {
    return AriaJavaJNI.ArMapInfoInterface_getInfoCount(swigCPtr, this);
  }

  public SWIGTYPE_p_std__listT_std__string_t getInfoNames() {
    return new SWIGTYPE_p_std__listT_std__string_t(AriaJavaJNI.ArMapInfoInterface_getInfoNames(swigCPtr, this), true);
  }

  public ArArgumentBuilderPtrList getInfo(String infoName) {
    long cPtr = AriaJavaJNI.ArMapInfoInterface_getInfo__SWIG_0(swigCPtr, this, infoName);
    return (cPtr == 0) ? null : new ArArgumentBuilderPtrList(cPtr, false);
  }

  public ArArgumentBuilderPtrList getInfo(int infoType) {
    long cPtr = AriaJavaJNI.ArMapInfoInterface_getInfo__SWIG_1(swigCPtr, this, infoType);
    return (cPtr == 0) ? null : new ArArgumentBuilderPtrList(cPtr, false);
  }

  public ArArgumentBuilderPtrList getMapInfo() {
    long cPtr = AriaJavaJNI.ArMapInfoInterface_getMapInfo(swigCPtr, this);
    return (cPtr == 0) ? null : new ArArgumentBuilderPtrList(cPtr, false);
  }

  public boolean setInfo(String infoName, ArArgumentBuilderPtrList infoList, SWIGTYPE_p_ArMapChangeDetails changeDetails) {
    return AriaJavaJNI.ArMapInfoInterface_setInfo__SWIG_0(swigCPtr, this, infoName, ArArgumentBuilderPtrList.getCPtr(infoList), infoList, SWIGTYPE_p_ArMapChangeDetails.getCPtr(changeDetails));
  }

  public boolean setInfo(String infoName, ArArgumentBuilderPtrList infoList) {
    return AriaJavaJNI.ArMapInfoInterface_setInfo__SWIG_1(swigCPtr, this, infoName, ArArgumentBuilderPtrList.getCPtr(infoList), infoList);
  }

  public boolean setInfo(int infoType, ArArgumentBuilderPtrList infoList, SWIGTYPE_p_ArMapChangeDetails changeDetails) {
    return AriaJavaJNI.ArMapInfoInterface_setInfo__SWIG_2(swigCPtr, this, infoType, ArArgumentBuilderPtrList.getCPtr(infoList), infoList, SWIGTYPE_p_ArMapChangeDetails.getCPtr(changeDetails));
  }

  public boolean setInfo(int infoType, ArArgumentBuilderPtrList infoList) {
    return AriaJavaJNI.ArMapInfoInterface_setInfo__SWIG_3(swigCPtr, this, infoType, ArArgumentBuilderPtrList.getCPtr(infoList), infoList);
  }

  public boolean setMapInfo(ArArgumentBuilderPtrList mapInfo, SWIGTYPE_p_ArMapChangeDetails changeDetails) {
    return AriaJavaJNI.ArMapInfoInterface_setMapInfo__SWIG_0(swigCPtr, this, ArArgumentBuilderPtrList.getCPtr(mapInfo), mapInfo, SWIGTYPE_p_ArMapChangeDetails.getCPtr(changeDetails));
  }

  public boolean setMapInfo(ArArgumentBuilderPtrList mapInfo) {
    return AriaJavaJNI.ArMapInfoInterface_setMapInfo__SWIG_1(swigCPtr, this, ArArgumentBuilderPtrList.getCPtr(mapInfo), mapInfo);
  }

  public void writeInfoToFunctor(ArFunctor1_CString functor, String endOfLineChars) {
    AriaJavaJNI.ArMapInfoInterface_writeInfoToFunctor(swigCPtr, this, ArFunctor1_CString.getCPtr(functor), functor, endOfLineChars);
  }

  public String getInfoName(int infoType) {
    return AriaJavaJNI.ArMapInfoInterface_getInfoName(swigCPtr, this, infoType);
  }

  public final static class InfoType {
    public final static InfoType MAP_INFO = new InfoType("MAP_INFO");
    public final static InfoType FIRST_INFO = new InfoType("FIRST_INFO", AriaJavaJNI.ArMapInfoInterface_FIRST_INFO_get());
    public final static InfoType META_INFO = new InfoType("META_INFO");
    public final static InfoType TASK_INFO = new InfoType("TASK_INFO");
    public final static InfoType ROUTE_INFO = new InfoType("ROUTE_INFO");
    public final static InfoType SCHED_TASK_INFO = new InfoType("SCHED_TASK_INFO");
    public final static InfoType SCHED_INFO = new InfoType("SCHED_INFO");
    public final static InfoType CAIRN_INFO = new InfoType("CAIRN_INFO");
    public final static InfoType CUSTOM_INFO = new InfoType("CUSTOM_INFO");
    public final static InfoType LAST_INFO = new InfoType("LAST_INFO", AriaJavaJNI.ArMapInfoInterface_LAST_INFO_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static InfoType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + InfoType.class + " with value " + swigValue);
    }

    private InfoType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private InfoType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private InfoType(String swigName, InfoType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static InfoType[] swigValues = { MAP_INFO, FIRST_INFO, META_INFO, TASK_INFO, ROUTE_INFO, SCHED_TASK_INFO, SCHED_INFO, CAIRN_INFO, CUSTOM_INFO, LAST_INFO };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static int INFO_COUNT = AriaJavaJNI.ArMapInfoInterface_INFO_COUNT_get();

}
