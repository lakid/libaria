/*
Adept MobileRobots Robotics Interface for Applications (ARIA)
Copyright (C) 2004-2005 ActivMedia Robotics LLC
Copyright (C) 2006-2010 MobileRobots Inc.
Copyright (C) 2011-2014 Adept Technology

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

If you wish to redistribute ARIA under different terms, contact 
Adept MobileRobots for information about a commercial version of ARIA at 
robots@mobilerobots.com or 
Adept MobileRobots, 10 Columbia Drive, Amherst, NH 03031; +1-603-881-7960
*/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.mobilerobots.Aria;

public class ArTime {
  /* (begin code from javabody typemap) */

  private long swigCPtr;
  protected boolean swigCMemOwn;

  /* for internal use by swig only */
  public ArTime(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /* for internal use by swig only */
  public static long getCPtr(ArTime obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /* (end code from javabody typemap) */

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        AriaJavaJNI.delete_ArTime(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public ArTime() {
    this(AriaJavaJNI.new_ArTime__SWIG_0(), true);
  }

  public ArTime(ArTime other) {
    this(AriaJavaJNI.new_ArTime__SWIG_1(ArTime.getCPtr(other), other), true);
  }

  public int mSecSince(ArTime since) {
    return AriaJavaJNI.ArTime_mSecSince__SWIG_0(swigCPtr, this, ArTime.getCPtr(since), since);
  }

  public long mSecSinceLL(ArTime since) {
    return AriaJavaJNI.ArTime_mSecSinceLL__SWIG_0(swigCPtr, this, ArTime.getCPtr(since), since);
  }

  public int secSince(ArTime since) {
    return AriaJavaJNI.ArTime_secSince__SWIG_0(swigCPtr, this, ArTime.getCPtr(since), since);
  }

  public long secSinceLL(ArTime since) {
    return AriaJavaJNI.ArTime_secSinceLL__SWIG_0(swigCPtr, this, ArTime.getCPtr(since), since);
  }

  public int mSecTo() {
    return AriaJavaJNI.ArTime_mSecTo(swigCPtr, this);
  }

  public long mSecToLL() {
    return AriaJavaJNI.ArTime_mSecToLL(swigCPtr, this);
  }

  public int secTo() {
    return AriaJavaJNI.ArTime_secTo(swigCPtr, this);
  }

  public long secToLL() {
    return AriaJavaJNI.ArTime_secToLL(swigCPtr, this);
  }

  public int mSecSince() {
    return AriaJavaJNI.ArTime_mSecSince__SWIG_1(swigCPtr, this);
  }

  public long mSecSinceLL() {
    return AriaJavaJNI.ArTime_mSecSinceLL__SWIG_1(swigCPtr, this);
  }

  public int secSince() {
    return AriaJavaJNI.ArTime_secSince__SWIG_1(swigCPtr, this);
  }

  public long secSinceLL() {
    return AriaJavaJNI.ArTime_secSinceLL__SWIG_1(swigCPtr, this);
  }

  public boolean isBefore(ArTime testTime) {
    return AriaJavaJNI.ArTime_isBefore(swigCPtr, this, ArTime.getCPtr(testTime), testTime);
  }

  public boolean isAt(ArTime testTime) {
    return AriaJavaJNI.ArTime_isAt(swigCPtr, this, ArTime.getCPtr(testTime), testTime);
  }

  public boolean isAfter(ArTime testTime) {
    return AriaJavaJNI.ArTime_isAfter(swigCPtr, this, ArTime.getCPtr(testTime), testTime);
  }

  public void setToNow() {
    AriaJavaJNI.ArTime_setToNow(swigCPtr, this);
  }

  public boolean addMSec(int ms) {
    return AriaJavaJNI.ArTime_addMSec(swigCPtr, this, ms);
  }

  public boolean addMSecLL(long ms) {
    return AriaJavaJNI.ArTime_addMSecLL(swigCPtr, this, ms);
  }

  public void setSec(long sec) {
    AriaJavaJNI.ArTime_setSec(swigCPtr, this, sec);
  }

  public void setMSec(long msec) {
    AriaJavaJNI.ArTime_setMSec(swigCPtr, this, msec);
  }

  public long getSec() {
    return AriaJavaJNI.ArTime_getSec(swigCPtr, this);
  }

  public long getMSec() {
    return AriaJavaJNI.ArTime_getMSec(swigCPtr, this);
  }

  public void setSecLL(java.math.BigInteger sec) {
    AriaJavaJNI.ArTime_setSecLL(swigCPtr, this, sec);
  }

  public void setMSecLL(java.math.BigInteger msec) {
    AriaJavaJNI.ArTime_setMSecLL(swigCPtr, this, msec);
  }

  public java.math.BigInteger getSecLL() {
    return AriaJavaJNI.ArTime_getSecLL(swigCPtr, this);
  }

  public java.math.BigInteger getMSecLL() {
    return AriaJavaJNI.ArTime_getMSecLL(swigCPtr, this);
  }

  public void log(String prefix) {
    AriaJavaJNI.ArTime_log__SWIG_0(swigCPtr, this, prefix);
  }

  public void log() {
    AriaJavaJNI.ArTime_log__SWIG_1(swigCPtr, this);
  }

  public static boolean usingMonotonicClock() {
    return AriaJavaJNI.ArTime_usingMonotonicClock();
  }

}
