/*
Adept MobileRobots Robotics Interface for Applications (ARIA)
Copyright (C) 2004-2005 ActivMedia Robotics LLC
Copyright (C) 2006-2010 MobileRobots Inc.
Copyright (C) 2011-2014 Adept Technology

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

If you wish to redistribute ARIA under different terms, contact 
Adept MobileRobots for information about a commercial version of ARIA at 
robots@mobilerobots.com or 
Adept MobileRobots, 10 Columbia Drive, Amherst, NH 03031; +1-603-881-7960
*/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.mobilerobots.Aria;

public class ArLaser extends ArRangeDeviceThreaded {
  /* (begin code from javabody_derived typemap) */

  private long swigCPtr;

  /* for internal use by swig only */
  public ArLaser(long cPtr, boolean cMemoryOwn) {
    super(AriaJavaJNI.SWIGArLaserUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  /* for internal use by swig only */
  public static long getCPtr(ArLaser obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /* (end code from javabody_derived typemap) */

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        AriaJavaJNI.delete_ArLaser(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public boolean blockingConnect() {
    return AriaJavaJNI.ArLaser_blockingConnect(swigCPtr, this);
  }

  public boolean asyncConnect() {
    return AriaJavaJNI.ArLaser_asyncConnect(swigCPtr, this);
  }

  public boolean disconnect() {
    return AriaJavaJNI.ArLaser_disconnect(swigCPtr, this);
  }

  public boolean isConnected() {
    return AriaJavaJNI.ArLaser_isConnected(swigCPtr, this);
  }

  public boolean isTryingToConnect() {
    return AriaJavaJNI.ArLaser_isTryingToConnect(swigCPtr, this);
  }

  public void setConnectionTimeoutSeconds(double seconds) {
    AriaJavaJNI.ArLaser_setConnectionTimeoutSeconds(swigCPtr, this, seconds);
  }

  public double getConnectionTimeoutSeconds() {
    return AriaJavaJNI.ArLaser_getConnectionTimeoutSeconds(swigCPtr, this);
  }

  public ArTime getLastReadingTime() {
    return new ArTime(AriaJavaJNI.ArLaser_getLastReadingTime(swigCPtr, this), true);
  }

  public int getReadingCount() {
    return AriaJavaJNI.ArLaser_getReadingCount(swigCPtr, this);
  }

  public void setDeviceConnection(ArDeviceConnection conn) {
    AriaJavaJNI.ArLaser_setDeviceConnection(swigCPtr, this, ArDeviceConnection.getCPtr(conn), conn);
  }

  public ArDeviceConnection getDeviceConnection() {
    long cPtr = AriaJavaJNI.ArLaser_getDeviceConnection(swigCPtr, this);
    return (cPtr == 0) ? null : new ArDeviceConnection(cPtr, false);
  }

  public void setSensorPosition(double x, double y, double th, double z) {
    AriaJavaJNI.ArLaser_setSensorPosition__SWIG_0(swigCPtr, this, x, y, th, z);
  }

  public void setSensorPosition(double x, double y, double th) {
    AriaJavaJNI.ArLaser_setSensorPosition__SWIG_1(swigCPtr, this, x, y, th);
  }

  public void setSensorPosition(ArPose pose, double z) {
    AriaJavaJNI.ArLaser_setSensorPosition__SWIG_2(swigCPtr, this, ArPose.getCPtr(pose), pose, z);
  }

  public void setSensorPosition(ArPose pose) {
    AriaJavaJNI.ArLaser_setSensorPosition__SWIG_3(swigCPtr, this, ArPose.getCPtr(pose), pose);
  }

  public boolean hasSensorPosition() {
    return AriaJavaJNI.ArLaser_hasSensorPosition(swigCPtr, this);
  }

  public ArPose getSensorPosition() {
    return new ArPose(AriaJavaJNI.ArLaser_getSensorPosition(swigCPtr, this), true);
  }

  public double getSensorPositionX() {
    return AriaJavaJNI.ArLaser_getSensorPositionX(swigCPtr, this);
  }

  public double getSensorPositionY() {
    return AriaJavaJNI.ArLaser_getSensorPositionY(swigCPtr, this);
  }

  public double getSensorPositionZ() {
    return AriaJavaJNI.ArLaser_getSensorPositionZ(swigCPtr, this);
  }

  public double getSensorPositionTh() {
    return AriaJavaJNI.ArLaser_getSensorPositionTh(swigCPtr, this);
  }

  public int getLaserNumber() {
    return AriaJavaJNI.ArLaser_getLaserNumber(swigCPtr, this);
  }

  public void setInfoLogLevel(ArLog.LogLevel infoLogLevel) {
    AriaJavaJNI.ArLaser_setInfoLogLevel(swigCPtr, this, infoLogLevel.swigValue());
  }

  public ArLog.LogLevel getInfoLogLevel() {
    return ArLog.LogLevel.swigToEnum(AriaJavaJNI.ArLaser_getInfoLogLevel(swigCPtr, this));
  }

  public void setCumulativeCleanDist(double dist) {
    AriaJavaJNI.ArLaser_setCumulativeCleanDist(swigCPtr, this, dist);
  }

  public double getCumulativeCleanDist() {
    return AriaJavaJNI.ArLaser_getCumulativeCleanDist(swigCPtr, this);
  }

  public void setCumulativeCleanInterval(int milliSeconds) {
    AriaJavaJNI.ArLaser_setCumulativeCleanInterval(swigCPtr, this, milliSeconds);
  }

  public int getCumulativeCleanInterval() {
    return AriaJavaJNI.ArLaser_getCumulativeCleanInterval(swigCPtr, this);
  }

  public void setCumulativeCleanOffset(int milliSeconds) {
    AriaJavaJNI.ArLaser_setCumulativeCleanOffset(swigCPtr, this, milliSeconds);
  }

  public int getCumulativeCleanOffset() {
    return AriaJavaJNI.ArLaser_getCumulativeCleanOffset(swigCPtr, this);
  }

  public void resetLastCumulativeCleanTime() {
    AriaJavaJNI.ArLaser_resetLastCumulativeCleanTime(swigCPtr, this);
  }

  public boolean addIgnoreReadings(String ignoreReadings) {
    return AriaJavaJNI.ArLaser_addIgnoreReadings(swigCPtr, this, ignoreReadings);
  }

  public void addIgnoreReading(double ignoreReading) {
    AriaJavaJNI.ArLaser_addIgnoreReading(swigCPtr, this, ignoreReading);
  }

  public void clearIgnoreReadings() {
    AriaJavaJNI.ArLaser_clearIgnoreReadings(swigCPtr, this);
  }

  public SWIGTYPE_p_std__setT_int_t getIgnoreReadings() {
    long cPtr = AriaJavaJNI.ArLaser_getIgnoreReadings(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_std__setT_int_t(cPtr, false);
  }

  public boolean getFlipped() {
    return AriaJavaJNI.ArLaser_getFlipped(swigCPtr, this);
  }

  public boolean setFlipped(boolean flipped) {
    return AriaJavaJNI.ArLaser_setFlipped(swigCPtr, this, flipped);
  }

  public int getDefaultTcpPort() {
    return AriaJavaJNI.ArLaser_getDefaultTcpPort(swigCPtr, this);
  }

  public String getDefaultPortType() {
    return AriaJavaJNI.ArLaser_getDefaultPortType(swigCPtr, this);
  }

  public boolean canSetDegrees() {
    return AriaJavaJNI.ArLaser_canSetDegrees(swigCPtr, this);
  }

  public double getStartDegreesMin() {
    return AriaJavaJNI.ArLaser_getStartDegreesMin(swigCPtr, this);
  }

  public double getStartDegreesMax() {
    return AriaJavaJNI.ArLaser_getStartDegreesMax(swigCPtr, this);
  }

  public double getStartDegrees() {
    return AriaJavaJNI.ArLaser_getStartDegrees(swigCPtr, this);
  }

  public boolean setStartDegrees(double startDegrees) {
    return AriaJavaJNI.ArLaser_setStartDegrees(swigCPtr, this, startDegrees);
  }

  public double getEndDegreesMin() {
    return AriaJavaJNI.ArLaser_getEndDegreesMin(swigCPtr, this);
  }

  public double getEndDegreesMax() {
    return AriaJavaJNI.ArLaser_getEndDegreesMax(swigCPtr, this);
  }

  public double getEndDegrees() {
    return AriaJavaJNI.ArLaser_getEndDegrees(swigCPtr, this);
  }

  public boolean setEndDegrees(double endDegrees) {
    return AriaJavaJNI.ArLaser_setEndDegrees(swigCPtr, this, endDegrees);
  }

  public boolean canChooseDegrees() {
    return AriaJavaJNI.ArLaser_canChooseDegrees(swigCPtr, this);
  }

  public SWIGTYPE_p_std__listT_std__string_t getDegreesChoices() {
    return new SWIGTYPE_p_std__listT_std__string_t(AriaJavaJNI.ArLaser_getDegreesChoices(swigCPtr, this), true);
  }

  public String getDegreesChoicesString() {
    return AriaJavaJNI.ArLaser_getDegreesChoicesString(swigCPtr, this);
  }

  public boolean chooseDegrees(String range) {
    return AriaJavaJNI.ArLaser_chooseDegrees(swigCPtr, this, range);
  }

  public String getDegreesChoice() {
    return AriaJavaJNI.ArLaser_getDegreesChoice(swigCPtr, this);
  }

  public double getDegreesChoiceDouble() {
    return AriaJavaJNI.ArLaser_getDegreesChoiceDouble(swigCPtr, this);
  }

  public SWIGTYPE_p_std__mapT_std__string_double_t getDegreesChoicesMap() {
    return new SWIGTYPE_p_std__mapT_std__string_double_t(AriaJavaJNI.ArLaser_getDegreesChoicesMap(swigCPtr, this), true);
  }

  public boolean canSetIncrement() {
    return AriaJavaJNI.ArLaser_canSetIncrement(swigCPtr, this);
  }

  public double getIncrementMin() {
    return AriaJavaJNI.ArLaser_getIncrementMin(swigCPtr, this);
  }

  public double getIncrementMax() {
    return AriaJavaJNI.ArLaser_getIncrementMax(swigCPtr, this);
  }

  public double getIncrement() {
    return AriaJavaJNI.ArLaser_getIncrement(swigCPtr, this);
  }

  public boolean setIncrement(double increment) {
    return AriaJavaJNI.ArLaser_setIncrement(swigCPtr, this, increment);
  }

  public boolean canChooseIncrement() {
    return AriaJavaJNI.ArLaser_canChooseIncrement(swigCPtr, this);
  }

  public SWIGTYPE_p_std__listT_std__string_t getIncrementChoices() {
    return new SWIGTYPE_p_std__listT_std__string_t(AriaJavaJNI.ArLaser_getIncrementChoices(swigCPtr, this), true);
  }

  public String getIncrementChoicesString() {
    return AriaJavaJNI.ArLaser_getIncrementChoicesString(swigCPtr, this);
  }

  public boolean chooseIncrement(String increment) {
    return AriaJavaJNI.ArLaser_chooseIncrement(swigCPtr, this, increment);
  }

  public String getIncrementChoice() {
    return AriaJavaJNI.ArLaser_getIncrementChoice(swigCPtr, this);
  }

  public double getIncrementChoiceDouble() {
    return AriaJavaJNI.ArLaser_getIncrementChoiceDouble(swigCPtr, this);
  }

  public SWIGTYPE_p_std__mapT_std__string_double_t getIncrementChoicesMap() {
    return new SWIGTYPE_p_std__mapT_std__string_double_t(AriaJavaJNI.ArLaser_getIncrementChoicesMap(swigCPtr, this), true);
  }

  public boolean canChooseUnits() {
    return AriaJavaJNI.ArLaser_canChooseUnits(swigCPtr, this);
  }

  public SWIGTYPE_p_std__listT_std__string_t getUnitsChoices() {
    return new SWIGTYPE_p_std__listT_std__string_t(AriaJavaJNI.ArLaser_getUnitsChoices(swigCPtr, this), true);
  }

  public String getUnitsChoicesString() {
    return AriaJavaJNI.ArLaser_getUnitsChoicesString(swigCPtr, this);
  }

  public boolean chooseUnits(String units) {
    return AriaJavaJNI.ArLaser_chooseUnits(swigCPtr, this, units);
  }

  public String getUnitsChoice() {
    return AriaJavaJNI.ArLaser_getUnitsChoice(swigCPtr, this);
  }

  public boolean canChooseReflectorBits() {
    return AriaJavaJNI.ArLaser_canChooseReflectorBits(swigCPtr, this);
  }

  public SWIGTYPE_p_std__listT_std__string_t getReflectorBitsChoices() {
    return new SWIGTYPE_p_std__listT_std__string_t(AriaJavaJNI.ArLaser_getReflectorBitsChoices(swigCPtr, this), true);
  }

  public String getReflectorBitsChoicesString() {
    return AriaJavaJNI.ArLaser_getReflectorBitsChoicesString(swigCPtr, this);
  }

  public boolean chooseReflectorBits(String reflectorBits) {
    return AriaJavaJNI.ArLaser_chooseReflectorBits(swigCPtr, this, reflectorBits);
  }

  public String getReflectorBitsChoice() {
    return AriaJavaJNI.ArLaser_getReflectorBitsChoice(swigCPtr, this);
  }

  public boolean canSetPowerControlled() {
    return AriaJavaJNI.ArLaser_canSetPowerControlled(swigCPtr, this);
  }

  public boolean setPowerControlled(boolean powerControlled) {
    return AriaJavaJNI.ArLaser_setPowerControlled(swigCPtr, this, powerControlled);
  }

  public boolean getPowerControlled() {
    return AriaJavaJNI.ArLaser_getPowerControlled(swigCPtr, this);
  }

  public boolean canChooseStartingBaud() {
    return AriaJavaJNI.ArLaser_canChooseStartingBaud(swigCPtr, this);
  }

  public SWIGTYPE_p_std__listT_std__string_t getStartingBaudChoices() {
    return new SWIGTYPE_p_std__listT_std__string_t(AriaJavaJNI.ArLaser_getStartingBaudChoices(swigCPtr, this), true);
  }

  public String getStartingBaudChoicesString() {
    return AriaJavaJNI.ArLaser_getStartingBaudChoicesString(swigCPtr, this);
  }

  public boolean chooseStartingBaud(String reflectorBits) {
    return AriaJavaJNI.ArLaser_chooseStartingBaud(swigCPtr, this, reflectorBits);
  }

  public String getStartingBaudChoice() {
    return AriaJavaJNI.ArLaser_getStartingBaudChoice(swigCPtr, this);
  }

  public boolean canChooseAutoBaud() {
    return AriaJavaJNI.ArLaser_canChooseAutoBaud(swigCPtr, this);
  }

  public SWIGTYPE_p_std__listT_std__string_t getAutoBaudChoices() {
    return new SWIGTYPE_p_std__listT_std__string_t(AriaJavaJNI.ArLaser_getAutoBaudChoices(swigCPtr, this), true);
  }

  public String getAutoBaudChoicesString() {
    return AriaJavaJNI.ArLaser_getAutoBaudChoicesString(swigCPtr, this);
  }

  public boolean chooseAutoBaud(String reflectorBits) {
    return AriaJavaJNI.ArLaser_chooseAutoBaud(swigCPtr, this, reflectorBits);
  }

  public String getAutoBaudChoice() {
    return AriaJavaJNI.ArLaser_getAutoBaudChoice(swigCPtr, this);
  }

  public void addConnectCB(ArFunctor functor, int position) {
    AriaJavaJNI.ArLaser_addConnectCB__SWIG_0(swigCPtr, this, ArFunctor.getCPtr(functor), functor, position);
  }

  public void addConnectCB(ArFunctor functor) {
    AriaJavaJNI.ArLaser_addConnectCB__SWIG_1(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void remConnectCB(ArFunctor functor) {
    AriaJavaJNI.ArLaser_remConnectCB(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void addFailedConnectCB(ArFunctor functor, int position) {
    AriaJavaJNI.ArLaser_addFailedConnectCB__SWIG_0(swigCPtr, this, ArFunctor.getCPtr(functor), functor, position);
  }

  public void addFailedConnectCB(ArFunctor functor) {
    AriaJavaJNI.ArLaser_addFailedConnectCB__SWIG_1(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void remFailedConnectCB(ArFunctor functor) {
    AriaJavaJNI.ArLaser_remFailedConnectCB(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void addDisconnectNormallyCB(ArFunctor functor, int position) {
    AriaJavaJNI.ArLaser_addDisconnectNormallyCB__SWIG_0(swigCPtr, this, ArFunctor.getCPtr(functor), functor, position);
  }

  public void addDisconnectNormallyCB(ArFunctor functor) {
    AriaJavaJNI.ArLaser_addDisconnectNormallyCB__SWIG_1(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void remDisconnectNormallyCB(ArFunctor functor) {
    AriaJavaJNI.ArLaser_remDisconnectNormallyCB(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void addDisconnectOnErrorCB(ArFunctor functor, int position) {
    AriaJavaJNI.ArLaser_addDisconnectOnErrorCB__SWIG_0(swigCPtr, this, ArFunctor.getCPtr(functor), functor, position);
  }

  public void addDisconnectOnErrorCB(ArFunctor functor) {
    AriaJavaJNI.ArLaser_addDisconnectOnErrorCB__SWIG_1(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void remDisconnectOnErrorCB(ArFunctor functor) {
    AriaJavaJNI.ArLaser_remDisconnectOnErrorCB(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void addReadingCB(ArFunctor functor, int position) {
    AriaJavaJNI.ArLaser_addReadingCB__SWIG_0(swigCPtr, this, ArFunctor.getCPtr(functor), functor, position);
  }

  public void addReadingCB(ArFunctor functor) {
    AriaJavaJNI.ArLaser_addReadingCB__SWIG_1(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void remReadingCB(ArFunctor functor) {
    AriaJavaJNI.ArLaser_remReadingCB(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public long getAbsoluteMaxRange() {
    return AriaJavaJNI.ArLaser_getAbsoluteMaxRange(swigCPtr, this);
  }

  public void copyReadingCount(ArLaser laser) {
    AriaJavaJNI.ArLaser_copyReadingCount(swigCPtr, this, ArLaser.getCPtr(laser), laser);
  }

  public void setMaxRange(long maxRange) {
    AriaJavaJNI.ArLaser_setMaxRange(swigCPtr, this, maxRange);
  }

  public void setCumulativeBufferSize(long size) {
    AriaJavaJNI.ArLaser_setCumulativeBufferSize(swigCPtr, this, size);
  }

  public boolean laserCheckParams() {
    return AriaJavaJNI.ArLaser_laserCheckParams(swigCPtr, this);
  }

  public void applyTransform(ArTransform trans, boolean doCumulative) {
    AriaJavaJNI.ArLaser_applyTransform__SWIG_0(swigCPtr, this, ArTransform.getCPtr(trans), trans, doCumulative);
  }

  public void applyTransform(ArTransform trans) {
    AriaJavaJNI.ArLaser_applyTransform__SWIG_1(swigCPtr, this, ArTransform.getCPtr(trans), trans);
  }

  public static void useSimpleNamingForAllLasers() {
    AriaJavaJNI.ArLaser_useSimpleNamingForAllLasers();
  }

}
