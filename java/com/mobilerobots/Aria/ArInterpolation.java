/*
Adept MobileRobots Robotics Interface for Applications (ARIA)
Copyright (C) 2004-2005 ActivMedia Robotics LLC
Copyright (C) 2006-2010 MobileRobots Inc.
Copyright (C) 2011-2014 Adept Technology

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

If you wish to redistribute ARIA under different terms, contact 
Adept MobileRobots for information about a commercial version of ARIA at 
robots@mobilerobots.com or 
Adept MobileRobots, 10 Columbia Drive, Amherst, NH 03031; +1-603-881-7960
*/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.mobilerobots.Aria;

public class ArInterpolation {
  /* (begin code from javabody typemap) */

  private long swigCPtr;
  protected boolean swigCMemOwn;

  /* for internal use by swig only */
  public ArInterpolation(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /* for internal use by swig only */
  public static long getCPtr(ArInterpolation obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  /* (end code from javabody typemap) */

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        AriaJavaJNI.delete_ArInterpolation(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public ArInterpolation(long numberOfReadings) {
    this(AriaJavaJNI.new_ArInterpolation__SWIG_0(numberOfReadings), true);
  }

  public ArInterpolation() {
    this(AriaJavaJNI.new_ArInterpolation__SWIG_1(), true);
  }

  public boolean addReading(ArTime timeOfReading, ArPose position) {
    return AriaJavaJNI.ArInterpolation_addReading(swigCPtr, this, ArTime.getCPtr(timeOfReading), timeOfReading, ArPose.getCPtr(position), position);
  }

  public int getPose(ArTime timeStamp, ArPose position, ArPoseWithTime lastData) {
    return AriaJavaJNI.ArInterpolation_getPose__SWIG_0(swigCPtr, this, ArTime.getCPtr(timeStamp), timeStamp, ArPose.getCPtr(position), position, ArPoseWithTime.getCPtr(lastData), lastData);
  }

  public int getPose(ArTime timeStamp, ArPose position) {
    return AriaJavaJNI.ArInterpolation_getPose__SWIG_1(swigCPtr, this, ArTime.getCPtr(timeStamp), timeStamp, ArPose.getCPtr(position), position);
  }

  public void setName(String name) {
    AriaJavaJNI.ArInterpolation_setName(swigCPtr, this, name);
  }

  public String getName() {
    return AriaJavaJNI.ArInterpolation_getName(swigCPtr, this);
  }

  public void setAllowedMSForPrediction(int ms) {
    AriaJavaJNI.ArInterpolation_setAllowedMSForPrediction__SWIG_0(swigCPtr, this, ms);
  }

  public void setAllowedMSForPrediction() {
    AriaJavaJNI.ArInterpolation_setAllowedMSForPrediction__SWIG_1(swigCPtr, this);
  }

  public int getAllowedMSForPrediction() {
    return AriaJavaJNI.ArInterpolation_getAllowedMSForPrediction(swigCPtr, this);
  }

  public void setAllowedPercentageForPrediction(int percentage) {
    AriaJavaJNI.ArInterpolation_setAllowedPercentageForPrediction__SWIG_0(swigCPtr, this, percentage);
  }

  public void setAllowedPercentageForPrediction() {
    AriaJavaJNI.ArInterpolation_setAllowedPercentageForPrediction__SWIG_1(swigCPtr, this);
  }

  public int getAllowedPercentageForPrediction() {
    return AriaJavaJNI.ArInterpolation_getAllowedPercentageForPrediction(swigCPtr, this);
  }

  public void setLogPrediction(boolean logPrediction) {
    AriaJavaJNI.ArInterpolation_setLogPrediction__SWIG_0(swigCPtr, this, logPrediction);
  }

  public void setLogPrediction() {
    AriaJavaJNI.ArInterpolation_setLogPrediction__SWIG_1(swigCPtr, this);
  }

  public boolean getLogPrediction() {
    return AriaJavaJNI.ArInterpolation_getLogPrediction(swigCPtr, this);
  }

  public void setNumberOfReadings(long numberOfReadings) {
    AriaJavaJNI.ArInterpolation_setNumberOfReadings(swigCPtr, this, numberOfReadings);
  }

  public long getNumberOfReadings() {
    return AriaJavaJNI.ArInterpolation_getNumberOfReadings(swigCPtr, this);
  }

  public void reset() {
    AriaJavaJNI.ArInterpolation_reset(swigCPtr, this);
  }

}
