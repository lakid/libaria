/*
Adept MobileRobots Robotics Interface for Applications (ARIA)
Copyright (C) 2004-2005 ActivMedia Robotics LLC
Copyright (C) 2006-2010 MobileRobots Inc.
Copyright (C) 2011-2014 Adept Technology

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

If you wish to redistribute ARIA under different terms, contact 
Adept MobileRobots for information about a commercial version of ARIA at 
robots@mobilerobots.com or 
Adept MobileRobots, 10 Columbia Drive, Amherst, NH 03031; +1-603-881-7960
*/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.mobilerobots.ArNetworking;
import com.mobilerobots.Aria.*;
public class ArClientData {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  /* for internal use by swig only */
  public ArClientData(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  /* for internal use by swig only */
  public static long getCPtr(ArClientData obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ArNetworkingJavaJNI.delete_ArClientData(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public ArClientData(String name, String description, long command, ArFunctor_NetPacket functor) {
    this(ArNetworkingJavaJNI.new_ArClientData(name, description, command, ArFunctor_NetPacket.getCPtr(functor), functor), true);
  }

  public String getName() {
    return ArNetworkingJavaJNI.ArClientData_getName(swigCPtr, this);
  }

  public String getDescription() {
    return ArNetworkingJavaJNI.ArClientData_getDescription(swigCPtr, this);
  }

  public long getCommand() {
    return ArNetworkingJavaJNI.ArClientData_getCommand(swigCPtr, this);
  }

  public String getArgumentDescription() {
    return ArNetworkingJavaJNI.ArClientData_getArgumentDescription(swigCPtr, this);
  }

  public String getReturnDescription() {
    return ArNetworkingJavaJNI.ArClientData_getReturnDescription(swigCPtr, this);
  }

  public String getCommandGroup() {
    return ArNetworkingJavaJNI.ArClientData_getCommandGroup(swigCPtr, this);
  }

  public boolean hasDataFlag(String dataFlag) {
    return ArNetworkingJavaJNI.ArClientData_hasDataFlag(swigCPtr, this, dataFlag);
  }

  public String getDataFlagsString() {
    return ArNetworkingJavaJNI.ArClientData_getDataFlagsString(swigCPtr, this);
  }

  public SWIGTYPE_p_std__listT_ArFunctor1T_ArNetPacket_p_t_p_t getFunctorList() {
    long cPtr = ArNetworkingJavaJNI.ArClientData_getFunctorList(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_std__listT_ArFunctor1T_ArNetPacket_p_t_p_t(cPtr, false);
  }

  public int lockFunctorList() {
    return ArNetworkingJavaJNI.ArClientData_lockFunctorList(swigCPtr, this);
  }

  public int tryLockFunctorList() {
    return ArNetworkingJavaJNI.ArClientData_tryLockFunctorList(swigCPtr, this);
  }

  public int unlockFunctorList() {
    return ArNetworkingJavaJNI.ArClientData_unlockFunctorList(swigCPtr, this);
  }

  public void addFunctor(ArFunctor_NetPacket functor) {
    ArNetworkingJavaJNI.ArClientData_addFunctor(swigCPtr, this, ArFunctor_NetPacket.getCPtr(functor), functor);
  }

  public void remFunctor(ArFunctor_NetPacket functor) {
    ArNetworkingJavaJNI.ArClientData_remFunctor(swigCPtr, this, ArFunctor_NetPacket.getCPtr(functor), functor);
  }

  public void setArgRetDescs(String argDesc, String retDesc) {
    ArNetworkingJavaJNI.ArClientData_setArgRetDescs(swigCPtr, this, argDesc, retDesc);
  }

  public void setCommandGroup(String commandGroup) {
    ArNetworkingJavaJNI.ArClientData_setCommandGroup(swigCPtr, this, commandGroup);
  }

  public void addDataFlags(String dataFlags) {
    ArNetworkingJavaJNI.ArClientData_addDataFlags(swigCPtr, this, dataFlags);
  }

}
