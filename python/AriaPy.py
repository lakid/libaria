"""
Adept MobileRobots Robotics Interface for Applications (ARIA)
Copyright (C) 2004-2005 ActivMedia Robotics LLC
Copyright (C) 2006-2010 MobileRobots Inc.
Copyright (C) 2011-2014 Adept Technology

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

If you wish to redistribute ARIA under different terms, contact 
Adept MobileRobots for information about a commercial version of ARIA at 
robots@mobilerobots.com or 
Adept MobileRobots, 10 Columbia Drive, Amherst, NH 03031; +1-603-881-7960
"""
# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Python wrapper library for Aria
"""

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AriaPy', [dirname(__file__)])
        except ImportError:
            import _AriaPy
            return _AriaPy
        if fp is not None:
            try:
                _mod = imp.load_module('_AriaPy', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _AriaPy = swig_import_helper()
    del swig_import_helper
else:
    import _AriaPy
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    """Proxy of C++ swig::SwigPyIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _AriaPy.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """
        incr(self, size_t n = 1) -> SwigPyIterator
        incr(self) -> SwigPyIterator
        """
        return _AriaPy.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """
        decr(self, size_t n = 1) -> SwigPyIterator
        decr(self) -> SwigPyIterator
        """
        return _AriaPy.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _AriaPy.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(self, SwigPyIterator x) -> bool"""
        return _AriaPy.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _AriaPy.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _AriaPy.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _AriaPy.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _AriaPy.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _AriaPy.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _AriaPy.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _AriaPy.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _AriaPy.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _AriaPy.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _AriaPy.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _AriaPy.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _AriaPy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ArPoseWithTimeVector(object):
    """Proxy of C++ std::vector<(ArPoseWithTime)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _AriaPy.ArPoseWithTimeVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _AriaPy.ArPoseWithTimeVector___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _AriaPy.ArPoseWithTimeVector___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _AriaPy.ArPoseWithTimeVector___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _AriaPy.ArPoseWithTimeVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> ArPoseWithTimeVector"""
        return _AriaPy.ArPoseWithTimeVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, ArPoseWithTimeVector v)"""
        return _AriaPy.ArPoseWithTimeVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _AriaPy.ArPoseWithTimeVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _AriaPy.ArPoseWithTimeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> ArPoseWithTimeVector
        __getitem__(self, difference_type i) -> value_type
        """
        return _AriaPy.ArPoseWithTimeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, ArPoseWithTimeVector v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _AriaPy.ArPoseWithTimeVector___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _AriaPy.ArPoseWithTimeVector_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _AriaPy.ArPoseWithTimeVector_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _AriaPy.ArPoseWithTimeVector_size(self)

    def clear(self):
        """clear(self)"""
        return _AriaPy.ArPoseWithTimeVector_clear(self)

    def swap(self, *args):
        """swap(self, ArPoseWithTimeVector v)"""
        return _AriaPy.ArPoseWithTimeVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _AriaPy.ArPoseWithTimeVector_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _AriaPy.ArPoseWithTimeVector_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _AriaPy.ArPoseWithTimeVector_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _AriaPy.ArPoseWithTimeVector_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _AriaPy.ArPoseWithTimeVector_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _AriaPy.ArPoseWithTimeVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _AriaPy.ArPoseWithTimeVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> ArPoseWithTimeVector
        __init__(self, ArPoseWithTimeVector arg0) -> ArPoseWithTimeVector
        __init__(self, size_type size) -> ArPoseWithTimeVector
        __init__(self, size_type size, value_type value) -> ArPoseWithTimeVector
        """
        this = _AriaPy.new_ArPoseWithTimeVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _AriaPy.ArPoseWithTimeVector_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _AriaPy.ArPoseWithTimeVector_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _AriaPy.ArPoseWithTimeVector_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _AriaPy.ArPoseWithTimeVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _AriaPy.ArPoseWithTimeVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _AriaPy.ArPoseWithTimeVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _AriaPy.ArPoseWithTimeVector_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _AriaPy.ArPoseWithTimeVector_capacity(self)

    __swig_destroy__ = _AriaPy.delete_ArPoseWithTimeVector
    __del__ = lambda self : None;
ArPoseWithTimeVector_swigregister = _AriaPy.ArPoseWithTimeVector_swigregister
ArPoseWithTimeVector_swigregister(ArPoseWithTimeVector)

class ArSensorReadingVector(object):
    """Proxy of C++ std::vector<(ArSensorReading)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _AriaPy.ArSensorReadingVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _AriaPy.ArSensorReadingVector___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _AriaPy.ArSensorReadingVector___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _AriaPy.ArSensorReadingVector___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _AriaPy.ArSensorReadingVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> ArSensorReadingVector"""
        return _AriaPy.ArSensorReadingVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, ArSensorReadingVector v)"""
        return _AriaPy.ArSensorReadingVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _AriaPy.ArSensorReadingVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _AriaPy.ArSensorReadingVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> ArSensorReadingVector
        __getitem__(self, difference_type i) -> value_type
        """
        return _AriaPy.ArSensorReadingVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, ArSensorReadingVector v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _AriaPy.ArSensorReadingVector___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _AriaPy.ArSensorReadingVector_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _AriaPy.ArSensorReadingVector_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _AriaPy.ArSensorReadingVector_size(self)

    def clear(self):
        """clear(self)"""
        return _AriaPy.ArSensorReadingVector_clear(self)

    def swap(self, *args):
        """swap(self, ArSensorReadingVector v)"""
        return _AriaPy.ArSensorReadingVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _AriaPy.ArSensorReadingVector_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _AriaPy.ArSensorReadingVector_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _AriaPy.ArSensorReadingVector_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _AriaPy.ArSensorReadingVector_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _AriaPy.ArSensorReadingVector_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _AriaPy.ArSensorReadingVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _AriaPy.ArSensorReadingVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> ArSensorReadingVector
        __init__(self, ArSensorReadingVector arg0) -> ArSensorReadingVector
        __init__(self, size_type size) -> ArSensorReadingVector
        __init__(self, size_type size, value_type value) -> ArSensorReadingVector
        """
        this = _AriaPy.new_ArSensorReadingVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _AriaPy.ArSensorReadingVector_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _AriaPy.ArSensorReadingVector_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _AriaPy.ArSensorReadingVector_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _AriaPy.ArSensorReadingVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _AriaPy.ArSensorReadingVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _AriaPy.ArSensorReadingVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _AriaPy.ArSensorReadingVector_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _AriaPy.ArSensorReadingVector_capacity(self)

    __swig_destroy__ = _AriaPy.delete_ArSensorReadingVector
    __del__ = lambda self : None;
ArSensorReadingVector_swigregister = _AriaPy.ArSensorReadingVector_swigregister
ArSensorReadingVector_swigregister(ArSensorReadingVector)

class DoubleVector(object):
    """Proxy of C++ std::vector<(double)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _AriaPy.DoubleVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _AriaPy.DoubleVector___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _AriaPy.DoubleVector___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _AriaPy.DoubleVector___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _AriaPy.DoubleVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> DoubleVector"""
        return _AriaPy.DoubleVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, DoubleVector v)"""
        return _AriaPy.DoubleVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _AriaPy.DoubleVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _AriaPy.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> DoubleVector
        __getitem__(self, difference_type i) -> value_type
        """
        return _AriaPy.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, DoubleVector v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _AriaPy.DoubleVector___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _AriaPy.DoubleVector_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _AriaPy.DoubleVector_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _AriaPy.DoubleVector_size(self)

    def clear(self):
        """clear(self)"""
        return _AriaPy.DoubleVector_clear(self)

    def swap(self, *args):
        """swap(self, DoubleVector v)"""
        return _AriaPy.DoubleVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _AriaPy.DoubleVector_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _AriaPy.DoubleVector_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _AriaPy.DoubleVector_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _AriaPy.DoubleVector_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _AriaPy.DoubleVector_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _AriaPy.DoubleVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _AriaPy.DoubleVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> DoubleVector
        __init__(self, DoubleVector arg0) -> DoubleVector
        __init__(self, size_type size) -> DoubleVector
        __init__(self, size_type size, value_type value) -> DoubleVector
        """
        this = _AriaPy.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _AriaPy.DoubleVector_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _AriaPy.DoubleVector_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _AriaPy.DoubleVector_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _AriaPy.DoubleVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _AriaPy.DoubleVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _AriaPy.DoubleVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _AriaPy.DoubleVector_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _AriaPy.DoubleVector_capacity(self)

    __swig_destroy__ = _AriaPy.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _AriaPy.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class ArMapObjectPtrList(object):
    """Proxy of C++ std::list<(p.ArMapObject)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _AriaPy.ArMapObjectPtrList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _AriaPy.ArMapObjectPtrList___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _AriaPy.ArMapObjectPtrList___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _AriaPy.ArMapObjectPtrList___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _AriaPy.ArMapObjectPtrList_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> ArMapObjectPtrList"""
        return _AriaPy.ArMapObjectPtrList___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, ArMapObjectPtrList v)"""
        return _AriaPy.ArMapObjectPtrList___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _AriaPy.ArMapObjectPtrList___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _AriaPy.ArMapObjectPtrList___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> ArMapObjectPtrList
        __getitem__(self, difference_type i) -> value_type
        """
        return _AriaPy.ArMapObjectPtrList___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, ArMapObjectPtrList v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _AriaPy.ArMapObjectPtrList___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _AriaPy.ArMapObjectPtrList_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _AriaPy.ArMapObjectPtrList_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _AriaPy.ArMapObjectPtrList_size(self)

    def clear(self):
        """clear(self)"""
        return _AriaPy.ArMapObjectPtrList_clear(self)

    def swap(self, *args):
        """swap(self, ArMapObjectPtrList v)"""
        return _AriaPy.ArMapObjectPtrList_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _AriaPy.ArMapObjectPtrList_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _AriaPy.ArMapObjectPtrList_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _AriaPy.ArMapObjectPtrList_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _AriaPy.ArMapObjectPtrList_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _AriaPy.ArMapObjectPtrList_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _AriaPy.ArMapObjectPtrList_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _AriaPy.ArMapObjectPtrList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> ArMapObjectPtrList
        __init__(self, ArMapObjectPtrList arg0) -> ArMapObjectPtrList
        __init__(self, size_type size) -> ArMapObjectPtrList
        __init__(self, size_type size, value_type value) -> ArMapObjectPtrList
        """
        this = _AriaPy.new_ArMapObjectPtrList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _AriaPy.ArMapObjectPtrList_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _AriaPy.ArMapObjectPtrList_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _AriaPy.ArMapObjectPtrList_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _AriaPy.ArMapObjectPtrList_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _AriaPy.ArMapObjectPtrList_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _AriaPy.ArMapObjectPtrList_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _AriaPy.ArMapObjectPtrList_pop_front(self)

    def push_front(self, *args):
        """push_front(self, value_type x)"""
        return _AriaPy.ArMapObjectPtrList_push_front(self, *args)

    def remove(self, *args):
        """remove(self, value_type x)"""
        return _AriaPy.ArMapObjectPtrList_remove(self, *args)

    def unique(self):
        """unique(self)"""
        return _AriaPy.ArMapObjectPtrList_unique(self)

    def reverse(self):
        """reverse(self)"""
        return _AriaPy.ArMapObjectPtrList_reverse(self)

    def sort(self):
        """sort(self)"""
        return _AriaPy.ArMapObjectPtrList_sort(self)

    def merge(self, *args):
        """merge(self, ArMapObjectPtrList x)"""
        return _AriaPy.ArMapObjectPtrList_merge(self, *args)

    __swig_destroy__ = _AriaPy.delete_ArMapObjectPtrList
    __del__ = lambda self : None;
ArMapObjectPtrList_swigregister = _AriaPy.ArMapObjectPtrList_swigregister
ArMapObjectPtrList_swigregister(ArMapObjectPtrList)

class ArFunctorPtrList(object):
    """Proxy of C++ std::list<(p.ArFunctor)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _AriaPy.ArFunctorPtrList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _AriaPy.ArFunctorPtrList___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _AriaPy.ArFunctorPtrList___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _AriaPy.ArFunctorPtrList___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _AriaPy.ArFunctorPtrList_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> ArFunctorPtrList"""
        return _AriaPy.ArFunctorPtrList___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, ArFunctorPtrList v)"""
        return _AriaPy.ArFunctorPtrList___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _AriaPy.ArFunctorPtrList___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _AriaPy.ArFunctorPtrList___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> ArFunctorPtrList
        __getitem__(self, difference_type i) -> value_type
        """
        return _AriaPy.ArFunctorPtrList___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, ArFunctorPtrList v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _AriaPy.ArFunctorPtrList___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _AriaPy.ArFunctorPtrList_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _AriaPy.ArFunctorPtrList_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _AriaPy.ArFunctorPtrList_size(self)

    def clear(self):
        """clear(self)"""
        return _AriaPy.ArFunctorPtrList_clear(self)

    def swap(self, *args):
        """swap(self, ArFunctorPtrList v)"""
        return _AriaPy.ArFunctorPtrList_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _AriaPy.ArFunctorPtrList_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _AriaPy.ArFunctorPtrList_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _AriaPy.ArFunctorPtrList_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _AriaPy.ArFunctorPtrList_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _AriaPy.ArFunctorPtrList_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _AriaPy.ArFunctorPtrList_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _AriaPy.ArFunctorPtrList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> ArFunctorPtrList
        __init__(self, ArFunctorPtrList arg0) -> ArFunctorPtrList
        __init__(self, size_type size) -> ArFunctorPtrList
        __init__(self, size_type size, value_type value) -> ArFunctorPtrList
        """
        this = _AriaPy.new_ArFunctorPtrList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _AriaPy.ArFunctorPtrList_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _AriaPy.ArFunctorPtrList_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _AriaPy.ArFunctorPtrList_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _AriaPy.ArFunctorPtrList_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _AriaPy.ArFunctorPtrList_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _AriaPy.ArFunctorPtrList_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _AriaPy.ArFunctorPtrList_pop_front(self)

    def push_front(self, *args):
        """push_front(self, value_type x)"""
        return _AriaPy.ArFunctorPtrList_push_front(self, *args)

    def remove(self, *args):
        """remove(self, value_type x)"""
        return _AriaPy.ArFunctorPtrList_remove(self, *args)

    def unique(self):
        """unique(self)"""
        return _AriaPy.ArFunctorPtrList_unique(self)

    def reverse(self):
        """reverse(self)"""
        return _AriaPy.ArFunctorPtrList_reverse(self)

    def sort(self):
        """sort(self)"""
        return _AriaPy.ArFunctorPtrList_sort(self)

    def merge(self, *args):
        """merge(self, ArFunctorPtrList x)"""
        return _AriaPy.ArFunctorPtrList_merge(self, *args)

    __swig_destroy__ = _AriaPy.delete_ArFunctorPtrList
    __del__ = lambda self : None;
ArFunctorPtrList_swigregister = _AriaPy.ArFunctorPtrList_swigregister
ArFunctorPtrList_swigregister(ArFunctorPtrList)

class ArPoseList(object):
    """Proxy of C++ std::list<(ArPose)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _AriaPy.ArPoseList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _AriaPy.ArPoseList___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _AriaPy.ArPoseList___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _AriaPy.ArPoseList___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _AriaPy.ArPoseList_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> ArPoseList"""
        return _AriaPy.ArPoseList___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, ArPoseList v)"""
        return _AriaPy.ArPoseList___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _AriaPy.ArPoseList___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _AriaPy.ArPoseList___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> ArPoseList
        __getitem__(self, difference_type i) -> value_type
        """
        return _AriaPy.ArPoseList___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, ArPoseList v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _AriaPy.ArPoseList___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _AriaPy.ArPoseList_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _AriaPy.ArPoseList_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _AriaPy.ArPoseList_size(self)

    def clear(self):
        """clear(self)"""
        return _AriaPy.ArPoseList_clear(self)

    def swap(self, *args):
        """swap(self, ArPoseList v)"""
        return _AriaPy.ArPoseList_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _AriaPy.ArPoseList_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _AriaPy.ArPoseList_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _AriaPy.ArPoseList_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _AriaPy.ArPoseList_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _AriaPy.ArPoseList_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _AriaPy.ArPoseList_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _AriaPy.ArPoseList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> ArPoseList
        __init__(self, ArPoseList arg0) -> ArPoseList
        __init__(self, size_type size) -> ArPoseList
        __init__(self, size_type size, value_type value) -> ArPoseList
        """
        this = _AriaPy.new_ArPoseList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _AriaPy.ArPoseList_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _AriaPy.ArPoseList_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _AriaPy.ArPoseList_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _AriaPy.ArPoseList_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _AriaPy.ArPoseList_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _AriaPy.ArPoseList_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _AriaPy.ArPoseList_pop_front(self)

    def push_front(self, *args):
        """push_front(self, value_type x)"""
        return _AriaPy.ArPoseList_push_front(self, *args)

    def reverse(self):
        """reverse(self)"""
        return _AriaPy.ArPoseList_reverse(self)

    __swig_destroy__ = _AriaPy.delete_ArPoseList
    __del__ = lambda self : None;
ArPoseList_swigregister = _AriaPy.ArPoseList_swigregister
ArPoseList_swigregister(ArPoseList)

class ArPosePtrList(object):
    """Proxy of C++ std::list<(p.ArPose)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _AriaPy.ArPosePtrList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _AriaPy.ArPosePtrList___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _AriaPy.ArPosePtrList___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _AriaPy.ArPosePtrList___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _AriaPy.ArPosePtrList_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> ArPosePtrList"""
        return _AriaPy.ArPosePtrList___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, ArPosePtrList v)"""
        return _AriaPy.ArPosePtrList___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _AriaPy.ArPosePtrList___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _AriaPy.ArPosePtrList___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> ArPosePtrList
        __getitem__(self, difference_type i) -> value_type
        """
        return _AriaPy.ArPosePtrList___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, ArPosePtrList v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _AriaPy.ArPosePtrList___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _AriaPy.ArPosePtrList_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _AriaPy.ArPosePtrList_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _AriaPy.ArPosePtrList_size(self)

    def clear(self):
        """clear(self)"""
        return _AriaPy.ArPosePtrList_clear(self)

    def swap(self, *args):
        """swap(self, ArPosePtrList v)"""
        return _AriaPy.ArPosePtrList_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _AriaPy.ArPosePtrList_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _AriaPy.ArPosePtrList_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _AriaPy.ArPosePtrList_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _AriaPy.ArPosePtrList_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _AriaPy.ArPosePtrList_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _AriaPy.ArPosePtrList_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _AriaPy.ArPosePtrList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> ArPosePtrList
        __init__(self, ArPosePtrList arg0) -> ArPosePtrList
        __init__(self, size_type size) -> ArPosePtrList
        __init__(self, size_type size, value_type value) -> ArPosePtrList
        """
        this = _AriaPy.new_ArPosePtrList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _AriaPy.ArPosePtrList_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _AriaPy.ArPosePtrList_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _AriaPy.ArPosePtrList_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _AriaPy.ArPosePtrList_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _AriaPy.ArPosePtrList_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _AriaPy.ArPosePtrList_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _AriaPy.ArPosePtrList_pop_front(self)

    def push_front(self, *args):
        """push_front(self, value_type x)"""
        return _AriaPy.ArPosePtrList_push_front(self, *args)

    def remove(self, *args):
        """remove(self, value_type x)"""
        return _AriaPy.ArPosePtrList_remove(self, *args)

    def unique(self):
        """unique(self)"""
        return _AriaPy.ArPosePtrList_unique(self)

    def reverse(self):
        """reverse(self)"""
        return _AriaPy.ArPosePtrList_reverse(self)

    def sort(self):
        """sort(self)"""
        return _AriaPy.ArPosePtrList_sort(self)

    def merge(self, *args):
        """merge(self, ArPosePtrList x)"""
        return _AriaPy.ArPosePtrList_merge(self, *args)

    __swig_destroy__ = _AriaPy.delete_ArPosePtrList
    __del__ = lambda self : None;
ArPosePtrList_swigregister = _AriaPy.ArPosePtrList_swigregister
ArPosePtrList_swigregister(ArPosePtrList)

class ArPoseWithTimeList(object):
    """Proxy of C++ std::list<(ArPoseWithTime)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _AriaPy.ArPoseWithTimeList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _AriaPy.ArPoseWithTimeList___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _AriaPy.ArPoseWithTimeList___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _AriaPy.ArPoseWithTimeList___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _AriaPy.ArPoseWithTimeList_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> ArPoseWithTimeList"""
        return _AriaPy.ArPoseWithTimeList___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, ArPoseWithTimeList v)"""
        return _AriaPy.ArPoseWithTimeList___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _AriaPy.ArPoseWithTimeList___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _AriaPy.ArPoseWithTimeList___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> ArPoseWithTimeList
        __getitem__(self, difference_type i) -> value_type
        """
        return _AriaPy.ArPoseWithTimeList___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, ArPoseWithTimeList v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _AriaPy.ArPoseWithTimeList___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _AriaPy.ArPoseWithTimeList_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _AriaPy.ArPoseWithTimeList_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _AriaPy.ArPoseWithTimeList_size(self)

    def clear(self):
        """clear(self)"""
        return _AriaPy.ArPoseWithTimeList_clear(self)

    def swap(self, *args):
        """swap(self, ArPoseWithTimeList v)"""
        return _AriaPy.ArPoseWithTimeList_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _AriaPy.ArPoseWithTimeList_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _AriaPy.ArPoseWithTimeList_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _AriaPy.ArPoseWithTimeList_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _AriaPy.ArPoseWithTimeList_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _AriaPy.ArPoseWithTimeList_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _AriaPy.ArPoseWithTimeList_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _AriaPy.ArPoseWithTimeList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> ArPoseWithTimeList
        __init__(self, ArPoseWithTimeList arg0) -> ArPoseWithTimeList
        __init__(self, size_type size) -> ArPoseWithTimeList
        __init__(self, size_type size, value_type value) -> ArPoseWithTimeList
        """
        this = _AriaPy.new_ArPoseWithTimeList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _AriaPy.ArPoseWithTimeList_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _AriaPy.ArPoseWithTimeList_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _AriaPy.ArPoseWithTimeList_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _AriaPy.ArPoseWithTimeList_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _AriaPy.ArPoseWithTimeList_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _AriaPy.ArPoseWithTimeList_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _AriaPy.ArPoseWithTimeList_pop_front(self)

    def push_front(self, *args):
        """push_front(self, value_type x)"""
        return _AriaPy.ArPoseWithTimeList_push_front(self, *args)

    def reverse(self):
        """reverse(self)"""
        return _AriaPy.ArPoseWithTimeList_reverse(self)

    __swig_destroy__ = _AriaPy.delete_ArPoseWithTimeList
    __del__ = lambda self : None;
ArPoseWithTimeList_swigregister = _AriaPy.ArPoseWithTimeList_swigregister
ArPoseWithTimeList_swigregister(ArPoseWithTimeList)

class ArPoseWithTimePtrList(object):
    """Proxy of C++ std::list<(p.ArPoseWithTime)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _AriaPy.ArPoseWithTimePtrList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _AriaPy.ArPoseWithTimePtrList___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _AriaPy.ArPoseWithTimePtrList___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _AriaPy.ArPoseWithTimePtrList___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _AriaPy.ArPoseWithTimePtrList_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> ArPoseWithTimePtrList"""
        return _AriaPy.ArPoseWithTimePtrList___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, ArPoseWithTimePtrList v)"""
        return _AriaPy.ArPoseWithTimePtrList___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _AriaPy.ArPoseWithTimePtrList___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _AriaPy.ArPoseWithTimePtrList___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> ArPoseWithTimePtrList
        __getitem__(self, difference_type i) -> value_type
        """
        return _AriaPy.ArPoseWithTimePtrList___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, ArPoseWithTimePtrList v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _AriaPy.ArPoseWithTimePtrList___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _AriaPy.ArPoseWithTimePtrList_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _AriaPy.ArPoseWithTimePtrList_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _AriaPy.ArPoseWithTimePtrList_size(self)

    def clear(self):
        """clear(self)"""
        return _AriaPy.ArPoseWithTimePtrList_clear(self)

    def swap(self, *args):
        """swap(self, ArPoseWithTimePtrList v)"""
        return _AriaPy.ArPoseWithTimePtrList_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _AriaPy.ArPoseWithTimePtrList_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _AriaPy.ArPoseWithTimePtrList_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _AriaPy.ArPoseWithTimePtrList_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _AriaPy.ArPoseWithTimePtrList_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _AriaPy.ArPoseWithTimePtrList_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _AriaPy.ArPoseWithTimePtrList_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _AriaPy.ArPoseWithTimePtrList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> ArPoseWithTimePtrList
        __init__(self, ArPoseWithTimePtrList arg0) -> ArPoseWithTimePtrList
        __init__(self, size_type size) -> ArPoseWithTimePtrList
        __init__(self, size_type size, value_type value) -> ArPoseWithTimePtrList
        """
        this = _AriaPy.new_ArPoseWithTimePtrList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _AriaPy.ArPoseWithTimePtrList_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _AriaPy.ArPoseWithTimePtrList_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _AriaPy.ArPoseWithTimePtrList_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _AriaPy.ArPoseWithTimePtrList_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _AriaPy.ArPoseWithTimePtrList_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _AriaPy.ArPoseWithTimePtrList_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _AriaPy.ArPoseWithTimePtrList_pop_front(self)

    def push_front(self, *args):
        """push_front(self, value_type x)"""
        return _AriaPy.ArPoseWithTimePtrList_push_front(self, *args)

    def remove(self, *args):
        """remove(self, value_type x)"""
        return _AriaPy.ArPoseWithTimePtrList_remove(self, *args)

    def unique(self):
        """unique(self)"""
        return _AriaPy.ArPoseWithTimePtrList_unique(self)

    def reverse(self):
        """reverse(self)"""
        return _AriaPy.ArPoseWithTimePtrList_reverse(self)

    def sort(self):
        """sort(self)"""
        return _AriaPy.ArPoseWithTimePtrList_sort(self)

    def merge(self, *args):
        """merge(self, ArPoseWithTimePtrList x)"""
        return _AriaPy.ArPoseWithTimePtrList_merge(self, *args)

    __swig_destroy__ = _AriaPy.delete_ArPoseWithTimePtrList
    __del__ = lambda self : None;
ArPoseWithTimePtrList_swigregister = _AriaPy.ArPoseWithTimePtrList_swigregister
ArPoseWithTimePtrList_swigregister(ArPoseWithTimePtrList)

class ArRangeDevicePtrList(object):
    """Proxy of C++ std::list<(p.ArRangeDevice)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _AriaPy.ArRangeDevicePtrList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _AriaPy.ArRangeDevicePtrList___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _AriaPy.ArRangeDevicePtrList___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _AriaPy.ArRangeDevicePtrList___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _AriaPy.ArRangeDevicePtrList_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> ArRangeDevicePtrList"""
        return _AriaPy.ArRangeDevicePtrList___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, ArRangeDevicePtrList v)"""
        return _AriaPy.ArRangeDevicePtrList___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _AriaPy.ArRangeDevicePtrList___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _AriaPy.ArRangeDevicePtrList___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> ArRangeDevicePtrList
        __getitem__(self, difference_type i) -> value_type
        """
        return _AriaPy.ArRangeDevicePtrList___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, ArRangeDevicePtrList v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _AriaPy.ArRangeDevicePtrList___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _AriaPy.ArRangeDevicePtrList_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _AriaPy.ArRangeDevicePtrList_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _AriaPy.ArRangeDevicePtrList_size(self)

    def clear(self):
        """clear(self)"""
        return _AriaPy.ArRangeDevicePtrList_clear(self)

    def swap(self, *args):
        """swap(self, ArRangeDevicePtrList v)"""
        return _AriaPy.ArRangeDevicePtrList_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _AriaPy.ArRangeDevicePtrList_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _AriaPy.ArRangeDevicePtrList_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _AriaPy.ArRangeDevicePtrList_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _AriaPy.ArRangeDevicePtrList_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _AriaPy.ArRangeDevicePtrList_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _AriaPy.ArRangeDevicePtrList_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _AriaPy.ArRangeDevicePtrList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> ArRangeDevicePtrList
        __init__(self, ArRangeDevicePtrList arg0) -> ArRangeDevicePtrList
        __init__(self, size_type size) -> ArRangeDevicePtrList
        __init__(self, size_type size, value_type value) -> ArRangeDevicePtrList
        """
        this = _AriaPy.new_ArRangeDevicePtrList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _AriaPy.ArRangeDevicePtrList_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _AriaPy.ArRangeDevicePtrList_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _AriaPy.ArRangeDevicePtrList_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _AriaPy.ArRangeDevicePtrList_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _AriaPy.ArRangeDevicePtrList_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _AriaPy.ArRangeDevicePtrList_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _AriaPy.ArRangeDevicePtrList_pop_front(self)

    def push_front(self, *args):
        """push_front(self, value_type x)"""
        return _AriaPy.ArRangeDevicePtrList_push_front(self, *args)

    def remove(self, *args):
        """remove(self, value_type x)"""
        return _AriaPy.ArRangeDevicePtrList_remove(self, *args)

    def unique(self):
        """unique(self)"""
        return _AriaPy.ArRangeDevicePtrList_unique(self)

    def reverse(self):
        """reverse(self)"""
        return _AriaPy.ArRangeDevicePtrList_reverse(self)

    def sort(self):
        """sort(self)"""
        return _AriaPy.ArRangeDevicePtrList_sort(self)

    def merge(self, *args):
        """merge(self, ArRangeDevicePtrList x)"""
        return _AriaPy.ArRangeDevicePtrList_merge(self, *args)

    __swig_destroy__ = _AriaPy.delete_ArRangeDevicePtrList
    __del__ = lambda self : None;
ArRangeDevicePtrList_swigregister = _AriaPy.ArRangeDevicePtrList_swigregister
ArRangeDevicePtrList_swigregister(ArRangeDevicePtrList)

class ArArgumentBuilderPtrList(object):
    """Proxy of C++ std::list<(p.ArArgumentBuilder)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _AriaPy.ArArgumentBuilderPtrList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _AriaPy.ArArgumentBuilderPtrList___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _AriaPy.ArArgumentBuilderPtrList___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _AriaPy.ArArgumentBuilderPtrList___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _AriaPy.ArArgumentBuilderPtrList_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> ArArgumentBuilderPtrList"""
        return _AriaPy.ArArgumentBuilderPtrList___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, ArArgumentBuilderPtrList v)"""
        return _AriaPy.ArArgumentBuilderPtrList___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _AriaPy.ArArgumentBuilderPtrList___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _AriaPy.ArArgumentBuilderPtrList___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> ArArgumentBuilderPtrList
        __getitem__(self, difference_type i) -> value_type
        """
        return _AriaPy.ArArgumentBuilderPtrList___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, ArArgumentBuilderPtrList v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _AriaPy.ArArgumentBuilderPtrList___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _AriaPy.ArArgumentBuilderPtrList_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _AriaPy.ArArgumentBuilderPtrList_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _AriaPy.ArArgumentBuilderPtrList_size(self)

    def clear(self):
        """clear(self)"""
        return _AriaPy.ArArgumentBuilderPtrList_clear(self)

    def swap(self, *args):
        """swap(self, ArArgumentBuilderPtrList v)"""
        return _AriaPy.ArArgumentBuilderPtrList_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _AriaPy.ArArgumentBuilderPtrList_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _AriaPy.ArArgumentBuilderPtrList_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _AriaPy.ArArgumentBuilderPtrList_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _AriaPy.ArArgumentBuilderPtrList_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _AriaPy.ArArgumentBuilderPtrList_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _AriaPy.ArArgumentBuilderPtrList_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _AriaPy.ArArgumentBuilderPtrList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> ArArgumentBuilderPtrList
        __init__(self, ArArgumentBuilderPtrList arg0) -> ArArgumentBuilderPtrList
        __init__(self, size_type size) -> ArArgumentBuilderPtrList
        __init__(self, size_type size, value_type value) -> ArArgumentBuilderPtrList
        """
        this = _AriaPy.new_ArArgumentBuilderPtrList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _AriaPy.ArArgumentBuilderPtrList_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _AriaPy.ArArgumentBuilderPtrList_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _AriaPy.ArArgumentBuilderPtrList_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _AriaPy.ArArgumentBuilderPtrList_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _AriaPy.ArArgumentBuilderPtrList_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _AriaPy.ArArgumentBuilderPtrList_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _AriaPy.ArArgumentBuilderPtrList_pop_front(self)

    def push_front(self, *args):
        """push_front(self, value_type x)"""
        return _AriaPy.ArArgumentBuilderPtrList_push_front(self, *args)

    def remove(self, *args):
        """remove(self, value_type x)"""
        return _AriaPy.ArArgumentBuilderPtrList_remove(self, *args)

    def unique(self):
        """unique(self)"""
        return _AriaPy.ArArgumentBuilderPtrList_unique(self)

    def reverse(self):
        """reverse(self)"""
        return _AriaPy.ArArgumentBuilderPtrList_reverse(self)

    def sort(self):
        """sort(self)"""
        return _AriaPy.ArArgumentBuilderPtrList_sort(self)

    def merge(self, *args):
        """merge(self, ArArgumentBuilderPtrList x)"""
        return _AriaPy.ArArgumentBuilderPtrList_merge(self, *args)

    __swig_destroy__ = _AriaPy.delete_ArArgumentBuilderPtrList
    __del__ = lambda self : None;
ArArgumentBuilderPtrList_swigregister = _AriaPy.ArArgumentBuilderPtrList_swigregister
ArArgumentBuilderPtrList_swigregister(ArArgumentBuilderPtrList)

class ArLineSegmentList(object):
    """Proxy of C++ std::list<(ArLineSegment)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _AriaPy.ArLineSegmentList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _AriaPy.ArLineSegmentList___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _AriaPy.ArLineSegmentList___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _AriaPy.ArLineSegmentList___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _AriaPy.ArLineSegmentList_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> ArLineSegmentList"""
        return _AriaPy.ArLineSegmentList___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, ArLineSegmentList v)"""
        return _AriaPy.ArLineSegmentList___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _AriaPy.ArLineSegmentList___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _AriaPy.ArLineSegmentList___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> ArLineSegmentList
        __getitem__(self, difference_type i) -> value_type
        """
        return _AriaPy.ArLineSegmentList___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, ArLineSegmentList v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _AriaPy.ArLineSegmentList___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _AriaPy.ArLineSegmentList_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _AriaPy.ArLineSegmentList_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _AriaPy.ArLineSegmentList_size(self)

    def clear(self):
        """clear(self)"""
        return _AriaPy.ArLineSegmentList_clear(self)

    def swap(self, *args):
        """swap(self, ArLineSegmentList v)"""
        return _AriaPy.ArLineSegmentList_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _AriaPy.ArLineSegmentList_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _AriaPy.ArLineSegmentList_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _AriaPy.ArLineSegmentList_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _AriaPy.ArLineSegmentList_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _AriaPy.ArLineSegmentList_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _AriaPy.ArLineSegmentList_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _AriaPy.ArLineSegmentList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> ArLineSegmentList
        __init__(self, ArLineSegmentList arg0) -> ArLineSegmentList
        __init__(self, size_type size) -> ArLineSegmentList
        __init__(self, size_type size, value_type value) -> ArLineSegmentList
        """
        this = _AriaPy.new_ArLineSegmentList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _AriaPy.ArLineSegmentList_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _AriaPy.ArLineSegmentList_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _AriaPy.ArLineSegmentList_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _AriaPy.ArLineSegmentList_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _AriaPy.ArLineSegmentList_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _AriaPy.ArLineSegmentList_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _AriaPy.ArLineSegmentList_pop_front(self)

    def push_front(self, *args):
        """push_front(self, value_type x)"""
        return _AriaPy.ArLineSegmentList_push_front(self, *args)

    def reverse(self):
        """reverse(self)"""
        return _AriaPy.ArLineSegmentList_reverse(self)

    __swig_destroy__ = _AriaPy.delete_ArLineSegmentList
    __del__ = lambda self : None;
ArLineSegmentList_swigregister = _AriaPy.ArLineSegmentList_swigregister
ArLineSegmentList_swigregister(ArLineSegmentList)

class ArLineSegmentPtrList(object):
    """Proxy of C++ std::list<(p.ArLineSegment)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _AriaPy.ArLineSegmentPtrList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _AriaPy.ArLineSegmentPtrList___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _AriaPy.ArLineSegmentPtrList___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _AriaPy.ArLineSegmentPtrList___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _AriaPy.ArLineSegmentPtrList_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> ArLineSegmentPtrList"""
        return _AriaPy.ArLineSegmentPtrList___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, ArLineSegmentPtrList v)"""
        return _AriaPy.ArLineSegmentPtrList___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _AriaPy.ArLineSegmentPtrList___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _AriaPy.ArLineSegmentPtrList___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> ArLineSegmentPtrList
        __getitem__(self, difference_type i) -> value_type
        """
        return _AriaPy.ArLineSegmentPtrList___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, ArLineSegmentPtrList v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _AriaPy.ArLineSegmentPtrList___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _AriaPy.ArLineSegmentPtrList_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _AriaPy.ArLineSegmentPtrList_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _AriaPy.ArLineSegmentPtrList_size(self)

    def clear(self):
        """clear(self)"""
        return _AriaPy.ArLineSegmentPtrList_clear(self)

    def swap(self, *args):
        """swap(self, ArLineSegmentPtrList v)"""
        return _AriaPy.ArLineSegmentPtrList_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _AriaPy.ArLineSegmentPtrList_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _AriaPy.ArLineSegmentPtrList_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _AriaPy.ArLineSegmentPtrList_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _AriaPy.ArLineSegmentPtrList_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _AriaPy.ArLineSegmentPtrList_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _AriaPy.ArLineSegmentPtrList_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _AriaPy.ArLineSegmentPtrList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> ArLineSegmentPtrList
        __init__(self, ArLineSegmentPtrList arg0) -> ArLineSegmentPtrList
        __init__(self, size_type size) -> ArLineSegmentPtrList
        __init__(self, size_type size, value_type value) -> ArLineSegmentPtrList
        """
        this = _AriaPy.new_ArLineSegmentPtrList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _AriaPy.ArLineSegmentPtrList_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _AriaPy.ArLineSegmentPtrList_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _AriaPy.ArLineSegmentPtrList_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _AriaPy.ArLineSegmentPtrList_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _AriaPy.ArLineSegmentPtrList_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _AriaPy.ArLineSegmentPtrList_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _AriaPy.ArLineSegmentPtrList_pop_front(self)

    def push_front(self, *args):
        """push_front(self, value_type x)"""
        return _AriaPy.ArLineSegmentPtrList_push_front(self, *args)

    def remove(self, *args):
        """remove(self, value_type x)"""
        return _AriaPy.ArLineSegmentPtrList_remove(self, *args)

    def unique(self):
        """unique(self)"""
        return _AriaPy.ArLineSegmentPtrList_unique(self)

    def reverse(self):
        """reverse(self)"""
        return _AriaPy.ArLineSegmentPtrList_reverse(self)

    def sort(self):
        """sort(self)"""
        return _AriaPy.ArLineSegmentPtrList_sort(self)

    def merge(self, *args):
        """merge(self, ArLineSegmentPtrList x)"""
        return _AriaPy.ArLineSegmentPtrList_merge(self, *args)

    __swig_destroy__ = _AriaPy.delete_ArLineSegmentPtrList
    __del__ = lambda self : None;
ArLineSegmentPtrList_swigregister = _AriaPy.ArLineSegmentPtrList_swigregister
ArLineSegmentPtrList_swigregister(ArLineSegmentPtrList)

class IntSet(object):
    """Proxy of C++ std::set<(int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _AriaPy.IntSet_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _AriaPy.IntSet___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _AriaPy.IntSet___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _AriaPy.IntSet___len__(self)

    def append(self, *args):
        """append(self, value_type x)"""
        return _AriaPy.IntSet_append(self, *args)

    def __contains__(self, *args):
        """__contains__(self, value_type x) -> bool"""
        return _AriaPy.IntSet___contains__(self, *args)

    def __getitem__(self, *args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _AriaPy.IntSet___getitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(int)> arg0) -> IntSet
        __init__(self) -> IntSet
        __init__(self, IntSet arg0) -> IntSet
        """
        this = _AriaPy.new_IntSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """empty(self) -> bool"""
        return _AriaPy.IntSet_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _AriaPy.IntSet_size(self)

    def clear(self):
        """clear(self)"""
        return _AriaPy.IntSet_clear(self)

    def swap(self, *args):
        """swap(self, IntSet v)"""
        return _AriaPy.IntSet_swap(self, *args)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _AriaPy.IntSet_count(self, *args)

    def begin(self):
        """begin(self) -> iterator"""
        return _AriaPy.IntSet_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _AriaPy.IntSet_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _AriaPy.IntSet_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _AriaPy.IntSet_rend(self)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator pos)
        erase(self, iterator first, iterator last)
        """
        return _AriaPy.IntSet_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _AriaPy.IntSet_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _AriaPy.IntSet_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _AriaPy.IntSet_upper_bound(self, *args)

    def equal_range(self, *args):
        """equal_range(self, key_type x) -> std::pair<(std::set<(int)>::iterator,std::set<(int)>::iterator)>"""
        return _AriaPy.IntSet_equal_range(self, *args)

    def insert(self, *args):
        """insert(self, value_type __x) -> std::pair<(std::set<(int)>::iterator,bool)>"""
        return _AriaPy.IntSet_insert(self, *args)

    __swig_destroy__ = _AriaPy.delete_IntSet
    __del__ = lambda self : None;
IntSet_swigregister = _AriaPy.IntSet_swigregister
IntSet_swigregister(IntSet)

class IntArPoseMap(object):
    """Proxy of C++ std::map<(int,ArPose)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _AriaPy.IntArPoseMap_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _AriaPy.IntArPoseMap___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _AriaPy.IntArPoseMap___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _AriaPy.IntArPoseMap___len__(self)

    def __getitem__(self, *args):
        """__getitem__(self, key_type key) -> mapped_type"""
        return _AriaPy.IntArPoseMap___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(self, key_type key)"""
        return _AriaPy.IntArPoseMap___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(self, key_type key) -> bool"""
        return _AriaPy.IntArPoseMap_has_key(self, *args)

    def keys(self):
        """keys(self) -> PyObject"""
        return _AriaPy.IntArPoseMap_keys(self)

    def values(self):
        """values(self) -> PyObject"""
        return _AriaPy.IntArPoseMap_values(self)

    def items(self):
        """items(self) -> PyObject"""
        return _AriaPy.IntArPoseMap_items(self)

    def __contains__(self, *args):
        """__contains__(self, key_type key) -> bool"""
        return _AriaPy.IntArPoseMap___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(self) -> SwigPyIterator"""
        return _AriaPy.IntArPoseMap_key_iterator(self)

    def value_iterator(self):
        """value_iterator(self) -> SwigPyIterator"""
        return _AriaPy.IntArPoseMap_value_iterator(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args):
        """__setitem__(self, key_type key, mapped_type x)"""
        return _AriaPy.IntArPoseMap___setitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(int)> arg0) -> IntArPoseMap
        __init__(self) -> IntArPoseMap
        __init__(self, IntArPoseMap arg0) -> IntArPoseMap
        """
        this = _AriaPy.new_IntArPoseMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """empty(self) -> bool"""
        return _AriaPy.IntArPoseMap_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _AriaPy.IntArPoseMap_size(self)

    def clear(self):
        """clear(self)"""
        return _AriaPy.IntArPoseMap_clear(self)

    def swap(self, *args):
        """swap(self, IntArPoseMap v)"""
        return _AriaPy.IntArPoseMap_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _AriaPy.IntArPoseMap_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _AriaPy.IntArPoseMap_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _AriaPy.IntArPoseMap_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _AriaPy.IntArPoseMap_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _AriaPy.IntArPoseMap_rend(self)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _AriaPy.IntArPoseMap_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator position)
        erase(self, iterator first, iterator last)
        """
        return _AriaPy.IntArPoseMap_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _AriaPy.IntArPoseMap_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _AriaPy.IntArPoseMap_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _AriaPy.IntArPoseMap_upper_bound(self, *args)

    __swig_destroy__ = _AriaPy.delete_IntArPoseMap
    __del__ = lambda self : None;
IntArPoseMap_swigregister = _AriaPy.IntArPoseMap_swigregister
IntArPoseMap_swigregister(IntArPoseMap)

class ArListPos(object):
    """Proxy of C++ ArListPos class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    FIRST = _AriaPy.ArListPos_FIRST
    LAST = _AriaPy.ArListPos_LAST
    def __init__(self): 
        """__init__(self) -> ArListPos"""
        this = _AriaPy.new_ArListPos()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArListPos
    __del__ = lambda self : None;
ArListPos_swigregister = _AriaPy.ArListPos_swigregister
ArListPos_swigregister(ArListPos)

class ArTypes(object):
    """Proxy of C++ ArTypes class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ArTypes"""
        this = _AriaPy.new_ArTypes()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArTypes
    __del__ = lambda self : None;
ArTypes_swigregister = _AriaPy.ArTypes_swigregister
ArTypes_swigregister(ArTypes)

_GNU_SOURCE = _AriaPy._GNU_SOURCE
M_PI = _AriaPy.M_PI
class ArUtil(object):
    """Proxy of C++ ArUtil class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    BIT0 = _AriaPy.ArUtil_BIT0
    BIT1 = _AriaPy.ArUtil_BIT1
    BIT2 = _AriaPy.ArUtil_BIT2
    BIT3 = _AriaPy.ArUtil_BIT3
    BIT4 = _AriaPy.ArUtil_BIT4
    BIT5 = _AriaPy.ArUtil_BIT5
    BIT6 = _AriaPy.ArUtil_BIT6
    BIT7 = _AriaPy.ArUtil_BIT7
    BIT8 = _AriaPy.ArUtil_BIT8
    BIT9 = _AriaPy.ArUtil_BIT9
    BIT10 = _AriaPy.ArUtil_BIT10
    BIT11 = _AriaPy.ArUtil_BIT11
    BIT12 = _AriaPy.ArUtil_BIT12
    BIT13 = _AriaPy.ArUtil_BIT13
    BIT14 = _AriaPy.ArUtil_BIT14
    BIT15 = _AriaPy.ArUtil_BIT15
    def sleep(*args):
        """sleep(unsigned int ms)"""
        return _AriaPy.ArUtil_sleep(*args)

    sleep = staticmethod(sleep)
    def getTime():
        """getTime() -> unsigned int"""
        return _AriaPy.ArUtil_getTime()

    getTime = staticmethod(getTime)
    def findMin(*args):
        """
        findMin(int first, int second) -> int
        findMin(double first, double second) -> double
        """
        return _AriaPy.ArUtil_findMin(*args)

    findMin = staticmethod(findMin)
    def findMax(*args):
        """
        findMax(int first, int second) -> int
        findMax(double first, double second) -> double
        """
        return _AriaPy.ArUtil_findMax(*args)

    findMax = staticmethod(findMax)
    def sizeFile(*args):
        """
        sizeFile(char fileName) -> long
        sizeFile(string fileName) -> long
        """
        return _AriaPy.ArUtil_sizeFile(*args)

    sizeFile = staticmethod(sizeFile)
    def findFile(*args):
        """findFile(char fileName) -> bool"""
        return _AriaPy.ArUtil_findFile(*args)

    findFile = staticmethod(findFile)
    def appendSlash(*args):
        """
        appendSlash(char path, size_t pathLength)
        appendSlash(string path)
        """
        return _AriaPy.ArUtil_appendSlash(*args)

    appendSlash = staticmethod(appendSlash)
    def fixSlashes(*args):
        """
        fixSlashes(char path, size_t pathLength)
        fixSlashes(string path)
        """
        return _AriaPy.ArUtil_fixSlashes(*args)

    fixSlashes = staticmethod(fixSlashes)
    def fixSlashesForward(*args):
        """fixSlashesForward(char path, size_t pathLength)"""
        return _AriaPy.ArUtil_fixSlashesForward(*args)

    fixSlashesForward = staticmethod(fixSlashesForward)
    def fixSlashesBackward(*args):
        """fixSlashesBackward(char path, size_t pathLength)"""
        return _AriaPy.ArUtil_fixSlashesBackward(*args)

    fixSlashesBackward = staticmethod(fixSlashesBackward)
    def getSlash():
        """getSlash() -> char"""
        return _AriaPy.ArUtil_getSlash()

    getSlash = staticmethod(getSlash)
    def addDirectories(*args):
        """addDirectories(char dest, size_t destLength, char baseDir, char insideDir)"""
        return _AriaPy.ArUtil_addDirectories(*args)

    addDirectories = staticmethod(addDirectories)
    def strcmp(*args):
        """
        strcmp(string str, string str2) -> int
        strcmp(string str, char str2) -> int
        strcmp(char str, string str2) -> int
        strcmp(char str, char str2) -> int
        """
        return _AriaPy.ArUtil_strcmp(*args)

    strcmp = staticmethod(strcmp)
    def strcasecmp(*args):
        """
        strcasecmp(string str, string str2) -> int
        strcasecmp(string str, char str2) -> int
        strcasecmp(char str, string str2) -> int
        strcasecmp(char str, char str2) -> int
        """
        return _AriaPy.ArUtil_strcasecmp(*args)

    strcasecmp = staticmethod(strcasecmp)
    def strSuffixCmp(*args):
        """strSuffixCmp(char str, char suffix) -> bool"""
        return _AriaPy.ArUtil_strSuffixCmp(*args)

    strSuffixCmp = staticmethod(strSuffixCmp)
    def strSuffixCaseCmp(*args):
        """strSuffixCaseCmp(char str, char suffix) -> bool"""
        return _AriaPy.ArUtil_strSuffixCaseCmp(*args)

    strSuffixCaseCmp = staticmethod(strSuffixCaseCmp)
    def strcasequotecmp(*args):
        """strcasequotecmp(string str1, string str2) -> int"""
        return _AriaPy.ArUtil_strcasequotecmp(*args)

    strcasequotecmp = staticmethod(strcasequotecmp)
    def escapeSpaces(*args):
        """escapeSpaces(char dest, char src, size_t maxLen)"""
        return _AriaPy.ArUtil_escapeSpaces(*args)

    escapeSpaces = staticmethod(escapeSpaces)
    def stripQuotes(*args):
        """
        stripQuotes(char dest, char src, size_t destLen) -> bool
        stripQuotes(string strToStrip) -> bool
        """
        return _AriaPy.ArUtil_stripQuotes(*args)

    stripQuotes = staticmethod(stripQuotes)
    def fixBadCharacters(*args):
        """
        fixBadCharacters(string strToFix, bool removeSpaces, bool fixOtherWhiteSpace = True) -> bool
        fixBadCharacters(string strToFix, bool removeSpaces) -> bool
        """
        return _AriaPy.ArUtil_fixBadCharacters(*args)

    fixBadCharacters = staticmethod(fixBadCharacters)
    def lower(*args):
        """lower(char dest, char src, size_t maxLen)"""
        return _AriaPy.ArUtil_lower(*args)

    lower = staticmethod(lower)
    def isOnlyAlphaNumeric(*args):
        """isOnlyAlphaNumeric(char str) -> bool"""
        return _AriaPy.ArUtil_isOnlyAlphaNumeric(*args)

    isOnlyAlphaNumeric = staticmethod(isOnlyAlphaNumeric)
    def isOnlyNumeric(*args):
        """isOnlyNumeric(char str) -> bool"""
        return _AriaPy.ArUtil_isOnlyNumeric(*args)

    isOnlyNumeric = staticmethod(isOnlyNumeric)
    def isStrEmpty(*args):
        """isStrEmpty(char str) -> bool"""
        return _AriaPy.ArUtil_isStrEmpty(*args)

    isStrEmpty = staticmethod(isStrEmpty)
    def isStrInList(*args):
        """
        isStrInList(char str, std::list<(std::string,std::allocator<(std::string)>)> list, 
            bool isIgnoreCase = False) -> bool
        isStrInList(char str, std::list<(std::string,std::allocator<(std::string)>)> list) -> bool
        """
        return _AriaPy.ArUtil_isStrInList(*args)

    isStrInList = staticmethod(isStrInList)
    def atof(*args):
        """atof(char nptr) -> double"""
        return _AriaPy.ArUtil_atof(*args)

    atof = staticmethod(atof)
    def convertBool(*args):
        """convertBool(int val) -> char"""
        return _AriaPy.ArUtil_convertBool(*args)

    convertBool = staticmethod(convertBool)
    def writeToFile(*args):
        """writeToFile(char str, FILE file)"""
        return _AriaPy.ArUtil_writeToFile(*args)

    writeToFile = staticmethod(writeToFile)
    def getStringFromFile(*args):
        """getStringFromFile(char fileName, char str, size_t strLen) -> bool"""
        return _AriaPy.ArUtil_getStringFromFile(*args)

    getStringFromFile = staticmethod(getStringFromFile)
    REGKEY_CLASSES_ROOT = _AriaPy.ArUtil_REGKEY_CLASSES_ROOT
    REGKEY_CURRENT_CONFIG = _AriaPy.ArUtil_REGKEY_CURRENT_CONFIG
    REGKEY_CURRENT_USER = _AriaPy.ArUtil_REGKEY_CURRENT_USER
    REGKEY_LOCAL_MACHINE = _AriaPy.ArUtil_REGKEY_LOCAL_MACHINE
    REGKEY_USERS = _AriaPy.ArUtil_REGKEY_USERS
    def getStringFromRegistry(*args):
        """getStringFromRegistry(REGKEY root, char key, char value, char str, int len) -> bool"""
        return _AriaPy.ArUtil_getStringFromRegistry(*args)

    getStringFromRegistry = staticmethod(getStringFromRegistry)
    def findFirstStringInRegistry(*args):
        """findFirstStringInRegistry(char key, char value, char str, int len) -> bool"""
        return _AriaPy.ArUtil_findFirstStringInRegistry(*args)

    findFirstStringInRegistry = staticmethod(findFirstStringInRegistry)
    COM1 = _swig_property(_AriaPy.ArUtil_COM1_get, _AriaPy.ArUtil_COM1_set)
    COM2 = _swig_property(_AriaPy.ArUtil_COM2_get, _AriaPy.ArUtil_COM2_set)
    COM3 = _swig_property(_AriaPy.ArUtil_COM3_get, _AriaPy.ArUtil_COM3_set)
    COM4 = _swig_property(_AriaPy.ArUtil_COM4_get, _AriaPy.ArUtil_COM4_set)
    COM5 = _swig_property(_AriaPy.ArUtil_COM5_get, _AriaPy.ArUtil_COM5_set)
    COM6 = _swig_property(_AriaPy.ArUtil_COM6_get, _AriaPy.ArUtil_COM6_set)
    COM7 = _swig_property(_AriaPy.ArUtil_COM7_get, _AriaPy.ArUtil_COM7_set)
    COM8 = _swig_property(_AriaPy.ArUtil_COM8_get, _AriaPy.ArUtil_COM8_set)
    COM9 = _swig_property(_AriaPy.ArUtil_COM9_get, _AriaPy.ArUtil_COM9_set)
    COM10 = _swig_property(_AriaPy.ArUtil_COM10_get, _AriaPy.ArUtil_COM10_set)
    COM11 = _swig_property(_AriaPy.ArUtil_COM11_get, _AriaPy.ArUtil_COM11_set)
    COM12 = _swig_property(_AriaPy.ArUtil_COM12_get, _AriaPy.ArUtil_COM12_set)
    COM13 = _swig_property(_AriaPy.ArUtil_COM13_get, _AriaPy.ArUtil_COM13_set)
    COM14 = _swig_property(_AriaPy.ArUtil_COM14_get, _AriaPy.ArUtil_COM14_set)
    COM15 = _swig_property(_AriaPy.ArUtil_COM15_get, _AriaPy.ArUtil_COM15_set)
    COM16 = _swig_property(_AriaPy.ArUtil_COM16_get, _AriaPy.ArUtil_COM16_set)
    TRUESTRING = _swig_property(_AriaPy.ArUtil_TRUESTRING_get, _AriaPy.ArUtil_TRUESTRING_set)
    FALSESTRING = _swig_property(_AriaPy.ArUtil_FALSESTRING_get, _AriaPy.ArUtil_FALSESTRING_set)
    def putCurrentYearInString(*args):
        """putCurrentYearInString(char s, size_t len)"""
        return _AriaPy.ArUtil_putCurrentYearInString(*args)

    putCurrentYearInString = staticmethod(putCurrentYearInString)
    def putCurrentMonthInString(*args):
        """putCurrentMonthInString(char s, size_t len)"""
        return _AriaPy.ArUtil_putCurrentMonthInString(*args)

    putCurrentMonthInString = staticmethod(putCurrentMonthInString)
    def putCurrentDayInString(*args):
        """putCurrentDayInString(char s, size_t len)"""
        return _AriaPy.ArUtil_putCurrentDayInString(*args)

    putCurrentDayInString = staticmethod(putCurrentDayInString)
    def putCurrentHourInString(*args):
        """putCurrentHourInString(char s, size_t len)"""
        return _AriaPy.ArUtil_putCurrentHourInString(*args)

    putCurrentHourInString = staticmethod(putCurrentHourInString)
    def putCurrentMinuteInString(*args):
        """putCurrentMinuteInString(char s, size_t len)"""
        return _AriaPy.ArUtil_putCurrentMinuteInString(*args)

    putCurrentMinuteInString = staticmethod(putCurrentMinuteInString)
    def putCurrentSecondInString(*args):
        """putCurrentSecondInString(char s, size_t len)"""
        return _AriaPy.ArUtil_putCurrentSecondInString(*args)

    putCurrentSecondInString = staticmethod(putCurrentSecondInString)
    def parseTime(*args):
        """
        parseTime(char str, bool ok = None, bool toToday = True) -> time_t
        parseTime(char str, bool ok = None) -> time_t
        parseTime(char str) -> time_t
        """
        return _AriaPy.ArUtil_parseTime(*args)

    parseTime = staticmethod(parseTime)
    def localtime(*args):
        """
        localtime(time_t timep, tm result) -> bool
        localtime(tm result) -> bool
        """
        return _AriaPy.ArUtil_localtime(*args)

    localtime = staticmethod(localtime)
    def matchCase(*args):
        """matchCase(char baseDir, char fileName, char result, size_t resultLen) -> bool"""
        return _AriaPy.ArUtil_matchCase(*args)

    matchCase = staticmethod(matchCase)
    def getDirectory(*args):
        """getDirectory(char fileName, char result, size_t resultLen) -> bool"""
        return _AriaPy.ArUtil_getDirectory(*args)

    getDirectory = staticmethod(getDirectory)
    def getFileName(*args):
        """getFileName(char fileName, char result, size_t resultLen) -> bool"""
        return _AriaPy.ArUtil_getFileName(*args)

    getFileName = staticmethod(getFileName)
    def changeFileTimestamp(*args):
        """changeFileTimestamp(char fileName, time_t timestamp) -> bool"""
        return _AriaPy.ArUtil_changeFileTimestamp(*args)

    changeFileTimestamp = staticmethod(changeFileTimestamp)
    def fopen(*args):
        """
        fopen(char path, char mode, bool closeOnExec = True) -> FILE
        fopen(char path, char mode) -> FILE
        """
        return _AriaPy.ArUtil_fopen(*args)

    fopen = staticmethod(fopen)
    def open(*args):
        """
        open(char pathname, int flags, bool closeOnExec = True) -> int
        open(char pathname, int flags) -> int
        open(char pathname, int flags, mode_t mode, bool closeOnExec = True) -> int
        open(char pathname, int flags, mode_t mode) -> int
        """
        return _AriaPy.ArUtil_open(*args)

    open = staticmethod(open)
    def creat(*args):
        """
        creat(char pathname, mode_t mode, bool closeOnExec = True) -> int
        creat(char pathname, mode_t mode) -> int
        """
        return _AriaPy.ArUtil_creat(*args)

    creat = staticmethod(creat)
    def popen(*args):
        """
        popen(char command, char type, bool closeOnExec = True) -> FILE
        popen(char command, char type) -> FILE
        """
        return _AriaPy.ArUtil_popen(*args)

    popen = staticmethod(popen)
    def setFileCloseOnExec(*args):
        """
        setFileCloseOnExec(int fd, bool closeOnExec = True)
        setFileCloseOnExec(int fd)
        setFileCloseOnExec(FILE file, bool closeOnExec = True)
        setFileCloseOnExec(FILE file)
        """
        return _AriaPy.ArUtil_setFileCloseOnExec(*args)

    setFileCloseOnExec = staticmethod(setFileCloseOnExec)
    def floatIsNormal(*args):
        """floatIsNormal(double f) -> bool"""
        return _AriaPy.ArUtil_floatIsNormal(*args)

    floatIsNormal = staticmethod(floatIsNormal)
    def secToMSec(*args):
        """secToMSec(double sec) -> double"""
        return _AriaPy.ArUtil_secToMSec(*args)

    secToMSec = staticmethod(secToMSec)
    def mSecToSec(*args):
        """mSecToSec(double msec) -> double"""
        return _AriaPy.ArUtil_mSecToSec(*args)

    mSecToSec = staticmethod(mSecToSec)
    def metersToFeet(*args):
        """metersToFeet(double m) -> double"""
        return _AriaPy.ArUtil_metersToFeet(*args)

    metersToFeet = staticmethod(metersToFeet)
    def feetToMeters(*args):
        """feetToMeters(double f) -> double"""
        return _AriaPy.ArUtil_feetToMeters(*args)

    feetToMeters = staticmethod(feetToMeters)
    def atoi(*args):
        """
        atoi(char str, bool ok = None, bool forceHex = False) -> int
        atoi(char str, bool ok = None) -> int
        atoi(char str) -> int
        """
        return _AriaPy.ArUtil_atoi(*args)

    atoi = staticmethod(atoi)
    def __init__(self): 
        """__init__(self) -> ArUtil"""
        this = _AriaPy.new_ArUtil()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArUtil
    __del__ = lambda self : None;
ArUtil_swigregister = _AriaPy.ArUtil_swigregister
ArUtil_swigregister(ArUtil)

def ArUtil_sleep(*args):
  """ArUtil_sleep(unsigned int ms)"""
  return _AriaPy.ArUtil_sleep(*args)

def ArUtil_getTime():
  """ArUtil_getTime() -> unsigned int"""
  return _AriaPy.ArUtil_getTime()

def ArUtil_findMin(*args):
  """
    findMin(int first, int second) -> int
    ArUtil_findMin(double first, double second) -> double
    """
  return _AriaPy.ArUtil_findMin(*args)

def ArUtil_findMax(*args):
  """
    findMax(int first, int second) -> int
    ArUtil_findMax(double first, double second) -> double
    """
  return _AriaPy.ArUtil_findMax(*args)

def ArUtil_sizeFile(*args):
  """
    sizeFile(char fileName) -> long
    ArUtil_sizeFile(string fileName) -> long
    """
  return _AriaPy.ArUtil_sizeFile(*args)

def ArUtil_findFile(*args):
  """ArUtil_findFile(char fileName) -> bool"""
  return _AriaPy.ArUtil_findFile(*args)

def ArUtil_appendSlash(*args):
  """
    appendSlash(char path, size_t pathLength)
    ArUtil_appendSlash(string path)
    """
  return _AriaPy.ArUtil_appendSlash(*args)

def ArUtil_fixSlashes(*args):
  """
    fixSlashes(char path, size_t pathLength)
    ArUtil_fixSlashes(string path)
    """
  return _AriaPy.ArUtil_fixSlashes(*args)

def ArUtil_fixSlashesForward(*args):
  """ArUtil_fixSlashesForward(char path, size_t pathLength)"""
  return _AriaPy.ArUtil_fixSlashesForward(*args)

def ArUtil_fixSlashesBackward(*args):
  """ArUtil_fixSlashesBackward(char path, size_t pathLength)"""
  return _AriaPy.ArUtil_fixSlashesBackward(*args)

def ArUtil_getSlash():
  """ArUtil_getSlash() -> char"""
  return _AriaPy.ArUtil_getSlash()

def ArUtil_addDirectories(*args):
  """ArUtil_addDirectories(char dest, size_t destLength, char baseDir, char insideDir)"""
  return _AriaPy.ArUtil_addDirectories(*args)

def ArUtil_strcmp(*args):
  """
    strcmp(string str, string str2) -> int
    strcmp(string str, char str2) -> int
    strcmp(char str, string str2) -> int
    ArUtil_strcmp(char str, char str2) -> int
    """
  return _AriaPy.ArUtil_strcmp(*args)

def ArUtil_strcasecmp(*args):
  """
    strcasecmp(string str, string str2) -> int
    strcasecmp(string str, char str2) -> int
    strcasecmp(char str, string str2) -> int
    ArUtil_strcasecmp(char str, char str2) -> int
    """
  return _AriaPy.ArUtil_strcasecmp(*args)

def ArUtil_strSuffixCmp(*args):
  """ArUtil_strSuffixCmp(char str, char suffix) -> bool"""
  return _AriaPy.ArUtil_strSuffixCmp(*args)

def ArUtil_strSuffixCaseCmp(*args):
  """ArUtil_strSuffixCaseCmp(char str, char suffix) -> bool"""
  return _AriaPy.ArUtil_strSuffixCaseCmp(*args)

def ArUtil_strcasequotecmp(*args):
  """ArUtil_strcasequotecmp(string str1, string str2) -> int"""
  return _AriaPy.ArUtil_strcasequotecmp(*args)

def ArUtil_escapeSpaces(*args):
  """ArUtil_escapeSpaces(char dest, char src, size_t maxLen)"""
  return _AriaPy.ArUtil_escapeSpaces(*args)

def ArUtil_stripQuotes(*args):
  """
    stripQuotes(char dest, char src, size_t destLen) -> bool
    ArUtil_stripQuotes(string strToStrip) -> bool
    """
  return _AriaPy.ArUtil_stripQuotes(*args)

def ArUtil_fixBadCharacters(*args):
  """
    fixBadCharacters(string strToFix, bool removeSpaces, bool fixOtherWhiteSpace = True) -> bool
    ArUtil_fixBadCharacters(string strToFix, bool removeSpaces) -> bool
    """
  return _AriaPy.ArUtil_fixBadCharacters(*args)

def ArUtil_lower(*args):
  """ArUtil_lower(char dest, char src, size_t maxLen)"""
  return _AriaPy.ArUtil_lower(*args)

def ArUtil_isOnlyAlphaNumeric(*args):
  """ArUtil_isOnlyAlphaNumeric(char str) -> bool"""
  return _AriaPy.ArUtil_isOnlyAlphaNumeric(*args)

def ArUtil_isOnlyNumeric(*args):
  """ArUtil_isOnlyNumeric(char str) -> bool"""
  return _AriaPy.ArUtil_isOnlyNumeric(*args)

def ArUtil_isStrEmpty(*args):
  """ArUtil_isStrEmpty(char str) -> bool"""
  return _AriaPy.ArUtil_isStrEmpty(*args)

def ArUtil_isStrInList(*args):
  """
    isStrInList(char str, std::list<(std::string,std::allocator<(std::string)>)> list, 
        bool isIgnoreCase = False) -> bool
    ArUtil_isStrInList(char str, std::list<(std::string,std::allocator<(std::string)>)> list) -> bool
    """
  return _AriaPy.ArUtil_isStrInList(*args)

def ArUtil_atof(*args):
  """ArUtil_atof(char nptr) -> double"""
  return _AriaPy.ArUtil_atof(*args)

def ArUtil_convertBool(*args):
  """ArUtil_convertBool(int val) -> char"""
  return _AriaPy.ArUtil_convertBool(*args)

def ArUtil_writeToFile(*args):
  """ArUtil_writeToFile(char str, FILE file)"""
  return _AriaPy.ArUtil_writeToFile(*args)

def ArUtil_getStringFromFile(*args):
  """ArUtil_getStringFromFile(char fileName, char str, size_t strLen) -> bool"""
  return _AriaPy.ArUtil_getStringFromFile(*args)

def ArUtil_getStringFromRegistry(*args):
  """ArUtil_getStringFromRegistry(REGKEY root, char key, char value, char str, int len) -> bool"""
  return _AriaPy.ArUtil_getStringFromRegistry(*args)

def ArUtil_findFirstStringInRegistry(*args):
  """ArUtil_findFirstStringInRegistry(char key, char value, char str, int len) -> bool"""
  return _AriaPy.ArUtil_findFirstStringInRegistry(*args)
cvar = _AriaPy.cvar

def ArUtil_putCurrentYearInString(*args):
  """ArUtil_putCurrentYearInString(char s, size_t len)"""
  return _AriaPy.ArUtil_putCurrentYearInString(*args)

def ArUtil_putCurrentMonthInString(*args):
  """ArUtil_putCurrentMonthInString(char s, size_t len)"""
  return _AriaPy.ArUtil_putCurrentMonthInString(*args)

def ArUtil_putCurrentDayInString(*args):
  """ArUtil_putCurrentDayInString(char s, size_t len)"""
  return _AriaPy.ArUtil_putCurrentDayInString(*args)

def ArUtil_putCurrentHourInString(*args):
  """ArUtil_putCurrentHourInString(char s, size_t len)"""
  return _AriaPy.ArUtil_putCurrentHourInString(*args)

def ArUtil_putCurrentMinuteInString(*args):
  """ArUtil_putCurrentMinuteInString(char s, size_t len)"""
  return _AriaPy.ArUtil_putCurrentMinuteInString(*args)

def ArUtil_putCurrentSecondInString(*args):
  """ArUtil_putCurrentSecondInString(char s, size_t len)"""
  return _AriaPy.ArUtil_putCurrentSecondInString(*args)

def ArUtil_parseTime(*args):
  """
    parseTime(char str, bool ok = None, bool toToday = True) -> time_t
    parseTime(char str, bool ok = None) -> time_t
    ArUtil_parseTime(char str) -> time_t
    """
  return _AriaPy.ArUtil_parseTime(*args)

def ArUtil_localtime(*args):
  """
    localtime(time_t timep, tm result) -> bool
    ArUtil_localtime(tm result) -> bool
    """
  return _AriaPy.ArUtil_localtime(*args)

def ArUtil_matchCase(*args):
  """ArUtil_matchCase(char baseDir, char fileName, char result, size_t resultLen) -> bool"""
  return _AriaPy.ArUtil_matchCase(*args)

def ArUtil_getDirectory(*args):
  """ArUtil_getDirectory(char fileName, char result, size_t resultLen) -> bool"""
  return _AriaPy.ArUtil_getDirectory(*args)

def ArUtil_getFileName(*args):
  """ArUtil_getFileName(char fileName, char result, size_t resultLen) -> bool"""
  return _AriaPy.ArUtil_getFileName(*args)

def ArUtil_changeFileTimestamp(*args):
  """ArUtil_changeFileTimestamp(char fileName, time_t timestamp) -> bool"""
  return _AriaPy.ArUtil_changeFileTimestamp(*args)

def ArUtil_fopen(*args):
  """
    fopen(char path, char mode, bool closeOnExec = True) -> FILE
    ArUtil_fopen(char path, char mode) -> FILE
    """
  return _AriaPy.ArUtil_fopen(*args)

def ArUtil_open(*args):
  """
    open(char pathname, int flags, bool closeOnExec = True) -> int
    open(char pathname, int flags) -> int
    open(char pathname, int flags, mode_t mode, bool closeOnExec = True) -> int
    ArUtil_open(char pathname, int flags, mode_t mode) -> int
    """
  return _AriaPy.ArUtil_open(*args)

def ArUtil_creat(*args):
  """
    creat(char pathname, mode_t mode, bool closeOnExec = True) -> int
    ArUtil_creat(char pathname, mode_t mode) -> int
    """
  return _AriaPy.ArUtil_creat(*args)

def ArUtil_popen(*args):
  """
    popen(char command, char type, bool closeOnExec = True) -> FILE
    ArUtil_popen(char command, char type) -> FILE
    """
  return _AriaPy.ArUtil_popen(*args)

def ArUtil_setFileCloseOnExec(*args):
  """
    setFileCloseOnExec(int fd, bool closeOnExec = True)
    setFileCloseOnExec(int fd)
    setFileCloseOnExec(FILE file, bool closeOnExec = True)
    ArUtil_setFileCloseOnExec(FILE file)
    """
  return _AriaPy.ArUtil_setFileCloseOnExec(*args)

def ArUtil_floatIsNormal(*args):
  """ArUtil_floatIsNormal(double f) -> bool"""
  return _AriaPy.ArUtil_floatIsNormal(*args)

def ArUtil_secToMSec(*args):
  """ArUtil_secToMSec(double sec) -> double"""
  return _AriaPy.ArUtil_secToMSec(*args)

def ArUtil_mSecToSec(*args):
  """ArUtil_mSecToSec(double msec) -> double"""
  return _AriaPy.ArUtil_mSecToSec(*args)

def ArUtil_metersToFeet(*args):
  """ArUtil_metersToFeet(double m) -> double"""
  return _AriaPy.ArUtil_metersToFeet(*args)

def ArUtil_feetToMeters(*args):
  """ArUtil_feetToMeters(double f) -> double"""
  return _AriaPy.ArUtil_feetToMeters(*args)

def ArUtil_atoi(*args):
  """
    atoi(char str, bool ok = None, bool forceHex = False) -> int
    atoi(char str, bool ok = None) -> int
    ArUtil_atoi(char str) -> int
    """
  return _AriaPy.ArUtil_atoi(*args)

class ArMath(object):
    """Proxy of C++ ArMath class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def epsilon():
        """epsilon() -> double"""
        return _AriaPy.ArMath_epsilon()

    epsilon = staticmethod(epsilon)
    def addAngle(*args):
        """addAngle(double ang1, double ang2) -> double"""
        return _AriaPy.ArMath_addAngle(*args)

    addAngle = staticmethod(addAngle)
    def subAngle(*args):
        """subAngle(double ang1, double ang2) -> double"""
        return _AriaPy.ArMath_subAngle(*args)

    subAngle = staticmethod(subAngle)
    def fixAngle(*args):
        """fixAngle(double angle) -> double"""
        return _AriaPy.ArMath_fixAngle(*args)

    fixAngle = staticmethod(fixAngle)
    def degToRad(*args):
        """degToRad(double deg) -> double"""
        return _AriaPy.ArMath_degToRad(*args)

    degToRad = staticmethod(degToRad)
    def radToDeg(*args):
        """radToDeg(double rad) -> double"""
        return _AriaPy.ArMath_radToDeg(*args)

    radToDeg = staticmethod(radToDeg)
    def cos(*args):
        """cos(double angle) -> double"""
        return _AriaPy.ArMath_cos(*args)

    cos = staticmethod(cos)
    def sin(*args):
        """sin(double angle) -> double"""
        return _AriaPy.ArMath_sin(*args)

    sin = staticmethod(sin)
    def tan(*args):
        """tan(double angle) -> double"""
        return _AriaPy.ArMath_tan(*args)

    tan = staticmethod(tan)
    def atan2(*args):
        """atan2(double y, double x) -> double"""
        return _AriaPy.ArMath_atan2(*args)

    atan2 = staticmethod(atan2)
    def angleBetween(*args):
        """angleBetween(double angle, double startAngle, double endAngle) -> bool"""
        return _AriaPy.ArMath_angleBetween(*args)

    angleBetween = staticmethod(angleBetween)
    def fabs(*args):
        """fabs(double val) -> double"""
        return _AriaPy.ArMath_fabs(*args)

    fabs = staticmethod(fabs)
    def roundInt(*args):
        """roundInt(double val) -> int"""
        return _AriaPy.ArMath_roundInt(*args)

    roundInt = staticmethod(roundInt)
    def roundShort(*args):
        """roundShort(double val) -> short"""
        return _AriaPy.ArMath_roundShort(*args)

    roundShort = staticmethod(roundShort)
    def pointRotate(*args):
        """pointRotate(double th)"""
        return _AriaPy.ArMath_pointRotate(*args)

    pointRotate = staticmethod(pointRotate)
    def random():
        """random() -> long"""
        return _AriaPy.ArMath_random()

    random = staticmethod(random)
    def getRandMax():
        """getRandMax() -> long"""
        return _AriaPy.ArMath_getRandMax()

    getRandMax = staticmethod(getRandMax)
    def randomInRange(*args):
        """randomInRange(long m, long n) -> long"""
        return _AriaPy.ArMath_randomInRange(*args)

    randomInRange = staticmethod(randomInRange)
    def distanceBetween(*args):
        """distanceBetween(double x1, double y1, double x2, double y2) -> double"""
        return _AriaPy.ArMath_distanceBetween(*args)

    distanceBetween = staticmethod(distanceBetween)
    def squaredDistanceBetween(*args):
        """squaredDistanceBetween(double x1, double y1, double x2, double y2) -> double"""
        return _AriaPy.ArMath_squaredDistanceBetween(*args)

    squaredDistanceBetween = staticmethod(squaredDistanceBetween)
    def log2(*args):
        """log2(double x) -> double"""
        return _AriaPy.ArMath_log2(*args)

    log2 = staticmethod(log2)
    def isNan(*args):
        """
        isNan(double d) -> bool
        isNan(float f) -> bool
        """
        return _AriaPy.ArMath_isNan(*args)

    isNan = staticmethod(isNan)
    def isFinite(*args):
        """
        isFinite(float f) -> bool
        isFinite(double d) -> bool
        """
        return _AriaPy.ArMath_isFinite(*args)

    isFinite = staticmethod(isFinite)
    def compareFloats(*args):
        """
        compareFloats(double f1, double f2, double epsilon) -> bool
        compareFloats(double f1, double f2) -> bool
        """
        return _AriaPy.ArMath_compareFloats(*args)

    compareFloats = staticmethod(compareFloats)
    def __init__(self): 
        """__init__(self) -> ArMath"""
        this = _AriaPy.new_ArMath()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArMath
    __del__ = lambda self : None;
ArMath_swigregister = _AriaPy.ArMath_swigregister
ArMath_swigregister(ArMath)

def ArMath_epsilon():
  """ArMath_epsilon() -> double"""
  return _AriaPy.ArMath_epsilon()

def ArMath_addAngle(*args):
  """ArMath_addAngle(double ang1, double ang2) -> double"""
  return _AriaPy.ArMath_addAngle(*args)

def ArMath_subAngle(*args):
  """ArMath_subAngle(double ang1, double ang2) -> double"""
  return _AriaPy.ArMath_subAngle(*args)

def ArMath_fixAngle(*args):
  """ArMath_fixAngle(double angle) -> double"""
  return _AriaPy.ArMath_fixAngle(*args)

def ArMath_degToRad(*args):
  """ArMath_degToRad(double deg) -> double"""
  return _AriaPy.ArMath_degToRad(*args)

def ArMath_radToDeg(*args):
  """ArMath_radToDeg(double rad) -> double"""
  return _AriaPy.ArMath_radToDeg(*args)

def ArMath_cos(*args):
  """ArMath_cos(double angle) -> double"""
  return _AriaPy.ArMath_cos(*args)

def ArMath_sin(*args):
  """ArMath_sin(double angle) -> double"""
  return _AriaPy.ArMath_sin(*args)

def ArMath_tan(*args):
  """ArMath_tan(double angle) -> double"""
  return _AriaPy.ArMath_tan(*args)

def ArMath_atan2(*args):
  """ArMath_atan2(double y, double x) -> double"""
  return _AriaPy.ArMath_atan2(*args)

def ArMath_angleBetween(*args):
  """ArMath_angleBetween(double angle, double startAngle, double endAngle) -> bool"""
  return _AriaPy.ArMath_angleBetween(*args)

def ArMath_fabs(*args):
  """ArMath_fabs(double val) -> double"""
  return _AriaPy.ArMath_fabs(*args)

def ArMath_roundInt(*args):
  """ArMath_roundInt(double val) -> int"""
  return _AriaPy.ArMath_roundInt(*args)

def ArMath_roundShort(*args):
  """ArMath_roundShort(double val) -> short"""
  return _AriaPy.ArMath_roundShort(*args)

def ArMath_pointRotate(*args):
  """ArMath_pointRotate(double th)"""
  return _AriaPy.ArMath_pointRotate(*args)

def ArMath_random():
  """ArMath_random() -> long"""
  return _AriaPy.ArMath_random()

def ArMath_getRandMax():
  """ArMath_getRandMax() -> long"""
  return _AriaPy.ArMath_getRandMax()

def ArMath_randomInRange(*args):
  """ArMath_randomInRange(long m, long n) -> long"""
  return _AriaPy.ArMath_randomInRange(*args)

def ArMath_distanceBetween(*args):
  """ArMath_distanceBetween(double x1, double y1, double x2, double y2) -> double"""
  return _AriaPy.ArMath_distanceBetween(*args)

def ArMath_squaredDistanceBetween(*args):
  """ArMath_squaredDistanceBetween(double x1, double y1, double x2, double y2) -> double"""
  return _AriaPy.ArMath_squaredDistanceBetween(*args)

def ArMath_log2(*args):
  """ArMath_log2(double x) -> double"""
  return _AriaPy.ArMath_log2(*args)

def ArMath_isNan(*args):
  """
    isNan(double d) -> bool
    ArMath_isNan(float f) -> bool
    """
  return _AriaPy.ArMath_isNan(*args)

def ArMath_isFinite(*args):
  """
    isFinite(float f) -> bool
    ArMath_isFinite(double d) -> bool
    """
  return _AriaPy.ArMath_isFinite(*args)

def ArMath_compareFloats(*args):
  """
    compareFloats(double f1, double f2, double epsilon) -> bool
    ArMath_compareFloats(double f1, double f2) -> bool
    """
  return _AriaPy.ArMath_compareFloats(*args)

class ArPose(object):
    """Proxy of C++ ArPose class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, double x = 0, double y = 0, double th = 0) -> ArPose
        __init__(self, double x = 0, double y = 0) -> ArPose
        __init__(self, double x = 0) -> ArPose
        __init__(self) -> ArPose
        __init__(self, ArPose pose) -> ArPose
        """
        this = _AriaPy.new_ArPose(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArPose
    __del__ = lambda self : None;
    def setPose(self, *args):
        """
        setPose(self, double x, double y, double th = 0)
        setPose(self, double x, double y)
        setPose(self, ArPose position)
        """
        return _AriaPy.ArPose_setPose(self, *args)

    def setX(self, *args):
        """setX(self, double x)"""
        return _AriaPy.ArPose_setX(self, *args)

    def setY(self, *args):
        """setY(self, double y)"""
        return _AriaPy.ArPose_setY(self, *args)

    def setTh(self, *args):
        """setTh(self, double th)"""
        return _AriaPy.ArPose_setTh(self, *args)

    def setThRad(self, *args):
        """setThRad(self, double th)"""
        return _AriaPy.ArPose_setThRad(self, *args)

    def getX(self):
        """getX(self) -> double"""
        return _AriaPy.ArPose_getX(self)

    def getY(self):
        """getY(self) -> double"""
        return _AriaPy.ArPose_getY(self)

    def getTh(self):
        """getTh(self) -> double"""
        return _AriaPy.ArPose_getTh(self)

    def getThRad(self):
        """getThRad(self) -> double"""
        return _AriaPy.ArPose_getThRad(self)

    def getPose(self):
        """
        getPose(self)
        getPose(self)
        """
        return _AriaPy.ArPose_getPose(self)

    def findDistanceTo(self, *args):
        """findDistanceTo(self, ArPose position) -> double"""
        return _AriaPy.ArPose_findDistanceTo(self, *args)

    def squaredFindDistanceTo(self, *args):
        """squaredFindDistanceTo(self, ArPose position) -> double"""
        return _AriaPy.ArPose_squaredFindDistanceTo(self, *args)

    def findAngleTo(self, *args):
        """findAngleTo(self, ArPose position) -> double"""
        return _AriaPy.ArPose_findAngleTo(self, *args)

    def log(self):
        """log(self)"""
        return _AriaPy.ArPose_log(self)

    def __add__(self, *args):
        """__add__(self, ArPose other) -> ArPose"""
        return _AriaPy.ArPose___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, ArPose other) -> ArPose"""
        return _AriaPy.ArPose___sub__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, ArPose other) -> ArPose"""
        return _AriaPy.ArPose___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(self, ArPose other) -> ArPose"""
        return _AriaPy.ArPose___isub__(self, *args)

    def __eq__(self, *args):
        """__eq__(self, ArPose other) -> bool"""
        return _AriaPy.ArPose___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, ArPose other) -> bool"""
        return _AriaPy.ArPose___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, ArPose other) -> bool"""
        return _AriaPy.ArPose___lt__(self, *args)

    def distanceBetween(*args):
        """distanceBetween(ArPose pose1, ArPose pose2) -> double"""
        return _AriaPy.ArPose_distanceBetween(*args)

    distanceBetween = staticmethod(distanceBetween)
    def __str__(self):
        """__str__(self) -> char"""
        return _AriaPy.ArPose___str__(self)

    x = _swig_property(_AriaPy.ArPose_x_get, _AriaPy.ArPose_x_set)
    y = _swig_property(_AriaPy.ArPose_y_get, _AriaPy.ArPose_y_set)
    th = _swig_property(_AriaPy.ArPose_th_get, _AriaPy.ArPose_th_set)
ArPose_swigregister = _AriaPy.ArPose_swigregister
ArPose_swigregister(ArPose)

def ArPose_distanceBetween(*args):
  """ArPose_distanceBetween(ArPose pose1, ArPose pose2) -> double"""
  return _AriaPy.ArPose_distanceBetween(*args)

class ArTime(object):
    """Proxy of C++ ArTime class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ArTime
        __init__(self, ArTime other) -> ArTime
        """
        this = _AriaPy.new_ArTime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArTime
    __del__ = lambda self : None;
    def mSecTo(self):
        """mSecTo(self) -> long"""
        return _AriaPy.ArTime_mSecTo(self)

    def mSecToLL(self):
        """mSecToLL(self) -> long long"""
        return _AriaPy.ArTime_mSecToLL(self)

    def secTo(self):
        """secTo(self) -> long"""
        return _AriaPy.ArTime_secTo(self)

    def secToLL(self):
        """secToLL(self) -> long long"""
        return _AriaPy.ArTime_secToLL(self)

    def mSecSince(self, *args):
        """
        mSecSince(self, ArTime since) -> long
        mSecSince(self) -> long
        """
        return _AriaPy.ArTime_mSecSince(self, *args)

    def mSecSinceLL(self, *args):
        """
        mSecSinceLL(self, ArTime since) -> long long
        mSecSinceLL(self) -> long long
        """
        return _AriaPy.ArTime_mSecSinceLL(self, *args)

    def secSince(self, *args):
        """
        secSince(self, ArTime since) -> long
        secSince(self) -> long
        """
        return _AriaPy.ArTime_secSince(self, *args)

    def secSinceLL(self, *args):
        """
        secSinceLL(self, ArTime since) -> long long
        secSinceLL(self) -> long long
        """
        return _AriaPy.ArTime_secSinceLL(self, *args)

    def isBefore(self, *args):
        """isBefore(self, ArTime testTime) -> bool"""
        return _AriaPy.ArTime_isBefore(self, *args)

    def isAt(self, *args):
        """isAt(self, ArTime testTime) -> bool"""
        return _AriaPy.ArTime_isAt(self, *args)

    def isAfter(self, *args):
        """isAfter(self, ArTime testTime) -> bool"""
        return _AriaPy.ArTime_isAfter(self, *args)

    def setToNow(self):
        """setToNow(self)"""
        return _AriaPy.ArTime_setToNow(self)

    def addMSec(self, *args):
        """addMSec(self, long ms) -> bool"""
        return _AriaPy.ArTime_addMSec(self, *args)

    def addMSecLL(self, *args):
        """addMSecLL(self, long long ms) -> bool"""
        return _AriaPy.ArTime_addMSecLL(self, *args)

    def setSec(self, *args):
        """setSec(self, unsigned long sec)"""
        return _AriaPy.ArTime_setSec(self, *args)

    def setMSec(self, *args):
        """setMSec(self, unsigned long msec)"""
        return _AriaPy.ArTime_setMSec(self, *args)

    def getSec(self):
        """getSec(self) -> unsigned long"""
        return _AriaPy.ArTime_getSec(self)

    def getMSec(self):
        """getMSec(self) -> unsigned long"""
        return _AriaPy.ArTime_getMSec(self)

    def setSecLL(self, *args):
        """setSecLL(self, unsigned long long sec)"""
        return _AriaPy.ArTime_setSecLL(self, *args)

    def setMSecLL(self, *args):
        """setMSecLL(self, unsigned long long msec)"""
        return _AriaPy.ArTime_setMSecLL(self, *args)

    def getSecLL(self):
        """getSecLL(self) -> unsigned long long"""
        return _AriaPy.ArTime_getSecLL(self)

    def getMSecLL(self):
        """getMSecLL(self) -> unsigned long long"""
        return _AriaPy.ArTime_getMSecLL(self)

    def log(self, prefix = None):
        """
        log(self, char prefix = None)
        log(self)
        """
        return _AriaPy.ArTime_log(self, prefix)

    def usingMonotonicClock():
        """usingMonotonicClock() -> bool"""
        return _AriaPy.ArTime_usingMonotonicClock()

    usingMonotonicClock = staticmethod(usingMonotonicClock)
    def __eq__(self, *args):
        """__eq__(self, ArTime other) -> bool"""
        return _AriaPy.ArTime___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, ArTime other) -> bool"""
        return _AriaPy.ArTime___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, ArTime other) -> bool"""
        return _AriaPy.ArTime___lt__(self, *args)

ArTime_swigregister = _AriaPy.ArTime_swigregister
ArTime_swigregister(ArTime)

def ArTime_usingMonotonicClock():
  """ArTime_usingMonotonicClock() -> bool"""
  return _AriaPy.ArTime_usingMonotonicClock()

class ArPoseWithTime(ArPose):
    """Proxy of C++ ArPoseWithTime class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, double x = 0, double y = 0, double th = 0, ArTime thisTime = ArTime()) -> ArPoseWithTime
        __init__(self, double x = 0, double y = 0, double th = 0) -> ArPoseWithTime
        __init__(self, double x = 0, double y = 0) -> ArPoseWithTime
        __init__(self, double x = 0) -> ArPoseWithTime
        __init__(self) -> ArPoseWithTime
        __init__(self, ArPose pose) -> ArPoseWithTime
        """
        this = _AriaPy.new_ArPoseWithTime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArPoseWithTime
    __del__ = lambda self : None;
    def setTime(self, *args):
        """setTime(self, ArTime newTime)"""
        return _AriaPy.ArPoseWithTime_setTime(self, *args)

    def setTimeToNow(self):
        """setTimeToNow(self)"""
        return _AriaPy.ArPoseWithTime_setTimeToNow(self)

    def getTime(self):
        """getTime(self) -> ArTime"""
        return _AriaPy.ArPoseWithTime_getTime(self)

ArPoseWithTime_swigregister = _AriaPy.ArPoseWithTime_swigregister
ArPoseWithTime_swigregister(ArPoseWithTime)

class ArSectors(object):
    """Proxy of C++ ArSectors class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, numSectors = 8): 
        """
        __init__(self, int numSectors = 8) -> ArSectors
        __init__(self) -> ArSectors
        """
        this = _AriaPy.new_ArSectors(numSectors)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArSectors
    __del__ = lambda self : None;
    def clear(self):
        """clear(self)"""
        return _AriaPy.ArSectors_clear(self)

    def update(self, *args):
        """update(self, double angle)"""
        return _AriaPy.ArSectors_update(self, *args)

    def didAll(self):
        """didAll(self) -> bool"""
        return _AriaPy.ArSectors_didAll(self)

ArSectors_swigregister = _AriaPy.ArSectors_swigregister
ArSectors_swigregister(ArSectors)

class ArLine(object):
    """Proxy of C++ ArLine class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ArLine
        __init__(self, double a, double b, double c) -> ArLine
        __init__(self, double x1, double y1, double x2, double y2) -> ArLine
        """
        this = _AriaPy.new_ArLine(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArLine
    __del__ = lambda self : None;
    def newParameters(self, *args):
        """newParameters(self, double a, double b, double c)"""
        return _AriaPy.ArLine_newParameters(self, *args)

    def newParametersFromEndpoints(self, *args):
        """newParametersFromEndpoints(self, double x1, double y1, double x2, double y2)"""
        return _AriaPy.ArLine_newParametersFromEndpoints(self, *args)

    def getA(self):
        """getA(self) -> double"""
        return _AriaPy.ArLine_getA(self)

    def getB(self):
        """getB(self) -> double"""
        return _AriaPy.ArLine_getB(self)

    def getC(self):
        """getC(self) -> double"""
        return _AriaPy.ArLine_getC(self)

    def intersects(self, *args):
        """intersects(self, ArLine line, ArPose pose) -> bool"""
        return _AriaPy.ArLine_intersects(self, *args)

    def makeLinePerp(self, *args):
        """makeLinePerp(self, ArPose pose, ArLine line)"""
        return _AriaPy.ArLine_makeLinePerp(self, *args)

    def getPerpDist(self, *args):
        """getPerpDist(self, ArPose pose) -> double"""
        return _AriaPy.ArLine_getPerpDist(self, *args)

    def getPerpSquaredDist(self, *args):
        """getPerpSquaredDist(self, ArPose pose) -> double"""
        return _AriaPy.ArLine_getPerpSquaredDist(self, *args)

    def getPerpPoint(self, *args):
        """getPerpPoint(self, ArPose pose, ArPose perpPoint) -> bool"""
        return _AriaPy.ArLine_getPerpPoint(self, *args)

    def __eq__(self, *args):
        """__eq__(self, ArLine other) -> bool"""
        return _AriaPy.ArLine___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, ArLine other) -> bool"""
        return _AriaPy.ArLine___ne__(self, *args)

ArLine_swigregister = _AriaPy.ArLine_swigregister
ArLine_swigregister(ArLine)

class ArLineSegment(object):
    """Proxy of C++ ArLineSegment class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArPose pose1, ArPose pose2) -> ArLineSegment"""
        this = _AriaPy.new_ArLineSegment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArLineSegment
    __del__ = lambda self : None;
    def newEndPoints(self, *args):
        """
        newEndPoints(self, double x1, double y1, double x2, double y2)
        newEndPoints(self, ArPose pt1, ArPose pt2)
        """
        return _AriaPy.ArLineSegment_newEndPoints(self, *args)

    def getEndPoint1(self):
        """getEndPoint1(self) -> ArPose"""
        return _AriaPy.ArLineSegment_getEndPoint1(self)

    def getEndPoint2(self):
        """getEndPoint2(self) -> ArPose"""
        return _AriaPy.ArLineSegment_getEndPoint2(self)

    def intersects(self, *args):
        """
        intersects(self, ArLine line, ArPose pose) -> bool
        intersects(self, ArLineSegment line, ArPose pose) -> bool
        """
        return _AriaPy.ArLineSegment_intersects(self, *args)

    def getPerpPoint(self, *args):
        """getPerpPoint(self, ArPose pose, ArPose perpPoint) -> bool"""
        return _AriaPy.ArLineSegment_getPerpPoint(self, *args)

    def getPerpDist(self, *args):
        """getPerpDist(self, ArPose pose) -> double"""
        return _AriaPy.ArLineSegment_getPerpDist(self, *args)

    def getPerpSquaredDist(self, *args):
        """getPerpSquaredDist(self, ArPose pose) -> double"""
        return _AriaPy.ArLineSegment_getPerpSquaredDist(self, *args)

    def getDistToLine(self, *args):
        """getDistToLine(self, ArPose pose) -> double"""
        return _AriaPy.ArLineSegment_getDistToLine(self, *args)

    def getLengthOf(self):
        """getLengthOf(self) -> double"""
        return _AriaPy.ArLineSegment_getLengthOf(self)

    def getMidPoint(self):
        """getMidPoint(self) -> ArPose"""
        return _AriaPy.ArLineSegment_getMidPoint(self)

    def getX1(self):
        """getX1(self) -> double"""
        return _AriaPy.ArLineSegment_getX1(self)

    def getY1(self):
        """getY1(self) -> double"""
        return _AriaPy.ArLineSegment_getY1(self)

    def getX2(self):
        """getX2(self) -> double"""
        return _AriaPy.ArLineSegment_getX2(self)

    def getY2(self):
        """getY2(self) -> double"""
        return _AriaPy.ArLineSegment_getY2(self)

    def getA(self):
        """getA(self) -> double"""
        return _AriaPy.ArLineSegment_getA(self)

    def getB(self):
        """getB(self) -> double"""
        return _AriaPy.ArLineSegment_getB(self)

    def getC(self):
        """getC(self) -> double"""
        return _AriaPy.ArLineSegment_getC(self)

    def linePointIsInSegment(self, *args):
        """linePointIsInSegment(self, ArPose pose) -> bool"""
        return _AriaPy.ArLineSegment_linePointIsInSegment(self, *args)

    def getLine(self):
        """getLine(self) -> ArLine"""
        return _AriaPy.ArLineSegment_getLine(self)

    def __eq__(self, *args):
        """__eq__(self, ArLineSegment other) -> bool"""
        return _AriaPy.ArLineSegment___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, ArLineSegment other) -> bool"""
        return _AriaPy.ArLineSegment___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, ArLineSegment other) -> bool"""
        return _AriaPy.ArLineSegment___lt__(self, *args)

ArLineSegment_swigregister = _AriaPy.ArLineSegment_swigregister
ArLineSegment_swigregister(ArLineSegment)

class ArRunningAverage(object):
    """Proxy of C++ ArRunningAverage class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, size_t numToAverage) -> ArRunningAverage"""
        this = _AriaPy.new_ArRunningAverage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArRunningAverage
    __del__ = lambda self : None;
    def getAverage(self):
        """getAverage(self) -> double"""
        return _AriaPy.ArRunningAverage_getAverage(self)

    def add(self, *args):
        """add(self, double val)"""
        return _AriaPy.ArRunningAverage_add(self, *args)

    def clear(self):
        """clear(self)"""
        return _AriaPy.ArRunningAverage_clear(self)

    def getNumToAverage(self):
        """getNumToAverage(self) -> size_t"""
        return _AriaPy.ArRunningAverage_getNumToAverage(self)

    def setNumToAverage(self, *args):
        """setNumToAverage(self, size_t numToAverage)"""
        return _AriaPy.ArRunningAverage_setNumToAverage(self, *args)

    def setUseRootMeanSquare(self, *args):
        """setUseRootMeanSquare(self, bool useRootMeanSquare)"""
        return _AriaPy.ArRunningAverage_setUseRootMeanSquare(self, *args)

    def getUseRootMeanSquare(self):
        """getUseRootMeanSquare(self) -> bool"""
        return _AriaPy.ArRunningAverage_getUseRootMeanSquare(self)

    def getCurrentNumAveraged(self):
        """getCurrentNumAveraged(self) -> size_t"""
        return _AriaPy.ArRunningAverage_getCurrentNumAveraged(self)

ArRunningAverage_swigregister = _AriaPy.ArRunningAverage_swigregister
ArRunningAverage_swigregister(ArRunningAverage)

class ArRootMeanSquareCalculator(object):
    """Proxy of C++ ArRootMeanSquareCalculator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ArRootMeanSquareCalculator"""
        this = _AriaPy.new_ArRootMeanSquareCalculator()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArRootMeanSquareCalculator
    __del__ = lambda self : None;
    def getRootMeanSquare(self):
        """getRootMeanSquare(self) -> double"""
        return _AriaPy.ArRootMeanSquareCalculator_getRootMeanSquare(self)

    def add(self, *args):
        """add(self, int val)"""
        return _AriaPy.ArRootMeanSquareCalculator_add(self, *args)

    def clear(self):
        """clear(self)"""
        return _AriaPy.ArRootMeanSquareCalculator_clear(self)

    def setName(self, *args):
        """setName(self, char name)"""
        return _AriaPy.ArRootMeanSquareCalculator_setName(self, *args)

    def getName(self):
        """getName(self) -> char"""
        return _AriaPy.ArRootMeanSquareCalculator_getName(self)

    def getCurrentNumAveraged(self):
        """getCurrentNumAveraged(self) -> size_t"""
        return _AriaPy.ArRootMeanSquareCalculator_getCurrentNumAveraged(self)

ArRootMeanSquareCalculator_swigregister = _AriaPy.ArRootMeanSquareCalculator_swigregister
ArRootMeanSquareCalculator_swigregister(ArRootMeanSquareCalculator)

class ArStrCaseCmpOp(object):
    """Proxy of C++ ArStrCaseCmpOp class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __call__(self, *args):
        """__call__(self, string s1, string s2) -> bool"""
        return _AriaPy.ArStrCaseCmpOp___call__(self, *args)

    def __init__(self): 
        """__init__(self) -> ArStrCaseCmpOp"""
        this = _AriaPy.new_ArStrCaseCmpOp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArStrCaseCmpOp
    __del__ = lambda self : None;
ArStrCaseCmpOp_swigregister = _AriaPy.ArStrCaseCmpOp_swigregister
ArStrCaseCmpOp_swigregister(ArStrCaseCmpOp)

class ArPoseCmpOp(object):
    """Proxy of C++ ArPoseCmpOp class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __call__(self, *args):
        """__call__(self, ArPose pose1, ArPose pose2) -> bool"""
        return _AriaPy.ArPoseCmpOp___call__(self, *args)

    def __init__(self): 
        """__init__(self) -> ArPoseCmpOp"""
        this = _AriaPy.new_ArPoseCmpOp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArPoseCmpOp
    __del__ = lambda self : None;
ArPoseCmpOp_swigregister = _AriaPy.ArPoseCmpOp_swigregister
ArPoseCmpOp_swigregister(ArPoseCmpOp)

class ArLineSegmentCmpOp(object):
    """Proxy of C++ ArLineSegmentCmpOp class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __call__(self, *args):
        """__call__(self, ArLineSegment line1, ArLineSegment line2) -> bool"""
        return _AriaPy.ArLineSegmentCmpOp___call__(self, *args)

    def __init__(self): 
        """__init__(self) -> ArLineSegmentCmpOp"""
        this = _AriaPy.new_ArLineSegmentCmpOp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArLineSegmentCmpOp
    __del__ = lambda self : None;
ArLineSegmentCmpOp_swigregister = _AriaPy.ArLineSegmentCmpOp_swigregister
ArLineSegmentCmpOp_swigregister(ArLineSegmentCmpOp)

class ArPriority(object):
    """Proxy of C++ ArPriority class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    IMPORTANT = _AriaPy.ArPriority_IMPORTANT
    BASIC = _AriaPy.ArPriority_BASIC
    FIRST_PRIORITY = _AriaPy.ArPriority_FIRST_PRIORITY
    NORMAL = _AriaPy.ArPriority_NORMAL
    INTERMEDIATE = _AriaPy.ArPriority_INTERMEDIATE
    DETAILED = _AriaPy.ArPriority_DETAILED
    TRIVIAL = _AriaPy.ArPriority_TRIVIAL
    ADVANCED = _AriaPy.ArPriority_ADVANCED
    EXPERT = _AriaPy.ArPriority_EXPERT
    FACTORY = _AriaPy.ArPriority_FACTORY
    CALIBRATION = _AriaPy.ArPriority_CALIBRATION
    LAST_PRIORITY = _AriaPy.ArPriority_LAST_PRIORITY
    PRIORITY_COUNT = _AriaPy.ArPriority_PRIORITY_COUNT
    def getPriorityName(*args):
        """getPriorityName(Priority priority) -> char"""
        return _AriaPy.ArPriority_getPriorityName(*args)

    getPriorityName = staticmethod(getPriorityName)
    def getPriorityFromName(*args):
        """
        getPriorityFromName(char text, bool ok = None) -> Priority
        getPriorityFromName(char text) -> Priority
        """
        return _AriaPy.ArPriority_getPriorityFromName(*args)

    getPriorityFromName = staticmethod(getPriorityFromName)
    def __init__(self): 
        """__init__(self) -> ArPriority"""
        this = _AriaPy.new_ArPriority()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArPriority
    __del__ = lambda self : None;
ArPriority_swigregister = _AriaPy.ArPriority_swigregister
ArPriority_swigregister(ArPriority)

def ArPriority_getPriorityName(*args):
  """ArPriority_getPriorityName(Priority priority) -> char"""
  return _AriaPy.ArPriority_getPriorityName(*args)

def ArPriority_getPriorityFromName(*args):
  """
    getPriorityFromName(char text, bool ok = None) -> Priority
    ArPriority_getPriorityFromName(char text) -> Priority
    """
  return _AriaPy.ArPriority_getPriorityFromName(*args)

class ArStringInfoHolder(object):
    """Proxy of C++ ArStringInfoHolder class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, char name, UByte2 maxLength, ArFunctor2<(p.char,ArTypes::UByte2)> functor) -> ArStringInfoHolder"""
        this = _AriaPy.new_ArStringInfoHolder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArStringInfoHolder
    __del__ = lambda self : None;
    def getName(self):
        """getName(self) -> char"""
        return _AriaPy.ArStringInfoHolder_getName(self)

    def getMaxLength(self):
        """getMaxLength(self) -> UByte2"""
        return _AriaPy.ArStringInfoHolder_getMaxLength(self)

    def getFunctor(self):
        """getFunctor(self) -> ArFunctor2<(p.char,ArTypes::UByte2)>"""
        return _AriaPy.ArStringInfoHolder_getFunctor(self)

ArStringInfoHolder_swigregister = _AriaPy.ArStringInfoHolder_swigregister
ArStringInfoHolder_swigregister(ArStringInfoHolder)

class ArStringInfoHolderFunctions(object):
    """Proxy of C++ ArStringInfoHolderFunctions class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def intWrapper(*args):
        """
        intWrapper(char buffer, UByte2 bufferLen, ArRetFunctor_Int functor, 
            char format)
        """
        return _AriaPy.ArStringInfoHolderFunctions_intWrapper(*args)

    intWrapper = staticmethod(intWrapper)
    def doubleWrapper(*args):
        """
        doubleWrapper(char buffer, UByte2 bufferLen, ArRetFunctor_Double functor, 
            char format)
        """
        return _AriaPy.ArStringInfoHolderFunctions_doubleWrapper(*args)

    doubleWrapper = staticmethod(doubleWrapper)
    def boolWrapper(*args):
        """
        boolWrapper(char buffer, UByte2 bufferLen, ArRetFunctor_Bool functor, 
            char format)
        """
        return _AriaPy.ArStringInfoHolderFunctions_boolWrapper(*args)

    boolWrapper = staticmethod(boolWrapper)
    def stringWrapper(*args):
        """
        stringWrapper(char buffer, UByte2 bufferLen, ArRetFunctor<(p.q(const).char)> functor, 
            char format)
        """
        return _AriaPy.ArStringInfoHolderFunctions_stringWrapper(*args)

    stringWrapper = staticmethod(stringWrapper)
    def unsignedLongWrapper(*args):
        """
        unsignedLongWrapper(char buffer, UByte2 bufferLen, ArRetFunctor<(unsigned long)> functor, 
            char format)
        """
        return _AriaPy.ArStringInfoHolderFunctions_unsignedLongWrapper(*args)

    unsignedLongWrapper = staticmethod(unsignedLongWrapper)
    def longWrapper(*args):
        """
        longWrapper(char buffer, UByte2 bufferLen, ArRetFunctor<(long)> functor, 
            char format)
        """
        return _AriaPy.ArStringInfoHolderFunctions_longWrapper(*args)

    longWrapper = staticmethod(longWrapper)
    def __init__(self): 
        """__init__(self) -> ArStringInfoHolderFunctions"""
        this = _AriaPy.new_ArStringInfoHolderFunctions()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArStringInfoHolderFunctions
    __del__ = lambda self : None;
ArStringInfoHolderFunctions_swigregister = _AriaPy.ArStringInfoHolderFunctions_swigregister
ArStringInfoHolderFunctions_swigregister(ArStringInfoHolderFunctions)

def ArStringInfoHolderFunctions_intWrapper(*args):
  """
    ArStringInfoHolderFunctions_intWrapper(char buffer, UByte2 bufferLen, ArRetFunctor_Int functor, 
        char format)
    """
  return _AriaPy.ArStringInfoHolderFunctions_intWrapper(*args)

def ArStringInfoHolderFunctions_doubleWrapper(*args):
  """
    ArStringInfoHolderFunctions_doubleWrapper(char buffer, UByte2 bufferLen, ArRetFunctor_Double functor, 
        char format)
    """
  return _AriaPy.ArStringInfoHolderFunctions_doubleWrapper(*args)

def ArStringInfoHolderFunctions_boolWrapper(*args):
  """
    ArStringInfoHolderFunctions_boolWrapper(char buffer, UByte2 bufferLen, ArRetFunctor_Bool functor, 
        char format)
    """
  return _AriaPy.ArStringInfoHolderFunctions_boolWrapper(*args)

def ArStringInfoHolderFunctions_stringWrapper(*args):
  """
    ArStringInfoHolderFunctions_stringWrapper(char buffer, UByte2 bufferLen, ArRetFunctor<(p.q(const).char)> functor, 
        char format)
    """
  return _AriaPy.ArStringInfoHolderFunctions_stringWrapper(*args)

def ArStringInfoHolderFunctions_unsignedLongWrapper(*args):
  """
    ArStringInfoHolderFunctions_unsignedLongWrapper(char buffer, UByte2 bufferLen, ArRetFunctor<(unsigned long)> functor, 
        char format)
    """
  return _AriaPy.ArStringInfoHolderFunctions_unsignedLongWrapper(*args)

def ArStringInfoHolderFunctions_longWrapper(*args):
  """
    ArStringInfoHolderFunctions_longWrapper(char buffer, UByte2 bufferLen, ArRetFunctor<(long)> functor, 
        char format)
    """
  return _AriaPy.ArStringInfoHolderFunctions_longWrapper(*args)

class ArCallbackList(object):
    """Proxy of C++ ArCallbackList class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, char name = "", LogLevel logLevel = Verbose, bool singleShot = False) -> ArCallbackList
        __init__(self, char name = "", LogLevel logLevel = Verbose) -> ArCallbackList
        __init__(self, char name = "") -> ArCallbackList
        __init__(self) -> ArCallbackList
        """
        this = _AriaPy.new_ArCallbackList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArCallbackList
    __del__ = lambda self : None;
    def invoke(self):
        """invoke(self)"""
        return _AriaPy.ArCallbackList_invoke(self)

ArCallbackList_swigregister = _AriaPy.ArCallbackList_swigregister
ArCallbackList_swigregister(ArCallbackList)

class ArPoseUtil(object):
    """Proxy of C++ ArPoseUtil class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def findCornersFromRobotBounds(*args):
        """
        findCornersFromRobotBounds(double radius, double widthLeft, double widthRight, 
            double lengthFront, double lengthRear, bool fastButUnsafe) -> ArPoseList
        """
        return _AriaPy.ArPoseUtil_findCornersFromRobotBounds(*args)

    findCornersFromRobotBounds = staticmethod(findCornersFromRobotBounds)
    def breakUpDistanceEvenly(*args):
        """breakUpDistanceEvenly(ArPose start, ArPose end, int resolution) -> ArPoseList"""
        return _AriaPy.ArPoseUtil_breakUpDistanceEvenly(*args)

    breakUpDistanceEvenly = staticmethod(breakUpDistanceEvenly)
    def __init__(self): 
        """__init__(self) -> ArPoseUtil"""
        this = _AriaPy.new_ArPoseUtil()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArPoseUtil
    __del__ = lambda self : None;
ArPoseUtil_swigregister = _AriaPy.ArPoseUtil_swigregister
ArPoseUtil_swigregister(ArPoseUtil)

def ArPoseUtil_findCornersFromRobotBounds(*args):
  """
    ArPoseUtil_findCornersFromRobotBounds(double radius, double widthLeft, double widthRight, 
        double lengthFront, double lengthRear, bool fastButUnsafe) -> ArPoseList
    """
  return _AriaPy.ArPoseUtil_findCornersFromRobotBounds(*args)

def ArPoseUtil_breakUpDistanceEvenly(*args):
  """ArPoseUtil_breakUpDistanceEvenly(ArPose start, ArPose end, int resolution) -> ArPoseList"""
  return _AriaPy.ArPoseUtil_breakUpDistanceEvenly(*args)

class ArTimeChecker(object):
    """Proxy of C++ ArTimeChecker class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, name = "Unknown", defaultMSecs = 100): 
        """
        __init__(self, char name = "Unknown", int defaultMSecs = 100) -> ArTimeChecker
        __init__(self, char name = "Unknown") -> ArTimeChecker
        __init__(self) -> ArTimeChecker
        """
        this = _AriaPy.new_ArTimeChecker(name, defaultMSecs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArTimeChecker
    __del__ = lambda self : None;
    def setName(self, *args):
        """setName(self, char name)"""
        return _AriaPy.ArTimeChecker_setName(self, *args)

    def setDefaultMSecs(self, *args):
        """setDefaultMSecs(self, int defaultMSecs)"""
        return _AriaPy.ArTimeChecker_setDefaultMSecs(self, *args)

    def start(self):
        """start(self)"""
        return _AriaPy.ArTimeChecker_start(self)

    def check(self, *args):
        """check(self, char subName)"""
        return _AriaPy.ArTimeChecker_check(self, *args)

    def finish(self):
        """finish(self)"""
        return _AriaPy.ArTimeChecker_finish(self)

    def getLastCheckTime(self):
        """getLastCheckTime(self) -> ArTime"""
        return _AriaPy.ArTimeChecker_getLastCheckTime(self)

ArTimeChecker_swigregister = _AriaPy.ArTimeChecker_swigregister
ArTimeChecker_swigregister(ArTimeChecker)

class md5_state_t(object):
    """Proxy of C++ md5_state_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    count = _swig_property(_AriaPy.md5_state_t_count_get, _AriaPy.md5_state_t_count_set)
    abcd = _swig_property(_AriaPy.md5_state_t_abcd_get, _AriaPy.md5_state_t_abcd_set)
    buf = _swig_property(_AriaPy.md5_state_t_buf_get, _AriaPy.md5_state_t_buf_set)
    def __init__(self): 
        """__init__(self) -> md5_state_t"""
        this = _AriaPy.new_md5_state_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_md5_state_t
    __del__ = lambda self : None;
md5_state_t_swigregister = _AriaPy.md5_state_t_swigregister
md5_state_t_swigregister(md5_state_t)


def md5_init(*args):
  """md5_init( pms)"""
  return _AriaPy.md5_init(*args)

def md5_append(*args):
  """md5_append( pms, md5_byte_t data, int nbytes)"""
  return _AriaPy.md5_append(*args)

def md5_finish(*args):
  """md5_finish( pms, md5_byte_t digest)"""
  return _AriaPy.md5_finish(*args)
class ArBasePacket(object):
    """Proxy of C++ ArBasePacket class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, UByte2 bufferSize = 0, UByte2 headerLength = 0, char buf = None, 
            UByte2 footerLength = 0) -> ArBasePacket
        __init__(self, UByte2 bufferSize = 0, UByte2 headerLength = 0, char buf = None) -> ArBasePacket
        __init__(self, UByte2 bufferSize = 0, UByte2 headerLength = 0) -> ArBasePacket
        __init__(self, UByte2 bufferSize = 0) -> ArBasePacket
        __init__(self) -> ArBasePacket
        __init__(self, ArBasePacket other) -> ArBasePacket
        """
        this = _AriaPy.new_ArBasePacket(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArBasePacket
    __del__ = lambda self : None;
    def empty(self):
        """empty(self)"""
        return _AriaPy.ArBasePacket_empty(self)

    def finalizePacket(self):
        """finalizePacket(self)"""
        return _AriaPy.ArBasePacket_finalizePacket(self)

    def log(self):
        """log(self)"""
        return _AriaPy.ArBasePacket_log(self)

    def printHex(self):
        """printHex(self)"""
        return _AriaPy.ArBasePacket_printHex(self)

    def isValid(self):
        """isValid(self) -> bool"""
        return _AriaPy.ArBasePacket_isValid(self)

    def resetValid(self):
        """resetValid(self)"""
        return _AriaPy.ArBasePacket_resetValid(self)

    def byteToBuf(self, *args):
        """byteToBuf(self, Byte val)"""
        return _AriaPy.ArBasePacket_byteToBuf(self, *args)

    def byte2ToBuf(self, *args):
        """byte2ToBuf(self, Byte2 val)"""
        return _AriaPy.ArBasePacket_byte2ToBuf(self, *args)

    def byte4ToBuf(self, *args):
        """byte4ToBuf(self, Byte4 val)"""
        return _AriaPy.ArBasePacket_byte4ToBuf(self, *args)

    def byte8ToBuf(self, *args):
        """byte8ToBuf(self, Byte8 val)"""
        return _AriaPy.ArBasePacket_byte8ToBuf(self, *args)

    def uByteToBuf(self, *args):
        """uByteToBuf(self, UByte val)"""
        return _AriaPy.ArBasePacket_uByteToBuf(self, *args)

    def uByte2ToBuf(self, *args):
        """uByte2ToBuf(self, UByte2 val)"""
        return _AriaPy.ArBasePacket_uByte2ToBuf(self, *args)

    def uByte4ToBuf(self, *args):
        """uByte4ToBuf(self, UByte4 val)"""
        return _AriaPy.ArBasePacket_uByte4ToBuf(self, *args)

    def uByte8ToBuf(self, *args):
        """uByte8ToBuf(self, UByte8 val)"""
        return _AriaPy.ArBasePacket_uByte8ToBuf(self, *args)

    def strToBuf(self, *args):
        """strToBuf(self, char str)"""
        return _AriaPy.ArBasePacket_strToBuf(self, *args)

    def strNToBuf(self, *args):
        """strNToBuf(self, char str, int length)"""
        return _AriaPy.ArBasePacket_strNToBuf(self, *args)

    def strToBufPadded(self, *args):
        """strToBufPadded(self, char str, int length)"""
        return _AriaPy.ArBasePacket_strToBufPadded(self, *args)

    def dataToBuf(self, *args):
        """
        dataToBuf(self, char data, int length)
        dataToBuf(self, unsigned char data, int length)
        """
        return _AriaPy.ArBasePacket_dataToBuf(self, *args)

    def bufToByte(self):
        """bufToByte(self) -> Byte"""
        return _AriaPy.ArBasePacket_bufToByte(self)

    def bufToByte2(self):
        """bufToByte2(self) -> Byte2"""
        return _AriaPy.ArBasePacket_bufToByte2(self)

    def bufToByte4(self):
        """bufToByte4(self) -> Byte4"""
        return _AriaPy.ArBasePacket_bufToByte4(self)

    def bufToByte8(self):
        """bufToByte8(self) -> Byte8"""
        return _AriaPy.ArBasePacket_bufToByte8(self)

    def bufToUByte(self):
        """bufToUByte(self) -> UByte"""
        return _AriaPy.ArBasePacket_bufToUByte(self)

    def bufToUByte2(self):
        """bufToUByte2(self) -> UByte2"""
        return _AriaPy.ArBasePacket_bufToUByte2(self)

    def bufToUByte4(self):
        """bufToUByte4(self) -> UByte4"""
        return _AriaPy.ArBasePacket_bufToUByte4(self)

    def bufToUByte8(self):
        """bufToUByte8(self) -> UByte8"""
        return _AriaPy.ArBasePacket_bufToUByte8(self)

    def bufToStr(self, *args):
        """bufToStr(self, char buf, int len)"""
        return _AriaPy.ArBasePacket_bufToStr(self, *args)

    def bufToData(self, *args):
        """
        bufToData(self, char data, int length)
        bufToData(self, unsigned char data, int length)
        """
        return _AriaPy.ArBasePacket_bufToData(self, *args)

    def resetRead(self):
        """resetRead(self)"""
        return _AriaPy.ArBasePacket_resetRead(self)

    def getLength(self):
        """getLength(self) -> UByte2"""
        return _AriaPy.ArBasePacket_getLength(self)

    def getDataLength(self):
        """getDataLength(self) -> UByte2"""
        return _AriaPy.ArBasePacket_getDataLength(self)

    def getReadLength(self):
        """getReadLength(self) -> UByte2"""
        return _AriaPy.ArBasePacket_getReadLength(self)

    def getDataReadLength(self):
        """getDataReadLength(self) -> UByte2"""
        return _AriaPy.ArBasePacket_getDataReadLength(self)

    def getHeaderLength(self):
        """getHeaderLength(self) -> UByte2"""
        return _AriaPy.ArBasePacket_getHeaderLength(self)

    def getFooterLength(self):
        """getFooterLength(self) -> UByte2"""
        return _AriaPy.ArBasePacket_getFooterLength(self)

    def getMaxLength(self):
        """getMaxLength(self) -> UByte2"""
        return _AriaPy.ArBasePacket_getMaxLength(self)

    def getBuf(self, *args):
        """
        getBuf(self) -> char
        getBuf(self) -> char
        """
        return _AriaPy.ArBasePacket_getBuf(self, *args)

    def setBuf(self, *args):
        """setBuf(self, char buf, UByte2 bufferSize)"""
        return _AriaPy.ArBasePacket_setBuf(self, *args)

    def setMaxLength(self, *args):
        """setMaxLength(self, UByte2 bufferSize)"""
        return _AriaPy.ArBasePacket_setMaxLength(self, *args)

    def setLength(self, *args):
        """setLength(self, UByte2 length) -> bool"""
        return _AriaPy.ArBasePacket_setLength(self, *args)

    def setReadLength(self, *args):
        """setReadLength(self, UByte2 readLength)"""
        return _AriaPy.ArBasePacket_setReadLength(self, *args)

    def setHeaderLength(self, *args):
        """setHeaderLength(self, UByte2 length) -> bool"""
        return _AriaPy.ArBasePacket_setHeaderLength(self, *args)

    def duplicatePacket(self, *args):
        """duplicatePacket(self, ArBasePacket packet)"""
        return _AriaPy.ArBasePacket_duplicatePacket(self, *args)

ArBasePacket_swigregister = _AriaPy.ArBasePacket_swigregister
ArBasePacket_swigregister(ArBasePacket)

class ArPTZ(object):
    """Proxy of C++ ArPTZ class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArPTZ
    __del__ = lambda self : None;
    def init(self):
        """init(self) -> bool"""
        return _AriaPy.ArPTZ_init(self)

    def getTypeName(self):
        """getTypeName(self) -> char"""
        return _AriaPy.ArPTZ_getTypeName(self)

    def reset(self):
        """reset(self)"""
        return _AriaPy.ArPTZ_reset(self)

    def pan(self, *args):
        """pan(self, double degrees) -> bool"""
        return _AriaPy.ArPTZ_pan(self, *args)

    def panRel(self, *args):
        """panRel(self, double degrees) -> bool"""
        return _AriaPy.ArPTZ_panRel(self, *args)

    def tilt(self, *args):
        """tilt(self, double degrees) -> bool"""
        return _AriaPy.ArPTZ_tilt(self, *args)

    def tiltRel(self, *args):
        """tiltRel(self, double degrees) -> bool"""
        return _AriaPy.ArPTZ_tiltRel(self, *args)

    def panTilt(self, *args):
        """panTilt(self, double degreesPan, double degreesTilt) -> bool"""
        return _AriaPy.ArPTZ_panTilt(self, *args)

    def panTiltRel(self, *args):
        """panTiltRel(self, double degreesPan, double degreesTilt) -> bool"""
        return _AriaPy.ArPTZ_panTiltRel(self, *args)

    def canZoom(self):
        """canZoom(self) -> bool"""
        return _AriaPy.ArPTZ_canZoom(self)

    def zoom(self, *args):
        """zoom(self, int zoomValue) -> bool"""
        return _AriaPy.ArPTZ_zoom(self, *args)

    def zoomRel(self, *args):
        """zoomRel(self, int zoomValue) -> bool"""
        return _AriaPy.ArPTZ_zoomRel(self, *args)

    def getPan(self):
        """getPan(self) -> double"""
        return _AriaPy.ArPTZ_getPan(self)

    def getTilt(self):
        """getTilt(self) -> double"""
        return _AriaPy.ArPTZ_getTilt(self)

    def getZoom(self):
        """getZoom(self) -> int"""
        return _AriaPy.ArPTZ_getZoom(self)

    def canGetRealPanTilt(self):
        """canGetRealPanTilt(self) -> bool"""
        return _AriaPy.ArPTZ_canGetRealPanTilt(self)

    def canGetRealZoom(self):
        """canGetRealZoom(self) -> bool"""
        return _AriaPy.ArPTZ_canGetRealZoom(self)

    def getMaxPosPan(self):
        """getMaxPosPan(self) -> double"""
        return _AriaPy.ArPTZ_getMaxPosPan(self)

    def getMaxPan(self):
        """getMaxPan(self) -> double"""
        return _AriaPy.ArPTZ_getMaxPan(self)

    def getMaxNegPan(self):
        """getMaxNegPan(self) -> double"""
        return _AriaPy.ArPTZ_getMaxNegPan(self)

    def getMinPan(self):
        """getMinPan(self) -> double"""
        return _AriaPy.ArPTZ_getMinPan(self)

    def getMaxPosTilt(self):
        """getMaxPosTilt(self) -> double"""
        return _AriaPy.ArPTZ_getMaxPosTilt(self)

    def getMaxTilt(self):
        """getMaxTilt(self) -> double"""
        return _AriaPy.ArPTZ_getMaxTilt(self)

    def getMaxNegTilt(self):
        """getMaxNegTilt(self) -> double"""
        return _AriaPy.ArPTZ_getMaxNegTilt(self)

    def getMinTilt(self):
        """getMinTilt(self) -> double"""
        return _AriaPy.ArPTZ_getMinTilt(self)

    def haltPanTilt(self):
        """haltPanTilt(self) -> bool"""
        return _AriaPy.ArPTZ_haltPanTilt(self)

    def haltZoom(self):
        """haltZoom(self) -> bool"""
        return _AriaPy.ArPTZ_haltZoom(self)

    def canPanTiltSlew(self):
        """canPanTiltSlew(self) -> bool"""
        return _AriaPy.ArPTZ_canPanTiltSlew(self)

    def canSetSpeed(self):
        """canSetSpeed(self) -> bool"""
        return _AriaPy.ArPTZ_canSetSpeed(self)

    def panSlew(self, *args):
        """panSlew(self, double s) -> bool"""
        return _AriaPy.ArPTZ_panSlew(self, *args)

    def setPanSpeed(self, *args):
        """setPanSpeed(self, double s) -> bool"""
        return _AriaPy.ArPTZ_setPanSpeed(self, *args)

    def tiltSlew(self, *args):
        """tiltSlew(self, double s) -> bool"""
        return _AriaPy.ArPTZ_tiltSlew(self, *args)

    def setTiltSpeed(self, *args):
        """setTiltSpeed(self, double s) -> bool"""
        return _AriaPy.ArPTZ_setTiltSpeed(self, *args)

    def getMaxPanSpeed(self):
        """getMaxPanSpeed(self) -> double"""
        return _AriaPy.ArPTZ_getMaxPanSpeed(self)

    def getMaxTiltSpeed(self):
        """getMaxTiltSpeed(self) -> double"""
        return _AriaPy.ArPTZ_getMaxTiltSpeed(self)

    def getMaxZoom(self):
        """getMaxZoom(self) -> int"""
        return _AriaPy.ArPTZ_getMaxZoom(self)

    def getMinZoom(self):
        """getMinZoom(self) -> int"""
        return _AriaPy.ArPTZ_getMinZoom(self)

    def canGetFOV(self):
        """canGetFOV(self) -> bool"""
        return _AriaPy.ArPTZ_canGetFOV(self)

    def getFOVAtMaxZoom(self):
        """getFOVAtMaxZoom(self) -> double"""
        return _AriaPy.ArPTZ_getFOVAtMaxZoom(self)

    def getFOVAtMinZoom(self):
        """getFOVAtMinZoom(self) -> double"""
        return _AriaPy.ArPTZ_getFOVAtMinZoom(self)

    def setGain(self, *args):
        """setGain(self, double gain) -> bool"""
        return _AriaPy.ArPTZ_setGain(self, *args)

    def getGain(self, *args):
        """getGain(self, double gain) -> double"""
        return _AriaPy.ArPTZ_getGain(self, *args)

    def canSetGain(self):
        """canSetGain(self) -> bool"""
        return _AriaPy.ArPTZ_canSetGain(self)

    def setFocus(self, *args):
        """setFocus(self, double focus) -> bool"""
        return _AriaPy.ArPTZ_setFocus(self, *args)

    def getFocus(self, *args):
        """getFocus(self, double focus) -> double"""
        return _AriaPy.ArPTZ_getFocus(self, *args)

    def canSetFocus(self):
        """canSetFocus(self) -> bool"""
        return _AriaPy.ArPTZ_canSetFocus(self)

    def setAutoFocus(self, af = True):
        """
        setAutoFocus(self, bool af = True) -> bool
        setAutoFocus(self) -> bool
        """
        return _AriaPy.ArPTZ_setAutoFocus(self, af)

    def setInverted(self, *args):
        """setInverted(self, bool inv)"""
        return _AriaPy.ArPTZ_setInverted(self, *args)

    def getInverted(self):
        """getInverted(self) -> bool"""
        return _AriaPy.ArPTZ_getInverted(self)

    def setDeviceConnection(self, *args):
        """
        setDeviceConnection(self, ArDeviceConnection connection, bool driveFromRobotLoop = True) -> bool
        setDeviceConnection(self, ArDeviceConnection connection) -> bool
        """
        return _AriaPy.ArPTZ_setDeviceConnection(self, *args)

    def getDeviceConnection(self):
        """getDeviceConnection(self) -> ArDeviceConnection"""
        return _AriaPy.ArPTZ_getDeviceConnection(self)

    def setAuxPort(self, *args):
        """setAuxPort(self, int auxPort) -> bool"""
        return _AriaPy.ArPTZ_setAuxPort(self, *args)

    def getAuxPort(self):
        """getAuxPort(self) -> int"""
        return _AriaPy.ArPTZ_getAuxPort(self)

    def readPacket(self):
        """readPacket(self) -> ArBasePacket"""
        return _AriaPy.ArPTZ_readPacket(self)

    def sendPacket(self, *args):
        """sendPacket(self, ArBasePacket packet) -> bool"""
        return _AriaPy.ArPTZ_sendPacket(self, *args)

    def packetHandler(self, *args):
        """packetHandler(self, ArBasePacket packet) -> bool"""
        return _AriaPy.ArPTZ_packetHandler(self, *args)

    def robotPacketHandler(self, *args):
        """robotPacketHandler(self, ArRobotPacket packet) -> bool"""
        return _AriaPy.ArPTZ_robotPacketHandler(self, *args)

    def connectHandler(self):
        """connectHandler(self)"""
        return _AriaPy.ArPTZ_connectHandler(self)

    def sensorInterpHandler(self):
        """sensorInterpHandler(self)"""
        return _AriaPy.ArPTZ_sensorInterpHandler(self)

    def getRobot(self):
        """getRobot(self) -> ArRobot"""
        return _AriaPy.ArPTZ_getRobot(self)

ArPTZ_swigregister = _AriaPy.ArPTZ_swigregister
ArPTZ_swigregister(ArPTZ)

class ArRangeDevice(object):
    """Proxy of C++ ArRangeDevice class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size_t currentBufferSize, size_t cumulativeBufferSize, 
            char name, unsigned int maxRange, int maxSecondsToKeepCurrent = 0, 
            int maxSecondsToKeepCumulative = 0, 
            double maxDistToKeepCumulative = 0, 
            bool locationDependent = False) -> ArRangeDevice
        __init__(self, size_t currentBufferSize, size_t cumulativeBufferSize, 
            char name, unsigned int maxRange, int maxSecondsToKeepCurrent = 0, 
            int maxSecondsToKeepCumulative = 0, 
            double maxDistToKeepCumulative = 0) -> ArRangeDevice
        __init__(self, size_t currentBufferSize, size_t cumulativeBufferSize, 
            char name, unsigned int maxRange, int maxSecondsToKeepCurrent = 0, 
            int maxSecondsToKeepCumulative = 0) -> ArRangeDevice
        __init__(self, size_t currentBufferSize, size_t cumulativeBufferSize, 
            char name, unsigned int maxRange, int maxSecondsToKeepCurrent = 0) -> ArRangeDevice
        __init__(self, size_t currentBufferSize, size_t cumulativeBufferSize, 
            char name, unsigned int maxRange) -> ArRangeDevice
        """
        this = _AriaPy.new_ArRangeDevice(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArRangeDevice
    __del__ = lambda self : None;
    def getName(self):
        """getName(self) -> char"""
        return _AriaPy.ArRangeDevice_getName(self)

    def setRobot(self, *args):
        """setRobot(self, ArRobot robot)"""
        return _AriaPy.ArRangeDevice_setRobot(self, *args)

    def getRobot(self):
        """getRobot(self) -> ArRobot"""
        return _AriaPy.ArRangeDevice_getRobot(self)

    def setCurrentBufferSize(self, *args):
        """setCurrentBufferSize(self, size_t size)"""
        return _AriaPy.ArRangeDevice_setCurrentBufferSize(self, *args)

    def getCurrentBufferSize(self):
        """getCurrentBufferSize(self) -> size_t"""
        return _AriaPy.ArRangeDevice_getCurrentBufferSize(self)

    def setCumulativeBufferSize(self, *args):
        """setCumulativeBufferSize(self, size_t size)"""
        return _AriaPy.ArRangeDevice_setCumulativeBufferSize(self, *args)

    def getCumulativeBufferSize(self):
        """getCumulativeBufferSize(self) -> size_t"""
        return _AriaPy.ArRangeDevice_getCumulativeBufferSize(self)

    def addReading(self, *args):
        """
        addReading(self, double x, double y, bool wasAdded = None)
        addReading(self, double x, double y)
        """
        return _AriaPy.ArRangeDevice_addReading(self, *args)

    def isLocationDependent(self):
        """isLocationDependent(self) -> bool"""
        return _AriaPy.ArRangeDevice_isLocationDependent(self)

    def currentReadingPolar(self, *args):
        """
        currentReadingPolar(self, double startAngle, double endAngle, double angle = None) -> double
        currentReadingPolar(self, double startAngle, double endAngle) -> double
        """
        return _AriaPy.ArRangeDevice_currentReadingPolar(self, *args)

    def cumulativeReadingPolar(self, *args):
        """
        cumulativeReadingPolar(self, double startAngle, double endAngle, double angle = None) -> double
        cumulativeReadingPolar(self, double startAngle, double endAngle) -> double
        """
        return _AriaPy.ArRangeDevice_cumulativeReadingPolar(self, *args)

    def currentReadingBox(self, *args):
        """
        currentReadingBox(self, double x1, double y1, double x2, double y2, ArPose readingPos = None) -> double
        currentReadingBox(self, double x1, double y1, double x2, double y2) -> double
        """
        return _AriaPy.ArRangeDevice_currentReadingBox(self, *args)

    def cumulativeReadingBox(self, *args):
        """
        cumulativeReadingBox(self, double x1, double y1, double x2, double y2, ArPose readingPos = None) -> double
        cumulativeReadingBox(self, double x1, double y1, double x2, double y2) -> double
        """
        return _AriaPy.ArRangeDevice_cumulativeReadingBox(self, *args)

    def getCurrentRangeBuffer(self):
        """getCurrentRangeBuffer(self) -> ArRangeBuffer"""
        return _AriaPy.ArRangeDevice_getCurrentRangeBuffer(self)

    def getCumulativeRangeBuffer(self):
        """getCumulativeRangeBuffer(self) -> ArRangeBuffer"""
        return _AriaPy.ArRangeDevice_getCumulativeRangeBuffer(self)

    def getCurrentBuffer(self):
        """getCurrentBuffer(self) -> ArPoseWithTimePtrList"""
        return _AriaPy.ArRangeDevice_getCurrentBuffer(self)

    def getCurrentBufferAsVector(self):
        """getCurrentBufferAsVector(self) -> ArPoseWithTimeVector"""
        return _AriaPy.ArRangeDevice_getCurrentBufferAsVector(self)

    def getCumulativeBuffer(self):
        """getCumulativeBuffer(self) -> ArPoseWithTimePtrList"""
        return _AriaPy.ArRangeDevice_getCumulativeBuffer(self)

    def getCumulativeBufferAsVector(self):
        """getCumulativeBufferAsVector(self) -> ArPoseWithTimeVector"""
        return _AriaPy.ArRangeDevice_getCumulativeBufferAsVector(self)

    def getRawReadings(self):
        """getRawReadings(self) -> std::list<(p.ArSensorReading,std::allocator<(p.ArSensorReading)>)>"""
        return _AriaPy.ArRangeDevice_getRawReadings(self)

    def getRawReadingsAsVector(self):
        """getRawReadingsAsVector(self) -> ArSensorReadingVector"""
        return _AriaPy.ArRangeDevice_getRawReadingsAsVector(self)

    def getAdjustedRawReadings(self):
        """getAdjustedRawReadings(self) -> std::list<(p.ArSensorReading,std::allocator<(p.ArSensorReading)>)>"""
        return _AriaPy.ArRangeDevice_getAdjustedRawReadings(self)

    def getAdjustedRawReadingsAsVector(self):
        """getAdjustedRawReadingsAsVector(self) -> ArSensorReadingVector"""
        return _AriaPy.ArRangeDevice_getAdjustedRawReadingsAsVector(self)

    def setMaxSecondsToKeepCurrent(self, *args):
        """setMaxSecondsToKeepCurrent(self, int maxSecondsToKeepCurrent)"""
        return _AriaPy.ArRangeDevice_setMaxSecondsToKeepCurrent(self, *args)

    def getMaxSecondsToKeepCurrent(self):
        """getMaxSecondsToKeepCurrent(self) -> int"""
        return _AriaPy.ArRangeDevice_getMaxSecondsToKeepCurrent(self)

    def setMinDistBetweenCurrent(self, *args):
        """setMinDistBetweenCurrent(self, double minDistBetweenCurrent)"""
        return _AriaPy.ArRangeDevice_setMinDistBetweenCurrent(self, *args)

    def getMinDistBetweenCurrent(self):
        """getMinDistBetweenCurrent(self) -> double"""
        return _AriaPy.ArRangeDevice_getMinDistBetweenCurrent(self)

    def setMaxSecondsToKeepCumulative(self, *args):
        """setMaxSecondsToKeepCumulative(self, int maxSecondsToKeepCumulative)"""
        return _AriaPy.ArRangeDevice_setMaxSecondsToKeepCumulative(self, *args)

    def getMaxSecondsToKeepCumulative(self):
        """getMaxSecondsToKeepCumulative(self) -> int"""
        return _AriaPy.ArRangeDevice_getMaxSecondsToKeepCumulative(self)

    def setMaxDistToKeepCumulative(self, *args):
        """setMaxDistToKeepCumulative(self, double maxDistToKeepCumulative)"""
        return _AriaPy.ArRangeDevice_setMaxDistToKeepCumulative(self, *args)

    def getMaxDistToKeepCumulative(self):
        """getMaxDistToKeepCumulative(self) -> double"""
        return _AriaPy.ArRangeDevice_getMaxDistToKeepCumulative(self)

    def setMinDistBetweenCumulative(self, *args):
        """setMinDistBetweenCumulative(self, double minDistBetweenCumulative)"""
        return _AriaPy.ArRangeDevice_setMinDistBetweenCumulative(self, *args)

    def getMinDistBetweenCumulative(self):
        """getMinDistBetweenCumulative(self) -> double"""
        return _AriaPy.ArRangeDevice_getMinDistBetweenCumulative(self)

    def setMaxInsertDistCumulative(self, *args):
        """setMaxInsertDistCumulative(self, double maxInsertDistCumulative)"""
        return _AriaPy.ArRangeDevice_setMaxInsertDistCumulative(self, *args)

    def getMaxInsertDistCumulative(self):
        """getMaxInsertDistCumulative(self) -> double"""
        return _AriaPy.ArRangeDevice_getMaxInsertDistCumulative(self)

    def clearCurrentReadings(self):
        """clearCurrentReadings(self)"""
        return _AriaPy.ArRangeDevice_clearCurrentReadings(self)

    def clearCumulativeReadings(self):
        """clearCumulativeReadings(self)"""
        return _AriaPy.ArRangeDevice_clearCumulativeReadings(self)

    def clearCumulativeOlderThan(self, *args):
        """clearCumulativeOlderThan(self, int milliSeconds)"""
        return _AriaPy.ArRangeDevice_clearCumulativeOlderThan(self, *args)

    def clearCumulativeOlderThanSeconds(self, *args):
        """clearCumulativeOlderThanSeconds(self, int seconds)"""
        return _AriaPy.ArRangeDevice_clearCumulativeOlderThanSeconds(self, *args)

    def getMaxRange(self):
        """getMaxRange(self) -> unsigned int"""
        return _AriaPy.ArRangeDevice_getMaxRange(self)

    def setMaxRange(self, *args):
        """setMaxRange(self, unsigned int maxRange)"""
        return _AriaPy.ArRangeDevice_setMaxRange(self, *args)

    def applyTransform(self, *args):
        """
        applyTransform(self, ArTransform trans, bool doCumulative = True)
        applyTransform(self, ArTransform trans)
        """
        return _AriaPy.ArRangeDevice_applyTransform(self, *args)

    def getCurrentDrawingData(self):
        """getCurrentDrawingData(self) -> ArDrawingData"""
        return _AriaPy.ArRangeDevice_getCurrentDrawingData(self)

    def getCumulativeDrawingData(self):
        """getCumulativeDrawingData(self) -> ArDrawingData"""
        return _AriaPy.ArRangeDevice_getCumulativeDrawingData(self)

    def setCurrentDrawingData(self, *args):
        """setCurrentDrawingData(self, ArDrawingData data, bool takeOwnershipOfData)"""
        return _AriaPy.ArRangeDevice_setCurrentDrawingData(self, *args)

    def setCumulativeDrawingData(self, *args):
        """setCumulativeDrawingData(self, ArDrawingData data, bool takeOwnershipOfData)"""
        return _AriaPy.ArRangeDevice_setCumulativeDrawingData(self, *args)

    def lockDevice(self):
        """lockDevice(self) -> int"""
        return _AriaPy.ArRangeDevice_lockDevice(self)

    def tryLockDevice(self):
        """tryLockDevice(self) -> int"""
        return _AriaPy.ArRangeDevice_tryLockDevice(self)

    def unlockDevice(self):
        """unlockDevice(self) -> int"""
        return _AriaPy.ArRangeDevice_unlockDevice(self)

    def filterCallback(self):
        """filterCallback(self)"""
        return _AriaPy.ArRangeDevice_filterCallback(self)

ArRangeDevice_swigregister = _AriaPy.ArRangeDevice_swigregister
ArRangeDevice_swigregister(ArRangeDevice)

class ArRangeDeviceThreaded(ArRangeDevice):
    """Proxy of C++ ArRangeDeviceThreaded class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArRangeDeviceThreaded
    __del__ = lambda self : None;
    def runThread(self, *args):
        """runThread(self, void arg) -> void"""
        return _AriaPy.ArRangeDeviceThreaded_runThread(self, *args)

    def run(self):
        """run(self)"""
        return _AriaPy.ArRangeDeviceThreaded_run(self)

    def runAsync(self):
        """runAsync(self)"""
        return _AriaPy.ArRangeDeviceThreaded_runAsync(self)

    def stopRunning(self):
        """stopRunning(self)"""
        return _AriaPy.ArRangeDeviceThreaded_stopRunning(self)

    def getRunning(self):
        """getRunning(self) -> bool"""
        return _AriaPy.ArRangeDeviceThreaded_getRunning(self)

    def getRunningWithLock(self):
        """getRunningWithLock(self) -> bool"""
        return _AriaPy.ArRangeDeviceThreaded_getRunningWithLock(self)

    def lockDevice(self):
        """lockDevice(self) -> int"""
        return _AriaPy.ArRangeDeviceThreaded_lockDevice(self)

    def tryLockDevice(self):
        """tryLockDevice(self) -> int"""
        return _AriaPy.ArRangeDeviceThreaded_tryLockDevice(self)

    def unlockDevice(self):
        """unlockDevice(self) -> int"""
        return _AriaPy.ArRangeDeviceThreaded_unlockDevice(self)

ArRangeDeviceThreaded_swigregister = _AriaPy.ArRangeDeviceThreaded_swigregister
ArRangeDeviceThreaded_swigregister(ArRangeDeviceThreaded)

class ArLaser(ArRangeDeviceThreaded):
    """Proxy of C++ ArLaser class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArLaser
    __del__ = lambda self : None;
    def blockingConnect(self):
        """blockingConnect(self) -> bool"""
        return _AriaPy.ArLaser_blockingConnect(self)

    def asyncConnect(self):
        """asyncConnect(self) -> bool"""
        return _AriaPy.ArLaser_asyncConnect(self)

    def disconnect(self):
        """disconnect(self) -> bool"""
        return _AriaPy.ArLaser_disconnect(self)

    def isConnected(self):
        """isConnected(self) -> bool"""
        return _AriaPy.ArLaser_isConnected(self)

    def isTryingToConnect(self):
        """isTryingToConnect(self) -> bool"""
        return _AriaPy.ArLaser_isTryingToConnect(self)

    def setConnectionTimeoutSeconds(self, *args):
        """setConnectionTimeoutSeconds(self, double seconds)"""
        return _AriaPy.ArLaser_setConnectionTimeoutSeconds(self, *args)

    def getConnectionTimeoutSeconds(self):
        """getConnectionTimeoutSeconds(self) -> double"""
        return _AriaPy.ArLaser_getConnectionTimeoutSeconds(self)

    def getLastReadingTime(self):
        """getLastReadingTime(self) -> ArTime"""
        return _AriaPy.ArLaser_getLastReadingTime(self)

    def getReadingCount(self):
        """getReadingCount(self) -> int"""
        return _AriaPy.ArLaser_getReadingCount(self)

    def setDeviceConnection(self, *args):
        """setDeviceConnection(self, ArDeviceConnection conn)"""
        return _AriaPy.ArLaser_setDeviceConnection(self, *args)

    def getDeviceConnection(self):
        """getDeviceConnection(self) -> ArDeviceConnection"""
        return _AriaPy.ArLaser_getDeviceConnection(self)

    def setSensorPosition(self, *args):
        """
        setSensorPosition(self, double x, double y, double th, double z = 0)
        setSensorPosition(self, double x, double y, double th)
        setSensorPosition(self, ArPose pose, double z = 0)
        setSensorPosition(self, ArPose pose)
        """
        return _AriaPy.ArLaser_setSensorPosition(self, *args)

    def hasSensorPosition(self):
        """hasSensorPosition(self) -> bool"""
        return _AriaPy.ArLaser_hasSensorPosition(self)

    def getSensorPosition(self):
        """getSensorPosition(self) -> ArPose"""
        return _AriaPy.ArLaser_getSensorPosition(self)

    def getSensorPositionX(self):
        """getSensorPositionX(self) -> double"""
        return _AriaPy.ArLaser_getSensorPositionX(self)

    def getSensorPositionY(self):
        """getSensorPositionY(self) -> double"""
        return _AriaPy.ArLaser_getSensorPositionY(self)

    def getSensorPositionZ(self):
        """getSensorPositionZ(self) -> double"""
        return _AriaPy.ArLaser_getSensorPositionZ(self)

    def getSensorPositionTh(self):
        """getSensorPositionTh(self) -> double"""
        return _AriaPy.ArLaser_getSensorPositionTh(self)

    def getLaserNumber(self):
        """getLaserNumber(self) -> int"""
        return _AriaPy.ArLaser_getLaserNumber(self)

    def setInfoLogLevel(self, *args):
        """setInfoLogLevel(self, LogLevel infoLogLevel)"""
        return _AriaPy.ArLaser_setInfoLogLevel(self, *args)

    def getInfoLogLevel(self):
        """getInfoLogLevel(self) -> LogLevel"""
        return _AriaPy.ArLaser_getInfoLogLevel(self)

    def setCumulativeCleanDist(self, *args):
        """setCumulativeCleanDist(self, double dist)"""
        return _AriaPy.ArLaser_setCumulativeCleanDist(self, *args)

    def getCumulativeCleanDist(self):
        """getCumulativeCleanDist(self) -> double"""
        return _AriaPy.ArLaser_getCumulativeCleanDist(self)

    def setCumulativeCleanInterval(self, *args):
        """setCumulativeCleanInterval(self, int milliSeconds)"""
        return _AriaPy.ArLaser_setCumulativeCleanInterval(self, *args)

    def getCumulativeCleanInterval(self):
        """getCumulativeCleanInterval(self) -> int"""
        return _AriaPy.ArLaser_getCumulativeCleanInterval(self)

    def setCumulativeCleanOffset(self, *args):
        """setCumulativeCleanOffset(self, int milliSeconds)"""
        return _AriaPy.ArLaser_setCumulativeCleanOffset(self, *args)

    def getCumulativeCleanOffset(self):
        """getCumulativeCleanOffset(self) -> int"""
        return _AriaPy.ArLaser_getCumulativeCleanOffset(self)

    def resetLastCumulativeCleanTime(self):
        """resetLastCumulativeCleanTime(self)"""
        return _AriaPy.ArLaser_resetLastCumulativeCleanTime(self)

    def addIgnoreReadings(self, *args):
        """addIgnoreReadings(self, char ignoreReadings) -> bool"""
        return _AriaPy.ArLaser_addIgnoreReadings(self, *args)

    def addIgnoreReading(self, *args):
        """addIgnoreReading(self, double ignoreReading)"""
        return _AriaPy.ArLaser_addIgnoreReading(self, *args)

    def clearIgnoreReadings(self):
        """clearIgnoreReadings(self)"""
        return _AriaPy.ArLaser_clearIgnoreReadings(self)

    def getIgnoreReadings(self):
        """getIgnoreReadings(self) -> IntSet"""
        return _AriaPy.ArLaser_getIgnoreReadings(self)

    def getFlipped(self):
        """getFlipped(self) -> bool"""
        return _AriaPy.ArLaser_getFlipped(self)

    def setFlipped(self, *args):
        """setFlipped(self, bool flipped) -> bool"""
        return _AriaPy.ArLaser_setFlipped(self, *args)

    def getDefaultTcpPort(self):
        """getDefaultTcpPort(self) -> int"""
        return _AriaPy.ArLaser_getDefaultTcpPort(self)

    def getDefaultPortType(self):
        """getDefaultPortType(self) -> char"""
        return _AriaPy.ArLaser_getDefaultPortType(self)

    def canSetDegrees(self):
        """canSetDegrees(self) -> bool"""
        return _AriaPy.ArLaser_canSetDegrees(self)

    def getStartDegreesMin(self):
        """getStartDegreesMin(self) -> double"""
        return _AriaPy.ArLaser_getStartDegreesMin(self)

    def getStartDegreesMax(self):
        """getStartDegreesMax(self) -> double"""
        return _AriaPy.ArLaser_getStartDegreesMax(self)

    def getStartDegrees(self):
        """getStartDegrees(self) -> double"""
        return _AriaPy.ArLaser_getStartDegrees(self)

    def setStartDegrees(self, *args):
        """setStartDegrees(self, double startDegrees) -> bool"""
        return _AriaPy.ArLaser_setStartDegrees(self, *args)

    def getEndDegreesMin(self):
        """getEndDegreesMin(self) -> double"""
        return _AriaPy.ArLaser_getEndDegreesMin(self)

    def getEndDegreesMax(self):
        """getEndDegreesMax(self) -> double"""
        return _AriaPy.ArLaser_getEndDegreesMax(self)

    def getEndDegrees(self):
        """getEndDegrees(self) -> double"""
        return _AriaPy.ArLaser_getEndDegrees(self)

    def setEndDegrees(self, *args):
        """setEndDegrees(self, double endDegrees) -> bool"""
        return _AriaPy.ArLaser_setEndDegrees(self, *args)

    def canChooseDegrees(self):
        """canChooseDegrees(self) -> bool"""
        return _AriaPy.ArLaser_canChooseDegrees(self)

    def getDegreesChoices(self):
        """getDegreesChoices(self) -> std::list<(std::string,std::allocator<(std::string)>)>"""
        return _AriaPy.ArLaser_getDegreesChoices(self)

    def getDegreesChoicesString(self):
        """getDegreesChoicesString(self) -> char"""
        return _AriaPy.ArLaser_getDegreesChoicesString(self)

    def chooseDegrees(self, *args):
        """chooseDegrees(self, char range) -> bool"""
        return _AriaPy.ArLaser_chooseDegrees(self, *args)

    def getDegreesChoice(self):
        """getDegreesChoice(self) -> char"""
        return _AriaPy.ArLaser_getDegreesChoice(self)

    def getDegreesChoiceDouble(self):
        """getDegreesChoiceDouble(self) -> double"""
        return _AriaPy.ArLaser_getDegreesChoiceDouble(self)

    def getDegreesChoicesMap(self):
        """getDegreesChoicesMap(self) -> std::map<(std::string,double,std::less<(std::string)>,std::allocator<(std::pair<(q(const).std::string,double)>)>)>"""
        return _AriaPy.ArLaser_getDegreesChoicesMap(self)

    def canSetIncrement(self):
        """canSetIncrement(self) -> bool"""
        return _AriaPy.ArLaser_canSetIncrement(self)

    def getIncrementMin(self):
        """getIncrementMin(self) -> double"""
        return _AriaPy.ArLaser_getIncrementMin(self)

    def getIncrementMax(self):
        """getIncrementMax(self) -> double"""
        return _AriaPy.ArLaser_getIncrementMax(self)

    def getIncrement(self):
        """getIncrement(self) -> double"""
        return _AriaPy.ArLaser_getIncrement(self)

    def setIncrement(self, *args):
        """setIncrement(self, double increment) -> bool"""
        return _AriaPy.ArLaser_setIncrement(self, *args)

    def canChooseIncrement(self):
        """canChooseIncrement(self) -> bool"""
        return _AriaPy.ArLaser_canChooseIncrement(self)

    def getIncrementChoices(self):
        """getIncrementChoices(self) -> std::list<(std::string,std::allocator<(std::string)>)>"""
        return _AriaPy.ArLaser_getIncrementChoices(self)

    def getIncrementChoicesString(self):
        """getIncrementChoicesString(self) -> char"""
        return _AriaPy.ArLaser_getIncrementChoicesString(self)

    def chooseIncrement(self, *args):
        """chooseIncrement(self, char increment) -> bool"""
        return _AriaPy.ArLaser_chooseIncrement(self, *args)

    def getIncrementChoice(self):
        """getIncrementChoice(self) -> char"""
        return _AriaPy.ArLaser_getIncrementChoice(self)

    def getIncrementChoiceDouble(self):
        """getIncrementChoiceDouble(self) -> double"""
        return _AriaPy.ArLaser_getIncrementChoiceDouble(self)

    def getIncrementChoicesMap(self):
        """getIncrementChoicesMap(self) -> std::map<(std::string,double,std::less<(std::string)>,std::allocator<(std::pair<(q(const).std::string,double)>)>)>"""
        return _AriaPy.ArLaser_getIncrementChoicesMap(self)

    def canChooseUnits(self):
        """canChooseUnits(self) -> bool"""
        return _AriaPy.ArLaser_canChooseUnits(self)

    def getUnitsChoices(self):
        """getUnitsChoices(self) -> std::list<(std::string,std::allocator<(std::string)>)>"""
        return _AriaPy.ArLaser_getUnitsChoices(self)

    def getUnitsChoicesString(self):
        """getUnitsChoicesString(self) -> char"""
        return _AriaPy.ArLaser_getUnitsChoicesString(self)

    def chooseUnits(self, *args):
        """chooseUnits(self, char units) -> bool"""
        return _AriaPy.ArLaser_chooseUnits(self, *args)

    def getUnitsChoice(self):
        """getUnitsChoice(self) -> char"""
        return _AriaPy.ArLaser_getUnitsChoice(self)

    def canChooseReflectorBits(self):
        """canChooseReflectorBits(self) -> bool"""
        return _AriaPy.ArLaser_canChooseReflectorBits(self)

    def getReflectorBitsChoices(self):
        """getReflectorBitsChoices(self) -> std::list<(std::string,std::allocator<(std::string)>)>"""
        return _AriaPy.ArLaser_getReflectorBitsChoices(self)

    def getReflectorBitsChoicesString(self):
        """getReflectorBitsChoicesString(self) -> char"""
        return _AriaPy.ArLaser_getReflectorBitsChoicesString(self)

    def chooseReflectorBits(self, *args):
        """chooseReflectorBits(self, char reflectorBits) -> bool"""
        return _AriaPy.ArLaser_chooseReflectorBits(self, *args)

    def getReflectorBitsChoice(self):
        """getReflectorBitsChoice(self) -> char"""
        return _AriaPy.ArLaser_getReflectorBitsChoice(self)

    def canSetPowerControlled(self):
        """canSetPowerControlled(self) -> bool"""
        return _AriaPy.ArLaser_canSetPowerControlled(self)

    def setPowerControlled(self, *args):
        """setPowerControlled(self, bool powerControlled) -> bool"""
        return _AriaPy.ArLaser_setPowerControlled(self, *args)

    def getPowerControlled(self):
        """getPowerControlled(self) -> bool"""
        return _AriaPy.ArLaser_getPowerControlled(self)

    def canChooseStartingBaud(self):
        """canChooseStartingBaud(self) -> bool"""
        return _AriaPy.ArLaser_canChooseStartingBaud(self)

    def getStartingBaudChoices(self):
        """getStartingBaudChoices(self) -> std::list<(std::string,std::allocator<(std::string)>)>"""
        return _AriaPy.ArLaser_getStartingBaudChoices(self)

    def getStartingBaudChoicesString(self):
        """getStartingBaudChoicesString(self) -> char"""
        return _AriaPy.ArLaser_getStartingBaudChoicesString(self)

    def chooseStartingBaud(self, *args):
        """chooseStartingBaud(self, char reflectorBits) -> bool"""
        return _AriaPy.ArLaser_chooseStartingBaud(self, *args)

    def getStartingBaudChoice(self):
        """getStartingBaudChoice(self) -> char"""
        return _AriaPy.ArLaser_getStartingBaudChoice(self)

    def canChooseAutoBaud(self):
        """canChooseAutoBaud(self) -> bool"""
        return _AriaPy.ArLaser_canChooseAutoBaud(self)

    def getAutoBaudChoices(self):
        """getAutoBaudChoices(self) -> std::list<(std::string,std::allocator<(std::string)>)>"""
        return _AriaPy.ArLaser_getAutoBaudChoices(self)

    def getAutoBaudChoicesString(self):
        """getAutoBaudChoicesString(self) -> char"""
        return _AriaPy.ArLaser_getAutoBaudChoicesString(self)

    def chooseAutoBaud(self, *args):
        """chooseAutoBaud(self, char reflectorBits) -> bool"""
        return _AriaPy.ArLaser_chooseAutoBaud(self, *args)

    def getAutoBaudChoice(self):
        """getAutoBaudChoice(self) -> char"""
        return _AriaPy.ArLaser_getAutoBaudChoice(self)

    def addConnectCB(self, *args):
        """
        addConnectCB(self, ArFunctor functor, int position = 50)
        addConnectCB(self, ArFunctor functor)
        """
        return _AriaPy.ArLaser_addConnectCB(self, *args)

    def remConnectCB(self, *args):
        """remConnectCB(self, ArFunctor functor)"""
        return _AriaPy.ArLaser_remConnectCB(self, *args)

    def addFailedConnectCB(self, *args):
        """
        addFailedConnectCB(self, ArFunctor functor, int position = 50)
        addFailedConnectCB(self, ArFunctor functor)
        """
        return _AriaPy.ArLaser_addFailedConnectCB(self, *args)

    def remFailedConnectCB(self, *args):
        """remFailedConnectCB(self, ArFunctor functor)"""
        return _AriaPy.ArLaser_remFailedConnectCB(self, *args)

    def addDisconnectNormallyCB(self, *args):
        """
        addDisconnectNormallyCB(self, ArFunctor functor, int position = 50)
        addDisconnectNormallyCB(self, ArFunctor functor)
        """
        return _AriaPy.ArLaser_addDisconnectNormallyCB(self, *args)

    def remDisconnectNormallyCB(self, *args):
        """remDisconnectNormallyCB(self, ArFunctor functor)"""
        return _AriaPy.ArLaser_remDisconnectNormallyCB(self, *args)

    def addDisconnectOnErrorCB(self, *args):
        """
        addDisconnectOnErrorCB(self, ArFunctor functor, int position = 50)
        addDisconnectOnErrorCB(self, ArFunctor functor)
        """
        return _AriaPy.ArLaser_addDisconnectOnErrorCB(self, *args)

    def remDisconnectOnErrorCB(self, *args):
        """remDisconnectOnErrorCB(self, ArFunctor functor)"""
        return _AriaPy.ArLaser_remDisconnectOnErrorCB(self, *args)

    def addReadingCB(self, *args):
        """
        addReadingCB(self, ArFunctor functor, int position = 50)
        addReadingCB(self, ArFunctor functor)
        """
        return _AriaPy.ArLaser_addReadingCB(self, *args)

    def remReadingCB(self, *args):
        """remReadingCB(self, ArFunctor functor)"""
        return _AriaPy.ArLaser_remReadingCB(self, *args)

    def getAbsoluteMaxRange(self):
        """getAbsoluteMaxRange(self) -> unsigned int"""
        return _AriaPy.ArLaser_getAbsoluteMaxRange(self)

    def copyReadingCount(self, *args):
        """copyReadingCount(self, ArLaser laser)"""
        return _AriaPy.ArLaser_copyReadingCount(self, *args)

    def setMaxRange(self, *args):
        """setMaxRange(self, unsigned int maxRange)"""
        return _AriaPy.ArLaser_setMaxRange(self, *args)

    def setCumulativeBufferSize(self, *args):
        """setCumulativeBufferSize(self, size_t size)"""
        return _AriaPy.ArLaser_setCumulativeBufferSize(self, *args)

    def laserCheckParams(self):
        """laserCheckParams(self) -> bool"""
        return _AriaPy.ArLaser_laserCheckParams(self)

    def applyTransform(self, *args):
        """
        applyTransform(self, ArTransform trans, bool doCumulative = True)
        applyTransform(self, ArTransform trans)
        """
        return _AriaPy.ArLaser_applyTransform(self, *args)

    def useSimpleNamingForAllLasers():
        """useSimpleNamingForAllLasers()"""
        return _AriaPy.ArLaser_useSimpleNamingForAllLasers()

    useSimpleNamingForAllLasers = staticmethod(useSimpleNamingForAllLasers)
ArLaser_swigregister = _AriaPy.ArLaser_swigregister
ArLaser_swigregister(ArLaser)

def ArLaser_useSimpleNamingForAllLasers():
  """ArLaser_useSimpleNamingForAllLasers()"""
  return _AriaPy.ArLaser_useSimpleNamingForAllLasers()

class ArResolver(object):
    """Proxy of C++ ArResolver class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArResolver
    __del__ = lambda self : None;
    def resolve(self, *args):
        """
        resolve(self, ActionMap actions, ArRobot robot, bool logActions = False) -> ArActionDesired
        resolve(self, ActionMap actions, ArRobot robot) -> ArActionDesired
        """
        return _AriaPy.ArResolver_resolve(self, *args)

    def getName(self):
        """getName(self) -> char"""
        return _AriaPy.ArResolver_getName(self)

    def getDescription(self):
        """getDescription(self) -> char"""
        return _AriaPy.ArResolver_getDescription(self)

ArResolver_swigregister = _AriaPy.ArResolver_swigregister
ArResolver_swigregister(ArResolver)

class ArThread(object):
    """Proxy of C++ ArThread class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    STATUS_FAILED = _AriaPy.ArThread_STATUS_FAILED
    STATUS_NORESOURCE = _AriaPy.ArThread_STATUS_NORESOURCE
    STATUS_NO_SUCH_THREAD = _AriaPy.ArThread_STATUS_NO_SUCH_THREAD
    STATUS_INVALID = _AriaPy.ArThread_STATUS_INVALID
    STATUS_JOIN_SELF = _AriaPy.ArThread_STATUS_JOIN_SELF
    STATUS_ALREADY_DETATCHED = _AriaPy.ArThread_STATUS_ALREADY_DETATCHED
    def __init__(self, *args): 
        """
        __init__(self, bool blockAllSignals = True) -> ArThread
        __init__(self) -> ArThread
        __init__(self, ThreadType thread, bool joinable, bool blockAllSignals = True) -> ArThread
        __init__(self, ThreadType thread, bool joinable) -> ArThread
        __init__(self, ArFunctor func, bool joinable = True, bool blockAllSignals = True) -> ArThread
        __init__(self, ArFunctor func, bool joinable = True) -> ArThread
        __init__(self, ArFunctor func) -> ArThread
        """
        this = _AriaPy.new_ArThread(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArThread
    __del__ = lambda self : None;
    def init():
        """init()"""
        return _AriaPy.ArThread_init()

    init = staticmethod(init)
    def self():
        """self() -> ArThread"""
        return _AriaPy.ArThread_self()

    self = staticmethod(self)
    def osSelf():
        """osSelf() -> ThreadType"""
        return _AriaPy.ArThread_osSelf()

    osSelf = staticmethod(osSelf)
    def stopAll():
        """stopAll()"""
        return _AriaPy.ArThread_stopAll()

    stopAll = staticmethod(stopAll)
    def cancelAll():
        """cancelAll()"""
        return _AriaPy.ArThread_cancelAll()

    cancelAll = staticmethod(cancelAll)
    def joinAll():
        """joinAll()"""
        return _AriaPy.ArThread_joinAll()

    joinAll = staticmethod(joinAll)
    def shutdown():
        """shutdown()"""
        return _AriaPy.ArThread_shutdown()

    shutdown = staticmethod(shutdown)
    def yieldProcessor():
        """yieldProcessor()"""
        return _AriaPy.ArThread_yieldProcessor()

    yieldProcessor = staticmethod(yieldProcessor)
    def getLogLevel():
        """getLogLevel() -> LogLevel"""
        return _AriaPy.ArThread_getLogLevel()

    getLogLevel = staticmethod(getLogLevel)
    def setLogLevel(*args):
        """setLogLevel(LogLevel level)"""
        return _AriaPy.ArThread_setLogLevel(*args)

    setLogLevel = staticmethod(setLogLevel)
    def create(self, *args):
        """
        create(self, ArFunctor func, bool joinable = True, bool lowerPriority = True) -> int
        create(self, ArFunctor func, bool joinable = True) -> int
        create(self, ArFunctor func) -> int
        """
        return _AriaPy.ArThread_create(self, *args)

    def stopRunning(self):
        """stopRunning(self)"""
        return _AriaPy.ArThread_stopRunning(self)

    def join(self, ret = None):
        """
        join(self, void ret = None) -> int
        join(self) -> int
        """
        return _AriaPy.ArThread_join(self, ret)

    def detach(self):
        """detach(self) -> int"""
        return _AriaPy.ArThread_detach(self)

    def cancel(self):
        """cancel(self)"""
        return _AriaPy.ArThread_cancel(self)

    def getRunning(self):
        """getRunning(self) -> bool"""
        return _AriaPy.ArThread_getRunning(self)

    def getRunningWithLock(self):
        """getRunningWithLock(self) -> bool"""
        return _AriaPy.ArThread_getRunningWithLock(self)

    def getJoinable(self):
        """getJoinable(self) -> bool"""
        return _AriaPy.ArThread_getJoinable(self)

    def getThread(self):
        """getThread(self) -> ThreadType"""
        return _AriaPy.ArThread_getThread(self)

    def getOSThread(self):
        """getOSThread(self) -> ThreadType"""
        return _AriaPy.ArThread_getOSThread(self)

    def getFunc(self):
        """getFunc(self) -> ArFunctor"""
        return _AriaPy.ArThread_getFunc(self)

    def setRunning(self, *args):
        """setRunning(self, bool running)"""
        return _AriaPy.ArThread_setRunning(self, *args)

    def getBlockAllSignals(self):
        """getBlockAllSignals(self) -> bool"""
        return _AriaPy.ArThread_getBlockAllSignals(self)

    def getThreadName(self):
        """getThreadName(self) -> char"""
        return _AriaPy.ArThread_getThreadName(self)

    def setThreadName(self, *args):
        """setThreadName(self, char name)"""
        return _AriaPy.ArThread_setThreadName(self, *args)

    def getThreadActivity(self):
        """getThreadActivity(self) -> char"""
        return _AriaPy.ArThread_getThreadActivity(self)

    def threadStarted(self):
        """threadStarted(self)"""
        return _AriaPy.ArThread_threadStarted(self)

    def threadFinished(self):
        """threadFinished(self)"""
        return _AriaPy.ArThread_threadFinished(self)

    def isThreadStarted(self):
        """isThreadStarted(self) -> bool"""
        return _AriaPy.ArThread_isThreadStarted(self)

    def isThreadFinished(self):
        """isThreadFinished(self) -> bool"""
        return _AriaPy.ArThread_isThreadFinished(self)

    def logThreadInfo(self):
        """logThreadInfo(self)"""
        return _AriaPy.ArThread_logThreadInfo(self)

    def getPID(self):
        """getPID(self) -> pid_t"""
        return _AriaPy.ArThread_getPID(self)

    def getTID(self):
        """getTID(self) -> pid_t"""
        return _AriaPy.ArThread_getTID(self)

    def getThisThreadName():
        """getThisThreadName() -> char"""
        return _AriaPy.ArThread_getThisThreadName()

    getThisThreadName = staticmethod(getThisThreadName)
    def getThisThread():
        """getThisThread() -> ThreadType"""
        return _AriaPy.ArThread_getThisThread()

    getThisThread = staticmethod(getThisThread)
    def getThisOSThread():
        """getThisOSThread() -> ThreadType"""
        return _AriaPy.ArThread_getThisOSThread()

    getThisOSThread = staticmethod(getThisOSThread)
ArThread_swigregister = _AriaPy.ArThread_swigregister
ArThread_swigregister(ArThread)

def ArThread_init():
  """ArThread_init()"""
  return _AriaPy.ArThread_init()

def ArThread_self():
  """ArThread_self() -> ArThread"""
  return _AriaPy.ArThread_self()

def ArThread_osSelf():
  """ArThread_osSelf() -> ThreadType"""
  return _AriaPy.ArThread_osSelf()

def ArThread_stopAll():
  """ArThread_stopAll()"""
  return _AriaPy.ArThread_stopAll()

def ArThread_cancelAll():
  """ArThread_cancelAll()"""
  return _AriaPy.ArThread_cancelAll()

def ArThread_joinAll():
  """ArThread_joinAll()"""
  return _AriaPy.ArThread_joinAll()

def ArThread_shutdown():
  """ArThread_shutdown()"""
  return _AriaPy.ArThread_shutdown()

def ArThread_yieldProcessor():
  """ArThread_yieldProcessor()"""
  return _AriaPy.ArThread_yieldProcessor()

def ArThread_getLogLevel():
  """ArThread_getLogLevel() -> LogLevel"""
  return _AriaPy.ArThread_getLogLevel()

def ArThread_setLogLevel(*args):
  """ArThread_setLogLevel(LogLevel level)"""
  return _AriaPy.ArThread_setLogLevel(*args)

def ArThread_getThisThreadName():
  """ArThread_getThisThreadName() -> char"""
  return _AriaPy.ArThread_getThisThreadName()

def ArThread_getThisThread():
  """ArThread_getThisThread() -> ThreadType"""
  return _AriaPy.ArThread_getThisThread()

def ArThread_getThisOSThread():
  """ArThread_getThisOSThread() -> ThreadType"""
  return _AriaPy.ArThread_getThisOSThread()

class ArFunctor(object):
    """Proxy of C++ ArFunctor class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArFunctor
    __del__ = lambda self : None;
    def invoke(self):
        """invoke(self)"""
        return _AriaPy.ArFunctor_invoke(self)

    def getName(self):
        """getName(self) -> char"""
        return _AriaPy.ArFunctor_getName(self)

    def setName(self, *args):
        """setName(self, char name)"""
        return _AriaPy.ArFunctor_setName(self, *args)

ArFunctor_swigregister = _AriaPy.ArFunctor_swigregister
ArFunctor_swigregister(ArFunctor)

class ArRetFunctor_VoidP(ArFunctor):
    """Proxy of C++ ArRetFunctor<(p.void)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArRetFunctor_VoidP
    __del__ = lambda self : None;
    def invoke(self):
        """invoke(self)"""
        return _AriaPy.ArRetFunctor_VoidP_invoke(self)

    def invokeR(self):
        """invokeR(self) -> void"""
        return _AriaPy.ArRetFunctor_VoidP_invokeR(self)

ArRetFunctor_VoidP_swigregister = _AriaPy.ArRetFunctor_VoidP_swigregister
ArRetFunctor_VoidP_swigregister(ArRetFunctor_VoidP)

class ArRetFunctor_Bool(ArFunctor):
    """Proxy of C++ ArRetFunctor<(bool)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArRetFunctor_Bool
    __del__ = lambda self : None;
    def invoke(self):
        """invoke(self)"""
        return _AriaPy.ArRetFunctor_Bool_invoke(self)

    def invokeR(self):
        """invokeR(self) -> bool"""
        return _AriaPy.ArRetFunctor_Bool_invokeR(self)

ArRetFunctor_Bool_swigregister = _AriaPy.ArRetFunctor_Bool_swigregister
ArRetFunctor_Bool_swigregister(ArRetFunctor_Bool)

class ArFunctor1_CString(ArFunctor):
    """Proxy of C++ ArFunctor1<(p.q(const).char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArFunctor1_CString
    __del__ = lambda self : None;
    def invoke(self, *args):
        """
        invoke(self)
        invoke(self, char p1)
        """
        return _AriaPy.ArFunctor1_CString_invoke(self, *args)

ArFunctor1_CString_swigregister = _AriaPy.ArFunctor1_CString_swigregister
ArFunctor1_CString_swigregister(ArFunctor1_CString)

class ArFunctor1_Int(ArFunctor):
    """Proxy of C++ ArFunctor1<(int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArFunctor1_Int
    __del__ = lambda self : None;
    def invoke(self, *args):
        """
        invoke(self)
        invoke(self, int p1)
        """
        return _AriaPy.ArFunctor1_Int_invoke(self, *args)

ArFunctor1_Int_swigregister = _AriaPy.ArFunctor1_Int_swigregister
ArFunctor1_Int_swigregister(ArFunctor1_Int)

class ArFunctor1_ArRobotPacketP(ArFunctor):
    """Proxy of C++ ArFunctor1<(p.ArRobotPacket)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArFunctor1_ArRobotPacketP
    __del__ = lambda self : None;
    def invoke(self, *args):
        """
        invoke(self)
        invoke(self, ArRobotPacket p1)
        """
        return _AriaPy.ArFunctor1_ArRobotPacketP_invoke(self, *args)

ArFunctor1_ArRobotPacketP_swigregister = _AriaPy.ArFunctor1_ArRobotPacketP_swigregister
ArFunctor1_ArRobotPacketP_swigregister(ArFunctor1_ArRobotPacketP)

class ArRetFunctor_Int(ArFunctor):
    """Proxy of C++ ArRetFunctor<(int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArRetFunctor_Int
    __del__ = lambda self : None;
    def invoke(self):
        """invoke(self)"""
        return _AriaPy.ArRetFunctor_Int_invoke(self)

    def invokeR(self):
        """invokeR(self) -> int"""
        return _AriaPy.ArRetFunctor_Int_invokeR(self)

ArRetFunctor_Int_swigregister = _AriaPy.ArRetFunctor_Int_swigregister
ArRetFunctor_Int_swigregister(ArRetFunctor_Int)

class ArRetFunctor_Double(ArFunctor):
    """Proxy of C++ ArRetFunctor<(double)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArRetFunctor_Double
    __del__ = lambda self : None;
    def invoke(self):
        """invoke(self)"""
        return _AriaPy.ArRetFunctor_Double_invoke(self)

    def invokeR(self):
        """invokeR(self) -> double"""
        return _AriaPy.ArRetFunctor_Double_invokeR(self)

ArRetFunctor_Double_swigregister = _AriaPy.ArRetFunctor_Double_swigregister
ArRetFunctor_Double_swigregister(ArRetFunctor_Double)

class ArRetFunctor_UnsignedInt(ArFunctor):
    """Proxy of C++ ArRetFunctor<(unsigned int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArRetFunctor_UnsignedInt
    __del__ = lambda self : None;
    def invoke(self):
        """invoke(self)"""
        return _AriaPy.ArRetFunctor_UnsignedInt_invoke(self)

    def invokeR(self):
        """invokeR(self) -> unsigned int"""
        return _AriaPy.ArRetFunctor_UnsignedInt_invokeR(self)

ArRetFunctor_UnsignedInt_swigregister = _AriaPy.ArRetFunctor_UnsignedInt_swigregister
ArRetFunctor_UnsignedInt_swigregister(ArRetFunctor_UnsignedInt)

class ArRetFunctor1_Double_ArPoseWithTime(ArRetFunctor_Double):
    """Proxy of C++ ArRetFunctor1<(double,ArPoseWithTime)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArRetFunctor1_Double_ArPoseWithTime
    __del__ = lambda self : None;
    def invokeR(self, *args):
        """
        invokeR(self) -> double
        invokeR(self, ArPoseWithTime p1) -> double
        """
        return _AriaPy.ArRetFunctor1_Double_ArPoseWithTime_invokeR(self, *args)

ArRetFunctor1_Double_ArPoseWithTime_swigregister = _AriaPy.ArRetFunctor1_Double_ArPoseWithTime_swigregister
ArRetFunctor1_Double_ArPoseWithTime_swigregister(ArRetFunctor1_Double_ArPoseWithTime)

class ArRetFunctor1_Bool_ArRobotPacketP(ArRetFunctor_Bool):
    """Proxy of C++ ArRetFunctor1<(bool,p.ArRobotPacket)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArRetFunctor1_Bool_ArRobotPacketP
    __del__ = lambda self : None;
    def invokeR(self, *args):
        """
        invokeR(self) -> bool
        invokeR(self, ArRobotPacket p1) -> bool
        """
        return _AriaPy.ArRetFunctor1_Bool_ArRobotPacketP_invokeR(self, *args)

ArRetFunctor1_Bool_ArRobotPacketP_swigregister = _AriaPy.ArRetFunctor1_Bool_ArRobotPacketP_swigregister
ArRetFunctor1_Bool_ArRobotPacketP_swigregister(ArRetFunctor1_Bool_ArRobotPacketP)

class ArRetFunctor1_Bool_ArgumentBuilder(ArRetFunctor_Bool):
    """Proxy of C++ ArRetFunctor1<(bool,ArArgumentBuilder)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArRetFunctor1_Bool_ArgumentBuilder
    __del__ = lambda self : None;
    def invokeR(self, *args):
        """
        invokeR(self) -> bool
        invokeR(self, ArArgumentBuilder p1) -> bool
        """
        return _AriaPy.ArRetFunctor1_Bool_ArgumentBuilder_invokeR(self, *args)

ArRetFunctor1_Bool_ArgumentBuilder_swigregister = _AriaPy.ArRetFunctor1_Bool_ArgumentBuilder_swigregister
ArRetFunctor1_Bool_ArgumentBuilder_swigregister(ArRetFunctor1_Bool_ArgumentBuilder)

class ArRetFunctor1_Bool_ArgumentBuilderP(ArRetFunctor_Bool):
    """Proxy of C++ ArRetFunctor1<(bool,p.ArArgumentBuilder)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArRetFunctor1_Bool_ArgumentBuilderP
    __del__ = lambda self : None;
    def invokeR(self, *args):
        """
        invokeR(self) -> bool
        invokeR(self, ArArgumentBuilder p1) -> bool
        """
        return _AriaPy.ArRetFunctor1_Bool_ArgumentBuilderP_invokeR(self, *args)

ArRetFunctor1_Bool_ArgumentBuilderP_swigregister = _AriaPy.ArRetFunctor1_Bool_ArgumentBuilderP_swigregister
ArRetFunctor1_Bool_ArgumentBuilderP_swigregister(ArRetFunctor1_Bool_ArgumentBuilderP)

class ArRetFunctor1_VoidP_VoidP(ArRetFunctor_VoidP):
    """Proxy of C++ ArRetFunctor1<(p.void,p.void)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArRetFunctor1_VoidP_VoidP
    __del__ = lambda self : None;
    def invokeR(self, *args):
        """
        invokeR(self) -> void
        invokeR(self, void p1) -> void
        """
        return _AriaPy.ArRetFunctor1_VoidP_VoidP_invokeR(self, *args)

ArRetFunctor1_VoidP_VoidP_swigregister = _AriaPy.ArRetFunctor1_VoidP_VoidP_swigregister
ArRetFunctor1_VoidP_VoidP_swigregister(ArRetFunctor1_VoidP_VoidP)

class ArACTSBlob(object):
    """Proxy of C++ ArACTSBlob class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ArACTSBlob"""
        this = _AriaPy.new_ArACTSBlob()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArACTSBlob
    __del__ = lambda self : None;
    def getArea(self):
        """getArea(self) -> int"""
        return _AriaPy.ArACTSBlob_getArea(self)

    def getXCG(self):
        """getXCG(self) -> int"""
        return _AriaPy.ArACTSBlob_getXCG(self)

    def getYCG(self):
        """getYCG(self) -> int"""
        return _AriaPy.ArACTSBlob_getYCG(self)

    def getLeft(self):
        """getLeft(self) -> int"""
        return _AriaPy.ArACTSBlob_getLeft(self)

    def getRight(self):
        """getRight(self) -> int"""
        return _AriaPy.ArACTSBlob_getRight(self)

    def getTop(self):
        """getTop(self) -> int"""
        return _AriaPy.ArACTSBlob_getTop(self)

    def getBottom(self):
        """getBottom(self) -> int"""
        return _AriaPy.ArACTSBlob_getBottom(self)

    def setArea(self, *args):
        """setArea(self, int area)"""
        return _AriaPy.ArACTSBlob_setArea(self, *args)

    def setXCG(self, *args):
        """setXCG(self, int xcg)"""
        return _AriaPy.ArACTSBlob_setXCG(self, *args)

    def setYCG(self, *args):
        """setYCG(self, int ycg)"""
        return _AriaPy.ArACTSBlob_setYCG(self, *args)

    def setLeft(self, *args):
        """setLeft(self, int left)"""
        return _AriaPy.ArACTSBlob_setLeft(self, *args)

    def setRight(self, *args):
        """setRight(self, int right)"""
        return _AriaPy.ArACTSBlob_setRight(self, *args)

    def setTop(self, *args):
        """setTop(self, int top)"""
        return _AriaPy.ArACTSBlob_setTop(self, *args)

    def setBottom(self, *args):
        """setBottom(self, int bottom)"""
        return _AriaPy.ArACTSBlob_setBottom(self, *args)

    def log(self):
        """log(self)"""
        return _AriaPy.ArACTSBlob_log(self)

ArACTSBlob_swigregister = _AriaPy.ArACTSBlob_swigregister
ArACTSBlob_swigregister(ArACTSBlob)

class ArACTS_1_2(object):
    """Proxy of C++ ArACTS_1_2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ArACTS_1_2"""
        this = _AriaPy.new_ArACTS_1_2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArACTS_1_2
    __del__ = lambda self : None;
    def openPort(self, *args):
        """
        openPort(self, ArRobot robot, char host = "localhost", int port = 5001) -> bool
        openPort(self, ArRobot robot, char host = "localhost") -> bool
        openPort(self, ArRobot robot) -> bool
        """
        return _AriaPy.ArACTS_1_2_openPort(self, *args)

    def closePort(self):
        """closePort(self) -> bool"""
        return _AriaPy.ArACTS_1_2_closePort(self)

    def isConnected(self):
        """isConnected(self) -> bool"""
        return _AriaPy.ArACTS_1_2_isConnected(self)

    def getRobot(self):
        """getRobot(self) -> ArRobot"""
        return _AriaPy.ArACTS_1_2_getRobot(self)

    def setRobot(self, *args):
        """setRobot(self, ArRobot robot)"""
        return _AriaPy.ArACTS_1_2_setRobot(self, *args)

    def requestPacket(self):
        """requestPacket(self) -> bool"""
        return _AriaPy.ArACTS_1_2_requestPacket(self)

    def requestQuit(self):
        """requestQuit(self) -> bool"""
        return _AriaPy.ArACTS_1_2_requestQuit(self)

    def receiveBlobInfo(self):
        """receiveBlobInfo(self) -> bool"""
        return _AriaPy.ArACTS_1_2_receiveBlobInfo(self)

    def getNumBlobs(self, *args):
        """getNumBlobs(self, int channel) -> int"""
        return _AriaPy.ArACTS_1_2_getNumBlobs(self, *args)

    def getBlob(self, *args):
        """getBlob(self, int channel, int blobNumber, ArACTSBlob blob) -> bool"""
        return _AriaPy.ArACTS_1_2_getBlob(self, *args)

    def actsHandler(self):
        """actsHandler(self)"""
        return _AriaPy.ArACTS_1_2_actsHandler(self)

    NUM_CHANNELS = _AriaPy.ArACTS_1_2_NUM_CHANNELS
    MAX_BLOBS = _AriaPy.ArACTS_1_2_MAX_BLOBS
    ACTS_BLOB_DATA_SIZE = _AriaPy.ArACTS_1_2_ACTS_BLOB_DATA_SIZE
    DATA_HEADER = _AriaPy.ArACTS_1_2_DATA_HEADER
    MAX_DATA = _AriaPy.ArACTS_1_2_MAX_DATA
    def invert(self, width = 160, height = 120):
        """
        invert(self, int width = 160, int height = 120)
        invert(self, int width = 160)
        invert(self)
        """
        return _AriaPy.ArACTS_1_2_invert(self, width, height)

ArACTS_1_2_swigregister = _AriaPy.ArACTS_1_2_swigregister
ArACTS_1_2_swigregister(ArACTS_1_2)

class ArAMPTUCommands(object):
    """Proxy of C++ ArAMPTUCommands class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ABSTILT = _AriaPy.ArAMPTUCommands_ABSTILT
    RELTILTU = _AriaPy.ArAMPTUCommands_RELTILTU
    RELTILTD = _AriaPy.ArAMPTUCommands_RELTILTD
    ABSPAN = _AriaPy.ArAMPTUCommands_ABSPAN
    RELPANCW = _AriaPy.ArAMPTUCommands_RELPANCW
    RELPANCCW = _AriaPy.ArAMPTUCommands_RELPANCCW
    PANTILT = _AriaPy.ArAMPTUCommands_PANTILT
    PANTILTUCW = _AriaPy.ArAMPTUCommands_PANTILTUCW
    PANTILTDCW = _AriaPy.ArAMPTUCommands_PANTILTDCW
    PANTILTUCCW = _AriaPy.ArAMPTUCommands_PANTILTUCCW
    PANTILTDCCW = _AriaPy.ArAMPTUCommands_PANTILTDCCW
    ZOOM = _AriaPy.ArAMPTUCommands_ZOOM
    PAUSE = _AriaPy.ArAMPTUCommands_PAUSE
    CONT = _AriaPy.ArAMPTUCommands_CONT
    PURGE = _AriaPy.ArAMPTUCommands_PURGE
    STATUS = _AriaPy.ArAMPTUCommands_STATUS
    INIT = _AriaPy.ArAMPTUCommands_INIT
    RESP = _AriaPy.ArAMPTUCommands_RESP
    PANSLEW = _AriaPy.ArAMPTUCommands_PANSLEW
    TILTSLEW = _AriaPy.ArAMPTUCommands_TILTSLEW
    def __init__(self): 
        """__init__(self) -> ArAMPTUCommands"""
        this = _AriaPy.new_ArAMPTUCommands()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArAMPTUCommands
    __del__ = lambda self : None;
ArAMPTUCommands_swigregister = _AriaPy.ArAMPTUCommands_swigregister
ArAMPTUCommands_swigregister(ArAMPTUCommands)

class ArAMPTUPacket(ArBasePacket):
    """Proxy of C++ ArAMPTUPacket class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, bufferSize = 30): 
        """
        __init__(self, UByte2 bufferSize = 30) -> ArAMPTUPacket
        __init__(self) -> ArAMPTUPacket
        """
        this = _AriaPy.new_ArAMPTUPacket(bufferSize)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArAMPTUPacket
    __del__ = lambda self : None;
    def getUnitNumber(self):
        """getUnitNumber(self) -> unsigned char"""
        return _AriaPy.ArAMPTUPacket_getUnitNumber(self)

    def setUnitNumber(self, *args):
        """setUnitNumber(self, unsigned char unitNumber) -> bool"""
        return _AriaPy.ArAMPTUPacket_setUnitNumber(self, *args)

    def byteToBuf(self, *args):
        """byteToBuf(self, Byte val)"""
        return _AriaPy.ArAMPTUPacket_byteToBuf(self, *args)

    def byte2ToBuf(self, *args):
        """byte2ToBuf(self, Byte2 val)"""
        return _AriaPy.ArAMPTUPacket_byte2ToBuf(self, *args)

    def finalizePacket(self):
        """finalizePacket(self)"""
        return _AriaPy.ArAMPTUPacket_finalizePacket(self)

ArAMPTUPacket_swigregister = _AriaPy.ArAMPTUPacket_swigregister
ArAMPTUPacket_swigregister(ArAMPTUPacket)

class ArAMPTU(ArPTZ):
    """Proxy of C++ ArAMPTU class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ArRobot robot, int unitNumber = 0) -> ArAMPTU
        __init__(self, ArRobot robot) -> ArAMPTU
        """
        this = _AriaPy.new_ArAMPTU(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArAMPTU
    __del__ = lambda self : None;
    def init(self):
        """init(self) -> bool"""
        return _AriaPy.ArAMPTU_init(self)

    def getTypeName(self):
        """getTypeName(self) -> char"""
        return _AriaPy.ArAMPTU_getTypeName(self)

    def panSlew(self, *args):
        """panSlew(self, double deg) -> bool"""
        return _AriaPy.ArAMPTU_panSlew(self, *args)

    def tiltSlew(self, *args):
        """tiltSlew(self, double deg) -> bool"""
        return _AriaPy.ArAMPTU_tiltSlew(self, *args)

    def canZoom(self):
        """canZoom(self) -> bool"""
        return _AriaPy.ArAMPTU_canZoom(self)

    def canPanTiltSlew(self):
        """canPanTiltSlew(self) -> bool"""
        return _AriaPy.ArAMPTU_canPanTiltSlew(self)

    def pause(self):
        """pause(self) -> bool"""
        return _AriaPy.ArAMPTU_pause(self)

    def resume(self):
        """resume(self) -> bool"""
        return _AriaPy.ArAMPTU_resume(self)

    def purge(self):
        """purge(self) -> bool"""
        return _AriaPy.ArAMPTU_purge(self)

    def requestStatus(self):
        """requestStatus(self) -> bool"""
        return _AriaPy.ArAMPTU_requestStatus(self)

    def getPan_i(self):
        """getPan_i(self) -> double"""
        return _AriaPy.ArAMPTU_getPan_i(self)

    def getTilt_i(self):
        """getTilt_i(self) -> double"""
        return _AriaPy.ArAMPTU_getTilt_i(self)

    MIN_SLEW = _AriaPy.ArAMPTU_MIN_SLEW
    MAX_TILT_SLEW = _AriaPy.ArAMPTU_MAX_TILT_SLEW
    MAX_PAN_SLEW = _AriaPy.ArAMPTU_MAX_PAN_SLEW
ArAMPTU_swigregister = _AriaPy.ArAMPTU_swigregister
ArAMPTU_swigregister(ArAMPTU)

class ArASyncTask(ArThread):
    """Proxy of C++ ArASyncTask class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArASyncTask
    __del__ = lambda self : None;
    def runThread(self, *args):
        """runThread(self, void arg) -> void"""
        return _AriaPy.ArASyncTask_runThread(self, *args)

    def run(self):
        """run(self)"""
        return _AriaPy.ArASyncTask_run(self)

    def runAsync(self):
        """runAsync(self)"""
        return _AriaPy.ArASyncTask_runAsync(self)

    def stopRunning(self):
        """stopRunning(self)"""
        return _AriaPy.ArASyncTask_stopRunning(self)

    def create(self, joinable = True, lowerPriority = True):
        """
        create(self, bool joinable = True, bool lowerPriority = True) -> int
        create(self, bool joinable = True) -> int
        create(self) -> int
        """
        return _AriaPy.ArASyncTask_create(self, joinable, lowerPriority)

    def runInThisThread(self, arg = None):
        """
        runInThisThread(self, void arg = None)
        runInThisThread(self) -> void
        """
        return _AriaPy.ArASyncTask_runInThisThread(self, arg)

    def getThreadActivity(self):
        """getThreadActivity(self) -> char"""
        return _AriaPy.ArASyncTask_getThreadActivity(self)

ArASyncTask_swigregister = _AriaPy.ArASyncTask_swigregister
ArASyncTask_swigregister(ArASyncTask)

class ArAction(object):
    """Proxy of C++ ArAction class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, char name, char description = "") -> ArAction
        __init__(self, char name) -> ArAction
        """
        if self.__class__ == ArAction:
            _self = None
        else:
            _self = self
        this = _AriaPy.new_ArAction(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArAction
    __del__ = lambda self : None;
    def isActive(self):
        """isActive(self) -> bool"""
        return _AriaPy.ArAction_isActive(self)

    def activate(self):
        """activate(self)"""
        return _AriaPy.ArAction_activate(self)

    def deactivate(self):
        """deactivate(self)"""
        return _AriaPy.ArAction_deactivate(self)

    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArAction_fire(self, *args)

    def setRobot(self, *args):
        """setRobot(self, ArRobot robot)"""
        return _AriaPy.ArAction_setRobot(self, *args)

    def getNumArgs(self):
        """getNumArgs(self) -> int"""
        return _AriaPy.ArAction_getNumArgs(self)

    def getArg(self, *args):
        """getArg(self, int number) -> ArArg"""
        return _AriaPy.ArAction_getArg(self, *args)

    def getName(self):
        """getName(self) -> char"""
        return _AriaPy.ArAction_getName(self)

    def getDescription(self):
        """getDescription(self) -> char"""
        return _AriaPy.ArAction_getDescription(self)

    def getDesired(self, *args):
        """
        getDesired(self) -> ArActionDesired
        getDesired(self) -> ArActionDesired
        """
        return _AriaPy.ArAction_getDesired(self, *args)

    def log(self, verbose = True):
        """
        log(self, bool verbose = True)
        log(self)
        """
        return _AriaPy.ArAction_log(self, verbose)

    def getRobot(self):
        """getRobot(self) -> ArRobot"""
        return _AriaPy.ArAction_getRobot(self)

    def setDefaultActivationState(*args):
        """setDefaultActivationState(bool defaultActivationState)"""
        return _AriaPy.ArAction_setDefaultActivationState(*args)

    setDefaultActivationState = staticmethod(setDefaultActivationState)
    def getDefaultActivationState():
        """getDefaultActivationState() -> bool"""
        return _AriaPy.ArAction_getDefaultActivationState()

    getDefaultActivationState = staticmethod(getDefaultActivationState)
    def setActionRobot(self, *args):
        """setActionRobot(self, ArRobot robot)"""
        return _AriaPy.ArAction_setActionRobot(self, *args)

    def __disown__(self):
        self.this.disown()
        _AriaPy.disown_ArAction(self)
        return weakref_proxy(self)
ArAction_swigregister = _AriaPy.ArAction_swigregister
ArAction_swigregister(ArAction)

def ArAction_setDefaultActivationState(*args):
  """ArAction_setDefaultActivationState(bool defaultActivationState)"""
  return _AriaPy.ArAction_setDefaultActivationState(*args)

def ArAction_getDefaultActivationState():
  """ArAction_getDefaultActivationState() -> bool"""
  return _AriaPy.ArAction_getDefaultActivationState()

class ArActionAvoidFront(ArAction):
    """Proxy of C++ ArActionAvoidFront class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, name = "avoid front obstacles", obstacleDistance = 450, 
    avoidVelocity = 200, turnAmount = 15, useTableIRIfAvail = True): 
        """
        __init__(self, char name = "avoid front obstacles", double obstacleDistance = 450, 
            double avoidVelocity = 200, 
            double turnAmount = 15, bool useTableIRIfAvail = True) -> ArActionAvoidFront
        __init__(self, char name = "avoid front obstacles", double obstacleDistance = 450, 
            double avoidVelocity = 200, 
            double turnAmount = 15) -> ArActionAvoidFront
        __init__(self, char name = "avoid front obstacles", double obstacleDistance = 450, 
            double avoidVelocity = 200) -> ArActionAvoidFront
        __init__(self, char name = "avoid front obstacles", double obstacleDistance = 450) -> ArActionAvoidFront
        __init__(self, char name = "avoid front obstacles") -> ArActionAvoidFront
        __init__(self) -> ArActionAvoidFront
        """
        this = _AriaPy.new_ArActionAvoidFront(name, obstacleDistance, avoidVelocity, turnAmount, 
    useTableIRIfAvail)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionAvoidFront
    __del__ = lambda self : None;
    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArActionAvoidFront_fire(self, *args)

    def getDesired(self):
        """getDesired(self) -> ArActionDesired"""
        return _AriaPy.ArActionAvoidFront_getDesired(self)

ArActionAvoidFront_swigregister = _AriaPy.ArActionAvoidFront_swigregister
ArActionAvoidFront_swigregister(ArActionAvoidFront)

class ArActionAvoidSide(ArAction):
    """Proxy of C++ ArActionAvoidSide class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, name = "Avoid side", obstacleDistance = 300, turnAmount = 5): 
        """
        __init__(self, char name = "Avoid side", double obstacleDistance = 300, 
            double turnAmount = 5) -> ArActionAvoidSide
        __init__(self, char name = "Avoid side", double obstacleDistance = 300) -> ArActionAvoidSide
        __init__(self, char name = "Avoid side") -> ArActionAvoidSide
        __init__(self) -> ArActionAvoidSide
        """
        this = _AriaPy.new_ArActionAvoidSide(name, obstacleDistance, turnAmount)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionAvoidSide
    __del__ = lambda self : None;
    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArActionAvoidSide_fire(self, *args)

    def getDesired(self):
        """getDesired(self) -> ArActionDesired"""
        return _AriaPy.ArActionAvoidSide_getDesired(self)

ArActionAvoidSide_swigregister = _AriaPy.ArActionAvoidSide_swigregister
ArActionAvoidSide_swigregister(ArActionAvoidSide)

class ArActionBumpers(ArAction):
    """Proxy of C++ ArActionBumpers class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, name = "bumpers", backOffSpeed = 100, backOffTime = 3000, 
    turnTime = 3000, setMaximums = False): 
        """
        __init__(self, char name = "bumpers", double backOffSpeed = 100, int backOffTime = 3000, 
            int turnTime = 3000, bool setMaximums = False) -> ArActionBumpers
        __init__(self, char name = "bumpers", double backOffSpeed = 100, int backOffTime = 3000, 
            int turnTime = 3000) -> ArActionBumpers
        __init__(self, char name = "bumpers", double backOffSpeed = 100, int backOffTime = 3000) -> ArActionBumpers
        __init__(self, char name = "bumpers", double backOffSpeed = 100) -> ArActionBumpers
        __init__(self, char name = "bumpers") -> ArActionBumpers
        __init__(self) -> ArActionBumpers
        """
        this = _AriaPy.new_ArActionBumpers(name, backOffSpeed, backOffTime, turnTime, setMaximums)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionBumpers
    __del__ = lambda self : None;
    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArActionBumpers_fire(self, *args)

    def getDesired(self):
        """getDesired(self) -> ArActionDesired"""
        return _AriaPy.ArActionBumpers_getDesired(self)

    def findDegreesToTurn(self, *args):
        """findDegreesToTurn(self, int bumpValue, int whichBumper) -> double"""
        return _AriaPy.ArActionBumpers_findDegreesToTurn(self, *args)

    def activate(self):
        """activate(self)"""
        return _AriaPy.ArActionBumpers_activate(self)

ArActionBumpers_swigregister = _AriaPy.ArActionBumpers_swigregister
ArActionBumpers_swigregister(ArActionBumpers)

class ArActionColorFollow(ArAction):
    """Proxy of C++ ArActionColorFollow class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, char name, ArACTS_1_2 acts, ArPTZ camera, double speed = 200, 
            int width = 160, int height = 120) -> ArActionColorFollow
        __init__(self, char name, ArACTS_1_2 acts, ArPTZ camera, double speed = 200, 
            int width = 160) -> ArActionColorFollow
        __init__(self, char name, ArACTS_1_2 acts, ArPTZ camera, double speed = 200) -> ArActionColorFollow
        __init__(self, char name, ArACTS_1_2 acts, ArPTZ camera) -> ArActionColorFollow
        """
        this = _AriaPy.new_ArActionColorFollow(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionColorFollow
    __del__ = lambda self : None;
    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArActionColorFollow_fire(self, *args)

    def setChannel(self, *args):
        """setChannel(self, int channel) -> bool"""
        return _AriaPy.ArActionColorFollow_setChannel(self, *args)

    def setCamera(self, *args):
        """setCamera(self, ArPTZ camera)"""
        return _AriaPy.ArActionColorFollow_setCamera(self, *args)

    def setAcquire(self, *args):
        """setAcquire(self, bool acquire)"""
        return _AriaPy.ArActionColorFollow_setAcquire(self, *args)

    def stopMovement(self):
        """stopMovement(self)"""
        return _AriaPy.ArActionColorFollow_stopMovement(self)

    def startMovement(self):
        """startMovement(self)"""
        return _AriaPy.ArActionColorFollow_startMovement(self)

    def getChannel(self):
        """getChannel(self) -> int"""
        return _AriaPy.ArActionColorFollow_getChannel(self)

    def getAcquire(self):
        """getAcquire(self) -> bool"""
        return _AriaPy.ArActionColorFollow_getAcquire(self)

    def getMovement(self):
        """getMovement(self) -> bool"""
        return _AriaPy.ArActionColorFollow_getMovement(self)

    def getBlob(self):
        """getBlob(self) -> bool"""
        return _AriaPy.ArActionColorFollow_getBlob(self)

    NO_TARGET = _AriaPy.ArActionColorFollow_NO_TARGET
    TARGET = _AriaPy.ArActionColorFollow_TARGET
    FOLLOWING = _AriaPy.ArActionColorFollow_FOLLOWING
    ACQUIRING = _AriaPy.ArActionColorFollow_ACQUIRING
    STOPPED = _AriaPy.ArActionColorFollow_STOPPED
    LEFT = _AriaPy.ArActionColorFollow_LEFT
    RIGHT = _AriaPy.ArActionColorFollow_RIGHT
    CENTER = _AriaPy.ArActionColorFollow_CENTER
    def getDesired(self):
        """getDesired(self) -> ArActionDesired"""
        return _AriaPy.ArActionColorFollow_getDesired(self)

ArActionColorFollow_swigregister = _AriaPy.ArActionColorFollow_swigregister
ArActionColorFollow_swigregister(ArActionColorFollow)

class ArActionConstantVelocity(ArAction):
    """Proxy of C++ ArActionConstantVelocity class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, name = "Constant Velocity", velocity = 400): 
        """
        __init__(self, char name = "Constant Velocity", double velocity = 400) -> ArActionConstantVelocity
        __init__(self, char name = "Constant Velocity") -> ArActionConstantVelocity
        __init__(self) -> ArActionConstantVelocity
        """
        this = _AriaPy.new_ArActionConstantVelocity(name, velocity)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionConstantVelocity
    __del__ = lambda self : None;
    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArActionConstantVelocity_fire(self, *args)

    def getDesired(self):
        """getDesired(self) -> ArActionDesired"""
        return _AriaPy.ArActionConstantVelocity_getDesired(self)

ArActionConstantVelocity_swigregister = _AriaPy.ArActionConstantVelocity_swigregister
ArActionConstantVelocity_swigregister(ArActionConstantVelocity)

class ArActionDeceleratingLimiter(ArAction):
    """Proxy of C++ ArActionDeceleratingLimiter class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    FORWARDS = _AriaPy.ArActionDeceleratingLimiter_FORWARDS
    BACKWARDS = _AriaPy.ArActionDeceleratingLimiter_BACKWARDS
    LATERAL_LEFT = _AriaPy.ArActionDeceleratingLimiter_LATERAL_LEFT
    LATERAL_RIGHT = _AriaPy.ArActionDeceleratingLimiter_LATERAL_RIGHT
    def __init__(self, *args): 
        """
        __init__(self, char name = "limitAndDecel", LimiterType type = FORWARDS) -> ArActionDeceleratingLimiter
        __init__(self, char name = "limitAndDecel") -> ArActionDeceleratingLimiter
        __init__(self) -> ArActionDeceleratingLimiter
        """
        this = _AriaPy.new_ArActionDeceleratingLimiter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionDeceleratingLimiter
    __del__ = lambda self : None;
    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArActionDeceleratingLimiter_fire(self, *args)

    def getDesired(self):
        """getDesired(self) -> ArActionDesired"""
        return _AriaPy.ArActionDeceleratingLimiter_getDesired(self)

    def setParameters(self, clearance = 100, sideClearanceAtSlowSpeed = 50, paddingAtSlowSpeed = 50, 
    slowSpeed = 200, sideClearanceAtFastSpeed = 400, 
    paddingAtFastSpeed = 300, 
    fastSpeed = 1000, preferredDecel = 600, 
    useEStop = False, maxEmergencyDecel = 0):
        """
        setParameters(self, double clearance = 100, double sideClearanceAtSlowSpeed = 50, 
            double paddingAtSlowSpeed = 50, double slowSpeed = 200, 
            double sideClearanceAtFastSpeed = 400, 
            double paddingAtFastSpeed = 300, 
            double fastSpeed = 1000, double preferredDecel = 600, 
            bool useEStop = False, double maxEmergencyDecel = 0)
        setParameters(self, double clearance = 100, double sideClearanceAtSlowSpeed = 50, 
            double paddingAtSlowSpeed = 50, double slowSpeed = 200, 
            double sideClearanceAtFastSpeed = 400, 
            double paddingAtFastSpeed = 300, 
            double fastSpeed = 1000, double preferredDecel = 600, 
            bool useEStop = False)
        setParameters(self, double clearance = 100, double sideClearanceAtSlowSpeed = 50, 
            double paddingAtSlowSpeed = 50, double slowSpeed = 200, 
            double sideClearanceAtFastSpeed = 400, 
            double paddingAtFastSpeed = 300, 
            double fastSpeed = 1000, double preferredDecel = 600)
        setParameters(self, double clearance = 100, double sideClearanceAtSlowSpeed = 50, 
            double paddingAtSlowSpeed = 50, double slowSpeed = 200, 
            double sideClearanceAtFastSpeed = 400, 
            double paddingAtFastSpeed = 300, 
            double fastSpeed = 1000)
        setParameters(self, double clearance = 100, double sideClearanceAtSlowSpeed = 50, 
            double paddingAtSlowSpeed = 50, double slowSpeed = 200, 
            double sideClearanceAtFastSpeed = 400, 
            double paddingAtFastSpeed = 300)
        setParameters(self, double clearance = 100, double sideClearanceAtSlowSpeed = 50, 
            double paddingAtSlowSpeed = 50, double slowSpeed = 200, 
            double sideClearanceAtFastSpeed = 400)
        setParameters(self, double clearance = 100, double sideClearanceAtSlowSpeed = 50, 
            double paddingAtSlowSpeed = 50, double slowSpeed = 200)
        setParameters(self, double clearance = 100, double sideClearanceAtSlowSpeed = 50, 
            double paddingAtSlowSpeed = 50)
        setParameters(self, double clearance = 100, double sideClearanceAtSlowSpeed = 50)
        setParameters(self, double clearance = 100)
        setParameters(self)
        """
        return _AriaPy.ArActionDeceleratingLimiter_setParameters(self, clearance, sideClearanceAtSlowSpeed, paddingAtSlowSpeed, 
    slowSpeed, sideClearanceAtFastSpeed, paddingAtFastSpeed, 
    fastSpeed, preferredDecel, 
    useEStop, maxEmergencyDecel)

    def getType(self):
        """getType(self) -> LimiterType"""
        return _AriaPy.ArActionDeceleratingLimiter_getType(self)

    def setType(self, *args):
        """setType(self, LimiterType type)"""
        return _AriaPy.ArActionDeceleratingLimiter_setType(self, *args)

    def addToConfig(self, *args):
        """
        addToConfig(self, ArConfig config, char section, char prefix = None)
        addToConfig(self, ArConfig config, char section)
        """
        return _AriaPy.ArActionDeceleratingLimiter_addToConfig(self, *args)

    def getUseLocationDependentDevices(self):
        """getUseLocationDependentDevices(self) -> bool"""
        return _AriaPy.ArActionDeceleratingLimiter_getUseLocationDependentDevices(self)

    def setUseLocationDependentDevices(self, *args):
        """setUseLocationDependentDevices(self, bool useLocationDependentDevices)"""
        return _AriaPy.ArActionDeceleratingLimiter_setUseLocationDependentDevices(self, *args)

    def setStopRotationToo(self, *args):
        """setStopRotationToo(self, bool stopRotationToo)"""
        return _AriaPy.ArActionDeceleratingLimiter_setStopRotationToo(self, *args)

ArActionDeceleratingLimiter_swigregister = _AriaPy.ArActionDeceleratingLimiter_swigregister
ArActionDeceleratingLimiter_swigregister(ArActionDeceleratingLimiter)

class ArActionDesiredChannel(object):
    """Proxy of C++ ArActionDesiredChannel class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ArActionDesiredChannel"""
        this = _AriaPy.new_ArActionDesiredChannel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionDesiredChannel
    __del__ = lambda self : None;
    def setOverrideDoesLessThan(self, *args):
        """setOverrideDoesLessThan(self, bool overrideDoesLessThan)"""
        return _AriaPy.ArActionDesiredChannel_setOverrideDoesLessThan(self, *args)

    def setDesired(self, *args):
        """
        setDesired(self, double desired, double desiredStrength, bool allowOverride = False)
        setDesired(self, double desired, double desiredStrength)
        """
        return _AriaPy.ArActionDesiredChannel_setDesired(self, *args)

    def getDesired(self):
        """getDesired(self) -> double"""
        return _AriaPy.ArActionDesiredChannel_getDesired(self)

    def getStrength(self):
        """getStrength(self) -> double"""
        return _AriaPy.ArActionDesiredChannel_getStrength(self)

    def getAllowOverride(self):
        """getAllowOverride(self) -> double"""
        return _AriaPy.ArActionDesiredChannel_getAllowOverride(self)

    def reset(self):
        """reset(self)"""
        return _AriaPy.ArActionDesiredChannel_reset(self)

    def merge(self, *args):
        """merge(self, ArActionDesiredChannel desiredChannel)"""
        return _AriaPy.ArActionDesiredChannel_merge(self, *args)

    def startAverage(self):
        """startAverage(self)"""
        return _AriaPy.ArActionDesiredChannel_startAverage(self)

    def addAverage(self, *args):
        """addAverage(self, ArActionDesiredChannel desiredChannel)"""
        return _AriaPy.ArActionDesiredChannel_addAverage(self, *args)

    def endAverage(self):
        """endAverage(self)"""
        return _AriaPy.ArActionDesiredChannel_endAverage(self)

    def checkLowerBound(self, *args):
        """checkLowerBound(self, char actionName, char typeName, int lowerBound)"""
        return _AriaPy.ArActionDesiredChannel_checkLowerBound(self, *args)

    def checkUpperBound(self, *args):
        """checkUpperBound(self, char actionName, char typeName, int upperBound)"""
        return _AriaPy.ArActionDesiredChannel_checkUpperBound(self, *args)

ArActionDesiredChannel_swigregister = _AriaPy.ArActionDesiredChannel_swigregister
ArActionDesiredChannel_swigregister(ArActionDesiredChannel)
ArActionDesiredChannel.NO_STRENGTH = _AriaPy.cvar.ArActionDesiredChannel_NO_STRENGTH
ArActionDesiredChannel.MIN_STRENGTH = _AriaPy.cvar.ArActionDesiredChannel_MIN_STRENGTH
ArActionDesiredChannel.MAX_STRENGTH = _AriaPy.cvar.ArActionDesiredChannel_MAX_STRENGTH

class ArActionDesired(object):
    """Proxy of C++ ArActionDesired class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ArActionDesired"""
        this = _AriaPy.new_ArActionDesired()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionDesired
    __del__ = lambda self : None;
    def setVel(self, *args):
        """
        setVel(self, double vel, double strength = MAX_STRENGTH)
        setVel(self, double vel)
        """
        return _AriaPy.ArActionDesired_setVel(self, *args)

    def setDeltaHeading(self, *args):
        """
        setDeltaHeading(self, double deltaHeading, double strength = MAX_STRENGTH)
        setDeltaHeading(self, double deltaHeading)
        """
        return _AriaPy.ArActionDesired_setDeltaHeading(self, *args)

    def setHeading(self, *args):
        """
        setHeading(self, double heading, double strength = MAX_STRENGTH)
        setHeading(self, double heading)
        """
        return _AriaPy.ArActionDesired_setHeading(self, *args)

    def setRotVel(self, *args):
        """
        setRotVel(self, double rotVel, double strength = MAX_STRENGTH)
        setRotVel(self, double rotVel)
        """
        return _AriaPy.ArActionDesired_setRotVel(self, *args)

    def setMaxVel(self, *args):
        """
        setMaxVel(self, double maxVel, double strength = MAX_STRENGTH, bool useSlowest = True)
        setMaxVel(self, double maxVel, double strength = MAX_STRENGTH)
        setMaxVel(self, double maxVel)
        """
        return _AriaPy.ArActionDesired_setMaxVel(self, *args)

    def setMaxNegVel(self, *args):
        """
        setMaxNegVel(self, double maxVel, double strength = MAX_STRENGTH, bool useSlowest = True)
        setMaxNegVel(self, double maxVel, double strength = MAX_STRENGTH)
        setMaxNegVel(self, double maxVel)
        """
        return _AriaPy.ArActionDesired_setMaxNegVel(self, *args)

    def setTransAccel(self, *args):
        """
        setTransAccel(self, double transAccel, double strength = MAX_STRENGTH, 
            bool useSlowest = True)
        setTransAccel(self, double transAccel, double strength = MAX_STRENGTH)
        setTransAccel(self, double transAccel)
        """
        return _AriaPy.ArActionDesired_setTransAccel(self, *args)

    def setTransDecel(self, *args):
        """
        setTransDecel(self, double transDecel, double strength = MAX_STRENGTH, 
            bool useFastestDecel = True)
        setTransDecel(self, double transDecel, double strength = MAX_STRENGTH)
        setTransDecel(self, double transDecel)
        """
        return _AriaPy.ArActionDesired_setTransDecel(self, *args)

    def setMaxRotVel(self, *args):
        """
        setMaxRotVel(self, double maxVel, double strength = MAX_STRENGTH, bool useSlowest = True)
        setMaxRotVel(self, double maxVel, double strength = MAX_STRENGTH)
        setMaxRotVel(self, double maxVel)
        """
        return _AriaPy.ArActionDesired_setMaxRotVel(self, *args)

    def setMaxRotVelPos(self, *args):
        """
        setMaxRotVelPos(self, double maxVel, double strength = MAX_STRENGTH, bool useSlowest = True)
        setMaxRotVelPos(self, double maxVel, double strength = MAX_STRENGTH)
        setMaxRotVelPos(self, double maxVel)
        """
        return _AriaPy.ArActionDesired_setMaxRotVelPos(self, *args)

    def setMaxRotVelNeg(self, *args):
        """
        setMaxRotVelNeg(self, double maxVel, double strength = MAX_STRENGTH, bool useSlowest = True)
        setMaxRotVelNeg(self, double maxVel, double strength = MAX_STRENGTH)
        setMaxRotVelNeg(self, double maxVel)
        """
        return _AriaPy.ArActionDesired_setMaxRotVelNeg(self, *args)

    def setRotAccel(self, *args):
        """
        setRotAccel(self, double rotAccel, double strength = MAX_STRENGTH, bool useSlowest = True)
        setRotAccel(self, double rotAccel, double strength = MAX_STRENGTH)
        setRotAccel(self, double rotAccel)
        """
        return _AriaPy.ArActionDesired_setRotAccel(self, *args)

    def setRotDecel(self, *args):
        """
        setRotDecel(self, double rotDecel, double strength = MAX_STRENGTH, bool useFastest = True)
        setRotDecel(self, double rotDecel, double strength = MAX_STRENGTH)
        setRotDecel(self, double rotDecel)
        """
        return _AriaPy.ArActionDesired_setRotDecel(self, *args)

    def setLeftLatVel(self, *args):
        """
        setLeftLatVel(self, double latVel, double strength = MAX_STRENGTH)
        setLeftLatVel(self, double latVel)
        """
        return _AriaPy.ArActionDesired_setLeftLatVel(self, *args)

    def setRightLatVel(self, *args):
        """
        setRightLatVel(self, double latVel, double strength = MAX_STRENGTH)
        setRightLatVel(self, double latVel)
        """
        return _AriaPy.ArActionDesired_setRightLatVel(self, *args)

    def setMaxLeftLatVel(self, *args):
        """
        setMaxLeftLatVel(self, double maxVel, double strength = MAX_STRENGTH, bool useSlowest = True)
        setMaxLeftLatVel(self, double maxVel, double strength = MAX_STRENGTH)
        setMaxLeftLatVel(self, double maxVel)
        """
        return _AriaPy.ArActionDesired_setMaxLeftLatVel(self, *args)

    def setMaxRightLatVel(self, *args):
        """
        setMaxRightLatVel(self, double maxVel, double strength = MAX_STRENGTH, bool useSlowest = True)
        setMaxRightLatVel(self, double maxVel, double strength = MAX_STRENGTH)
        setMaxRightLatVel(self, double maxVel)
        """
        return _AriaPy.ArActionDesired_setMaxRightLatVel(self, *args)

    def setLatAccel(self, *args):
        """
        setLatAccel(self, double latAccel, double strength = MAX_STRENGTH, bool useSlowest = True)
        setLatAccel(self, double latAccel, double strength = MAX_STRENGTH)
        setLatAccel(self, double latAccel)
        """
        return _AriaPy.ArActionDesired_setLatAccel(self, *args)

    def setLatDecel(self, *args):
        """
        setLatDecel(self, double latDecel, double strength = MAX_STRENGTH, bool useFastest = True)
        setLatDecel(self, double latDecel, double strength = MAX_STRENGTH)
        setLatDecel(self, double latDecel)
        """
        return _AriaPy.ArActionDesired_setLatDecel(self, *args)

    def reset(self):
        """reset(self)"""
        return _AriaPy.ArActionDesired_reset(self)

    def getVel(self):
        """getVel(self) -> double"""
        return _AriaPy.ArActionDesired_getVel(self)

    def getVelStrength(self):
        """getVelStrength(self) -> double"""
        return _AriaPy.ArActionDesired_getVelStrength(self)

    def getHeading(self):
        """getHeading(self) -> double"""
        return _AriaPy.ArActionDesired_getHeading(self)

    def getHeadingStrength(self):
        """getHeadingStrength(self) -> double"""
        return _AriaPy.ArActionDesired_getHeadingStrength(self)

    def getDeltaHeading(self):
        """getDeltaHeading(self) -> double"""
        return _AriaPy.ArActionDesired_getDeltaHeading(self)

    def getDeltaHeadingStrength(self):
        """getDeltaHeadingStrength(self) -> double"""
        return _AriaPy.ArActionDesired_getDeltaHeadingStrength(self)

    def getRotVel(self):
        """getRotVel(self) -> double"""
        return _AriaPy.ArActionDesired_getRotVel(self)

    def getRotVelStrength(self):
        """getRotVelStrength(self) -> double"""
        return _AriaPy.ArActionDesired_getRotVelStrength(self)

    def getMaxVel(self):
        """getMaxVel(self) -> double"""
        return _AriaPy.ArActionDesired_getMaxVel(self)

    def getMaxVelStrength(self):
        """getMaxVelStrength(self) -> double"""
        return _AriaPy.ArActionDesired_getMaxVelStrength(self)

    def getMaxVelSlowestUsed(self):
        """getMaxVelSlowestUsed(self) -> double"""
        return _AriaPy.ArActionDesired_getMaxVelSlowestUsed(self)

    def getMaxNegVel(self):
        """getMaxNegVel(self) -> double"""
        return _AriaPy.ArActionDesired_getMaxNegVel(self)

    def getMaxNegVelStrength(self):
        """getMaxNegVelStrength(self) -> double"""
        return _AriaPy.ArActionDesired_getMaxNegVelStrength(self)

    def getMaxNegVelSlowestUsed(self):
        """getMaxNegVelSlowestUsed(self) -> double"""
        return _AriaPy.ArActionDesired_getMaxNegVelSlowestUsed(self)

    def getTransAccel(self):
        """getTransAccel(self) -> double"""
        return _AriaPy.ArActionDesired_getTransAccel(self)

    def getTransAccelStrength(self):
        """getTransAccelStrength(self) -> double"""
        return _AriaPy.ArActionDesired_getTransAccelStrength(self)

    def getTransAccelSlowestUsed(self):
        """getTransAccelSlowestUsed(self) -> double"""
        return _AriaPy.ArActionDesired_getTransAccelSlowestUsed(self)

    def getTransDecel(self):
        """getTransDecel(self) -> double"""
        return _AriaPy.ArActionDesired_getTransDecel(self)

    def getTransDecelStrength(self):
        """getTransDecelStrength(self) -> double"""
        return _AriaPy.ArActionDesired_getTransDecelStrength(self)

    def getTransDecelFastestUsed(self):
        """getTransDecelFastestUsed(self) -> double"""
        return _AriaPy.ArActionDesired_getTransDecelFastestUsed(self)

    def getMaxRotVel(self):
        """getMaxRotVel(self) -> double"""
        return _AriaPy.ArActionDesired_getMaxRotVel(self)

    def getMaxRotVelStrength(self):
        """getMaxRotVelStrength(self) -> double"""
        return _AriaPy.ArActionDesired_getMaxRotVelStrength(self)

    def getMaxRotVelSlowestUsed(self):
        """getMaxRotVelSlowestUsed(self) -> double"""
        return _AriaPy.ArActionDesired_getMaxRotVelSlowestUsed(self)

    def getMaxRotVelPos(self):
        """getMaxRotVelPos(self) -> double"""
        return _AriaPy.ArActionDesired_getMaxRotVelPos(self)

    def getMaxRotVelPosStrength(self):
        """getMaxRotVelPosStrength(self) -> double"""
        return _AriaPy.ArActionDesired_getMaxRotVelPosStrength(self)

    def getMaxRotVelPosSlowestUsed(self):
        """getMaxRotVelPosSlowestUsed(self) -> double"""
        return _AriaPy.ArActionDesired_getMaxRotVelPosSlowestUsed(self)

    def getMaxRotVelNeg(self):
        """getMaxRotVelNeg(self) -> double"""
        return _AriaPy.ArActionDesired_getMaxRotVelNeg(self)

    def getMaxRotVelNegStrength(self):
        """getMaxRotVelNegStrength(self) -> double"""
        return _AriaPy.ArActionDesired_getMaxRotVelNegStrength(self)

    def getMaxRotVelNegSlowestUsed(self):
        """getMaxRotVelNegSlowestUsed(self) -> double"""
        return _AriaPy.ArActionDesired_getMaxRotVelNegSlowestUsed(self)

    def getRotAccel(self):
        """getRotAccel(self) -> double"""
        return _AriaPy.ArActionDesired_getRotAccel(self)

    def getRotAccelStrength(self):
        """getRotAccelStrength(self) -> double"""
        return _AriaPy.ArActionDesired_getRotAccelStrength(self)

    def getRotAccelSlowestUsed(self):
        """getRotAccelSlowestUsed(self) -> double"""
        return _AriaPy.ArActionDesired_getRotAccelSlowestUsed(self)

    def getRotDecel(self):
        """getRotDecel(self) -> double"""
        return _AriaPy.ArActionDesired_getRotDecel(self)

    def getRotDecelStrength(self):
        """getRotDecelStrength(self) -> double"""
        return _AriaPy.ArActionDesired_getRotDecelStrength(self)

    def getRotDecelFastestUsed(self):
        """getRotDecelFastestUsed(self) -> double"""
        return _AriaPy.ArActionDesired_getRotDecelFastestUsed(self)

    def getLatVel(self):
        """getLatVel(self) -> double"""
        return _AriaPy.ArActionDesired_getLatVel(self)

    def getLatVelStrength(self):
        """getLatVelStrength(self) -> double"""
        return _AriaPy.ArActionDesired_getLatVelStrength(self)

    def getMaxLeftLatVel(self):
        """getMaxLeftLatVel(self) -> double"""
        return _AriaPy.ArActionDesired_getMaxLeftLatVel(self)

    def getMaxLeftLatVelStrength(self):
        """getMaxLeftLatVelStrength(self) -> double"""
        return _AriaPy.ArActionDesired_getMaxLeftLatVelStrength(self)

    def getMaxLeftLatVelSlowestUsed(self):
        """getMaxLeftLatVelSlowestUsed(self) -> double"""
        return _AriaPy.ArActionDesired_getMaxLeftLatVelSlowestUsed(self)

    def getMaxRightLatVel(self):
        """getMaxRightLatVel(self) -> double"""
        return _AriaPy.ArActionDesired_getMaxRightLatVel(self)

    def getMaxRightLatVelStrength(self):
        """getMaxRightLatVelStrength(self) -> double"""
        return _AriaPy.ArActionDesired_getMaxRightLatVelStrength(self)

    def getMaxRightLatVelSlowestUsed(self):
        """getMaxRightLatVelSlowestUsed(self) -> double"""
        return _AriaPy.ArActionDesired_getMaxRightLatVelSlowestUsed(self)

    def getLatAccel(self):
        """getLatAccel(self) -> double"""
        return _AriaPy.ArActionDesired_getLatAccel(self)

    def getLatAccelStrength(self):
        """getLatAccelStrength(self) -> double"""
        return _AriaPy.ArActionDesired_getLatAccelStrength(self)

    def getLatAccelSlowestUsed(self):
        """getLatAccelSlowestUsed(self) -> double"""
        return _AriaPy.ArActionDesired_getLatAccelSlowestUsed(self)

    def getLatDecel(self):
        """getLatDecel(self) -> double"""
        return _AriaPy.ArActionDesired_getLatDecel(self)

    def getLatDecelStrength(self):
        """getLatDecelStrength(self) -> double"""
        return _AriaPy.ArActionDesired_getLatDecelStrength(self)

    def getLatDecelFastestUsed(self):
        """getLatDecelFastestUsed(self) -> double"""
        return _AriaPy.ArActionDesired_getLatDecelFastestUsed(self)

    def merge(self, *args):
        """merge(self, ArActionDesired actDesired)"""
        return _AriaPy.ArActionDesired_merge(self, *args)

    def startAverage(self):
        """startAverage(self)"""
        return _AriaPy.ArActionDesired_startAverage(self)

    def addAverage(self, *args):
        """addAverage(self, ArActionDesired actDesired)"""
        return _AriaPy.ArActionDesired_addAverage(self, *args)

    def endAverage(self):
        """endAverage(self)"""
        return _AriaPy.ArActionDesired_endAverage(self)

    def accountForRobotHeading(self, *args):
        """accountForRobotHeading(self, double robotHeading)"""
        return _AriaPy.ArActionDesired_accountForRobotHeading(self, *args)

    def log(self):
        """log(self)"""
        return _AriaPy.ArActionDesired_log(self)

    def isAnythingDesired(self):
        """isAnythingDesired(self) -> bool"""
        return _AriaPy.ArActionDesired_isAnythingDesired(self)

    def sanityCheck(self, *args):
        """sanityCheck(self, char actionName)"""
        return _AriaPy.ArActionDesired_sanityCheck(self, *args)

ArActionDesired_swigregister = _AriaPy.ArActionDesired_swigregister
ArActionDesired_swigregister(ArActionDesired)
ArActionDesired.NO_STRENGTH = _AriaPy.cvar.ArActionDesired_NO_STRENGTH
ArActionDesired.MIN_STRENGTH = _AriaPy.cvar.ArActionDesired_MIN_STRENGTH
ArActionDesired.MAX_STRENGTH = _AriaPy.cvar.ArActionDesired_MAX_STRENGTH

class ArActionDriveDistance(ArAction):
    """Proxy of C++ ArActionDriveDistance class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, name = "driveDistance", speed = 400, deceleration = 200): 
        """
        __init__(self, char name = "driveDistance", double speed = 400, double deceleration = 200) -> ArActionDriveDistance
        __init__(self, char name = "driveDistance", double speed = 400) -> ArActionDriveDistance
        __init__(self, char name = "driveDistance") -> ArActionDriveDistance
        __init__(self) -> ArActionDriveDistance
        """
        this = _AriaPy.new_ArActionDriveDistance(name, speed, deceleration)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionDriveDistance
    __del__ = lambda self : None;
    def haveAchievedDistance(self):
        """haveAchievedDistance(self) -> bool"""
        return _AriaPy.ArActionDriveDistance_haveAchievedDistance(self)

    def cancelDistance(self):
        """cancelDistance(self)"""
        return _AriaPy.ArActionDriveDistance_cancelDistance(self)

    def setDistance(self, *args):
        """
        setDistance(self, double distance, bool useEncoders = True)
        setDistance(self, double distance)
        """
        return _AriaPy.ArActionDriveDistance_setDistance(self, *args)

    def usingEncoders(self):
        """usingEncoders(self) -> bool"""
        return _AriaPy.ArActionDriveDistance_usingEncoders(self)

    def setSpeed(self, speed = 400):
        """
        setSpeed(self, double speed = 400)
        setSpeed(self)
        """
        return _AriaPy.ArActionDriveDistance_setSpeed(self, speed)

    def getSpeed(self):
        """getSpeed(self) -> double"""
        return _AriaPy.ArActionDriveDistance_getSpeed(self)

    def setDeceleration(self, deceleration = 200):
        """
        setDeceleration(self, double deceleration = 200)
        setDeceleration(self)
        """
        return _AriaPy.ArActionDriveDistance_setDeceleration(self, deceleration)

    def getDeceleration(self):
        """getDeceleration(self) -> double"""
        return _AriaPy.ArActionDriveDistance_getDeceleration(self)

    def setPrinting(self, *args):
        """setPrinting(self, bool printing)"""
        return _AriaPy.ArActionDriveDistance_setPrinting(self, *args)

    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArActionDriveDistance_fire(self, *args)

    def getDesired(self):
        """getDesired(self) -> ArActionDesired"""
        return _AriaPy.ArActionDriveDistance_getDesired(self)

ArActionDriveDistance_swigregister = _AriaPy.ArActionDriveDistance_swigregister
ArActionDriveDistance_swigregister(ArActionDriveDistance)

class ArActionGoto(ArAction):
    """Proxy of C++ ArActionGoto class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, char name = "goto", ArPose goal = ArPose(0.0, 0.0, 0.0), 
            double closeDist = 100, double speed = 400, 
            double speedToTurnAt = 150, double turnAmount = 7) -> ArActionGoto
        __init__(self, char name = "goto", ArPose goal = ArPose(0.0, 0.0, 0.0), 
            double closeDist = 100, double speed = 400, 
            double speedToTurnAt = 150) -> ArActionGoto
        __init__(self, char name = "goto", ArPose goal = ArPose(0.0, 0.0, 0.0), 
            double closeDist = 100, double speed = 400) -> ArActionGoto
        __init__(self, char name = "goto", ArPose goal = ArPose(0.0, 0.0, 0.0), 
            double closeDist = 100) -> ArActionGoto
        __init__(self, char name = "goto", ArPose goal = ArPose(0.0, 0.0, 0.0)) -> ArActionGoto
        __init__(self, char name = "goto") -> ArActionGoto
        __init__(self) -> ArActionGoto
        """
        this = _AriaPy.new_ArActionGoto(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionGoto
    __del__ = lambda self : None;
    def haveAchievedGoal(self):
        """haveAchievedGoal(self) -> bool"""
        return _AriaPy.ArActionGoto_haveAchievedGoal(self)

    def cancelGoal(self):
        """cancelGoal(self)"""
        return _AriaPy.ArActionGoto_cancelGoal(self)

    def setGoal(self, *args):
        """setGoal(self, ArPose goal)"""
        return _AriaPy.ArActionGoto_setGoal(self, *args)

    def getGoal(self):
        """getGoal(self) -> ArPose"""
        return _AriaPy.ArActionGoto_getGoal(self)

    def setCloseDist(self, *args):
        """setCloseDist(self, double closeDist)"""
        return _AriaPy.ArActionGoto_setCloseDist(self, *args)

    def getCloseDist(self):
        """getCloseDist(self) -> double"""
        return _AriaPy.ArActionGoto_getCloseDist(self)

    def setSpeed(self, *args):
        """setSpeed(self, double speed)"""
        return _AriaPy.ArActionGoto_setSpeed(self, *args)

    def getSpeed(self):
        """getSpeed(self) -> double"""
        return _AriaPy.ArActionGoto_getSpeed(self)

    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArActionGoto_fire(self, *args)

    def getDesired(self):
        """getDesired(self) -> ArActionDesired"""
        return _AriaPy.ArActionGoto_getDesired(self)

ArActionGoto_swigregister = _AriaPy.ArActionGoto_swigregister
ArActionGoto_swigregister(ArActionGoto)

class ArActionGotoStraight(ArAction):
    """Proxy of C++ ArActionGotoStraight class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, name = "goto", speed = 400): 
        """
        __init__(self, char name = "goto", double speed = 400) -> ArActionGotoStraight
        __init__(self, char name = "goto") -> ArActionGotoStraight
        __init__(self) -> ArActionGotoStraight
        """
        this = _AriaPy.new_ArActionGotoStraight(name, speed)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionGotoStraight
    __del__ = lambda self : None;
    def haveAchievedGoal(self):
        """haveAchievedGoal(self) -> bool"""
        return _AriaPy.ArActionGotoStraight_haveAchievedGoal(self)

    def cancelGoal(self):
        """cancelGoal(self)"""
        return _AriaPy.ArActionGotoStraight_cancelGoal(self)

    def setGoal(self, *args):
        """
        setGoal(self, ArPose goal, bool backwards = False, bool justDistance = True)
        setGoal(self, ArPose goal, bool backwards = False)
        setGoal(self, ArPose goal)
        """
        return _AriaPy.ArActionGotoStraight_setGoal(self, *args)

    def setGoalRel(self, *args):
        """
        setGoalRel(self, double dist, double deltaHeading, bool backwards = False, 
            bool justDistance = True)
        setGoalRel(self, double dist, double deltaHeading, bool backwards = False)
        setGoalRel(self, double dist, double deltaHeading)
        """
        return _AriaPy.ArActionGotoStraight_setGoalRel(self, *args)

    def getGoal(self):
        """getGoal(self) -> ArPose"""
        return _AriaPy.ArActionGotoStraight_getGoal(self)

    def usingEncoderGoal(self):
        """usingEncoderGoal(self) -> bool"""
        return _AriaPy.ArActionGotoStraight_usingEncoderGoal(self)

    def setEncoderGoal(self, *args):
        """
        setEncoderGoal(self, ArPose encoderGoal, bool backwards = False, bool justDistance = True)
        setEncoderGoal(self, ArPose encoderGoal, bool backwards = False)
        setEncoderGoal(self, ArPose encoderGoal)
        """
        return _AriaPy.ArActionGotoStraight_setEncoderGoal(self, *args)

    def setEncoderGoalRel(self, *args):
        """
        setEncoderGoalRel(self, double dist, double deltaHeading, bool backwards = False, 
            bool justDistance = True)
        setEncoderGoalRel(self, double dist, double deltaHeading, bool backwards = False)
        setEncoderGoalRel(self, double dist, double deltaHeading)
        """
        return _AriaPy.ArActionGotoStraight_setEncoderGoalRel(self, *args)

    def getEncoderGoal(self):
        """getEncoderGoal(self) -> ArPose"""
        return _AriaPy.ArActionGotoStraight_getEncoderGoal(self)

    def setSpeed(self, *args):
        """setSpeed(self, double speed)"""
        return _AriaPy.ArActionGotoStraight_setSpeed(self, *args)

    def getSpeed(self):
        """getSpeed(self) -> double"""
        return _AriaPy.ArActionGotoStraight_getSpeed(self)

    def setCloseDist(self, closeDist = 100):
        """
        setCloseDist(self, double closeDist = 100)
        setCloseDist(self)
        """
        return _AriaPy.ArActionGotoStraight_setCloseDist(self, closeDist)

    def getCloseDist(self):
        """getCloseDist(self) -> double"""
        return _AriaPy.ArActionGotoStraight_getCloseDist(self)

    def getBacking(self):
        """getBacking(self) -> bool"""
        return _AriaPy.ArActionGotoStraight_getBacking(self)

    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArActionGotoStraight_fire(self, *args)

    def getDesired(self):
        """getDesired(self) -> ArActionDesired"""
        return _AriaPy.ArActionGotoStraight_getDesired(self)

ArActionGotoStraight_swigregister = _AriaPy.ArActionGotoStraight_swigregister
ArActionGotoStraight_swigregister(ArActionGotoStraight)

class ArActionGroup(object):
    """Proxy of C++ ArActionGroup class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot) -> ArActionGroup"""
        this = _AriaPy.new_ArActionGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionGroup
    __del__ = lambda self : None;
    def addAction(self, *args):
        """addAction(self, ArAction action, int priority)"""
        return _AriaPy.ArActionGroup_addAction(self, *args)

    def remAction(self, *args):
        """remAction(self, ArAction action)"""
        return _AriaPy.ArActionGroup_remAction(self, *args)

    def activate(self):
        """activate(self)"""
        return _AriaPy.ArActionGroup_activate(self)

    def activateExclusive(self):
        """activateExclusive(self)"""
        return _AriaPy.ArActionGroup_activateExclusive(self)

    def deactivate(self):
        """deactivate(self)"""
        return _AriaPy.ArActionGroup_deactivate(self)

    def removeActions(self):
        """removeActions(self)"""
        return _AriaPy.ArActionGroup_removeActions(self)

    def deleteActions(self):
        """deleteActions(self)"""
        return _AriaPy.ArActionGroup_deleteActions(self)

    def getActionList(self):
        """getActionList(self) -> std::list<(p.ArAction,std::allocator<(p.ArAction)>)>"""
        return _AriaPy.ArActionGroup_getActionList(self)

ArActionGroup_swigregister = _AriaPy.ArActionGroup_swigregister
ArActionGroup_swigregister(ArActionGroup)

class ArActionGroupInput(ArActionGroup):
    """Proxy of C++ ArActionGroupInput class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot) -> ArActionGroupInput"""
        this = _AriaPy.new_ArActionGroupInput(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionGroupInput
    __del__ = lambda self : None;
    def setVel(self, *args):
        """setVel(self, double vel)"""
        return _AriaPy.ArActionGroupInput_setVel(self, *args)

    def setRotVel(self, *args):
        """setRotVel(self, double rotVel)"""
        return _AriaPy.ArActionGroupInput_setRotVel(self, *args)

    def setHeading(self, *args):
        """setHeading(self, double heading)"""
        return _AriaPy.ArActionGroupInput_setHeading(self, *args)

    def deltaHeadingFromCurrent(self, *args):
        """deltaHeadingFromCurrent(self, double delta)"""
        return _AriaPy.ArActionGroupInput_deltaHeadingFromCurrent(self, *args)

    def clear(self):
        """clear(self)"""
        return _AriaPy.ArActionGroupInput_clear(self)

    def getActionInput(self):
        """getActionInput(self) -> ArActionInput"""
        return _AriaPy.ArActionGroupInput_getActionInput(self)

ArActionGroupInput_swigregister = _AriaPy.ArActionGroupInput_swigregister
ArActionGroupInput_swigregister(ArActionGroupInput)

class ArActionGroupStop(ArActionGroup):
    """Proxy of C++ ArActionGroupStop class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot) -> ArActionGroupStop"""
        this = _AriaPy.new_ArActionGroupStop(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionGroupStop
    __del__ = lambda self : None;
    def getActionStop(self):
        """getActionStop(self) -> ArActionStop"""
        return _AriaPy.ArActionGroupStop_getActionStop(self)

    myActionStop = _swig_property(_AriaPy.ArActionGroupStop_myActionStop_get, _AriaPy.ArActionGroupStop_myActionStop_set)
ArActionGroupStop_swigregister = _AriaPy.ArActionGroupStop_swigregister
ArActionGroupStop_swigregister(ArActionGroupStop)

class ArActionGroupTeleop(ArActionGroup):
    """Proxy of C++ ArActionGroupTeleop class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot) -> ArActionGroupTeleop"""
        this = _AriaPy.new_ArActionGroupTeleop(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionGroupTeleop
    __del__ = lambda self : None;
    def setThrottleParams(self, *args):
        """setThrottleParams(self, int lowSpeed, int highSpeed)"""
        return _AriaPy.ArActionGroupTeleop_setThrottleParams(self, *args)

ArActionGroupTeleop_swigregister = _AriaPy.ArActionGroupTeleop_swigregister
ArActionGroupTeleop_swigregister(ArActionGroupTeleop)

class ArActionGroupUnguardedTeleop(ArActionGroup):
    """Proxy of C++ ArActionGroupUnguardedTeleop class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot) -> ArActionGroupUnguardedTeleop"""
        this = _AriaPy.new_ArActionGroupUnguardedTeleop(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionGroupUnguardedTeleop
    __del__ = lambda self : None;
    def setThrottleParams(self, *args):
        """setThrottleParams(self, int lowSpeed, int highSpeed)"""
        return _AriaPy.ArActionGroupUnguardedTeleop_setThrottleParams(self, *args)

ArActionGroupUnguardedTeleop_swigregister = _AriaPy.ArActionGroupUnguardedTeleop_swigregister
ArActionGroupUnguardedTeleop_swigregister(ArActionGroupUnguardedTeleop)

class ArActionGroupWander(ArActionGroup):
    """Proxy of C++ ArActionGroupWander class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ArRobot robot, int forwardVel = 400, int avoidFrontDist = 450, 
            int avoidVel = 200, int avoidTurnAmt = 15) -> ArActionGroupWander
        __init__(self, ArRobot robot, int forwardVel = 400, int avoidFrontDist = 450, 
            int avoidVel = 200) -> ArActionGroupWander
        __init__(self, ArRobot robot, int forwardVel = 400, int avoidFrontDist = 450) -> ArActionGroupWander
        __init__(self, ArRobot robot, int forwardVel = 400) -> ArActionGroupWander
        __init__(self, ArRobot robot) -> ArActionGroupWander
        """
        this = _AriaPy.new_ArActionGroupWander(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionGroupWander
    __del__ = lambda self : None;
ArActionGroupWander_swigregister = _AriaPy.ArActionGroupWander_swigregister
ArActionGroupWander_swigregister(ArActionGroupWander)

class ArActionGroupColorFollow(ArActionGroup):
    """Proxy of C++ ArActionGroupColorFollow class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot, ArACTS_1_2 acts, ArPTZ camera) -> ArActionGroupColorFollow"""
        this = _AriaPy.new_ArActionGroupColorFollow(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionGroupColorFollow
    __del__ = lambda self : None;
    def setCamera(self, *args):
        """setCamera(self, ArPTZ camera)"""
        return _AriaPy.ArActionGroupColorFollow_setCamera(self, *args)

    def setChannel(self, *args):
        """setChannel(self, int channel)"""
        return _AriaPy.ArActionGroupColorFollow_setChannel(self, *args)

    def startMovement(self):
        """startMovement(self)"""
        return _AriaPy.ArActionGroupColorFollow_startMovement(self)

    def stopMovement(self):
        """stopMovement(self)"""
        return _AriaPy.ArActionGroupColorFollow_stopMovement(self)

    def setAcquire(self, *args):
        """setAcquire(self, bool acquire)"""
        return _AriaPy.ArActionGroupColorFollow_setAcquire(self, *args)

    def getChannel(self):
        """getChannel(self) -> int"""
        return _AriaPy.ArActionGroupColorFollow_getChannel(self)

    def getAcquire(self):
        """getAcquire(self) -> bool"""
        return _AriaPy.ArActionGroupColorFollow_getAcquire(self)

    def getMovement(self):
        """getMovement(self) -> bool"""
        return _AriaPy.ArActionGroupColorFollow_getMovement(self)

    def getBlob(self):
        """getBlob(self) -> bool"""
        return _AriaPy.ArActionGroupColorFollow_getBlob(self)

ArActionGroupColorFollow_swigregister = _AriaPy.ArActionGroupColorFollow_swigregister
ArActionGroupColorFollow_swigregister(ArActionGroupColorFollow)

class ArActionGroupRatioDrive(ArActionGroup):
    """Proxy of C++ ArActionGroupRatioDrive class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot) -> ArActionGroupRatioDrive"""
        this = _AriaPy.new_ArActionGroupRatioDrive(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionGroupRatioDrive
    __del__ = lambda self : None;
    def getActionRatioInput(self):
        """getActionRatioInput(self) -> ArActionRatioInput"""
        return _AriaPy.ArActionGroupRatioDrive_getActionRatioInput(self)

    def addToConfig(self, *args):
        """addToConfig(self, ArConfig config, char section)"""
        return _AriaPy.ArActionGroupRatioDrive_addToConfig(self, *args)

ArActionGroupRatioDrive_swigregister = _AriaPy.ArActionGroupRatioDrive_swigregister
ArActionGroupRatioDrive_swigregister(ArActionGroupRatioDrive)

class ArActionGroupRatioDriveUnsafe(ArActionGroup):
    """Proxy of C++ ArActionGroupRatioDriveUnsafe class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot) -> ArActionGroupRatioDriveUnsafe"""
        this = _AriaPy.new_ArActionGroupRatioDriveUnsafe(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionGroupRatioDriveUnsafe
    __del__ = lambda self : None;
    def getActionRatioInput(self):
        """getActionRatioInput(self) -> ArActionRatioInput"""
        return _AriaPy.ArActionGroupRatioDriveUnsafe_getActionRatioInput(self)

    def addToConfig(self, *args):
        """addToConfig(self, ArConfig config, char section)"""
        return _AriaPy.ArActionGroupRatioDriveUnsafe_addToConfig(self, *args)

ArActionGroupRatioDriveUnsafe_swigregister = _AriaPy.ArActionGroupRatioDriveUnsafe_swigregister
ArActionGroupRatioDriveUnsafe_swigregister(ArActionGroupRatioDriveUnsafe)

class ArActionIRs(ArAction):
    """Proxy of C++ ArActionIRs class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, name = "IRs", backOffSpeed = 100, backOffTime = 5000, 
    turnTime = 3000, setMaximums = False): 
        """
        __init__(self, char name = "IRs", double backOffSpeed = 100, int backOffTime = 5000, 
            int turnTime = 3000, bool setMaximums = False) -> ArActionIRs
        __init__(self, char name = "IRs", double backOffSpeed = 100, int backOffTime = 5000, 
            int turnTime = 3000) -> ArActionIRs
        __init__(self, char name = "IRs", double backOffSpeed = 100, int backOffTime = 5000) -> ArActionIRs
        __init__(self, char name = "IRs", double backOffSpeed = 100) -> ArActionIRs
        __init__(self, char name = "IRs") -> ArActionIRs
        __init__(self) -> ArActionIRs
        """
        this = _AriaPy.new_ArActionIRs(name, backOffSpeed, backOffTime, turnTime, setMaximums)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionIRs
    __del__ = lambda self : None;
    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArActionIRs_fire(self, *args)

    def setRobot(self, *args):
        """setRobot(self, ArRobot robot)"""
        return _AriaPy.ArActionIRs_setRobot(self, *args)

    def getDesired(self):
        """getDesired(self) -> ArActionDesired"""
        return _AriaPy.ArActionIRs_getDesired(self)

ArActionIRs_swigregister = _AriaPy.ArActionIRs_swigregister
ArActionIRs_swigregister(ArActionIRs)

class ArActionInput(ArAction):
    """Proxy of C++ ArActionInput class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, name = "Input"): 
        """
        __init__(self, char name = "Input") -> ArActionInput
        __init__(self) -> ArActionInput
        """
        this = _AriaPy.new_ArActionInput(name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionInput
    __del__ = lambda self : None;
    def setVel(self, *args):
        """setVel(self, double vel)"""
        return _AriaPy.ArActionInput_setVel(self, *args)

    def deltaHeadingFromCurrent(self, *args):
        """deltaHeadingFromCurrent(self, double delta)"""
        return _AriaPy.ArActionInput_deltaHeadingFromCurrent(self, *args)

    def setRotVel(self, *args):
        """setRotVel(self, double rotVel)"""
        return _AriaPy.ArActionInput_setRotVel(self, *args)

    def setHeading(self, *args):
        """setHeading(self, double heading)"""
        return _AriaPy.ArActionInput_setHeading(self, *args)

    def clear(self):
        """clear(self)"""
        return _AriaPy.ArActionInput_clear(self)

    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArActionInput_fire(self, *args)

    def getDesired(self):
        """getDesired(self) -> ArActionDesired"""
        return _AriaPy.ArActionInput_getDesired(self)

ArActionInput_swigregister = _AriaPy.ArActionInput_swigregister
ArActionInput_swigregister(ArActionInput)

class ArActionJoydrive(ArAction):
    """Proxy of C++ ArActionJoydrive class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, name = "joydrive", transVelMax = 400, turnAmountMax = 15, 
    stopIfNoButtonPressed = True, useOSCalForJoystick = True): 
        """
        __init__(self, char name = "joydrive", double transVelMax = 400, double turnAmountMax = 15, 
            bool stopIfNoButtonPressed = True, 
            bool useOSCalForJoystick = True) -> ArActionJoydrive
        __init__(self, char name = "joydrive", double transVelMax = 400, double turnAmountMax = 15, 
            bool stopIfNoButtonPressed = True) -> ArActionJoydrive
        __init__(self, char name = "joydrive", double transVelMax = 400, double turnAmountMax = 15) -> ArActionJoydrive
        __init__(self, char name = "joydrive", double transVelMax = 400) -> ArActionJoydrive
        __init__(self, char name = "joydrive") -> ArActionJoydrive
        __init__(self) -> ArActionJoydrive
        """
        this = _AriaPy.new_ArActionJoydrive(name, transVelMax, turnAmountMax, stopIfNoButtonPressed, 
    useOSCalForJoystick)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionJoydrive
    __del__ = lambda self : None;
    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArActionJoydrive_fire(self, *args)

    def joystickInited(self):
        """joystickInited(self) -> bool"""
        return _AriaPy.ArActionJoydrive_joystickInited(self)

    def setSpeeds(self, *args):
        """setSpeeds(self, double transVelMax, double turnAmountMax)"""
        return _AriaPy.ArActionJoydrive_setSpeeds(self, *args)

    def setStopIfNoButtonPressed(self, *args):
        """setStopIfNoButtonPressed(self, bool stopIfNoButtonPressed)"""
        return _AriaPy.ArActionJoydrive_setStopIfNoButtonPressed(self, *args)

    def getStopIfNoButtonPressed(self):
        """getStopIfNoButtonPressed(self) -> bool"""
        return _AriaPy.ArActionJoydrive_getStopIfNoButtonPressed(self)

    def setThrottleParams(self, *args):
        """setThrottleParams(self, double lowSpeed, double highSpeed)"""
        return _AriaPy.ArActionJoydrive_setThrottleParams(self, *args)

    def setUseOSCal(self, *args):
        """setUseOSCal(self, bool useOSCal)"""
        return _AriaPy.ArActionJoydrive_setUseOSCal(self, *args)

    def getUseOSCal(self):
        """getUseOSCal(self) -> bool"""
        return _AriaPy.ArActionJoydrive_getUseOSCal(self)

    def getJoyHandler(self):
        """getJoyHandler(self) -> ArJoyHandler"""
        return _AriaPy.ArActionJoydrive_getJoyHandler(self)

    def getDesired(self):
        """getDesired(self) -> ArActionDesired"""
        return _AriaPy.ArActionJoydrive_getDesired(self)

ArActionJoydrive_swigregister = _AriaPy.ArActionJoydrive_swigregister
ArActionJoydrive_swigregister(ArActionJoydrive)

class ArActionKeydrive(ArAction):
    """Proxy of C++ ArActionKeydrive class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, name = "keydrive", transVelMax = 400, turnAmountMax = 24, 
    velIncrement = 25, turnIncrement = 8): 
        """
        __init__(self, char name = "keydrive", double transVelMax = 400, double turnAmountMax = 24, 
            double velIncrement = 25, 
            double turnIncrement = 8) -> ArActionKeydrive
        __init__(self, char name = "keydrive", double transVelMax = 400, double turnAmountMax = 24, 
            double velIncrement = 25) -> ArActionKeydrive
        __init__(self, char name = "keydrive", double transVelMax = 400, double turnAmountMax = 24) -> ArActionKeydrive
        __init__(self, char name = "keydrive", double transVelMax = 400) -> ArActionKeydrive
        __init__(self, char name = "keydrive") -> ArActionKeydrive
        __init__(self) -> ArActionKeydrive
        """
        this = _AriaPy.new_ArActionKeydrive(name, transVelMax, turnAmountMax, velIncrement, turnIncrement)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionKeydrive
    __del__ = lambda self : None;
    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArActionKeydrive_fire(self, *args)

    def setSpeeds(self, *args):
        """setSpeeds(self, double transVelMax, double turnAmountMax)"""
        return _AriaPy.ArActionKeydrive_setSpeeds(self, *args)

    def setIncrements(self, *args):
        """setIncrements(self, double velIncrement, double turnIncrement)"""
        return _AriaPy.ArActionKeydrive_setIncrements(self, *args)

    def getDesired(self):
        """getDesired(self) -> ArActionDesired"""
        return _AriaPy.ArActionKeydrive_getDesired(self)

    def setRobot(self, *args):
        """setRobot(self, ArRobot robot)"""
        return _AriaPy.ArActionKeydrive_setRobot(self, *args)

    def activate(self):
        """activate(self)"""
        return _AriaPy.ArActionKeydrive_activate(self)

    def deactivate(self):
        """deactivate(self)"""
        return _AriaPy.ArActionKeydrive_deactivate(self)

    def takeKeys(self):
        """takeKeys(self)"""
        return _AriaPy.ArActionKeydrive_takeKeys(self)

    def giveUpKeys(self):
        """giveUpKeys(self)"""
        return _AriaPy.ArActionKeydrive_giveUpKeys(self)

    def up(self):
        """up(self)"""
        return _AriaPy.ArActionKeydrive_up(self)

    def down(self):
        """down(self)"""
        return _AriaPy.ArActionKeydrive_down(self)

    def left(self):
        """left(self)"""
        return _AriaPy.ArActionKeydrive_left(self)

    def right(self):
        """right(self)"""
        return _AriaPy.ArActionKeydrive_right(self)

    def space(self):
        """space(self)"""
        return _AriaPy.ArActionKeydrive_space(self)

ArActionKeydrive_swigregister = _AriaPy.ArActionKeydrive_swigregister
ArActionKeydrive_swigregister(ArActionKeydrive)

class ArActionLimiterBackwards(ArAction):
    """Proxy of C++ ArActionLimiterBackwards class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, char name = "speed limiter", double stopDistance = -250, 
            double slowDistance = -600, double maxBackwardsSpeed = -250, 
            double widthRatio = 1.5, 
            bool avoidLocationDependentObstacles = True) -> ArActionLimiterBackwards
        __init__(self, char name = "speed limiter", double stopDistance = -250, 
            double slowDistance = -600, double maxBackwardsSpeed = -250, 
            double widthRatio = 1.5) -> ArActionLimiterBackwards
        __init__(self, char name = "speed limiter", double stopDistance = -250, 
            double slowDistance = -600, double maxBackwardsSpeed = -250) -> ArActionLimiterBackwards
        __init__(self, char name = "speed limiter", double stopDistance = -250, 
            double slowDistance = -600) -> ArActionLimiterBackwards
        __init__(self, char name = "speed limiter", double stopDistance = -250) -> ArActionLimiterBackwards
        __init__(self, char name = "speed limiter") -> ArActionLimiterBackwards
        __init__(self) -> ArActionLimiterBackwards
        """
        this = _AriaPy.new_ArActionLimiterBackwards(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionLimiterBackwards
    __del__ = lambda self : None;
    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArActionLimiterBackwards_fire(self, *args)

    def getDesired(self):
        """getDesired(self) -> ArActionDesired"""
        return _AriaPy.ArActionLimiterBackwards_getDesired(self)

ArActionLimiterBackwards_swigregister = _AriaPy.ArActionLimiterBackwards_swigregister
ArActionLimiterBackwards_swigregister(ArActionLimiterBackwards)

class ArActionLimiterForwards(ArAction):
    """Proxy of C++ ArActionLimiterForwards class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, name = "speed limiter", stopDistance = 250, slowDistance = 1000, 
    slowSpeed = 200, widthRatio = 1): 
        """
        __init__(self, char name = "speed limiter", double stopDistance = 250, 
            double slowDistance = 1000, double slowSpeed = 200, 
            double widthRatio = 1) -> ArActionLimiterForwards
        __init__(self, char name = "speed limiter", double stopDistance = 250, 
            double slowDistance = 1000, double slowSpeed = 200) -> ArActionLimiterForwards
        __init__(self, char name = "speed limiter", double stopDistance = 250, 
            double slowDistance = 1000) -> ArActionLimiterForwards
        __init__(self, char name = "speed limiter", double stopDistance = 250) -> ArActionLimiterForwards
        __init__(self, char name = "speed limiter") -> ArActionLimiterForwards
        __init__(self) -> ArActionLimiterForwards
        """
        this = _AriaPy.new_ArActionLimiterForwards(name, stopDistance, slowDistance, slowSpeed, widthRatio)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionLimiterForwards
    __del__ = lambda self : None;
    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArActionLimiterForwards_fire(self, *args)

    def getDesired(self):
        """getDesired(self) -> ArActionDesired"""
        return _AriaPy.ArActionLimiterForwards_getDesired(self)

    def setParameters(self, stopDistance = 250, slowDistance = 1000, slowSpeed = 200, 
    widthRatio = 1):
        """
        setParameters(self, double stopDistance = 250, double slowDistance = 1000, 
            double slowSpeed = 200, double widthRatio = 1)
        setParameters(self, double stopDistance = 250, double slowDistance = 1000, 
            double slowSpeed = 200)
        setParameters(self, double stopDistance = 250, double slowDistance = 1000)
        setParameters(self, double stopDistance = 250)
        setParameters(self)
        """
        return _AriaPy.ArActionLimiterForwards_setParameters(self, stopDistance, slowDistance, slowSpeed, widthRatio)

ArActionLimiterForwards_swigregister = _AriaPy.ArActionLimiterForwards_swigregister
ArActionLimiterForwards_swigregister(ArActionLimiterForwards)

class ArActionLimiterTableSensor(ArAction):
    """Proxy of C++ ArActionLimiterTableSensor class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, name = "TableSensorLimiter"): 
        """
        __init__(self, char name = "TableSensorLimiter") -> ArActionLimiterTableSensor
        __init__(self) -> ArActionLimiterTableSensor
        """
        this = _AriaPy.new_ArActionLimiterTableSensor(name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionLimiterTableSensor
    __del__ = lambda self : None;
    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArActionLimiterTableSensor_fire(self, *args)

    def getDesired(self):
        """getDesired(self) -> ArActionDesired"""
        return _AriaPy.ArActionLimiterTableSensor_getDesired(self)

ArActionLimiterTableSensor_swigregister = _AriaPy.ArActionLimiterTableSensor_swigregister
ArActionLimiterTableSensor_swigregister(ArActionLimiterTableSensor)

class ArActionMovementParameters(ArAction):
    """Proxy of C++ ArActionMovementParameters class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, name = "MovementParameters", overrideFaster = True, 
    addLatVelIfAvailable = True): 
        """
        __init__(self, char name = "MovementParameters", bool overrideFaster = True, 
            bool addLatVelIfAvailable = True) -> ArActionMovementParameters
        __init__(self, char name = "MovementParameters", bool overrideFaster = True) -> ArActionMovementParameters
        __init__(self, char name = "MovementParameters") -> ArActionMovementParameters
        __init__(self) -> ArActionMovementParameters
        """
        this = _AriaPy.new_ArActionMovementParameters(name, overrideFaster, addLatVelIfAvailable)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionMovementParameters
    __del__ = lambda self : None;
    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArActionMovementParameters_fire(self, *args)

    def getDesired(self):
        """getDesired(self) -> ArActionDesired"""
        return _AriaPy.ArActionMovementParameters_getDesired(self)

    def isEnabled(self):
        """isEnabled(self) -> bool"""
        return _AriaPy.ArActionMovementParameters_isEnabled(self)

    def enable(self):
        """enable(self)"""
        return _AriaPy.ArActionMovementParameters_enable(self)

    def enableOnceFromSector(self, *args):
        """enableOnceFromSector(self, ArMapObject mapObject)"""
        return _AriaPy.ArActionMovementParameters_enableOnceFromSector(self, *args)

    def disable(self):
        """disable(self)"""
        return _AriaPy.ArActionMovementParameters_disable(self)

    def setParameters(self, maxVel = 0, maxNegVel = 0, transAccel = 0, transDecel = 0, 
    rotVelMax = 0, rotAccel = 0, rotDecel = 0, 
    latVelMax = 0, latAccel = 0, latDecel = 0):
        """
        setParameters(self, double maxVel = 0, double maxNegVel = 0, double transAccel = 0, 
            double transDecel = 0, double rotVelMax = 0, 
            double rotAccel = 0, double rotDecel = 0, 
            double latVelMax = 0, double latAccel = 0, 
            double latDecel = 0)
        setParameters(self, double maxVel = 0, double maxNegVel = 0, double transAccel = 0, 
            double transDecel = 0, double rotVelMax = 0, 
            double rotAccel = 0, double rotDecel = 0, 
            double latVelMax = 0, double latAccel = 0)
        setParameters(self, double maxVel = 0, double maxNegVel = 0, double transAccel = 0, 
            double transDecel = 0, double rotVelMax = 0, 
            double rotAccel = 0, double rotDecel = 0, 
            double latVelMax = 0)
        setParameters(self, double maxVel = 0, double maxNegVel = 0, double transAccel = 0, 
            double transDecel = 0, double rotVelMax = 0, 
            double rotAccel = 0, double rotDecel = 0)
        setParameters(self, double maxVel = 0, double maxNegVel = 0, double transAccel = 0, 
            double transDecel = 0, double rotVelMax = 0, 
            double rotAccel = 0)
        setParameters(self, double maxVel = 0, double maxNegVel = 0, double transAccel = 0, 
            double transDecel = 0, double rotVelMax = 0)
        setParameters(self, double maxVel = 0, double maxNegVel = 0, double transAccel = 0, 
            double transDecel = 0)
        setParameters(self, double maxVel = 0, double maxNegVel = 0, double transAccel = 0)
        setParameters(self, double maxVel = 0, double maxNegVel = 0)
        setParameters(self, double maxVel = 0)
        setParameters(self)
        """
        return _AriaPy.ArActionMovementParameters_setParameters(self, maxVel, maxNegVel, transAccel, transDecel, rotVelMax, 
    rotAccel, rotDecel, latVelMax, latAccel, latDecel)

    def addToConfig(self, *args):
        """
        addToConfig(self, ArConfig config, char section, char prefix = None)
        addToConfig(self, ArConfig config, char section)
        """
        return _AriaPy.ArActionMovementParameters_addToConfig(self, *args)

ArActionMovementParameters_swigregister = _AriaPy.ArActionMovementParameters_swigregister
ArActionMovementParameters_swigregister(ArActionMovementParameters)

class ArActionRatioInput(ArAction):
    """Proxy of C++ ArActionRatioInput class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, name = "RatioInput"): 
        """
        __init__(self, char name = "RatioInput") -> ArActionRatioInput
        __init__(self) -> ArActionRatioInput
        """
        this = _AriaPy.new_ArActionRatioInput(name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionRatioInput
    __del__ = lambda self : None;
    def setRatios(self, *args):
        """
        setRatios(self, double transRatio, double rotRatio, double throttleRatio, 
            double latRatio = 0)
        setRatios(self, double transRatio, double rotRatio, double throttleRatio)
        """
        return _AriaPy.ArActionRatioInput_setRatios(self, *args)

    def setTransRatio(self, *args):
        """setTransRatio(self, double transRatio)"""
        return _AriaPy.ArActionRatioInput_setTransRatio(self, *args)

    def setRotRatio(self, *args):
        """setRotRatio(self, double rotRatio)"""
        return _AriaPy.ArActionRatioInput_setRotRatio(self, *args)

    def setLatRatio(self, *args):
        """setLatRatio(self, double latRatio)"""
        return _AriaPy.ArActionRatioInput_setLatRatio(self, *args)

    def setThrottleRatio(self, *args):
        """setThrottleRatio(self, double throttleRatio)"""
        return _AriaPy.ArActionRatioInput_setThrottleRatio(self, *args)

    def getTransRatio(self):
        """getTransRatio(self) -> double"""
        return _AriaPy.ArActionRatioInput_getTransRatio(self)

    def getRotRatio(self):
        """getRotRatio(self) -> double"""
        return _AriaPy.ArActionRatioInput_getRotRatio(self)

    def getThrottleRatio(self):
        """getThrottleRatio(self) -> double"""
        return _AriaPy.ArActionRatioInput_getThrottleRatio(self)

    def addFireCallback(self, *args):
        """addFireCallback(self, int priority, ArFunctor functor)"""
        return _AriaPy.ArActionRatioInput_addFireCallback(self, *args)

    def remFireCallback(self, *args):
        """remFireCallback(self, ArFunctor functor)"""
        return _AriaPy.ArActionRatioInput_remFireCallback(self, *args)

    def addActivateCallback(self, *args):
        """
        addActivateCallback(self, ArFunctor functor, Pos position = LAST)
        addActivateCallback(self, ArFunctor functor)
        """
        return _AriaPy.ArActionRatioInput_addActivateCallback(self, *args)

    def remActivateCallback(self, *args):
        """remActivateCallback(self, ArFunctor functor)"""
        return _AriaPy.ArActionRatioInput_remActivateCallback(self, *args)

    def addDeactivateCallback(self, *args):
        """
        addDeactivateCallback(self, ArFunctor functor, Pos position = LAST)
        addDeactivateCallback(self, ArFunctor functor)
        """
        return _AriaPy.ArActionRatioInput_addDeactivateCallback(self, *args)

    def remDeactivateCallback(self, *args):
        """remDeactivateCallback(self, ArFunctor functor)"""
        return _AriaPy.ArActionRatioInput_remDeactivateCallback(self, *args)

    def setParameters(self, *args):
        """
        setParameters(self, double fullThrottleForwards, double fullThrottleBackwards, 
            double rotAtFullForwards, double rotAtFullBackwards, 
            double rotAtStopped, double latAtFullForwards = 0, 
            double latAtFullBackwards = 0, 
            double latAtStopped = 0)
        setParameters(self, double fullThrottleForwards, double fullThrottleBackwards, 
            double rotAtFullForwards, double rotAtFullBackwards, 
            double rotAtStopped, double latAtFullForwards = 0, 
            double latAtFullBackwards = 0)
        setParameters(self, double fullThrottleForwards, double fullThrottleBackwards, 
            double rotAtFullForwards, double rotAtFullBackwards, 
            double rotAtStopped, double latAtFullForwards = 0)
        setParameters(self, double fullThrottleForwards, double fullThrottleBackwards, 
            double rotAtFullForwards, double rotAtFullBackwards, 
            double rotAtStopped)
        """
        return _AriaPy.ArActionRatioInput_setParameters(self, *args)

    def addToConfig(self, *args):
        """addToConfig(self, ArConfig config, char section)"""
        return _AriaPy.ArActionRatioInput_addToConfig(self, *args)

    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArActionRatioInput_fire(self, *args)

    def getDesired(self):
        """getDesired(self) -> ArActionDesired"""
        return _AriaPy.ArActionRatioInput_getDesired(self)

    def activate(self):
        """activate(self)"""
        return _AriaPy.ArActionRatioInput_activate(self)

    def deactivate(self):
        """deactivate(self)"""
        return _AriaPy.ArActionRatioInput_deactivate(self)

ArActionRatioInput_swigregister = _AriaPy.ArActionRatioInput_swigregister
ArActionRatioInput_swigregister(ArActionRatioInput)

class ArActionRobotJoydrive(ArAction):
    """Proxy of C++ ArActionRobotJoydrive class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, name = "robotJoyDrive", requireDeadmanPushed = True): 
        """
        __init__(self, char name = "robotJoyDrive", bool requireDeadmanPushed = True) -> ArActionRobotJoydrive
        __init__(self, char name = "robotJoyDrive") -> ArActionRobotJoydrive
        __init__(self) -> ArActionRobotJoydrive
        """
        this = _AriaPy.new_ArActionRobotJoydrive(name, requireDeadmanPushed)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionRobotJoydrive
    __del__ = lambda self : None;
    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArActionRobotJoydrive_fire(self, *args)

    def getDesired(self):
        """getDesired(self) -> ArActionDesired"""
        return _AriaPy.ArActionRobotJoydrive_getDesired(self)

    def setRobot(self, *args):
        """setRobot(self, ArRobot robot)"""
        return _AriaPy.ArActionRobotJoydrive_setRobot(self, *args)

ArActionRobotJoydrive_swigregister = _AriaPy.ArActionRobotJoydrive_swigregister
ArActionRobotJoydrive_swigregister(ArActionRobotJoydrive)

class ArActionStallRecover(ArAction):
    """Proxy of C++ ArActionStallRecover class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, name = "stall recover", obstacleDistance = 225, cyclesToMove = 50, 
    speed = 150, degreesToTurn = 45, 
    enabled = True): 
        """
        __init__(self, char name = "stall recover", double obstacleDistance = 225, 
            int cyclesToMove = 50, double speed = 150, 
            double degreesToTurn = 45, bool enabled = True) -> ArActionStallRecover
        __init__(self, char name = "stall recover", double obstacleDistance = 225, 
            int cyclesToMove = 50, double speed = 150, 
            double degreesToTurn = 45) -> ArActionStallRecover
        __init__(self, char name = "stall recover", double obstacleDistance = 225, 
            int cyclesToMove = 50, double speed = 150) -> ArActionStallRecover
        __init__(self, char name = "stall recover", double obstacleDistance = 225, 
            int cyclesToMove = 50) -> ArActionStallRecover
        __init__(self, char name = "stall recover", double obstacleDistance = 225) -> ArActionStallRecover
        __init__(self, char name = "stall recover") -> ArActionStallRecover
        __init__(self) -> ArActionStallRecover
        """
        this = _AriaPy.new_ArActionStallRecover(name, obstacleDistance, cyclesToMove, speed, degreesToTurn, 
    enabled)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionStallRecover
    __del__ = lambda self : None;
    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArActionStallRecover_fire(self, *args)

    def getDesired(self):
        """getDesired(self) -> ArActionDesired"""
        return _AriaPy.ArActionStallRecover_getDesired(self)

    def addToConfig(self, *args):
        """
        addToConfig(self, ArConfig config, char sectionName, Priority priority = NORMAL)
        addToConfig(self, ArConfig config, char sectionName)
        """
        return _AriaPy.ArActionStallRecover_addToConfig(self, *args)

    def activate(self):
        """activate(self)"""
        return _AriaPy.ArActionStallRecover_activate(self)

ArActionStallRecover_swigregister = _AriaPy.ArActionStallRecover_swigregister
ArActionStallRecover_swigregister(ArActionStallRecover)

class ArActionStop(ArAction):
    """Proxy of C++ ArActionStop class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, name = "stop"): 
        """
        __init__(self, char name = "stop") -> ArActionStop
        __init__(self) -> ArActionStop
        """
        this = _AriaPy.new_ArActionStop(name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionStop
    __del__ = lambda self : None;
    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArActionStop_fire(self, *args)

    def getDesired(self):
        """getDesired(self) -> ArActionDesired"""
        return _AriaPy.ArActionStop_getDesired(self)

ArActionStop_swigregister = _AriaPy.ArActionStop_swigregister
ArActionStop_swigregister(ArActionStop)

class ArActionTriangleDriveTo(ArAction):
    """Proxy of C++ ArActionTriangleDriveTo class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, name = "triangleDriveTo", finalDistFromVertex = 400, 
    approachDistFromVertex = 1000, speed = 200, 
    closeDist = 100, acquireTurnSpeed = 30): 
        """
        __init__(self, char name = "triangleDriveTo", double finalDistFromVertex = 400, 
            double approachDistFromVertex = 1000, 
            double speed = 200, double closeDist = 100, 
            double acquireTurnSpeed = 30) -> ArActionTriangleDriveTo
        __init__(self, char name = "triangleDriveTo", double finalDistFromVertex = 400, 
            double approachDistFromVertex = 1000, 
            double speed = 200, double closeDist = 100) -> ArActionTriangleDriveTo
        __init__(self, char name = "triangleDriveTo", double finalDistFromVertex = 400, 
            double approachDistFromVertex = 1000, 
            double speed = 200) -> ArActionTriangleDriveTo
        __init__(self, char name = "triangleDriveTo", double finalDistFromVertex = 400, 
            double approachDistFromVertex = 1000) -> ArActionTriangleDriveTo
        __init__(self, char name = "triangleDriveTo", double finalDistFromVertex = 400) -> ArActionTriangleDriveTo
        __init__(self, char name = "triangleDriveTo") -> ArActionTriangleDriveTo
        __init__(self) -> ArActionTriangleDriveTo
        """
        this = _AriaPy.new_ArActionTriangleDriveTo(name, finalDistFromVertex, approachDistFromVertex, 
    speed, closeDist, acquireTurnSpeed)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionTriangleDriveTo
    __del__ = lambda self : None;
    def setAcquire(self, acquire = False):
        """
        setAcquire(self, bool acquire = False)
        setAcquire(self)
        """
        return _AriaPy.ArActionTriangleDriveTo_setAcquire(self, acquire)

    def getAcquire(self):
        """getAcquire(self) -> bool"""
        return _AriaPy.ArActionTriangleDriveTo_getAcquire(self)

    def setFinalDistFromVertex(self, *args):
        """setFinalDistFromVertex(self, double dist)"""
        return _AriaPy.ArActionTriangleDriveTo_setFinalDistFromVertex(self, *args)

    def getFinalDistFromVertex(self):
        """getFinalDistFromVertex(self) -> double"""
        return _AriaPy.ArActionTriangleDriveTo_getFinalDistFromVertex(self)

    def setTriangleParams(self, line1Length = 254, angleBetween = 135, line2Length = 254):
        """
        setTriangleParams(self, double line1Length = 254, double angleBetween = 135, 
            double line2Length = 254)
        setTriangleParams(self, double line1Length = 254, double angleBetween = 135)
        setTriangleParams(self, double line1Length = 254)
        setTriangleParams(self)
        """
        return _AriaPy.ArActionTriangleDriveTo_setTriangleParams(self, line1Length, angleBetween, line2Length)

    def setParameters(self, finalDistFromVertex = 400, approachDistFromVertex = 1000, 
    speed = 200, closeDist = 100, acquireTurnSpeed = 30):
        """
        setParameters(self, double finalDistFromVertex = 400, double approachDistFromVertex = 1000, 
            double speed = 200, double closeDist = 100, 
            double acquireTurnSpeed = 30)
        setParameters(self, double finalDistFromVertex = 400, double approachDistFromVertex = 1000, 
            double speed = 200, double closeDist = 100)
        setParameters(self, double finalDistFromVertex = 400, double approachDistFromVertex = 1000, 
            double speed = 200)
        setParameters(self, double finalDistFromVertex = 400, double approachDistFromVertex = 1000)
        setParameters(self, double finalDistFromVertex = 400)
        setParameters(self)
        """
        return _AriaPy.ArActionTriangleDriveTo_setParameters(self, finalDistFromVertex, approachDistFromVertex, speed, 
    closeDist, acquireTurnSpeed)

    def getAdjustVertex(self):
        """getAdjustVertex(self) -> bool"""
        return _AriaPy.ArActionTriangleDriveTo_getAdjustVertex(self)

    def setAdjustVertex(self, *args):
        """setAdjustVertex(self, bool adjustVertex)"""
        return _AriaPy.ArActionTriangleDriveTo_setAdjustVertex(self, *args)

    def setVertexOffset(self, *args):
        """setVertexOffset(self, int localXOffset, int localYOffset, double thOffset)"""
        return _AriaPy.ArActionTriangleDriveTo_setVertexOffset(self, *args)

    def setUseLegacyVertexOffset(self, *args):
        """setUseLegacyVertexOffset(self, bool useLegacyVertexOffset)"""
        return _AriaPy.ArActionTriangleDriveTo_setUseLegacyVertexOffset(self, *args)

    def getUseLegacyVertexOffset(self):
        """getUseLegacyVertexOffset(self) -> bool"""
        return _AriaPy.ArActionTriangleDriveTo_getUseLegacyVertexOffset(self)

    def getGotoVertex(self):
        """getGotoVertex(self) -> bool"""
        return _AriaPy.ArActionTriangleDriveTo_getGotoVertex(self)

    def setGotoVertex(self, *args):
        """setGotoVertex(self, bool gotoVertex)"""
        return _AriaPy.ArActionTriangleDriveTo_setGotoVertex(self, *args)

    def setIgnoreTriangleDist(self, dist = 250, useIgnoreInGotoVertexMode = False):
        """
        setIgnoreTriangleDist(self, double dist = 250, bool useIgnoreInGotoVertexMode = False)
        setIgnoreTriangleDist(self, double dist = 250)
        setIgnoreTriangleDist(self)
        """
        return _AriaPy.ArActionTriangleDriveTo_setIgnoreTriangleDist(self, dist, useIgnoreInGotoVertexMode)

    def getIgnoreTriangleDist(self):
        """getIgnoreTriangleDist(self) -> double"""
        return _AriaPy.ArActionTriangleDriveTo_getIgnoreTriangleDist(self)

    def getUseIgnoreInGotoVertexMode(self):
        """getUseIgnoreInGotoVertexMode(self) -> bool"""
        return _AriaPy.ArActionTriangleDriveTo_getUseIgnoreInGotoVertexMode(self)

    def setVertexUnseenStopMSecs(self, vertexUnseenStopMSecs = 4000):
        """
        setVertexUnseenStopMSecs(self, int vertexUnseenStopMSecs = 4000)
        setVertexUnseenStopMSecs(self)
        """
        return _AriaPy.ArActionTriangleDriveTo_setVertexUnseenStopMSecs(self, vertexUnseenStopMSecs)

    def getVertexUnseenStopMSecs(self):
        """getVertexUnseenStopMSecs(self) -> int"""
        return _AriaPy.ArActionTriangleDriveTo_getVertexUnseenStopMSecs(self)

    def setMaxDistBetweenLinePoints(self, maxDistBetweenLinePoints = 0):
        """
        setMaxDistBetweenLinePoints(self, int maxDistBetweenLinePoints = 0)
        setMaxDistBetweenLinePoints(self)
        """
        return _AriaPy.ArActionTriangleDriveTo_setMaxDistBetweenLinePoints(self, maxDistBetweenLinePoints)

    def setMaxLateralDist(self, maxLateralDist = 0):
        """
        setMaxLateralDist(self, int maxLateralDist = 0)
        setMaxLateralDist(self)
        """
        return _AriaPy.ArActionTriangleDriveTo_setMaxLateralDist(self, maxLateralDist)

    def setMaxAngleMisalignment(self, maxAngleMisalignment = 0):
        """
        setMaxAngleMisalignment(self, int maxAngleMisalignment = 0)
        setMaxAngleMisalignment(self)
        """
        return _AriaPy.ArActionTriangleDriveTo_setMaxAngleMisalignment(self, maxAngleMisalignment)

    STATE_INACTIVE = _AriaPy.ArActionTriangleDriveTo_STATE_INACTIVE
    STATE_ACQUIRE = _AriaPy.ArActionTriangleDriveTo_STATE_ACQUIRE
    STATE_SEARCHING = _AriaPy.ArActionTriangleDriveTo_STATE_SEARCHING
    STATE_GOTO_APPROACH = _AriaPy.ArActionTriangleDriveTo_STATE_GOTO_APPROACH
    STATE_ALIGN_APPROACH = _AriaPy.ArActionTriangleDriveTo_STATE_ALIGN_APPROACH
    STATE_GOTO_VERTEX = _AriaPy.ArActionTriangleDriveTo_STATE_GOTO_VERTEX
    STATE_GOTO_FINAL = _AriaPy.ArActionTriangleDriveTo_STATE_GOTO_FINAL
    STATE_ALIGN_FINAL = _AriaPy.ArActionTriangleDriveTo_STATE_ALIGN_FINAL
    STATE_SUCCEEDED = _AriaPy.ArActionTriangleDriveTo_STATE_SUCCEEDED
    STATE_FAILED = _AriaPy.ArActionTriangleDriveTo_STATE_FAILED
    def getState(self):
        """getState(self) -> State"""
        return _AriaPy.ArActionTriangleDriveTo_getState(self)

    def getVertexSeen(self):
        """getVertexSeen(self) -> bool"""
        return _AriaPy.ArActionTriangleDriveTo_getVertexSeen(self)

    def setLineFinder(self, *args):
        """setLineFinder(self, ArLineFinder lineFinder)"""
        return _AriaPy.ArActionTriangleDriveTo_setLineFinder(self, *args)

    def getLineFinder(self):
        """getLineFinder(self) -> ArLineFinder"""
        return _AriaPy.ArActionTriangleDriveTo_getLineFinder(self)

    def setLogging(self, *args):
        """
        setLogging(self, bool logging)
        setLogging(self) -> bool
        """
        return _AriaPy.ArActionTriangleDriveTo_setLogging(self, *args)

    def activate(self):
        """activate(self)"""
        return _AriaPy.ArActionTriangleDriveTo_activate(self)

    def deactivate(self):
        """deactivate(self)"""
        return _AriaPy.ArActionTriangleDriveTo_deactivate(self)

    def setRobot(self, *args):
        """setRobot(self, ArRobot robot)"""
        return _AriaPy.ArActionTriangleDriveTo_setRobot(self, *args)

    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArActionTriangleDriveTo_fire(self, *args)

    def getDesired(self):
        """getDesired(self) -> ArActionDesired"""
        return _AriaPy.ArActionTriangleDriveTo_getDesired(self)

ArActionTriangleDriveTo_swigregister = _AriaPy.ArActionTriangleDriveTo_swigregister
ArActionTriangleDriveTo_swigregister(ArActionTriangleDriveTo)

class ArActionTurn(ArAction):
    """Proxy of C++ ArActionTurn class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, name = "turn", speedStartTurn = 200, speedFullTurn = 100, 
    turnAmount = 15): 
        """
        __init__(self, char name = "turn", double speedStartTurn = 200, double speedFullTurn = 100, 
            double turnAmount = 15) -> ArActionTurn
        __init__(self, char name = "turn", double speedStartTurn = 200, double speedFullTurn = 100) -> ArActionTurn
        __init__(self, char name = "turn", double speedStartTurn = 200) -> ArActionTurn
        __init__(self, char name = "turn") -> ArActionTurn
        __init__(self) -> ArActionTurn
        """
        this = _AriaPy.new_ArActionTurn(name, speedStartTurn, speedFullTurn, turnAmount)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArActionTurn
    __del__ = lambda self : None;
    def fire(self, *args):
        """fire(self, ArActionDesired currentDesired) -> ArActionDesired"""
        return _AriaPy.ArActionTurn_fire(self, *args)

    def getDesired(self):
        """getDesired(self) -> ArActionDesired"""
        return _AriaPy.ArActionTurn_getDesired(self)

ArActionTurn_swigregister = _AriaPy.ArActionTurn_swigregister
ArActionTurn_swigregister(ArActionTurn)

class ArAnalogGyro(object):
    """Proxy of C++ ArAnalogGyro class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot) -> ArAnalogGyro"""
        this = _AriaPy.new_ArAnalogGyro(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArAnalogGyro
    __del__ = lambda self : None;
    def isActive(self):
        """isActive(self) -> bool"""
        return _AriaPy.ArAnalogGyro_isActive(self)

    def activate(self):
        """activate(self)"""
        return _AriaPy.ArAnalogGyro_activate(self)

    def deactivate(self):
        """deactivate(self)"""
        return _AriaPy.ArAnalogGyro_deactivate(self)

    def hasGyroOnlyMode(self):
        """hasGyroOnlyMode(self) -> bool"""
        return _AriaPy.ArAnalogGyro_hasGyroOnlyMode(self)

    def isGyroOnlyActive(self):
        """isGyroOnlyActive(self) -> bool"""
        return _AriaPy.ArAnalogGyro_isGyroOnlyActive(self)

    def activateGyroOnly(self):
        """activateGyroOnly(self)"""
        return _AriaPy.ArAnalogGyro_activateGyroOnly(self)

    def hasNoInternalData(self):
        """hasNoInternalData(self) -> bool"""
        return _AriaPy.ArAnalogGyro_hasNoInternalData(self)

    def haveGottenData(self):
        """haveGottenData(self) -> bool"""
        return _AriaPy.ArAnalogGyro_haveGottenData(self)

    def getHeading(self):
        """getHeading(self) -> double"""
        return _AriaPy.ArAnalogGyro_getHeading(self)

    def getTemperature(self):
        """getTemperature(self) -> int"""
        return _AriaPy.ArAnalogGyro_getTemperature(self)

    def setFilterModel(self, *args):
        """
        setFilterModel(self, double gyroSigma, double inertialVar, double rotVar, 
            double transVar)
        """
        return _AriaPy.ArAnalogGyro_setFilterModel(self, *args)

    def getPacCount(self):
        """getPacCount(self) -> int"""
        return _AriaPy.ArAnalogGyro_getPacCount(self)

    def getAverage(self):
        """getAverage(self) -> double"""
        return _AriaPy.ArAnalogGyro_getAverage(self)

    def getAverageTaken(self):
        """getAverageTaken(self) -> ArTime"""
        return _AriaPy.ArAnalogGyro_getAverageTaken(self)

    def getScalingFactor(self):
        """getScalingFactor(self) -> double"""
        return _AriaPy.ArAnalogGyro_getScalingFactor(self)

    def setScalingFactor(self, *args):
        """setScalingFactor(self, double factor)"""
        return _AriaPy.ArAnalogGyro_setScalingFactor(self, *args)

    def handleGyroPacket(self, *args):
        """handleGyroPacket(self, ArRobotPacket packet) -> bool"""
        return _AriaPy.ArAnalogGyro_handleGyroPacket(self, *args)

    def encoderCorrect(self, *args):
        """encoderCorrect(self, ArPoseWithTime deltaPose) -> double"""
        return _AriaPy.ArAnalogGyro_encoderCorrect(self, *args)

    def stabilizingCallback(self):
        """stabilizingCallback(self)"""
        return _AriaPy.ArAnalogGyro_stabilizingCallback(self)

    def userTaskCallback(self):
        """userTaskCallback(self)"""
        return _AriaPy.ArAnalogGyro_userTaskCallback(self)

    def setLogAnomalies(self, *args):
        """setLogAnomalies(self, bool logAnomalies)"""
        return _AriaPy.ArAnalogGyro_setLogAnomalies(self, *args)

ArAnalogGyro_swigregister = _AriaPy.ArAnalogGyro_swigregister
ArAnalogGyro_swigregister(ArAnalogGyro)

class ArArg(object):
    """Proxy of C++ ArArg class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    INVALID = _AriaPy.ArArg_INVALID
    INT = _AriaPy.ArArg_INT
    DOUBLE = _AriaPy.ArArg_DOUBLE
    STRING = _AriaPy.ArArg_STRING
    BOOL = _AriaPy.ArArg_BOOL
    POSE = _AriaPy.ArArg_POSE
    FUNCTOR = _AriaPy.ArArg_FUNCTOR
    DESCRIPTION_HOLDER = _AriaPy.ArArg_DESCRIPTION_HOLDER
    LAST_TYPE = _AriaPy.ArArg_LAST_TYPE
    TYPE_COUNT = _AriaPy.ArArg_TYPE_COUNT
    def __init__(self, *args): 
        """
        __init__(self) -> ArArg
        __init__(self, char name, int pointer, char description = "", int minInt = INT_MIN, 
            int maxInt = INT_MAX) -> ArArg
        __init__(self, char name, int pointer, char description = "", int minInt = INT_MIN) -> ArArg
        __init__(self, char name, int pointer, char description = "") -> ArArg
        __init__(self, char name, int pointer) -> ArArg
        __init__(self, char name, double pointer, char description = "", double minDouble = -HUGE_VAL, 
            double maxDouble = HUGE_VAL) -> ArArg
        __init__(self, char name, double pointer, char description = "", double minDouble = -HUGE_VAL) -> ArArg
        __init__(self, char name, double pointer, char description = "") -> ArArg
        __init__(self, char name, double pointer) -> ArArg
        __init__(self, char name, bool pointer, char description = "") -> ArArg
        __init__(self, char name, bool pointer) -> ArArg
        __init__(self, char name, ArPose pointer, char description = "") -> ArArg
        __init__(self, char name, ArPose pointer) -> ArArg
        __init__(self, char name, char pointer, char description, size_t maxStrLen) -> ArArg
        __init__(self, char name, ArRetFunctor1_Bool_ArgumentBuilderP setFunctor, 
            ArRetFunctor<(p.q(const).std::list<(p.ArArgumentBuilder,std::allocator<(p.ArArgumentBuilder)>)>)> getFunctor, 
            char description) -> ArArg
        __init__(self, char description) -> ArArg
        __init__(self, ArArg arg) -> ArArg
        """
        this = _AriaPy.new_ArArg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArArg
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> Type"""
        return _AriaPy.ArArg_getType(self)

    def getName(self):
        """getName(self) -> char"""
        return _AriaPy.ArArg_getName(self)

    def getDescription(self):
        """getDescription(self) -> char"""
        return _AriaPy.ArArg_getDescription(self)

    def setInt(self, *args):
        """setInt(self, int val) -> bool"""
        return _AriaPy.ArArg_setInt(self, *args)

    def setDouble(self, *args):
        """setDouble(self, double val) -> bool"""
        return _AriaPy.ArArg_setDouble(self, *args)

    def setBool(self, *args):
        """setBool(self, bool val) -> bool"""
        return _AriaPy.ArArg_setBool(self, *args)

    def setPose(self, *args):
        """setPose(self, ArPose pose) -> bool"""
        return _AriaPy.ArArg_setPose(self, *args)

    def setString(self, *args):
        """setString(self, char str) -> bool"""
        return _AriaPy.ArArg_setString(self, *args)

    def setArgWithFunctor(self, *args):
        """setArgWithFunctor(self, ArArgumentBuilder argument) -> bool"""
        return _AriaPy.ArArg_setArgWithFunctor(self, *args)

    def getInt(self):
        """getInt(self) -> int"""
        return _AriaPy.ArArg_getInt(self)

    def getDouble(self):
        """getDouble(self) -> double"""
        return _AriaPy.ArArg_getDouble(self)

    def getBool(self):
        """getBool(self) -> bool"""
        return _AriaPy.ArArg_getBool(self)

    def getPose(self):
        """getPose(self) -> ArPose"""
        return _AriaPy.ArArg_getPose(self)

    def getString(self):
        """getString(self) -> char"""
        return _AriaPy.ArArg_getString(self)

    def getArgsWithFunctor(self):
        """getArgsWithFunctor(self) -> ArArgumentBuilderPtrList"""
        return _AriaPy.ArArg_getArgsWithFunctor(self)

    def log(self):
        """log(self)"""
        return _AriaPy.ArArg_log(self)

    def getMinInt(self):
        """getMinInt(self) -> int"""
        return _AriaPy.ArArg_getMinInt(self)

    def getMaxInt(self):
        """getMaxInt(self) -> int"""
        return _AriaPy.ArArg_getMaxInt(self)

    def getMinDouble(self):
        """getMinDouble(self) -> double"""
        return _AriaPy.ArArg_getMinDouble(self)

    def getMaxDouble(self):
        """getMaxDouble(self) -> double"""
        return _AriaPy.ArArg_getMaxDouble(self)

    def getConfigPrioritySet(self):
        """getConfigPrioritySet(self) -> bool"""
        return _AriaPy.ArArg_getConfigPrioritySet(self)

    def getConfigPriority(self):
        """getConfigPriority(self) -> Priority"""
        return _AriaPy.ArArg_getConfigPriority(self)

    def setConfigPriority(self, *args):
        """setConfigPriority(self, Priority priority)"""
        return _AriaPy.ArArg_setConfigPriority(self, *args)

ArArg_swigregister = _AriaPy.ArArg_swigregister
ArArg_swigregister(ArArg)

class ArArgumentBuilder(object):
    """Proxy of C++ ArArgumentBuilder class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size_t argvLen = 512, char extraSpaceChar = '\0', bool ignoreNormalSpaces = False, 
            bool isPreCompressQuotes = False) -> ArArgumentBuilder
        __init__(self, size_t argvLen = 512, char extraSpaceChar = '\0', bool ignoreNormalSpaces = False) -> ArArgumentBuilder
        __init__(self, size_t argvLen = 512, char extraSpaceChar = '\0') -> ArArgumentBuilder
        __init__(self, size_t argvLen = 512) -> ArArgumentBuilder
        __init__(self) -> ArArgumentBuilder
        __init__(self, ArArgumentBuilder builder) -> ArArgumentBuilder
        """
        this = _AriaPy.new_ArArgumentBuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArArgumentBuilder
    __del__ = lambda self : None;
    def addPlain(self, *args):
        """
        addPlain(self, char str, int position = -1)
        addPlain(self, char str)
        """
        return _AriaPy.ArArgumentBuilder_addPlain(self, *args)

    def addPlainAsIs(self, *args):
        """
        addPlainAsIs(self, char str, int position = -1)
        addPlainAsIs(self, char str)
        """
        return _AriaPy.ArArgumentBuilder_addPlainAsIs(self, *args)

    def addStrings(self, *args):
        """
        addStrings(self, char argv, int argc, int position = -1)
        addStrings(self, char argv, int argc)
        addStrings(self, int argc, char argv, int position = -1)
        addStrings(self, int argc, char argv)
        """
        return _AriaPy.ArArgumentBuilder_addStrings(self, *args)

    def addStringsAsIs(self, *args):
        """
        addStringsAsIs(self, int argc, char argv, int position = -1)
        addStringsAsIs(self, int argc, char argv)
        """
        return _AriaPy.ArArgumentBuilder_addStringsAsIs(self, *args)

    def getFullString(self):
        """getFullString(self) -> char"""
        return _AriaPy.ArArgumentBuilder_getFullString(self)

    def setFullString(self, *args):
        """setFullString(self, char str)"""
        return _AriaPy.ArArgumentBuilder_setFullString(self, *args)

    def getExtraString(self):
        """getExtraString(self) -> char"""
        return _AriaPy.ArArgumentBuilder_getExtraString(self)

    def setExtraString(self, *args):
        """setExtraString(self, char str)"""
        return _AriaPy.ArArgumentBuilder_setExtraString(self, *args)

    def log(self):
        """log(self)"""
        return _AriaPy.ArArgumentBuilder_log(self)

    def getArgc(self):
        """getArgc(self) -> size_t"""
        return _AriaPy.ArArgumentBuilder_getArgc(self)

    def getArgv(self):
        """getArgv(self) -> char"""
        return _AriaPy.ArArgumentBuilder_getArgv(self)

    def getArg(self, *args):
        """getArg(self, size_t whichArg) -> char"""
        return _AriaPy.ArArgumentBuilder_getArg(self, *args)

    def isArgBool(self, *args):
        """isArgBool(self, size_t whichArg) -> bool"""
        return _AriaPy.ArArgumentBuilder_isArgBool(self, *args)

    def getArgBool(self, *args):
        """
        getArgBool(self, size_t whichArg, bool ok = None) -> bool
        getArgBool(self, size_t whichArg) -> bool
        """
        return _AriaPy.ArArgumentBuilder_getArgBool(self, *args)

    def isArgInt(self, *args):
        """
        isArgInt(self, size_t whichArg, bool forceHex = False) -> bool
        isArgInt(self, size_t whichArg) -> bool
        """
        return _AriaPy.ArArgumentBuilder_isArgInt(self, *args)

    def getArgInt(self, *args):
        """
        getArgInt(self, size_t whichArg, bool ok = None, bool forceHex = False) -> int
        getArgInt(self, size_t whichArg, bool ok = None) -> int
        getArgInt(self, size_t whichArg) -> int
        """
        return _AriaPy.ArArgumentBuilder_getArgInt(self, *args)

    def isArgLongLongInt(self, *args):
        """isArgLongLongInt(self, size_t whichArg) -> bool"""
        return _AriaPy.ArArgumentBuilder_isArgLongLongInt(self, *args)

    def getArgLongLongInt(self, *args):
        """
        getArgLongLongInt(self, size_t whichArg, bool ok = None) -> int
        getArgLongLongInt(self, size_t whichArg) -> int
        """
        return _AriaPy.ArArgumentBuilder_getArgLongLongInt(self, *args)

    def isArgDouble(self, *args):
        """isArgDouble(self, size_t whichArg) -> bool"""
        return _AriaPy.ArArgumentBuilder_isArgDouble(self, *args)

    def getArgDouble(self, *args):
        """
        getArgDouble(self, size_t whichArg, bool ok = None) -> double
        getArgDouble(self, size_t whichArg) -> double
        """
        return _AriaPy.ArArgumentBuilder_getArgDouble(self, *args)

    def removeArg(self, *args):
        """
        removeArg(self, size_t which, bool isRebuildFullString = False)
        removeArg(self, size_t which)
        """
        return _AriaPy.ArArgumentBuilder_removeArg(self, *args)

    def compressQuoted(self, stripQuotationMarks = False):
        """
        compressQuoted(self, bool stripQuotationMarks = False)
        compressQuoted(self)
        """
        return _AriaPy.ArArgumentBuilder_compressQuoted(self, stripQuotationMarks)

    def setQuiet(self, *args):
        """setQuiet(self, bool isQuiet)"""
        return _AriaPy.ArArgumentBuilder_setQuiet(self, *args)

ArArgumentBuilder_swigregister = _AriaPy.ArArgumentBuilder_swigregister
ArArgumentBuilder_swigregister(ArArgumentBuilder)

class ArArgumentBuilderCompareOp(object):
    """Proxy of C++ ArArgumentBuilderCompareOp class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __call__(self, *args):
        """__call__(self, ArArgumentBuilder arg1, ArArgumentBuilder arg2) -> bool"""
        return _AriaPy.ArArgumentBuilderCompareOp___call__(self, *args)

    def __init__(self): 
        """__init__(self) -> ArArgumentBuilderCompareOp"""
        this = _AriaPy.new_ArArgumentBuilderCompareOp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArArgumentBuilderCompareOp
    __del__ = lambda self : None;
ArArgumentBuilderCompareOp_swigregister = _AriaPy.ArArgumentBuilderCompareOp_swigregister
ArArgumentBuilderCompareOp_swigregister(ArArgumentBuilderCompareOp)

class ArArgumentParser(object):
    """Proxy of C++ ArArgumentParser class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, int argc) -> ArArgumentParser
        __init__(self, ArArgumentBuilder builder) -> ArArgumentParser
        """
        this = _AriaPy.new_ArArgumentParser(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArArgumentParser
    __del__ = lambda self : None;
    def setWasReallySetOnlyTrue(self, *args):
        """setWasReallySetOnlyTrue(self, bool wasReallySetOnlyTrue)"""
        return _AriaPy.ArArgumentParser_setWasReallySetOnlyTrue(self, *args)

    def getWasReallySetOnlyTrue(self):
        """getWasReallySetOnlyTrue(self) -> bool"""
        return _AriaPy.ArArgumentParser_getWasReallySetOnlyTrue(self)

    def checkArgument(self, *args):
        """checkArgument(self, char argument) -> bool"""
        return _AriaPy.ArArgumentParser_checkArgument(self, *args)

    def checkParameterArgument(self, *args):
        """
        checkParameterArgument(self, char argument, bool returnFirst = False) -> char
        checkParameterArgument(self, char argument) -> char
        """
        return _AriaPy.ArArgumentParser_checkParameterArgument(self, *args)

    def checkParameterArgumentString(self, *args):
        """
        checkParameterArgumentString(self, char argument, char dest, bool wasReallySet = None, 
            bool returnFirst = False) -> bool
        checkParameterArgumentString(self, char argument, char dest, bool wasReallySet = None) -> bool
        checkParameterArgumentString(self, char argument, char dest) -> bool
        """
        return _AriaPy.ArArgumentParser_checkParameterArgumentString(self, *args)

    def checkParameterArgumentInteger(self, *args):
        """
        checkParameterArgumentInteger(self, char argument, int dest, bool wasReallySet = None, 
            bool returnFirst = False) -> bool
        checkParameterArgumentInteger(self, char argument, int dest, bool wasReallySet = None) -> bool
        checkParameterArgumentInteger(self, char argument, int dest) -> bool
        """
        return _AriaPy.ArArgumentParser_checkParameterArgumentInteger(self, *args)

    def checkParameterArgumentBool(self, *args):
        """
        checkParameterArgumentBool(self, char argument, bool dest, bool wasReallySet = None, 
            bool returnFirst = False) -> bool
        checkParameterArgumentBool(self, char argument, bool dest, bool wasReallySet = None) -> bool
        checkParameterArgumentBool(self, char argument, bool dest) -> bool
        """
        return _AriaPy.ArArgumentParser_checkParameterArgumentBool(self, *args)

    def checkParameterArgumentFloat(self, *args):
        """
        checkParameterArgumentFloat(self, char argument, float dest, bool wasReallySet = None, 
            bool returnFirst = False) -> bool
        checkParameterArgumentFloat(self, char argument, float dest, bool wasReallySet = None) -> bool
        checkParameterArgumentFloat(self, char argument, float dest) -> bool
        """
        return _AriaPy.ArArgumentParser_checkParameterArgumentFloat(self, *args)

    def checkParameterArgumentDouble(self, *args):
        """
        checkParameterArgumentDouble(self, char argument, double dest, bool wasReallySet = None, 
            bool returnFirst = False) -> bool
        checkParameterArgumentDouble(self, char argument, double dest, bool wasReallySet = None) -> bool
        checkParameterArgumentDouble(self, char argument, double dest) -> bool
        """
        return _AriaPy.ArArgumentParser_checkParameterArgumentDouble(self, *args)

    def addDefaultArgument(self, *args):
        """
        addDefaultArgument(self, char argument, int position = -1)
        addDefaultArgument(self, char argument)
        """
        return _AriaPy.ArArgumentParser_addDefaultArgument(self, *args)

    def addDefaultArgumentAsIs(self, *args):
        """
        addDefaultArgumentAsIs(self, char argument, int position = -1)
        addDefaultArgumentAsIs(self, char argument)
        """
        return _AriaPy.ArArgumentParser_addDefaultArgumentAsIs(self, *args)

    def loadDefaultArguments(self, positon = 1):
        """
        loadDefaultArguments(self, int positon = 1)
        loadDefaultArguments(self)
        """
        return _AriaPy.ArArgumentParser_loadDefaultArguments(self, positon)

    def checkHelpAndWarnUnparsed(self, numArgsOkay = 0):
        """
        checkHelpAndWarnUnparsed(self, unsigned int numArgsOkay = 0) -> bool
        checkHelpAndWarnUnparsed(self) -> bool
        """
        return _AriaPy.ArArgumentParser_checkHelpAndWarnUnparsed(self, numArgsOkay)

    def getArgc(self):
        """getArgc(self) -> size_t"""
        return _AriaPy.ArArgumentParser_getArgc(self)

    def getArgv(self):
        """getArgv(self) -> char"""
        return _AriaPy.ArArgumentParser_getArgv(self)

    def getArgumentBuilder(self):
        """getArgumentBuilder(self) -> ArArgumentBuilder"""
        return _AriaPy.ArArgumentParser_getArgumentBuilder(self)

    def getArg(self, *args):
        """getArg(self, size_t whichArg) -> char"""
        return _AriaPy.ArArgumentParser_getArg(self, *args)

    def log(self):
        """log(self)"""
        return _AriaPy.ArArgumentParser_log(self)

    def getStartingArguments(self):
        """getStartingArguments(self) -> char"""
        return _AriaPy.ArArgumentParser_getStartingArguments(self)

    def removeArg(self, *args):
        """removeArg(self, size_t which)"""
        return _AriaPy.ArArgumentParser_removeArg(self, *args)

    def addDefaultArgumentFile(*args):
        """addDefaultArgumentFile(char file)"""
        return _AriaPy.ArArgumentParser_addDefaultArgumentFile(*args)

    addDefaultArgumentFile = staticmethod(addDefaultArgumentFile)
    def addDefaultArgumentEnv(*args):
        """addDefaultArgumentEnv(char env)"""
        return _AriaPy.ArArgumentParser_addDefaultArgumentEnv(*args)

    addDefaultArgumentEnv = staticmethod(addDefaultArgumentEnv)
    def logDefaultArgumentLocations():
        """logDefaultArgumentLocations()"""
        return _AriaPy.ArArgumentParser_logDefaultArgumentLocations()

    logDefaultArgumentLocations = staticmethod(logDefaultArgumentLocations)
ArArgumentParser_swigregister = _AriaPy.ArArgumentParser_swigregister
ArArgumentParser_swigregister(ArArgumentParser)

def ArArgumentParser_addDefaultArgumentFile(*args):
  """ArArgumentParser_addDefaultArgumentFile(char file)"""
  return _AriaPy.ArArgumentParser_addDefaultArgumentFile(*args)

def ArArgumentParser_addDefaultArgumentEnv(*args):
  """ArArgumentParser_addDefaultArgumentEnv(char env)"""
  return _AriaPy.ArArgumentParser_addDefaultArgumentEnv(*args)

def ArArgumentParser_logDefaultArgumentLocations():
  """ArArgumentParser_logDefaultArgumentLocations()"""
  return _AriaPy.ArArgumentParser_logDefaultArgumentLocations()

class ArBumpers(ArRangeDevice):
    """Proxy of C++ ArBumpers class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, currentBufferSize = 30, cumulativeBufferSize = 30, 
    name = "bumpers", maxSecondsToKeepCurrent = 15, 
    angleRange = 135): 
        """
        __init__(self, size_t currentBufferSize = 30, size_t cumulativeBufferSize = 30, 
            char name = "bumpers", int maxSecondsToKeepCurrent = 15, 
            double angleRange = 135) -> ArBumpers
        __init__(self, size_t currentBufferSize = 30, size_t cumulativeBufferSize = 30, 
            char name = "bumpers", int maxSecondsToKeepCurrent = 15) -> ArBumpers
        __init__(self, size_t currentBufferSize = 30, size_t cumulativeBufferSize = 30, 
            char name = "bumpers") -> ArBumpers
        __init__(self, size_t currentBufferSize = 30, size_t cumulativeBufferSize = 30) -> ArBumpers
        __init__(self, size_t currentBufferSize = 30) -> ArBumpers
        __init__(self) -> ArBumpers
        """
        this = _AriaPy.new_ArBumpers(currentBufferSize, cumulativeBufferSize, name, maxSecondsToKeepCurrent, 
    angleRange)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArBumpers
    __del__ = lambda self : None;
    def setRobot(self, *args):
        """setRobot(self, ArRobot robot)"""
        return _AriaPy.ArBumpers_setRobot(self, *args)

    def processReadings(self):
        """processReadings(self)"""
        return _AriaPy.ArBumpers_processReadings(self)

    def addBumpToBuffer(self, *args):
        """addBumpToBuffer(self, int bumpValue, int whichBumper)"""
        return _AriaPy.ArBumpers_addBumpToBuffer(self, *args)

ArBumpers_swigregister = _AriaPy.ArBumpers_swigregister
ArBumpers_swigregister(ArBumpers)

class ArCameraCollection(object):
    """Proxy of C++ ArCameraCollection class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ArCameraCollection"""
        this = _AriaPy.new_ArCameraCollection()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArCameraCollection
    __del__ = lambda self : None;
    def addCamera(self, *args):
        """
        addCamera(self, char cameraName, char cameraType, char displayName, 
            char displayType) -> bool
        """
        return _AriaPy.ArCameraCollection_addCamera(self, *args)

    def removeCamera(self, *args):
        """removeCamera(self, char cameraName) -> bool"""
        return _AriaPy.ArCameraCollection_removeCamera(self, *args)

    def addCameraCommand(self, *args):
        """
        addCameraCommand(self, char cameraName, char command, char cameraCommandName, 
            int requestInterval = -1) -> bool
        addCameraCommand(self, char cameraName, char command, char cameraCommandName) -> bool
        """
        return _AriaPy.ArCameraCollection_addCameraCommand(self, *args)

    def removeCameraCommand(self, *args):
        """removeCameraCommand(self, char cameraName, char command) -> bool"""
        return _AriaPy.ArCameraCollection_removeCameraCommand(self, *args)

    def addParameter(self, *args):
        """addParameter(self, char cameraName, ArCameraParameterSource source, ArConfigArg param) -> bool"""
        return _AriaPy.ArCameraCollection_addParameter(self, *args)

    def removeParameter(self, *args):
        """removeParameter(self, char cameraName, char paramName) -> bool"""
        return _AriaPy.ArCameraCollection_removeParameter(self, *args)

    def getCameraNames(self, *args):
        """getCameraNames(self, std::list<(std::string,std::allocator<(std::string)>)> outList)"""
        return _AriaPy.ArCameraCollection_getCameraNames(self, *args)

    def getCameraType(self, *args):
        """getCameraType(self, char cameraName) -> char"""
        return _AriaPy.ArCameraCollection_getCameraType(self, *args)

    def getDisplayName(self, *args):
        """getDisplayName(self, char cameraName) -> char"""
        return _AriaPy.ArCameraCollection_getDisplayName(self, *args)

    def getDisplayType(self, *args):
        """getDisplayType(self, char cameraName) -> char"""
        return _AriaPy.ArCameraCollection_getDisplayType(self, *args)

    def getCameraCommands(self, *args):
        """getCameraCommands(self, char cameraName, std::list<(std::string,std::allocator<(std::string)>)> outList)"""
        return _AriaPy.ArCameraCollection_getCameraCommands(self, *args)

    def getCommandName(self, *args):
        """getCommandName(self, char cameraName, char command) -> char"""
        return _AriaPy.ArCameraCollection_getCommandName(self, *args)

    def getRequestInterval(self, *args):
        """getRequestInterval(self, char cameraName, char command) -> int"""
        return _AriaPy.ArCameraCollection_getRequestInterval(self, *args)

    def getParameterNames(self, *args):
        """getParameterNames(self, char cameraName, std::list<(std::string,std::allocator<(std::string)>)> outList)"""
        return _AriaPy.ArCameraCollection_getParameterNames(self, *args)

    def getParameter(self, *args):
        """getParameter(self, char cameraName, char parameterName, ArConfigArg paramOut) -> bool"""
        return _AriaPy.ArCameraCollection_getParameter(self, *args)

    def setParameter(self, *args):
        """setParameter(self, char cameraName, ArConfigArg param) -> bool"""
        return _AriaPy.ArCameraCollection_setParameter(self, *args)

    def exists(self, *args):
        """
        exists(self, char cameraName) -> bool
        exists(self, char cameraName, char command) -> bool
        """
        return _AriaPy.ArCameraCollection_exists(self, *args)

    def parameterExists(self, *args):
        """parameterExists(self, char cameraName, char paramName) -> bool"""
        return _AriaPy.ArCameraCollection_parameterExists(self, *args)

    def addModifiedCB(self, *args):
        """
        addModifiedCB(self, ArFunctor functor, Pos position = LAST) -> bool
        addModifiedCB(self, ArFunctor functor) -> bool
        """
        return _AriaPy.ArCameraCollection_addModifiedCB(self, *args)

    def removeModifiedCB(self, *args):
        """removeModifiedCB(self, ArFunctor functor) -> bool"""
        return _AriaPy.ArCameraCollection_removeModifiedCB(self, *args)

    def startUpdate(self):
        """startUpdate(self)"""
        return _AriaPy.ArCameraCollection_startUpdate(self)

    def endUpdate(self):
        """endUpdate(self)"""
        return _AriaPy.ArCameraCollection_endUpdate(self)

    def lock(self):
        """lock(self) -> int"""
        return _AriaPy.ArCameraCollection_lock(self)

    def tryLock(self):
        """tryLock(self) -> int"""
        return _AriaPy.ArCameraCollection_tryLock(self)

    def unlock(self):
        """unlock(self) -> int"""
        return _AriaPy.ArCameraCollection_unlock(self)

ArCameraCollection_swigregister = _AriaPy.ArCameraCollection_swigregister
ArCameraCollection_swigregister(ArCameraCollection)

class ArCameraCollectionItem(object):
    """Proxy of C++ ArCameraCollectionItem class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArCameraCollectionItem
    __del__ = lambda self : None;
    def getCameraName(self):
        """getCameraName(self) -> char"""
        return _AriaPy.ArCameraCollectionItem_getCameraName(self)

    def addToCameraCollection(self, *args):
        """addToCameraCollection(self, ArCameraCollection collection)"""
        return _AriaPy.ArCameraCollectionItem_addToCameraCollection(self, *args)

ArCameraCollectionItem_swigregister = _AriaPy.ArCameraCollectionItem_swigregister
ArCameraCollectionItem_swigregister(ArCameraCollectionItem)

class ArCameraParameterSource(ArCameraCollectionItem):
    """Proxy of C++ ArCameraParameterSource class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArCameraParameterSource
    __del__ = lambda self : None;
    def getParameter(self, *args):
        """getParameter(self, char paramName, ArConfigArg paramOut) -> bool"""
        return _AriaPy.ArCameraParameterSource_getParameter(self, *args)

    def setParameter(self, *args):
        """setParameter(self, ArConfigArg param) -> bool"""
        return _AriaPy.ArCameraParameterSource_setParameter(self, *args)

ArCameraParameterSource_swigregister = _AriaPy.ArCameraParameterSource_swigregister
ArCameraParameterSource_swigregister(ArCameraParameterSource)

class ArCameraCommands(object):
    """Proxy of C++ ArCameraCommands class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GET_CAMERA_DATA = _swig_property(_AriaPy.ArCameraCommands_GET_CAMERA_DATA_get, _AriaPy.ArCameraCommands_GET_CAMERA_DATA_set)
    GET_CAMERA_INFO = _swig_property(_AriaPy.ArCameraCommands_GET_CAMERA_INFO_get, _AriaPy.ArCameraCommands_GET_CAMERA_INFO_set)
    GET_PICTURE = _swig_property(_AriaPy.ArCameraCommands_GET_PICTURE_get, _AriaPy.ArCameraCommands_GET_PICTURE_set)
    GET_PICTURE_OPTIM = _swig_property(_AriaPy.ArCameraCommands_GET_PICTURE_OPTIM_get, _AriaPy.ArCameraCommands_GET_PICTURE_OPTIM_set)
    GET_SNAPSHOT = _swig_property(_AriaPy.ArCameraCommands_GET_SNAPSHOT_get, _AriaPy.ArCameraCommands_GET_SNAPSHOT_set)
    GET_DISPLAY = _swig_property(_AriaPy.ArCameraCommands_GET_DISPLAY_get, _AriaPy.ArCameraCommands_GET_DISPLAY_set)
    SET_CAMERA_ABS = _swig_property(_AriaPy.ArCameraCommands_SET_CAMERA_ABS_get, _AriaPy.ArCameraCommands_SET_CAMERA_ABS_set)
    SET_CAMERA_PCT = _swig_property(_AriaPy.ArCameraCommands_SET_CAMERA_PCT_get, _AriaPy.ArCameraCommands_SET_CAMERA_PCT_set)
    SET_CAMERA_REL = _swig_property(_AriaPy.ArCameraCommands_SET_CAMERA_REL_get, _AriaPy.ArCameraCommands_SET_CAMERA_REL_set)
    GET_CAMERA_MODE_LIST = _swig_property(_AriaPy.ArCameraCommands_GET_CAMERA_MODE_LIST_get, _AriaPy.ArCameraCommands_GET_CAMERA_MODE_LIST_set)
    CAMERA_MODE_UPDATED = _swig_property(_AriaPy.ArCameraCommands_CAMERA_MODE_UPDATED_get, _AriaPy.ArCameraCommands_CAMERA_MODE_UPDATED_set)
    SET_CAMERA_MODE = _swig_property(_AriaPy.ArCameraCommands_SET_CAMERA_MODE_get, _AriaPy.ArCameraCommands_SET_CAMERA_MODE_set)
    RESET_CAMERA = _swig_property(_AriaPy.ArCameraCommands_RESET_CAMERA_get, _AriaPy.ArCameraCommands_RESET_CAMERA_set)
    GET_CAMERA_DATA_INT = _swig_property(_AriaPy.ArCameraCommands_GET_CAMERA_DATA_INT_get, _AriaPy.ArCameraCommands_GET_CAMERA_DATA_INT_set)
    GET_CAMERA_INFO_INT = _swig_property(_AriaPy.ArCameraCommands_GET_CAMERA_INFO_INT_get, _AriaPy.ArCameraCommands_GET_CAMERA_INFO_INT_set)
    SET_CAMERA_ABS_INT = _swig_property(_AriaPy.ArCameraCommands_SET_CAMERA_ABS_INT_get, _AriaPy.ArCameraCommands_SET_CAMERA_ABS_INT_set)
    SET_CAMERA_REL_INT = _swig_property(_AriaPy.ArCameraCommands_SET_CAMERA_REL_INT_get, _AriaPy.ArCameraCommands_SET_CAMERA_REL_INT_set)
    SET_CAMERA_PCT_INT = _swig_property(_AriaPy.ArCameraCommands_SET_CAMERA_PCT_INT_get, _AriaPy.ArCameraCommands_SET_CAMERA_PCT_INT_set)
    GET_VIDEO = _swig_property(_AriaPy.ArCameraCommands_GET_VIDEO_get, _AriaPy.ArCameraCommands_GET_VIDEO_set)
    GET_SNAPSHOT_PLAIN = _swig_property(_AriaPy.ArCameraCommands_GET_SNAPSHOT_PLAIN_get, _AriaPy.ArCameraCommands_GET_SNAPSHOT_PLAIN_set)
    def __init__(self): 
        """__init__(self) -> ArCameraCommands"""
        this = _AriaPy.new_ArCameraCommands()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArCameraCommands
    __del__ = lambda self : None;
ArCameraCommands_swigregister = _AriaPy.ArCameraCommands_swigregister
ArCameraCommands_swigregister(ArCameraCommands)

class ArCommands(object):
    """Proxy of C++ ArCommands class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    PULSE = _AriaPy.ArCommands_PULSE
    OPEN = _AriaPy.ArCommands_OPEN
    CLOSE = _AriaPy.ArCommands_CLOSE
    POLLING = _AriaPy.ArCommands_POLLING
    ENABLE = _AriaPy.ArCommands_ENABLE
    SETA = _AriaPy.ArCommands_SETA
    SETV = _AriaPy.ArCommands_SETV
    SETO = _AriaPy.ArCommands_SETO
    MOVE = _AriaPy.ArCommands_MOVE
    ROTATE = _AriaPy.ArCommands_ROTATE
    SETRV = _AriaPy.ArCommands_SETRV
    VEL = _AriaPy.ArCommands_VEL
    HEAD = _AriaPy.ArCommands_HEAD
    DHEAD = _AriaPy.ArCommands_DHEAD
    SAY = _AriaPy.ArCommands_SAY
    JOYINFO = _AriaPy.ArCommands_JOYINFO
    CONFIG = _AriaPy.ArCommands_CONFIG
    ENCODER = _AriaPy.ArCommands_ENCODER
    SETRVDIR = _AriaPy.ArCommands_SETRVDIR
    RVEL = _AriaPy.ArCommands_RVEL
    DCHEAD = _AriaPy.ArCommands_DCHEAD
    SETRA = _AriaPy.ArCommands_SETRA
    SONAR = _AriaPy.ArCommands_SONAR
    STOP = _AriaPy.ArCommands_STOP
    DIGOUT = _AriaPy.ArCommands_DIGOUT
    VEL2 = _AriaPy.ArCommands_VEL2
    GRIPPER = _AriaPy.ArCommands_GRIPPER
    ADSEL = _AriaPy.ArCommands_ADSEL
    GRIPPERVAL = _AriaPy.ArCommands_GRIPPERVAL
    GRIPPERPACREQUEST = _AriaPy.ArCommands_GRIPPERPACREQUEST
    IOREQUEST = _AriaPy.ArCommands_IOREQUEST
    PTUPOS = _AriaPy.ArCommands_PTUPOS
    TTY2 = _AriaPy.ArCommands_TTY2
    GETAUX = _AriaPy.ArCommands_GETAUX
    BUMPSTALL = _AriaPy.ArCommands_BUMPSTALL
    TCM2 = _AriaPy.ArCommands_TCM2
    JOYDRIVE = _AriaPy.ArCommands_JOYDRIVE
    MOVINGBLINK = _AriaPy.ArCommands_MOVINGBLINK
    HOSTBAUD = _AriaPy.ArCommands_HOSTBAUD
    AUX1BAUD = _AriaPy.ArCommands_AUX1BAUD
    AUX2BAUD = _AriaPy.ArCommands_AUX2BAUD
    ESTOP = _AriaPy.ArCommands_ESTOP
    ESTALL = _AriaPy.ArCommands_ESTALL
    GYRO = _AriaPy.ArCommands_GYRO
    TTY4 = _AriaPy.ArCommands_TTY4
    GETAUX3 = _AriaPy.ArCommands_GETAUX3
    BATTERYINFO = _AriaPy.ArCommands_BATTERYINFO
    TTY3 = _AriaPy.ArCommands_TTY3
    GETAUX2 = _AriaPy.ArCommands_GETAUX2
    BATTEST = _AriaPy.ArCommands_BATTEST
    LOADPARAM = _AriaPy.ArCommands_LOADPARAM
    OLDSIM_LOADPARAM = _AriaPy.ArCommands_OLDSIM_LOADPARAM
    ENDSIM = _AriaPy.ArCommands_ENDSIM
    OLDSIM_EXIT = _AriaPy.ArCommands_OLDSIM_EXIT
    LOADWORLD = _AriaPy.ArCommands_LOADWORLD
    OLDSIM_LOADWORLD = _AriaPy.ArCommands_OLDSIM_LOADWORLD
    STEP = _AriaPy.ArCommands_STEP
    OLDSIM_STEP = _AriaPy.ArCommands_OLDSIM_STEP
    CALCOMP = _AriaPy.ArCommands_CALCOMP
    SETSIMORIGINTH = _AriaPy.ArCommands_SETSIMORIGINTH
    OLDSIM_SETORIGINTH = _AriaPy.ArCommands_OLDSIM_SETORIGINTH
    RESETSIMTOORIGIN = _AriaPy.ArCommands_RESETSIMTOORIGIN
    OLDSIM_RESETTOORIGIN = _AriaPy.ArCommands_OLDSIM_RESETTOORIGIN
    SOUND = _AriaPy.ArCommands_SOUND
    PLAYLIST = _AriaPy.ArCommands_PLAYLIST
    SOUNDTOG = _AriaPy.ArCommands_SOUNDTOG
    POWER_PC = _AriaPy.ArCommands_POWER_PC
    POWER_LRF = _AriaPy.ArCommands_POWER_LRF
    POWER_5V = _AriaPy.ArCommands_POWER_5V
    POWER_12V = _AriaPy.ArCommands_POWER_12V
    POWER_24V = _AriaPy.ArCommands_POWER_24V
    POWER_AUX_PC = _AriaPy.ArCommands_POWER_AUX_PC
    POWER_TOUCHSCREEN = _AriaPy.ArCommands_POWER_TOUCHSCREEN
    POWER_PTZ = _AriaPy.ArCommands_POWER_PTZ
    POWER_AUDIO = _AriaPy.ArCommands_POWER_AUDIO
    POWER_LRF2 = _AriaPy.ArCommands_POWER_LRF2
    LATVEL = _AriaPy.ArCommands_LATVEL
    LATACCEL = _AriaPy.ArCommands_LATACCEL
    SETLATV = _AriaPy.ArCommands_SETLATV
    SRECORD = _AriaPy.ArCommands_SRECORD
    MARCDEBUG = _AriaPy.ArCommands_MARCDEBUG
    WHEEL_LIGHT = _AriaPy.ArCommands_WHEEL_LIGHT
    ABSOLUTE_MAXES = _AriaPy.ArCommands_ABSOLUTE_MAXES
    SAFETY_STATE_INFO = _AriaPy.ArCommands_SAFETY_STATE_INFO
    SAFETY_SET_STATE = _AriaPy.ArCommands_SAFETY_SET_STATE
    SAFETY_DISABLE_POWER_OFF_TIMER = _AriaPy.ArCommands_SAFETY_DISABLE_POWER_OFF_TIMER
    SIM_SET_POSE = _AriaPy.ArCommands_SIM_SET_POSE
    SIM_RESET = _AriaPy.ArCommands_SIM_RESET
    SIM_LRF_ENABLE = _AriaPy.ArCommands_SIM_LRF_ENABLE
    SIM_LRF_SET_FOV_START = _AriaPy.ArCommands_SIM_LRF_SET_FOV_START
    SIM_LRF_SET_FOV_END = _AriaPy.ArCommands_SIM_LRF_SET_FOV_END
    SIM_LRF_SET_RES = _AriaPy.ArCommands_SIM_LRF_SET_RES
    SIM_CTRL = _AriaPy.ArCommands_SIM_CTRL
    SIM_STAT = _AriaPy.ArCommands_SIM_STAT
    SIM_MESSAGE = _AriaPy.ArCommands_SIM_MESSAGE
    SIM_EXIT = _AriaPy.ArCommands_SIM_EXIT
    def __init__(self): 
        """__init__(self) -> ArCommands"""
        this = _AriaPy.new_ArCommands()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArCommands
    __del__ = lambda self : None;
ArCommands_swigregister = _AriaPy.ArCommands_swigregister
ArCommands_swigregister(ArCommands)

class ArCondition(object):
    """Proxy of C++ ArCondition class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    STATUS_FAILED = _AriaPy.ArCondition_STATUS_FAILED
    STATUS_FAILED_DESTROY = _AriaPy.ArCondition_STATUS_FAILED_DESTROY
    STATUS_FAILED_INIT = _AriaPy.ArCondition_STATUS_FAILED_INIT
    STATUS_WAIT_TIMEDOUT = _AriaPy.ArCondition_STATUS_WAIT_TIMEDOUT
    STATUS_WAIT_INTR = _AriaPy.ArCondition_STATUS_WAIT_INTR
    STATUS_MUTEX_FAILED_INIT = _AriaPy.ArCondition_STATUS_MUTEX_FAILED_INIT
    STATUS_MUTEX_FAILED = _AriaPy.ArCondition_STATUS_MUTEX_FAILED
    def __init__(self): 
        """__init__(self) -> ArCondition"""
        this = _AriaPy.new_ArCondition()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArCondition
    __del__ = lambda self : None;
    def signal(self):
        """signal(self) -> int"""
        return _AriaPy.ArCondition_signal(self)

    def broadcast(self):
        """broadcast(self) -> int"""
        return _AriaPy.ArCondition_broadcast(self)

    def wait(self):
        """wait(self) -> int"""
        return _AriaPy.ArCondition_wait(self)

    def timedWait(self, *args):
        """timedWait(self, unsigned int msecs) -> int"""
        return _AriaPy.ArCondition_timedWait(self, *args)

    def getError(self, *args):
        """getError(self, int messageNumber) -> char"""
        return _AriaPy.ArCondition_getError(self, *args)

    def setLogName(self, *args):
        """setLogName(self, char logName)"""
        return _AriaPy.ArCondition_setLogName(self, *args)

    def getLogName(self):
        """getLogName(self) -> char"""
        return _AriaPy.ArCondition_getLogName(self)

ArCondition_swigregister = _AriaPy.ArCondition_swigregister
ArCondition_swigregister(ArCondition)

class ArConfig(object):
    """Proxy of C++ ArConfig class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CATEGORY_ROBOT_INTERFACE = _swig_property(_AriaPy.ArConfig_CATEGORY_ROBOT_INTERFACE_get, _AriaPy.ArConfig_CATEGORY_ROBOT_INTERFACE_set)
    CATEGORY_ROBOT_OPERATION = _swig_property(_AriaPy.ArConfig_CATEGORY_ROBOT_OPERATION_get, _AriaPy.ArConfig_CATEGORY_ROBOT_OPERATION_set)
    CATEGORY_ROBOT_PHYSICAL = _swig_property(_AriaPy.ArConfig_CATEGORY_ROBOT_PHYSICAL_get, _AriaPy.ArConfig_CATEGORY_ROBOT_PHYSICAL_set)
    CATEGORY_FLEET = _swig_property(_AriaPy.ArConfig_CATEGORY_FLEET_get, _AriaPy.ArConfig_CATEGORY_FLEET_set)
    CATEGORY_SECURITY = _swig_property(_AriaPy.ArConfig_CATEGORY_SECURITY_get, _AriaPy.ArConfig_CATEGORY_SECURITY_set)
    CATEGORY_DEBUG = _swig_property(_AriaPy.ArConfig_CATEGORY_DEBUG_get, _AriaPy.ArConfig_CATEGORY_DEBUG_set)
    def toCategoryName(*args):
        """toCategoryName(char categoryName) -> char"""
        return _AriaPy.ArConfig_toCategoryName(*args)

    toCategoryName = staticmethod(toCategoryName)
    __swig_destroy__ = _AriaPy.delete_ArConfig
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, char baseDirectory = None, bool noBlanksBetweenParams = False, 
            bool ignoreBounds = False, bool failOnBadSection = False, 
            bool saveUnknown = True) -> ArConfig
        __init__(self, char baseDirectory = None, bool noBlanksBetweenParams = False, 
            bool ignoreBounds = False, bool failOnBadSection = False) -> ArConfig
        __init__(self, char baseDirectory = None, bool noBlanksBetweenParams = False, 
            bool ignoreBounds = False) -> ArConfig
        __init__(self, char baseDirectory = None, bool noBlanksBetweenParams = False) -> ArConfig
        __init__(self, char baseDirectory = None) -> ArConfig
        __init__(self) -> ArConfig
        __init__(self, ArConfig config) -> ArConfig
        """
        this = _AriaPy.new_ArConfig(*args)
        try: self.this.append(this)
        except: self.this = this
    def copyAndDetach(self, *args):
        """copyAndDetach(self, ArConfig config)"""
        return _AriaPy.ArConfig_copyAndDetach(self, *args)

    def setConfigName(self, *args):
        """
        setConfigName(self, char configName, char robotName = None)
        setConfigName(self, char configName)
        """
        return _AriaPy.ArConfig_setConfigName(self, *args)

    def setQuiet(self, *args):
        """setQuiet(self, bool isQuiet)"""
        return _AriaPy.ArConfig_setQuiet(self, *args)

    def setTranslator(self, *args):
        """setTranslator(self, ArConfig xlatorConfig)"""
        return _AriaPy.ArConfig_setTranslator(self, *args)

    def getTranslator(self):
        """getTranslator(self) -> ArConfig"""
        return _AriaPy.ArConfig_getTranslator(self)

    def parseFile(self, *args):
        """
        parseFile(self, char fileName, bool continueOnError = False, bool noFileNotFoundMessage = False, 
            char errorBuffer = None, 
            size_t errorBufferLen = 0, std::list<(std::string,std::allocator<(std::string)>)> sectionsToParse = None, 
            Priority highestPriority = FIRST_PRIORITY, 
            Priority lowestPriority = LAST_PRIORITY, 
            RestartLevel restartLevelNeeded = None) -> bool
        parseFile(self, char fileName, bool continueOnError = False, bool noFileNotFoundMessage = False, 
            char errorBuffer = None, 
            size_t errorBufferLen = 0, std::list<(std::string,std::allocator<(std::string)>)> sectionsToParse = None, 
            Priority highestPriority = FIRST_PRIORITY, 
            Priority lowestPriority = LAST_PRIORITY) -> bool
        parseFile(self, char fileName, bool continueOnError = False, bool noFileNotFoundMessage = False, 
            char errorBuffer = None, 
            size_t errorBufferLen = 0, std::list<(std::string,std::allocator<(std::string)>)> sectionsToParse = None, 
            Priority highestPriority = FIRST_PRIORITY) -> bool
        parseFile(self, char fileName, bool continueOnError = False, bool noFileNotFoundMessage = False, 
            char errorBuffer = None, 
            size_t errorBufferLen = 0, std::list<(std::string,std::allocator<(std::string)>)> sectionsToParse = None) -> bool
        parseFile(self, char fileName, bool continueOnError = False, bool noFileNotFoundMessage = False, 
            char errorBuffer = None, 
            size_t errorBufferLen = 0) -> bool
        parseFile(self, char fileName, bool continueOnError = False, bool noFileNotFoundMessage = False, 
            char errorBuffer = None) -> bool
        parseFile(self, char fileName, bool continueOnError = False, bool noFileNotFoundMessage = False) -> bool
        parseFile(self, char fileName, bool continueOnError = False) -> bool
        parseFile(self, char fileName) -> bool
        """
        return _AriaPy.ArConfig_parseFile(self, *args)

    def writeFile(self, *args):
        """
        writeFile(self, char fileName, bool append = False, std::set<(std::string,std::less<(std::string)>,std::allocator<(std::string)>)> alreadyWritten = None, 
            bool writeExtras = False, 
            std::list<(std::string,std::allocator<(std::string)>)> sectionsToWrite = None, 
            Priority highestPriority = FIRST_PRIORITY, 
            Priority lowestPriority = LAST_PRIORITY) -> bool
        writeFile(self, char fileName, bool append = False, std::set<(std::string,std::less<(std::string)>,std::allocator<(std::string)>)> alreadyWritten = None, 
            bool writeExtras = False, 
            std::list<(std::string,std::allocator<(std::string)>)> sectionsToWrite = None, 
            Priority highestPriority = FIRST_PRIORITY) -> bool
        writeFile(self, char fileName, bool append = False, std::set<(std::string,std::less<(std::string)>,std::allocator<(std::string)>)> alreadyWritten = None, 
            bool writeExtras = False, 
            std::list<(std::string,std::allocator<(std::string)>)> sectionsToWrite = None) -> bool
        writeFile(self, char fileName, bool append = False, std::set<(std::string,std::less<(std::string)>,std::allocator<(std::string)>)> alreadyWritten = None, 
            bool writeExtras = False) -> bool
        writeFile(self, char fileName, bool append = False, std::set<(std::string,std::less<(std::string)>,std::allocator<(std::string)>)> alreadyWritten = None) -> bool
        writeFile(self, char fileName, bool append = False) -> bool
        writeFile(self, char fileName) -> bool
        """
        return _AriaPy.ArConfig_writeFile(self, *args)

    def parseText(self, *args):
        """
        parseText(self, std::list<(std::string,std::allocator<(std::string)>)> configLines, 
            bool continueOnErrors = False, 
            bool parseOk = None, bool processOk = None, 
            char errorBuffer = None, size_t errorBufferLen = 0, 
            std::list<(std::string,std::allocator<(std::string)>)> sectionsToParse = None, 
            Priority highestPriority = FIRST_PRIORITY, 
            Priority lowestPriority = LAST_PRIORITY, 
            RestartLevel restartLevelNeeded = None) -> bool
        parseText(self, std::list<(std::string,std::allocator<(std::string)>)> configLines, 
            bool continueOnErrors = False, 
            bool parseOk = None, bool processOk = None, 
            char errorBuffer = None, size_t errorBufferLen = 0, 
            std::list<(std::string,std::allocator<(std::string)>)> sectionsToParse = None, 
            Priority highestPriority = FIRST_PRIORITY, 
            Priority lowestPriority = LAST_PRIORITY) -> bool
        parseText(self, std::list<(std::string,std::allocator<(std::string)>)> configLines, 
            bool continueOnErrors = False, 
            bool parseOk = None, bool processOk = None, 
            char errorBuffer = None, size_t errorBufferLen = 0, 
            std::list<(std::string,std::allocator<(std::string)>)> sectionsToParse = None, 
            Priority highestPriority = FIRST_PRIORITY) -> bool
        parseText(self, std::list<(std::string,std::allocator<(std::string)>)> configLines, 
            bool continueOnErrors = False, 
            bool parseOk = None, bool processOk = None, 
            char errorBuffer = None, size_t errorBufferLen = 0, 
            std::list<(std::string,std::allocator<(std::string)>)> sectionsToParse = None) -> bool
        parseText(self, std::list<(std::string,std::allocator<(std::string)>)> configLines, 
            bool continueOnErrors = False, 
            bool parseOk = None, bool processOk = None, 
            char errorBuffer = None, size_t errorBufferLen = 0) -> bool
        parseText(self, std::list<(std::string,std::allocator<(std::string)>)> configLines, 
            bool continueOnErrors = False, 
            bool parseOk = None, bool processOk = None, 
            char errorBuffer = None) -> bool
        parseText(self, std::list<(std::string,std::allocator<(std::string)>)> configLines, 
            bool continueOnErrors = False, 
            bool parseOk = None, bool processOk = None) -> bool
        parseText(self, std::list<(std::string,std::allocator<(std::string)>)> configLines, 
            bool continueOnErrors = False, 
            bool parseOk = None) -> bool
        parseText(self, std::list<(std::string,std::allocator<(std::string)>)> configLines, 
            bool continueOnErrors = False) -> bool
        parseText(self, std::list<(std::string,std::allocator<(std::string)>)> configLines) -> bool
        """
        return _AriaPy.ArConfig_parseText(self, *args)

    def parseResourceFile(self, *args):
        """
        parseResourceFile(self, char fileName, bool continueOnError = True, char errorBuffer = None, 
            size_t errorBufferLen = 0, 
            std::list<(std::string,std::allocator<(std::string)>)> sectionsToParse = None) -> bool
        parseResourceFile(self, char fileName, bool continueOnError = True, char errorBuffer = None, 
            size_t errorBufferLen = 0) -> bool
        parseResourceFile(self, char fileName, bool continueOnError = True, char errorBuffer = None) -> bool
        parseResourceFile(self, char fileName, bool continueOnError = True) -> bool
        parseResourceFile(self, char fileName) -> bool
        parseResourceFile(self, ArArgumentBuilder builder)
        """
        return _AriaPy.ArConfig_parseResourceFile(self, *args)

    def writeResourceFile(self, *args):
        """
        writeResourceFile(self, char fileName, bool append = False, std::set<(std::string,std::less<(std::string)>,std::allocator<(std::string)>)> alreadyWritten = None, 
            std::list<(std::string,std::allocator<(std::string)>)> sectionsToWrite = None) -> bool
        writeResourceFile(self, char fileName, bool append = False, std::set<(std::string,std::less<(std::string)>,std::allocator<(std::string)>)> alreadyWritten = None) -> bool
        writeResourceFile(self, char fileName, bool append = False) -> bool
        writeResourceFile(self, char fileName) -> bool
        writeResourceFile(self, ArArgumentBuilder builder)
        """
        return _AriaPy.ArConfig_writeResourceFile(self, *args)

    def addSection(self, *args):
        """addSection(self, char categoryName, char sectionName, char sectionDescription) -> bool"""
        return _AriaPy.ArConfig_addSection(self, *args)

    def addParam(self, *args):
        """
        addParam(self, ArConfigArg arg, char sectionName = "", Priority priority = NORMAL, 
            char displayHint = None, RestartLevel restart = NO_RESTART) -> bool
        addParam(self, ArConfigArg arg, char sectionName = "", Priority priority = NORMAL, 
            char displayHint = None) -> bool
        addParam(self, ArConfigArg arg, char sectionName = "", Priority priority = NORMAL) -> bool
        addParam(self, ArConfigArg arg, char sectionName = "") -> bool
        addParam(self, ArConfigArg arg) -> bool
        """
        return _AriaPy.ArConfig_addParam(self, *args)

    def addComment(self, *args):
        """
        addComment(self, char comment, char sectionName = "", Priority priority = NORMAL) -> bool
        addComment(self, char comment, char sectionName = "") -> bool
        addComment(self, char comment) -> bool
        """
        return _AriaPy.ArConfig_addComment(self, *args)

    def addParamAsIs(self, *args):
        """
        addParamAsIs(self, ArConfigArg arg, char sectionName = "") -> bool
        addParamAsIs(self, ArConfigArg arg) -> bool
        """
        return _AriaPy.ArConfig_addParamAsIs(self, *args)

    def setSectionComment(self, *args):
        """setSectionComment(self, char sectionName, char comment)"""
        return _AriaPy.ArConfig_setSectionComment(self, *args)

    def useArgumentParser(self, *args):
        """useArgumentParser(self, ArArgumentParser parser)"""
        return _AriaPy.ArConfig_useArgumentParser(self, *args)

    def processFile(self):
        """processFile(self) -> bool"""
        return _AriaPy.ArConfig_processFile(self)

    def addProcessFileCB(self, *args):
        """
        addProcessFileCB(self, ArRetFunctor_Bool functor, int priority = 0)
        addProcessFileCB(self, ArRetFunctor_Bool functor)
        addProcessFileCB(self, ArRetFunctor2<(bool,p.char,size_t)> functor, int priority = 0)
        addProcessFileCB(self, ArRetFunctor2<(bool,p.char,size_t)> functor)
        """
        return _AriaPy.ArConfig_addProcessFileCB(self, *args)

    def addProcessFileWithErrorCB(self, *args):
        """
        addProcessFileWithErrorCB(self, ArRetFunctor2<(bool,p.char,size_t)> functor, int priority = 0)
        addProcessFileWithErrorCB(self, ArRetFunctor2<(bool,p.char,size_t)> functor)
        """
        return _AriaPy.ArConfig_addProcessFileWithErrorCB(self, *args)

    def remProcessFileCB(self, *args):
        """
        remProcessFileCB(self, ArRetFunctor_Bool functor)
        remProcessFileCB(self, ArRetFunctor2<(bool,p.char,size_t)> functor)
        """
        return _AriaPy.ArConfig_remProcessFileCB(self, *args)

    def callProcessFileCallBacks(self, *args):
        """
        callProcessFileCallBacks(self, bool continueOnError, char errorBuffer = None, size_t errorBufferLen = 0) -> bool
        callProcessFileCallBacks(self, bool continueOnError, char errorBuffer = None) -> bool
        callProcessFileCallBacks(self, bool continueOnError) -> bool
        """
        return _AriaPy.ArConfig_callProcessFileCallBacks(self, *args)

    def parseArgument(self, *args):
        """
        parseArgument(self, ArArgumentBuilder arg, char errorBuffer = None, size_t errorBufferLen = 0) -> bool
        parseArgument(self, ArArgumentBuilder arg, char errorBuffer = None) -> bool
        parseArgument(self, ArArgumentBuilder arg) -> bool
        """
        return _AriaPy.ArConfig_parseArgument(self, *args)

    def parseVersion(self, *args):
        """
        parseVersion(self, ArArgumentBuilder arg, char errorBuffer = None, size_t errorBufferLen = 0) -> bool
        parseVersion(self, ArArgumentBuilder arg, char errorBuffer = None) -> bool
        parseVersion(self, ArArgumentBuilder arg) -> bool
        """
        return _AriaPy.ArConfig_parseVersion(self, *args)

    def parseSection(self, *args):
        """
        parseSection(self, ArArgumentBuilder arg, char errorBuffer = None, size_t errorBufferLen = 0) -> bool
        parseSection(self, ArArgumentBuilder arg, char errorBuffer = None) -> bool
        parseSection(self, ArArgumentBuilder arg) -> bool
        """
        return _AriaPy.ArConfig_parseSection(self, *args)

    def parseListBegin(self, *args):
        """parseListBegin(self, ArArgumentBuilder arg, char errorBuffer, size_t errorBufferLen) -> bool"""
        return _AriaPy.ArConfig_parseListBegin(self, *args)

    def parseListEnd(self, *args):
        """parseListEnd(self, ArArgumentBuilder arg, char errorBuffer, size_t errorBufferLen) -> bool"""
        return _AriaPy.ArConfig_parseListEnd(self, *args)

    def parseUnknown(self, *args):
        """
        parseUnknown(self, ArArgumentBuilder arg, char errorBuffer = None, size_t errorBufferLen = 0) -> bool
        parseUnknown(self, ArArgumentBuilder arg, char errorBuffer = None) -> bool
        parseUnknown(self, ArArgumentBuilder arg) -> bool
        """
        return _AriaPy.ArConfig_parseUnknown(self, *args)

    def getRestartLevelNeeded(self):
        """getRestartLevelNeeded(self) -> RestartLevel"""
        return _AriaPy.ArConfig_getRestartLevelNeeded(self)

    def resetRestartLevelNeeded(self):
        """resetRestartLevelNeeded(self)"""
        return _AriaPy.ArConfig_resetRestartLevelNeeded(self)

    def getBaseDirectory(self):
        """getBaseDirectory(self) -> char"""
        return _AriaPy.ArConfig_getBaseDirectory(self)

    def setBaseDirectory(self, *args):
        """setBaseDirectory(self, char baseDirectory)"""
        return _AriaPy.ArConfig_setBaseDirectory(self, *args)

    def getFileName(self):
        """getFileName(self) -> char"""
        return _AriaPy.ArConfig_getFileName(self)

    def setNoBlanksBetweenParams(self, *args):
        """setNoBlanksBetweenParams(self, bool noBlanksBetweenParams)"""
        return _AriaPy.ArConfig_setNoBlanksBetweenParams(self, *args)

    def getNoBlanksBetweenParams(self):
        """getNoBlanksBetweenParams(self) -> bool"""
        return _AriaPy.ArConfig_getNoBlanksBetweenParams(self)

    def parseArgumentParser(self, *args):
        """
        parseArgumentParser(self, ArArgumentParser parser, bool continueOnError = False, 
            char errorBuffer = None, size_t errorBufferLen = 0) -> bool
        parseArgumentParser(self, ArArgumentParser parser, bool continueOnError = False, 
            char errorBuffer = None) -> bool
        parseArgumentParser(self, ArArgumentParser parser, bool continueOnError = False) -> bool
        parseArgumentParser(self, ArArgumentParser parser) -> bool
        """
        return _AriaPy.ArConfig_parseArgumentParser(self, *args)

    def getCategoryNames(self):
        """getCategoryNames(self) -> std::list<(std::string,std::allocator<(std::string)>)>"""
        return _AriaPy.ArConfig_getCategoryNames(self)

    def getSectionNamesInCategory(self, *args):
        """getSectionNamesInCategory(self, char categoryName) -> std::list<(std::string,std::allocator<(std::string)>)>"""
        return _AriaPy.ArConfig_getSectionNamesInCategory(self, *args)

    def getSectionNames(self):
        """getSectionNames(self) -> std::list<(std::string,std::allocator<(std::string)>)>"""
        return _AriaPy.ArConfig_getSectionNames(self)

    def getSections(self):
        """getSections(self) -> std::list<(p.ArConfigSection,std::allocator<(p.ArConfigSection)>)>"""
        return _AriaPy.ArConfig_getSections(self)

    def findSection(self, *args):
        """findSection(self, char sectionName) -> ArConfigSection"""
        return _AriaPy.ArConfig_findSection(self, *args)

    def setProcessFileCallbacksLogLevel(self, *args):
        """setProcessFileCallbacksLogLevel(self, LogLevel level)"""
        return _AriaPy.ArConfig_setProcessFileCallbacksLogLevel(self, *args)

    def getProcessFileCallbacksLogLevel(self):
        """getProcessFileCallbacksLogLevel(self) -> LogLevel"""
        return _AriaPy.ArConfig_getProcessFileCallbacksLogLevel(self)

    def setSaveUnknown(self, *args):
        """setSaveUnknown(self, bool saveUnknown)"""
        return _AriaPy.ArConfig_setSaveUnknown(self, *args)

    def getSaveUnknown(self):
        """getSaveUnknown(self) -> bool"""
        return _AriaPy.ArConfig_getSaveUnknown(self)

    def clearSections(self):
        """clearSections(self)"""
        return _AriaPy.ArConfig_clearSections(self)

    def clearAll(self):
        """clearAll(self)"""
        return _AriaPy.ArConfig_clearAll(self)

    def addSectionFlags(self, *args):
        """addSectionFlags(self, char sectionName, char flags) -> bool"""
        return _AriaPy.ArConfig_addSectionFlags(self, *args)

    def remSectionFlag(self, *args):
        """remSectionFlag(self, char sectionName, char flag) -> bool"""
        return _AriaPy.ArConfig_remSectionFlag(self, *args)

    def clearAllValueSet(self):
        """clearAllValueSet(self)"""
        return _AriaPy.ArConfig_clearAllValueSet(self)

    def removeAllUnsetValues(self):
        """removeAllUnsetValues(self)"""
        return _AriaPy.ArConfig_removeAllUnsetValues(self)

    def removeAllUnsetSections(self):
        """removeAllUnsetSections(self)"""
        return _AriaPy.ArConfig_removeAllUnsetSections(self)

    def log(self, isSummary = True, sectionNameList = None, logPrefix = ""):
        """
        log(self, bool isSummary = True, std::list<(std::string,std::allocator<(std::string)>)> sectionNameList = None, 
            char logPrefix = "")
        log(self, bool isSummary = True, std::list<(std::string,std::allocator<(std::string)>)> sectionNameList = None)
        log(self, bool isSummary = True)
        log(self)
        """
        return _AriaPy.ArConfig_log(self, isSummary, sectionNameList, logPrefix)

    def setPermissions(self, allowFactory = True, rememberUnknowns = True):
        """
        setPermissions(self, bool allowFactory = True, bool rememberUnknowns = True)
        setPermissions(self, bool allowFactory = True)
        setPermissions(self)
        """
        return _AriaPy.ArConfig_setPermissions(self, allowFactory, rememberUnknowns)

    def addSectionNotToParse(self, *args):
        """addSectionNotToParse(self, char section)"""
        return _AriaPy.ArConfig_addSectionNotToParse(self, *args)

    def remSectionNotToParse(self, *args):
        """remSectionNotToParse(self, char section)"""
        return _AriaPy.ArConfig_remSectionNotToParse(self, *args)

    def addListNamesToParser(self, *args):
        """addListNamesToParser(self, ArConfigArg parent)"""
        return _AriaPy.ArConfig_addListNamesToParser(self, *args)

ArConfig_swigregister = _AriaPy.ArConfig_swigregister
ArConfig_swigregister(ArConfig)

def ArConfig_toCategoryName(*args):
  """ArConfig_toCategoryName(char categoryName) -> char"""
  return _AriaPy.ArConfig_toCategoryName(*args)

class ArConfigSection(object):
    """Proxy of C++ ArConfigSection class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArConfigSection
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, char name = None, char comment = None, bool isQuiet = False, 
            char categoryName = None) -> ArConfigSection
        __init__(self, char name = None, char comment = None, bool isQuiet = False) -> ArConfigSection
        __init__(self, char name = None, char comment = None) -> ArConfigSection
        __init__(self, char name = None) -> ArConfigSection
        __init__(self) -> ArConfigSection
        __init__(self, ArConfigSection section) -> ArConfigSection
        """
        this = _AriaPy.new_ArConfigSection(*args)
        try: self.this.append(this)
        except: self.this = this
    def copyAndDetach(self, *args):
        """copyAndDetach(self, ArConfigSection section)"""
        return _AriaPy.ArConfigSection_copyAndDetach(self, *args)

    def getName(self):
        """getName(self) -> char"""
        return _AriaPy.ArConfigSection_getName(self)

    def getComment(self):
        """getComment(self) -> char"""
        return _AriaPy.ArConfigSection_getComment(self)

    def getCategoryName(self):
        """getCategoryName(self) -> char"""
        return _AriaPy.ArConfigSection_getCategoryName(self)

    def getFlags(self):
        """getFlags(self) -> char"""
        return _AriaPy.ArConfigSection_getFlags(self)

    def hasFlag(self, *args):
        """hasFlag(self, char flag) -> bool"""
        return _AriaPy.ArConfigSection_hasFlag(self, *args)

    def getParams(self):
        """getParams(self) -> std::list<(ArConfigArg,std::allocator<(ArConfigArg)>)>"""
        return _AriaPy.ArConfigSection_getParams(self)

    def setName(self, *args):
        """setName(self, char name)"""
        return _AriaPy.ArConfigSection_setName(self, *args)

    def setComment(self, *args):
        """setComment(self, char comment)"""
        return _AriaPy.ArConfigSection_setComment(self, *args)

    def addFlags(self, *args):
        """
        addFlags(self, char flags, bool isQuiet = False) -> bool
        addFlags(self, char flags) -> bool
        """
        return _AriaPy.ArConfigSection_addFlags(self, *args)

    def remFlag(self, *args):
        """remFlag(self, char dataFlag) -> bool"""
        return _AriaPy.ArConfigSection_remFlag(self, *args)

    def findParam(self, *args):
        """
        findParam(self, char paramName, bool isAllowStringHolders = False) -> ArConfigArg
        findParam(self, char paramName) -> ArConfigArg
        findParam(self, std::list<(std::string,std::allocator<(std::string)>)> paramNamePath, 
            bool isAllowHolders = False) -> ArConfigArg
        findParam(self, std::list<(std::string,std::allocator<(std::string)>)> paramNamePath) -> ArConfigArg
        findParam(self, char paramNamePath, int pathLength, bool isAllowHolders = False) -> ArConfigArg
        findParam(self, char paramNamePath, int pathLength) -> ArConfigArg
        """
        return _AriaPy.ArConfigSection_findParam(self, *args)

    def containsParamsOfPriority(self, *args):
        """containsParamsOfPriority(self, Priority highestPriority, Priority lowestPriority) -> bool"""
        return _AriaPy.ArConfigSection_containsParamsOfPriority(self, *args)

    def remStringHolder(self, *args):
        """remStringHolder(self, char paramName) -> bool"""
        return _AriaPy.ArConfigSection_remStringHolder(self, *args)

    def setQuiet(self, *args):
        """setQuiet(self, bool isQuiet)"""
        return _AriaPy.ArConfigSection_setQuiet(self, *args)

ArConfigSection_swigregister = _AriaPy.ArConfigSection_swigregister
ArConfigSection_swigregister(ArConfigSection)

class ArConfigArg(object):
    """Proxy of C++ ArConfigArg class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    INVALID = _AriaPy.ArConfigArg_INVALID
    INT = _AriaPy.ArConfigArg_INT
    DOUBLE = _AriaPy.ArConfigArg_DOUBLE
    STRING = _AriaPy.ArConfigArg_STRING
    BOOL = _AriaPy.ArConfigArg_BOOL
    FUNCTOR = _AriaPy.ArConfigArg_FUNCTOR
    DESCRIPTION_HOLDER = _AriaPy.ArConfigArg_DESCRIPTION_HOLDER
    STRING_HOLDER = _AriaPy.ArConfigArg_STRING_HOLDER
    SEPARATOR = _AriaPy.ArConfigArg_SEPARATOR
    CPPSTRING = _AriaPy.ArConfigArg_CPPSTRING
    LIST = _AriaPy.ArConfigArg_LIST
    LIST_HOLDER = _AriaPy.ArConfigArg_LIST_HOLDER
    LAST_TYPE = _AriaPy.ArConfigArg_LAST_TYPE
    NO_RESTART = _AriaPy.ArConfigArg_NO_RESTART
    RESTART_CLIENT = _AriaPy.ArConfigArg_RESTART_CLIENT
    RESTART_IO = _AriaPy.ArConfigArg_RESTART_IO
    RESTART_SOFTWARE = _AriaPy.ArConfigArg_RESTART_SOFTWARE
    RESTART_HARDWARE = _AriaPy.ArConfigArg_RESTART_HARDWARE
    LAST_RESTART_LEVEL = _AriaPy.ArConfigArg_LAST_RESTART_LEVEL
    DEFAULT_DOUBLE_PRECISION = _AriaPy.ArConfigArg_DEFAULT_DOUBLE_PRECISION
    TYPE_COUNT = _AriaPy.ArConfigArg_TYPE_COUNT
    RESTART_LEVEL_COUNT = _AriaPy.ArConfigArg_RESTART_LEVEL_COUNT
    SOCKET_INDEX_OF_SECTION_NAME = _AriaPy.ArConfigArg_SOCKET_INDEX_OF_SECTION_NAME
    SOCKET_INDEX_OF_ARG_NAME = _AriaPy.ArConfigArg_SOCKET_INDEX_OF_ARG_NAME
    SOCKET_INDEX_OF_DESCRIPTION = _AriaPy.ArConfigArg_SOCKET_INDEX_OF_DESCRIPTION
    SOCKET_INDEX_OF_PRIORITY = _AriaPy.ArConfigArg_SOCKET_INDEX_OF_PRIORITY
    SOCKET_INDEX_OF_TYPE = _AriaPy.ArConfigArg_SOCKET_INDEX_OF_TYPE
    SOCKET_INDEX_OF_VALUE = _AriaPy.ArConfigArg_SOCKET_INDEX_OF_VALUE
    SOCKET_INDEX_OF_MIN_VALUE = _AriaPy.ArConfigArg_SOCKET_INDEX_OF_MIN_VALUE
    SOCKET_INDEX_OF_MAX_VALUE = _AriaPy.ArConfigArg_SOCKET_INDEX_OF_MAX_VALUE
    SOCKET_INDEX_OF_DISPLAY = _AriaPy.ArConfigArg_SOCKET_INDEX_OF_DISPLAY
    SOCKET_INDEX_OF_PARENT_PATH = _AriaPy.ArConfigArg_SOCKET_INDEX_OF_PARENT_PATH
    SOCKET_INDEX_OF_SERIALIZABLE = _AriaPy.ArConfigArg_SOCKET_INDEX_OF_SERIALIZABLE
    RESOURCE_INDEX_OF_SECTION_NAME = _AriaPy.ArConfigArg_RESOURCE_INDEX_OF_SECTION_NAME
    RESOURCE_INDEX_OF_ARG_NAME = _AriaPy.ArConfigArg_RESOURCE_INDEX_OF_ARG_NAME
    RESOURCE_INDEX_OF_TYPE = _AriaPy.ArConfigArg_RESOURCE_INDEX_OF_TYPE
    RESOURCE_INDEX_OF_PRIORITY = _AriaPy.ArConfigArg_RESOURCE_INDEX_OF_PRIORITY
    RESOURCE_INDEX_OF_RESTART_LEVEL = _AriaPy.ArConfigArg_RESOURCE_INDEX_OF_RESTART_LEVEL
    RESOURCE_INDEX_OF_PARENT_PATH = _AriaPy.ArConfigArg_RESOURCE_INDEX_OF_PARENT_PATH
    RESOURCE_INDEX_OF_DESCRIPTION = _AriaPy.ArConfigArg_RESOURCE_INDEX_OF_DESCRIPTION
    RESOURCE_INDEX_OF_EXTRA = _AriaPy.ArConfigArg_RESOURCE_INDEX_OF_EXTRA
    RESOURCE_INDEX_OF_DISPLAY = _AriaPy.ArConfigArg_RESOURCE_INDEX_OF_DISPLAY
    RESOURCE_INDEX_OF_NEW = _AriaPy.ArConfigArg_RESOURCE_INDEX_OF_NEW
    LIST_BEGIN_TAG = _swig_property(_AriaPy.ArConfigArg_LIST_BEGIN_TAG_get, _AriaPy.ArConfigArg_LIST_BEGIN_TAG_set)
    LIST_END_TAG = _swig_property(_AriaPy.ArConfigArg_LIST_END_TAG_get, _AriaPy.ArConfigArg_LIST_END_TAG_set)
    NULL_TAG = _swig_property(_AriaPy.ArConfigArg_NULL_TAG_get, _AriaPy.ArConfigArg_NULL_TAG_set)
    NEW_RESOURCE_TAG = _swig_property(_AriaPy.ArConfigArg_NEW_RESOURCE_TAG_get, _AriaPy.ArConfigArg_NEW_RESOURCE_TAG_set)
    def toString(*args):
        """
        toString(Type t) -> char
        toString(RestartLevel r) -> char
        """
        return _AriaPy.ArConfigArg_toString(*args)

    toString = staticmethod(toString)
    def typeFromString(*args):
        """typeFromString(char text) -> Type"""
        return _AriaPy.ArConfigArg_typeFromString(*args)

    typeFromString = staticmethod(typeFromString)
    def restartLevelFromString(*args):
        """restartLevelFromString(char text) -> RestartLevel"""
        return _AriaPy.ArConfigArg_restartLevelFromString(*args)

    restartLevelFromString = staticmethod(restartLevelFromString)
    def parseResourceSectionName(*args):
        """
        parseResourceSectionName(ArArgumentBuilder arg, char logPrefix = "") -> string
        parseResourceSectionName(ArArgumentBuilder arg) -> string
        """
        return _AriaPy.ArConfigArg_parseResourceSectionName(*args)

    parseResourceSectionName = staticmethod(parseResourceSectionName)
    def parseResourceArgName(*args):
        """
        parseResourceArgName(ArArgumentBuilder arg, char logPrefix = "") -> string
        parseResourceArgName(ArArgumentBuilder arg) -> string
        """
        return _AriaPy.ArConfigArg_parseResourceArgName(*args)

    parseResourceArgName = staticmethod(parseResourceArgName)
    def parseResourceType(*args):
        """
        parseResourceType(ArArgumentBuilder arg, char logPrefix = "") -> Type
        parseResourceType(ArArgumentBuilder arg) -> Type
        """
        return _AriaPy.ArConfigArg_parseResourceType(*args)

    parseResourceType = staticmethod(parseResourceType)
    def isResourceTopLevel(*args):
        """
        isResourceTopLevel(ArArgumentBuilder arg, char logPrefix = "") -> bool
        isResourceTopLevel(ArArgumentBuilder arg) -> bool
        """
        return _AriaPy.ArConfigArg_isResourceTopLevel(*args)

    isResourceTopLevel = staticmethod(isResourceTopLevel)
    def parseResourceParentPath(*args):
        """
        parseResourceParentPath(ArArgumentBuilder arg, char separator = '|', char logPrefix = "") -> std::list<(std::string,std::allocator<(std::string)>)>
        parseResourceParentPath(ArArgumentBuilder arg, char separator = '|') -> std::list<(std::string,std::allocator<(std::string)>)>
        parseResourceParentPath(ArArgumentBuilder arg) -> std::list<(std::string,std::allocator<(std::string)>)>
        """
        return _AriaPy.ArConfigArg_parseResourceParentPath(*args)

    parseResourceParentPath = staticmethod(parseResourceParentPath)
    def parseResourceDescription(*args):
        """
        parseResourceDescription(ArArgumentBuilder arg, char logPrefix = "") -> string
        parseResourceDescription(ArArgumentBuilder arg) -> string
        """
        return _AriaPy.ArConfigArg_parseResourceDescription(*args)

    parseResourceDescription = staticmethod(parseResourceDescription)
    def parseResourceExtra(*args):
        """
        parseResourceExtra(ArArgumentBuilder arg, char logPrefix = "") -> string
        parseResourceExtra(ArArgumentBuilder arg) -> string
        """
        return _AriaPy.ArConfigArg_parseResourceExtra(*args)

    parseResourceExtra = staticmethod(parseResourceExtra)
    __swig_destroy__ = _AriaPy.delete_ArConfigArg
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self) -> ArConfigArg
        __init__(self, char name, int pointer, char description = "", int minInt = INT_MIN) -> ArConfigArg
        __init__(self, char name, int pointer, char description = "") -> ArConfigArg
        __init__(self, char name, int pointer) -> ArConfigArg
        __init__(self, char name, short pointer, char description = "", int minInt = SHRT_MIN) -> ArConfigArg
        __init__(self, char name, short pointer, char description = "") -> ArConfigArg
        __init__(self, char name, short pointer) -> ArConfigArg
        __init__(self, char name, unsigned short pointer, char description = "", 
            int minInt = 0) -> ArConfigArg
        __init__(self, char name, unsigned short pointer, char description = "") -> ArConfigArg
        __init__(self, char name, unsigned short pointer) -> ArConfigArg
        __init__(self, char name, unsigned char pointer, char description = "", 
            int minInt = 0) -> ArConfigArg
        __init__(self, char name, unsigned char pointer, char description = "") -> ArConfigArg
        __init__(self, char name, unsigned char pointer) -> ArConfigArg
        __init__(self, char name, double pointer, char description = "", double minDouble = -HUGE_VAL, 
            double maxDouble = HUGE_VAL, 
            int precision = DEFAULT_DOUBLE_PRECISION) -> ArConfigArg
        __init__(self, char name, double pointer, char description = "", double minDouble = -HUGE_VAL) -> ArConfigArg
        __init__(self, char name, double pointer, char description = "") -> ArConfigArg
        __init__(self, char name, double pointer) -> ArConfigArg
        __init__(self, char name, bool pointer) -> ArConfigArg
        __init__(self, char name, char str, char description, size_t maxStrLen) -> ArConfigArg
        __init__(self, char name, char str, char description) -> ArConfigArg
        __init__(self, char name, string str, char description) -> ArConfigArg
        __init__(self, char name, int val, char description = "", int minInt = INT_MIN, 
            int maxInt = INT_MAX) -> ArConfigArg
        __init__(self, char name, int val, char description = "", int minInt = INT_MIN) -> ArConfigArg
        __init__(self, char name, int val, char description = "") -> ArConfigArg
        __init__(self, char name, int val) -> ArConfigArg
        __init__(self, char name, double val, char description = "", double minDouble = -HUGE_VAL, 
            double maxDouble = HUGE_VAL, 
            int precision = DEFAULT_DOUBLE_PRECISION) -> ArConfigArg
        __init__(self, char name, double val, char description = "", double minDouble = -HUGE_VAL, 
            double maxDouble = HUGE_VAL) -> ArConfigArg
        __init__(self, char name, double val, char description = "", double minDouble = -HUGE_VAL) -> ArConfigArg
        __init__(self, char name, double val, char description = "") -> ArConfigArg
        __init__(self, char name, double val) -> ArConfigArg
        __init__(self, char name, bool val, char description = "") -> ArConfigArg
        __init__(self, char name, bool val) -> ArConfigArg
        __init__(self, char name, ArRetFunctor1_Bool_ArgumentBuilderP setFunctor, 
            ArRetFunctor<(p.q(const).std::list<(p.ArArgumentBuilder,std::allocator<(p.ArArgumentBuilder)>)>)> getFunctor, 
            char description) -> ArConfigArg
        __init__(self, char str, Type type = DESCRIPTION_HOLDER) -> ArConfigArg
        __init__(self, char str) -> ArConfigArg
        __init__(self, char name, char str) -> ArConfigArg
        __init__(self, Type type, char name, char description) -> ArConfigArg
        __init__(self, Type type) -> ArConfigArg
        __init__(self, char argName, ArConfigArg arg) -> ArConfigArg
        __init__(self, ArConfigArg arg) -> ArConfigArg
        """
        this = _AriaPy.new_ArConfigArg(*args)
        try: self.this.append(this)
        except: self.this = this
    def copyAndDetach(self, *args):
        """copyAndDetach(self, ArConfigArg arg)"""
        return _AriaPy.ArConfigArg_copyAndDetach(self, *args)

    def copyTranslation(self, *args):
        """copyTranslation(self, ArConfigArg arg) -> bool"""
        return _AriaPy.ArConfigArg_copyTranslation(self, *args)

    def promoteList(self, *args):
        """promoteList(self, ArConfigArg arg) -> bool"""
        return _AriaPy.ArConfigArg_promoteList(self, *args)

    def isListType(self):
        """isListType(self) -> bool"""
        return _AriaPy.ArConfigArg_isListType(self)

    def getType(self):
        """getType(self) -> Type"""
        return _AriaPy.ArConfigArg_getType(self)

    def getName(self):
        """getName(self) -> char"""
        return _AriaPy.ArConfigArg_getName(self)

    def getDescription(self):
        """getDescription(self) -> char"""
        return _AriaPy.ArConfigArg_getDescription(self)

    def setDescription(self, *args):
        """setDescription(self, char description)"""
        return _AriaPy.ArConfigArg_setDescription(self, *args)

    def setExtraExplanation(self, *args):
        """setExtraExplanation(self, char extraExplanation)"""
        return _AriaPy.ArConfigArg_setExtraExplanation(self, *args)

    def getExtraExplanation(self):
        """getExtraExplanation(self) -> char"""
        return _AriaPy.ArConfigArg_getExtraExplanation(self)

    def setInt(self, *args):
        """
        setInt(self, int val, char errorBuffer = None, size_t errorBufferLen = 0, 
            bool doNotSet = False) -> bool
        setInt(self, int val, char errorBuffer = None, size_t errorBufferLen = 0) -> bool
        setInt(self, int val, char errorBuffer = None) -> bool
        setInt(self, int val) -> bool
        """
        return _AriaPy.ArConfigArg_setInt(self, *args)

    def setDouble(self, *args):
        """
        setDouble(self, double val, char errorBuffer = None, size_t errorBufferLen = 0, 
            bool doNotSet = False) -> bool
        setDouble(self, double val, char errorBuffer = None, size_t errorBufferLen = 0) -> bool
        setDouble(self, double val, char errorBuffer = None) -> bool
        setDouble(self, double val) -> bool
        """
        return _AriaPy.ArConfigArg_setDouble(self, *args)

    def setBool(self, *args):
        """
        setBool(self, bool val, char errorBuffer = None, size_t errorBufferLen = 0, 
            bool doNotSet = False) -> bool
        setBool(self, bool val, char errorBuffer = None, size_t errorBufferLen = 0) -> bool
        setBool(self, bool val, char errorBuffer = None) -> bool
        setBool(self, bool val) -> bool
        """
        return _AriaPy.ArConfigArg_setBool(self, *args)

    def setString(self, *args):
        """
        setString(self, char str, char errorBuffer = None, size_t errorBufferLen = 0, 
            bool doNotSet = False) -> bool
        setString(self, char str, char errorBuffer = None, size_t errorBufferLen = 0) -> bool
        setString(self, char str, char errorBuffer = None) -> bool
        setString(self, char str) -> bool
        """
        return _AriaPy.ArConfigArg_setString(self, *args)

    def setCppString(self, *args):
        """
        setCppString(self, string str, char errorBuffer = None, size_t errorBufferLen = 0, 
            bool doNotSet = False) -> bool
        setCppString(self, string str, char errorBuffer = None, size_t errorBufferLen = 0) -> bool
        setCppString(self, string str, char errorBuffer = None) -> bool
        setCppString(self, string str) -> bool
        """
        return _AriaPy.ArConfigArg_setCppString(self, *args)

    def setArgWithFunctor(self, *args):
        """
        setArgWithFunctor(self, ArArgumentBuilder argument, char errorBuffer = None, 
            size_t errorBufferLen = 0, bool doNotSet = False) -> bool
        setArgWithFunctor(self, ArArgumentBuilder argument, char errorBuffer = None, 
            size_t errorBufferLen = 0) -> bool
        setArgWithFunctor(self, ArArgumentBuilder argument, char errorBuffer = None) -> bool
        setArgWithFunctor(self, ArArgumentBuilder argument) -> bool
        """
        return _AriaPy.ArConfigArg_setArgWithFunctor(self, *args)

    def getInt(self, ok = None):
        """
        getInt(self, bool ok = None) -> int
        getInt(self) -> int
        """
        return _AriaPy.ArConfigArg_getInt(self, ok)

    def getMinInt(self, ok = None):
        """
        getMinInt(self, bool ok = None) -> int
        getMinInt(self) -> int
        """
        return _AriaPy.ArConfigArg_getMinInt(self, ok)

    def getMaxInt(self, ok = None):
        """
        getMaxInt(self, bool ok = None) -> int
        getMaxInt(self) -> int
        """
        return _AriaPy.ArConfigArg_getMaxInt(self, ok)

    def getDouble(self, ok = None):
        """
        getDouble(self, bool ok = None) -> double
        getDouble(self) -> double
        """
        return _AriaPy.ArConfigArg_getDouble(self, ok)

    def getMinDouble(self, ok = None):
        """
        getMinDouble(self, bool ok = None) -> double
        getMinDouble(self) -> double
        """
        return _AriaPy.ArConfigArg_getMinDouble(self, ok)

    def getMaxDouble(self, ok = None):
        """
        getMaxDouble(self, bool ok = None) -> double
        getMaxDouble(self) -> double
        """
        return _AriaPy.ArConfigArg_getMaxDouble(self, ok)

    def getDoublePrecision(self, ok = None):
        """
        getDoublePrecision(self, bool ok = None) -> int
        getDoublePrecision(self) -> int
        """
        return _AriaPy.ArConfigArg_getDoublePrecision(self, ok)

    def getBool(self, ok = None):
        """
        getBool(self, bool ok = None) -> bool
        getBool(self) -> bool
        """
        return _AriaPy.ArConfigArg_getBool(self, ok)

    def getString(self, ok = None):
        """
        getString(self, bool ok = None) -> char
        getString(self) -> char
        """
        return _AriaPy.ArConfigArg_getString(self, ok)

    def getArgsWithFunctor(self, ok = None):
        """
        getArgsWithFunctor(self, bool ok = None) -> ArArgumentBuilderPtrList
        getArgsWithFunctor(self) -> ArArgumentBuilderPtrList
        """
        return _AriaPy.ArConfigArg_getArgsWithFunctor(self, ok)

    def getCppString(self, ok = None):
        """
        getCppString(self, bool ok = None) -> string
        getCppString(self) -> string
        """
        return _AriaPy.ArConfigArg_getCppString(self, ok)

    def getCppStringPtr(self, ok = None):
        """
        getCppStringPtr(self, bool ok = None) -> string
        getCppStringPtr(self) -> string
        """
        return _AriaPy.ArConfigArg_getCppStringPtr(self, ok)

    def addArg(self, *args):
        """addArg(self, ArConfigArg arg) -> bool"""
        return _AriaPy.ArConfigArg_addArg(self, *args)

    def removeArg(self, *args):
        """removeArg(self, ArConfigArg arg) -> bool"""
        return _AriaPy.ArConfigArg_removeArg(self, *args)

    def hasArgs(self):
        """hasArgs(self) -> bool"""
        return _AriaPy.ArConfigArg_hasArgs(self)

    def getArgCount(self):
        """getArgCount(self) -> size_t"""
        return _AriaPy.ArConfigArg_getArgCount(self)

    def getDescendantArgCount(self):
        """getDescendantArgCount(self) -> size_t"""
        return _AriaPy.ArConfigArg_getDescendantArgCount(self)

    def getArgs(self, ok = None):
        """
        getArgs(self, bool ok = None) -> std::list<(ArConfigArg,std::allocator<(ArConfigArg)>)>
        getArgs(self) -> std::list<(ArConfigArg,std::allocator<(ArConfigArg)>)>
        """
        return _AriaPy.ArConfigArg_getArgs(self, ok)

    def getArg(self, *args):
        """
        getArg(self, size_t index) -> ArConfigArg
        getArg(self, size_t index) -> ArConfigArg
        """
        return _AriaPy.ArConfigArg_getArg(self, *args)

    def findArg(self, *args):
        """
        findArg(self, char childParamName) -> ArConfigArg
        findArg(self, char childParamName) -> ArConfigArg
        """
        return _AriaPy.ArConfigArg_findArg(self, *args)

    def getAncestorList(self, *args):
        """getAncestorList(self, std::list<(p.ArConfigArg,std::allocator<(p.ArConfigArg)>)> ancestorListOut) -> bool"""
        return _AriaPy.ArConfigArg_getAncestorList(self, *args)

    def getTopLevelArg(self):
        """getTopLevelArg(self) -> ArConfigArg"""
        return _AriaPy.ArConfigArg_getTopLevelArg(self)

    def getConfigPriority(self):
        """getConfigPriority(self) -> Priority"""
        return _AriaPy.ArConfigArg_getConfigPriority(self)

    def setConfigPriority(self, *args):
        """setConfigPriority(self, Priority priority)"""
        return _AriaPy.ArConfigArg_setConfigPriority(self, *args)

    def getDisplayHint(self):
        """getDisplayHint(self) -> char"""
        return _AriaPy.ArConfigArg_getDisplayHint(self)

    def setDisplayHint(self, *args):
        """setDisplayHint(self, char hintText)"""
        return _AriaPy.ArConfigArg_setDisplayHint(self, *args)

    def getRestartLevel(self):
        """getRestartLevel(self) -> RestartLevel"""
        return _AriaPy.ArConfigArg_getRestartLevel(self)

    def setRestartLevel(self, *args):
        """setRestartLevel(self, RestartLevel level)"""
        return _AriaPy.ArConfigArg_setRestartLevel(self, *args)

    def getSuppressChanges(self):
        """getSuppressChanges(self) -> bool"""
        return _AriaPy.ArConfigArg_getSuppressChanges(self)

    def setSuppressChanges(self, *args):
        """setSuppressChanges(self, bool suppressChanges)"""
        return _AriaPy.ArConfigArg_setSuppressChanges(self, *args)

    def isSerializable(self):
        """isSerializable(self) -> bool"""
        return _AriaPy.ArConfigArg_isSerializable(self)

    def setSerializable(self, *args):
        """setSerializable(self, bool isSerializable)"""
        return _AriaPy.ArConfigArg_setSerializable(self, *args)

    def getParentArg(self):
        """getParentArg(self) -> ArConfigArg"""
        return _AriaPy.ArConfigArg_getParentArg(self)

    def getParentPathName(self, separator = '|'):
        """
        getParentPathName(self, char separator = '|') -> string
        getParentPathName(self) -> string
        """
        return _AriaPy.ArConfigArg_getParentPathName(self, separator)

    def splitParentPathName(*args):
        """
        splitParentPathName(char parentPathName, char separator = '|') -> std::list<(std::string,std::allocator<(std::string)>)>
        splitParentPathName(char parentPathName) -> std::list<(std::string,std::allocator<(std::string)>)>
        """
        return _AriaPy.ArConfigArg_splitParentPathName(*args)

    splitParentPathName = staticmethod(splitParentPathName)
    def replaceSpacesInName(self):
        """replaceSpacesInName(self)"""
        return _AriaPy.ArConfigArg_replaceSpacesInName(self)

    def hasMinBound(self):
        """hasMinBound(self) -> bool"""
        return _AriaPy.ArConfigArg_hasMinBound(self)

    def hasMaxBound(self):
        """hasMaxBound(self) -> bool"""
        return _AriaPy.ArConfigArg_hasMaxBound(self)

    def setIgnoreBounds(self, ignoreBounds = False):
        """
        setIgnoreBounds(self, bool ignoreBounds = False)
        setIgnoreBounds(self)
        """
        return _AriaPy.ArConfigArg_setIgnoreBounds(self, ignoreBounds)

    def hasExternalDataReference(self):
        """hasExternalDataReference(self) -> bool"""
        return _AriaPy.ArConfigArg_hasExternalDataReference(self)

    def isPlaceholder(self):
        """isPlaceholder(self) -> bool"""
        return _AriaPy.ArConfigArg_isPlaceholder(self)

    def addToFileParser(self, *args):
        """
        addToFileParser(self, ArFileParser parser, ArRetFunctor3C<(bool,ArConfig,p.ArArgumentBuilder,p.char,size_t)> parserCB, 
            char logPrefix = "", 
            bool isQuiet = False) -> bool
        addToFileParser(self, ArFileParser parser, ArRetFunctor3C<(bool,ArConfig,p.ArArgumentBuilder,p.char,size_t)> parserCB, 
            char logPrefix = "") -> bool
        addToFileParser(self, ArFileParser parser, ArRetFunctor3C<(bool,ArConfig,p.ArArgumentBuilder,p.char,size_t)> parserCB) -> bool
        """
        return _AriaPy.ArConfigArg_addToFileParser(self, *args)

    def parseArgument(self, *args):
        """
        parseArgument(self, ArArgumentBuilder arg, char errorBuffer, size_t errorBufferLen, 
            char logPrefix = "", bool isQuiet = False, 
            bool changed = None) -> bool
        parseArgument(self, ArArgumentBuilder arg, char errorBuffer, size_t errorBufferLen, 
            char logPrefix = "", bool isQuiet = False) -> bool
        parseArgument(self, ArArgumentBuilder arg, char errorBuffer, size_t errorBufferLen, 
            char logPrefix = "") -> bool
        parseArgument(self, ArArgumentBuilder arg, char errorBuffer, size_t errorBufferLen) -> bool
        """
        return _AriaPy.ArConfigArg_parseArgument(self, *args)

    def writeArguments(self, *args):
        """
        writeArguments(self, FILE file, char lineBuf, int lineBufSize, int startCommentColumn, 
            bool isWriteExtra = False, char logPrefix = "", 
            int indentLevel = 0) -> bool
        writeArguments(self, FILE file, char lineBuf, int lineBufSize, int startCommentColumn, 
            bool isWriteExtra = False, char logPrefix = "") -> bool
        writeArguments(self, FILE file, char lineBuf, int lineBufSize, int startCommentColumn, 
            bool isWriteExtra = False) -> bool
        writeArguments(self, FILE file, char lineBuf, int lineBufSize, int startCommentColumn) -> bool
        """
        return _AriaPy.ArConfigArg_writeArguments(self, *args)

    def writeName(self, *args):
        """writeName(self, char lineBuf, int lineBufSize, int indentLevel) -> bool"""
        return _AriaPy.ArConfigArg_writeName(self, *args)

    def writeBounds(self, *args):
        """
        writeBounds(self, char line, size_t lineLen, char logPrefix = "") -> bool
        writeBounds(self, char line, size_t lineLen) -> bool
        """
        return _AriaPy.ArConfigArg_writeBounds(self, *args)

    def isNone(*args):
        """isNone(char argText) -> bool"""
        return _AriaPy.ArConfigArg_isNone(*args)

    isNone = staticmethod(isNone)
    def parseSocket(self, *args):
        """parseSocket(self, ArArgumentBuilder args, char errorBuffer, size_t errorBufferLen) -> bool"""
        return _AriaPy.ArConfigArg_parseSocket(self, *args)

    def writeValue(self, *args):
        """writeValue(self, ArSocket socket, char intro) -> bool"""
        return _AriaPy.ArConfigArg_writeValue(self, *args)

    def writeInfo(self, *args):
        """writeInfo(self, ArSocket socket, char intro) -> bool"""
        return _AriaPy.ArConfigArg_writeInfo(self, *args)

    def log(self, verbose = False, indentCount = 1, logPrefix = ""):
        """
        log(self, bool verbose = False, int indentCount = 1, char logPrefix = "")
        log(self, bool verbose = False, int indentCount = 1)
        log(self, bool verbose = False)
        log(self)
        """
        return _AriaPy.ArConfigArg_log(self, verbose, indentCount, logPrefix)

    def isValueEqual(self, *args):
        """isValueEqual(self, ArConfigArg other) -> bool"""
        return _AriaPy.ArConfigArg_isValueEqual(self, *args)

    def setValue(self, *args):
        """
        setValue(self, ArConfigArg source, bool isVerifyArgNames = False) -> bool
        setValue(self, ArConfigArg source) -> bool
        """
        return _AriaPy.ArConfigArg_setValue(self, *args)

    def isValueSet(self):
        """isValueSet(self) -> bool"""
        return _AriaPy.ArConfigArg_isValueSet(self)

    def clearValueSet(self):
        """clearValueSet(self)"""
        return _AriaPy.ArConfigArg_clearValueSet(self)

    def setValueSet(self):
        """setValueSet(self)"""
        return _AriaPy.ArConfigArg_setValueSet(self)

    def isTranslated(self):
        """isTranslated(self) -> bool"""
        return _AriaPy.ArConfigArg_isTranslated(self)

    def setTranslated(self, *args):
        """setTranslated(self, bool b)"""
        return _AriaPy.ArConfigArg_setTranslated(self, *args)

    MAX_RESOURCE_ARG_TEXT_LENGTH = _AriaPy.ArConfigArg_MAX_RESOURCE_ARG_TEXT_LENGTH
    def parseResource(self, *args):
        """
        parseResource(self, ArArgumentBuilder arg, char errorBuffer, size_t errorBufferLen, 
            char logPrefix = "", bool isQuiet = False) -> bool
        parseResource(self, ArArgumentBuilder arg, char errorBuffer, size_t errorBufferLen, 
            char logPrefix = "") -> bool
        parseResource(self, ArArgumentBuilder arg, char errorBuffer, size_t errorBufferLen) -> bool
        """
        return _AriaPy.ArConfigArg_parseResource(self, *args)

    def parseResourceArgText(*args):
        """parseResourceArgText(char argText, char bufOut, size_t bufLen) -> bool"""
        return _AriaPy.ArConfigArg_parseResourceArgText(*args)

    parseResourceArgText = staticmethod(parseResourceArgText)
    def writeResource(self, *args):
        """
        writeResource(self, FILE file, char lineBuf, int lineBufSize, char separatorChar, 
            char sectionName, char logPrefix = "") -> bool
        writeResource(self, FILE file, char lineBuf, int lineBufSize, char separatorChar, 
            char sectionName) -> bool
        """
        return _AriaPy.ArConfigArg_writeResource(self, *args)

    def writeResourceHeader(*args):
        """
        writeResourceHeader(FILE file, char lineBuf, int lineBufSize, char separatorChar, 
            char sectionTitle, char logPrefix = "") -> int
        writeResourceHeader(FILE file, char lineBuf, int lineBufSize, char separatorChar, 
            char sectionTitle) -> int
        """
        return _AriaPy.ArConfigArg_writeResourceHeader(*args)

    writeResourceHeader = staticmethod(writeResourceHeader)
    def writeResourceSectionHeader(*args):
        """
        writeResourceSectionHeader(FILE file, char lineBuf, int lineBufSize, char separatorChar, 
            char sectionName, char sectionDesc, 
            char sectionExtra, char sectionDisplayName, 
            bool isTranslated, char logPrefix = "") -> int
        writeResourceSectionHeader(FILE file, char lineBuf, int lineBufSize, char separatorChar, 
            char sectionName, char sectionDesc, 
            char sectionExtra, char sectionDisplayName, 
            bool isTranslated) -> int
        """
        return _AriaPy.ArConfigArg_writeResourceSectionHeader(*args)

    writeResourceSectionHeader = staticmethod(writeResourceSectionHeader)
ArConfigArg_swigregister = _AriaPy.ArConfigArg_swigregister
ArConfigArg_swigregister(ArConfigArg)

def ArConfigArg_toString(*args):
  """
    toString(Type t) -> char
    ArConfigArg_toString(RestartLevel r) -> char
    """
  return _AriaPy.ArConfigArg_toString(*args)

def ArConfigArg_typeFromString(*args):
  """ArConfigArg_typeFromString(char text) -> Type"""
  return _AriaPy.ArConfigArg_typeFromString(*args)

def ArConfigArg_restartLevelFromString(*args):
  """ArConfigArg_restartLevelFromString(char text) -> RestartLevel"""
  return _AriaPy.ArConfigArg_restartLevelFromString(*args)

def ArConfigArg_parseResourceSectionName(*args):
  """
    parseResourceSectionName(ArArgumentBuilder arg, char logPrefix = "") -> string
    ArConfigArg_parseResourceSectionName(ArArgumentBuilder arg) -> string
    """
  return _AriaPy.ArConfigArg_parseResourceSectionName(*args)

def ArConfigArg_parseResourceArgName(*args):
  """
    parseResourceArgName(ArArgumentBuilder arg, char logPrefix = "") -> string
    ArConfigArg_parseResourceArgName(ArArgumentBuilder arg) -> string
    """
  return _AriaPy.ArConfigArg_parseResourceArgName(*args)

def ArConfigArg_parseResourceType(*args):
  """
    parseResourceType(ArArgumentBuilder arg, char logPrefix = "") -> Type
    ArConfigArg_parseResourceType(ArArgumentBuilder arg) -> Type
    """
  return _AriaPy.ArConfigArg_parseResourceType(*args)

def ArConfigArg_isResourceTopLevel(*args):
  """
    isResourceTopLevel(ArArgumentBuilder arg, char logPrefix = "") -> bool
    ArConfigArg_isResourceTopLevel(ArArgumentBuilder arg) -> bool
    """
  return _AriaPy.ArConfigArg_isResourceTopLevel(*args)

def ArConfigArg_parseResourceParentPath(*args):
  """
    parseResourceParentPath(ArArgumentBuilder arg, char separator = '|', char logPrefix = "") -> std::list<(std::string,std::allocator<(std::string)>)>
    parseResourceParentPath(ArArgumentBuilder arg, char separator = '|') -> std::list<(std::string,std::allocator<(std::string)>)>
    ArConfigArg_parseResourceParentPath(ArArgumentBuilder arg) -> std::list<(std::string,std::allocator<(std::string)>)>
    """
  return _AriaPy.ArConfigArg_parseResourceParentPath(*args)

def ArConfigArg_parseResourceDescription(*args):
  """
    parseResourceDescription(ArArgumentBuilder arg, char logPrefix = "") -> string
    ArConfigArg_parseResourceDescription(ArArgumentBuilder arg) -> string
    """
  return _AriaPy.ArConfigArg_parseResourceDescription(*args)

def ArConfigArg_parseResourceExtra(*args):
  """
    parseResourceExtra(ArArgumentBuilder arg, char logPrefix = "") -> string
    ArConfigArg_parseResourceExtra(ArArgumentBuilder arg) -> string
    """
  return _AriaPy.ArConfigArg_parseResourceExtra(*args)

def ArConfigArg_splitParentPathName(*args):
  """
    splitParentPathName(char parentPathName, char separator = '|') -> std::list<(std::string,std::allocator<(std::string)>)>
    ArConfigArg_splitParentPathName(char parentPathName) -> std::list<(std::string,std::allocator<(std::string)>)>
    """
  return _AriaPy.ArConfigArg_splitParentPathName(*args)

def ArConfigArg_isNone(*args):
  """ArConfigArg_isNone(char argText) -> bool"""
  return _AriaPy.ArConfigArg_isNone(*args)

def ArConfigArg_parseResourceArgText(*args):
  """ArConfigArg_parseResourceArgText(char argText, char bufOut, size_t bufLen) -> bool"""
  return _AriaPy.ArConfigArg_parseResourceArgText(*args)

def ArConfigArg_writeResourceHeader(*args):
  """
    writeResourceHeader(FILE file, char lineBuf, int lineBufSize, char separatorChar, 
        char sectionTitle, char logPrefix = "") -> int
    ArConfigArg_writeResourceHeader(FILE file, char lineBuf, int lineBufSize, char separatorChar, 
        char sectionTitle) -> int
    """
  return _AriaPy.ArConfigArg_writeResourceHeader(*args)

def ArConfigArg_writeResourceSectionHeader(*args):
  """
    writeResourceSectionHeader(FILE file, char lineBuf, int lineBufSize, char separatorChar, 
        char sectionName, char sectionDesc, 
        char sectionExtra, char sectionDisplayName, 
        bool isTranslated, char logPrefix = "") -> int
    ArConfigArg_writeResourceSectionHeader(FILE file, char lineBuf, int lineBufSize, char separatorChar, 
        char sectionName, char sectionDesc, 
        char sectionExtra, char sectionDisplayName, 
        bool isTranslated) -> int
    """
  return _AriaPy.ArConfigArg_writeResourceSectionHeader(*args)

class ArConfigGroup(object):
    """Proxy of C++ ArConfigGroup class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, baseDirectory = None): 
        """
        __init__(self, char baseDirectory = None) -> ArConfigGroup
        __init__(self) -> ArConfigGroup
        """
        this = _AriaPy.new_ArConfigGroup(baseDirectory)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArConfigGroup
    __del__ = lambda self : None;
    def addConfig(self, *args):
        """addConfig(self, ArConfig config)"""
        return _AriaPy.ArConfigGroup_addConfig(self, *args)

    def remConfig(self, *args):
        """remConfig(self, ArConfig config)"""
        return _AriaPy.ArConfigGroup_remConfig(self, *args)

    def parseFile(self, *args):
        """
        parseFile(self, char fileName, bool continueOnError = False) -> bool
        parseFile(self, char fileName) -> bool
        """
        return _AriaPy.ArConfigGroup_parseFile(self, *args)

    def reloadFile(self, continueOnError = True):
        """
        reloadFile(self, bool continueOnError = True) -> bool
        reloadFile(self) -> bool
        """
        return _AriaPy.ArConfigGroup_reloadFile(self, continueOnError)

    def writeFile(self, *args):
        """writeFile(self, char fileName) -> bool"""
        return _AriaPy.ArConfigGroup_writeFile(self, *args)

    def setBaseDirectory(self, *args):
        """setBaseDirectory(self, char baseDirectory)"""
        return _AriaPy.ArConfigGroup_setBaseDirectory(self, *args)

    def getBaseDirectory(self):
        """getBaseDirectory(self) -> char"""
        return _AriaPy.ArConfigGroup_getBaseDirectory(self)

ArConfigGroup_swigregister = _AriaPy.ArConfigGroup_swigregister
ArConfigGroup_swigregister(ArConfigGroup)

class ArDataLogger(object):
    """Proxy of C++ ArDataLogger class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ArRobot robot, char fileName = None) -> ArDataLogger
        __init__(self, ArRobot robot) -> ArDataLogger
        """
        this = _AriaPy.new_ArDataLogger(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArDataLogger
    __del__ = lambda self : None;
    def addToConfig(self, *args):
        """addToConfig(self, ArConfig config)"""
        return _AriaPy.ArDataLogger_addToConfig(self, *args)

    def addString(self, *args):
        """addString(self, char name, UByte2 maxLen, ArFunctor2<(p.char,ArTypes::UByte2)> functor)"""
        return _AriaPy.ArDataLogger_addString(self, *args)

    def getAddStringFunctor(self):
        """getAddStringFunctor(self) -> ArFunctor3<(p.q(const).char,ArTypes::UByte2,p.ArFunctor2<(p.char,ArTypes::UByte2)>)>"""
        return _AriaPy.ArDataLogger_getAddStringFunctor(self)

ArDataLogger_swigregister = _AriaPy.ArDataLogger_swigregister
ArDataLogger_swigregister(ArDataLogger)

class ArDPPTUCommands(object):
    """Proxy of C++ ArDPPTUCommands class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DELIM = _AriaPy.ArDPPTUCommands_DELIM
    INIT = _AriaPy.ArDPPTUCommands_INIT
    ACCEL = _AriaPy.ArDPPTUCommands_ACCEL
    BASE = _AriaPy.ArDPPTUCommands_BASE
    CONTROL = _AriaPy.ArDPPTUCommands_CONTROL
    DISABLE = _AriaPy.ArDPPTUCommands_DISABLE
    ENABLE = _AriaPy.ArDPPTUCommands_ENABLE
    FACTORY = _AriaPy.ArDPPTUCommands_FACTORY
    HALT = _AriaPy.ArDPPTUCommands_HALT
    IMMED = _AriaPy.ArDPPTUCommands_IMMED
    LIMIT = _AriaPy.ArDPPTUCommands_LIMIT
    MONITOR = _AriaPy.ArDPPTUCommands_MONITOR
    OFFSET = _AriaPy.ArDPPTUCommands_OFFSET
    PAN = _AriaPy.ArDPPTUCommands_PAN
    RESET = _AriaPy.ArDPPTUCommands_RESET
    SPEED = _AriaPy.ArDPPTUCommands_SPEED
    TILT = _AriaPy.ArDPPTUCommands_TILT
    UPPER = _AriaPy.ArDPPTUCommands_UPPER
    VELOCITY = _AriaPy.ArDPPTUCommands_VELOCITY
    def __init__(self): 
        """__init__(self) -> ArDPPTUCommands"""
        this = _AriaPy.new_ArDPPTUCommands()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArDPPTUCommands
    __del__ = lambda self : None;
ArDPPTUCommands_swigregister = _AriaPy.ArDPPTUCommands_swigregister
ArDPPTUCommands_swigregister(ArDPPTUCommands)

class ArDPPTUPacket(ArBasePacket):
    """Proxy of C++ ArDPPTUPacket class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, bufferSize = 30): 
        """
        __init__(self, UByte2 bufferSize = 30) -> ArDPPTUPacket
        __init__(self) -> ArDPPTUPacket
        """
        this = _AriaPy.new_ArDPPTUPacket(bufferSize)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArDPPTUPacket
    __del__ = lambda self : None;
    def byte2ToBuf(self, *args):
        """byte2ToBuf(self, int val)"""
        return _AriaPy.ArDPPTUPacket_byte2ToBuf(self, *args)

    def finalizePacket(self):
        """finalizePacket(self)"""
        return _AriaPy.ArDPPTUPacket_finalizePacket(self)

ArDPPTUPacket_swigregister = _AriaPy.ArDPPTUPacket_swigregister
ArDPPTUPacket_swigregister(ArDPPTUPacket)

class ArDPPTU(ArPTZ):
    """Proxy of C++ ArDPPTU class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    PANTILT_DEFAULT = _AriaPy.ArDPPTU_PANTILT_DEFAULT
    PANTILT_PTUD47 = _AriaPy.ArDPPTU_PANTILT_PTUD47
    PANTILT_PTUD46 = _AriaPy.ArDPPTU_PANTILT_PTUD46
    PAN = _AriaPy.ArDPPTU_PAN
    TILT = _AriaPy.ArDPPTU_TILT
    def __init__(self, *args): 
        """
        __init__(self, ArRobot robot, DeviceType deviceType = PANTILT_DEFAULT, 
            int deviceIndex = -1) -> ArDPPTU
        __init__(self, ArRobot robot, DeviceType deviceType = PANTILT_DEFAULT) -> ArDPPTU
        __init__(self, ArRobot robot) -> ArDPPTU
        """
        this = _AriaPy.new_ArDPPTU(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArDPPTU
    __del__ = lambda self : None;
    def init(self):
        """init(self) -> bool"""
        return _AriaPy.ArDPPTU_init(self)

    def getTypeName(self):
        """getTypeName(self) -> char"""
        return _AriaPy.ArDPPTU_getTypeName(self)

    def canZoom(self):
        """canZoom(self) -> bool"""
        return _AriaPy.ArDPPTU_canZoom(self)

    def canGetRealPanTilt(self):
        """canGetRealPanTilt(self) -> bool"""
        return _AriaPy.ArDPPTU_canGetRealPanTilt(self)

    def blank(self):
        """blank(self) -> bool"""
        return _AriaPy.ArDPPTU_blank(self)

    def resetCalib(self):
        """resetCalib(self) -> bool"""
        return _AriaPy.ArDPPTU_resetCalib(self)

    def disableReset(self):
        """disableReset(self) -> bool"""
        return _AriaPy.ArDPPTU_disableReset(self)

    def resetTilt(self):
        """resetTilt(self) -> bool"""
        return _AriaPy.ArDPPTU_resetTilt(self)

    def resetPan(self):
        """resetPan(self) -> bool"""
        return _AriaPy.ArDPPTU_resetPan(self)

    def resetAll(self):
        """resetAll(self) -> bool"""
        return _AriaPy.ArDPPTU_resetAll(self)

    def enMon(self):
        """enMon(self) -> bool"""
        return _AriaPy.ArDPPTU_enMon(self)

    def disMon(self):
        """disMon(self) -> bool"""
        return _AriaPy.ArDPPTU_disMon(self)

    def saveSet(self):
        """saveSet(self) -> bool"""
        return _AriaPy.ArDPPTU_saveSet(self)

    def restoreSet(self):
        """restoreSet(self) -> bool"""
        return _AriaPy.ArDPPTU_restoreSet(self)

    def factorySet(self):
        """factorySet(self) -> bool"""
        return _AriaPy.ArDPPTU_factorySet(self)

    def awaitExec(self):
        """awaitExec(self) -> bool"""
        return _AriaPy.ArDPPTU_awaitExec(self)

    def haltAll(self):
        """haltAll(self) -> bool"""
        return _AriaPy.ArDPPTU_haltAll(self)

    def haltPan(self):
        """haltPan(self) -> bool"""
        return _AriaPy.ArDPPTU_haltPan(self)

    def haltTilt(self):
        """haltTilt(self) -> bool"""
        return _AriaPy.ArDPPTU_haltTilt(self)

    def initMon(self, *args):
        """initMon(self, double deg1, double deg2, double deg3, double deg4) -> bool"""
        return _AriaPy.ArDPPTU_initMon(self, *args)

    def limitEnforce(self, *args):
        """limitEnforce(self, bool val) -> bool"""
        return _AriaPy.ArDPPTU_limitEnforce(self, *args)

    def immedExec(self):
        """immedExec(self) -> bool"""
        return _AriaPy.ArDPPTU_immedExec(self)

    def slaveExec(self):
        """slaveExec(self) -> bool"""
        return _AriaPy.ArDPPTU_slaveExec(self)

    def getMaxPanSlew(self):
        """getMaxPanSlew(self) -> double"""
        return _AriaPy.ArDPPTU_getMaxPanSlew(self)

    def getMaxPanSpeed(self):
        """getMaxPanSpeed(self) -> double"""
        return _AriaPy.ArDPPTU_getMaxPanSpeed(self)

    def getMinPanSlew(self):
        """getMinPanSlew(self) -> double"""
        return _AriaPy.ArDPPTU_getMinPanSlew(self)

    def getMaxTiltSlew(self):
        """getMaxTiltSlew(self) -> double"""
        return _AriaPy.ArDPPTU_getMaxTiltSlew(self)

    def getMaxTiltSpeed(self):
        """getMaxTiltSpeed(self) -> double"""
        return _AriaPy.ArDPPTU_getMaxTiltSpeed(self)

    def getMinTiltSlew(self):
        """getMinTiltSlew(self) -> double"""
        return _AriaPy.ArDPPTU_getMinTiltSlew(self)

    def getMaxPanAccel(self):
        """getMaxPanAccel(self) -> double"""
        return _AriaPy.ArDPPTU_getMaxPanAccel(self)

    def getMinPanAccel(self):
        """getMinPanAccel(self) -> double"""
        return _AriaPy.ArDPPTU_getMinPanAccel(self)

    def getMaxTiltAccel(self):
        """getMaxTiltAccel(self) -> double"""
        return _AriaPy.ArDPPTU_getMaxTiltAccel(self)

    def getMinTiltAccel(self):
        """getMinTiltAccel(self) -> double"""
        return _AriaPy.ArDPPTU_getMinTiltAccel(self)

    OFF = _AriaPy.ArDPPTU_OFF
    LOW = _AriaPy.ArDPPTU_LOW
    NORMAL = _AriaPy.ArDPPTU_NORMAL
    HIGH = _AriaPy.ArDPPTU_HIGH
    def setMovePower(self, *args):
        """setMovePower(self, Axis axis, PowerMode mode) -> bool"""
        return _AriaPy.ArDPPTU_setMovePower(self, *args)

    def setHoldPower(self, *args):
        """setHoldPower(self, Axis axis, PowerMode mode) -> bool"""
        return _AriaPy.ArDPPTU_setHoldPower(self, *args)

    def offStatPower(self):
        """offStatPower(self) -> bool"""
        return _AriaPy.ArDPPTU_offStatPower(self)

    def regStatPower(self):
        """regStatPower(self) -> bool"""
        return _AriaPy.ArDPPTU_regStatPower(self)

    def lowStatPower(self):
        """lowStatPower(self) -> bool"""
        return _AriaPy.ArDPPTU_lowStatPower(self)

    def highMotPower(self):
        """highMotPower(self) -> bool"""
        return _AriaPy.ArDPPTU_highMotPower(self)

    def regMotPower(self):
        """regMotPower(self) -> bool"""
        return _AriaPy.ArDPPTU_regMotPower(self)

    def lowMotPower(self):
        """lowMotPower(self) -> bool"""
        return _AriaPy.ArDPPTU_lowMotPower(self)

    def panAccel(self, *args):
        """panAccel(self, double deg) -> bool"""
        return _AriaPy.ArDPPTU_panAccel(self, *args)

    def tiltAccel(self, *args):
        """tiltAccel(self, double deg) -> bool"""
        return _AriaPy.ArDPPTU_tiltAccel(self, *args)

    def basePanSlew(self, *args):
        """basePanSlew(self, double deg) -> bool"""
        return _AriaPy.ArDPPTU_basePanSlew(self, *args)

    def baseTiltSlew(self, *args):
        """baseTiltSlew(self, double deg) -> bool"""
        return _AriaPy.ArDPPTU_baseTiltSlew(self, *args)

    def upperPanSlew(self, *args):
        """upperPanSlew(self, double deg) -> bool"""
        return _AriaPy.ArDPPTU_upperPanSlew(self, *args)

    def lowerPanSlew(self, *args):
        """lowerPanSlew(self, double deg) -> bool"""
        return _AriaPy.ArDPPTU_lowerPanSlew(self, *args)

    def upperTiltSlew(self, *args):
        """upperTiltSlew(self, double deg) -> bool"""
        return _AriaPy.ArDPPTU_upperTiltSlew(self, *args)

    def lowerTiltSlew(self, *args):
        """lowerTiltSlew(self, double deg) -> bool"""
        return _AriaPy.ArDPPTU_lowerTiltSlew(self, *args)

    def indepMove(self):
        """indepMove(self) -> bool"""
        return _AriaPy.ArDPPTU_indepMove(self)

    def velMove(self):
        """velMove(self) -> bool"""
        return _AriaPy.ArDPPTU_velMove(self)

    def panSlew(self, *args):
        """panSlew(self, double deg) -> bool"""
        return _AriaPy.ArDPPTU_panSlew(self, *args)

    def tiltSlew(self, *args):
        """tiltSlew(self, double deg) -> bool"""
        return _AriaPy.ArDPPTU_tiltSlew(self, *args)

    def canPanTiltSlew(self):
        """canPanTiltSlew(self) -> bool"""
        return _AriaPy.ArDPPTU_canPanTiltSlew(self)

    def panSlewRel(self, *args):
        """panSlewRel(self, double deg) -> bool"""
        return _AriaPy.ArDPPTU_panSlewRel(self, *args)

    def tiltSlewRel(self, *args):
        """tiltSlewRel(self, double deg) -> bool"""
        return _AriaPy.ArDPPTU_tiltSlewRel(self, *args)

    def getLastPanRequest(self):
        """getLastPanRequest(self) -> double"""
        return _AriaPy.ArDPPTU_getLastPanRequest(self)

    def getLastTiltRequest(self):
        """getLastTiltRequest(self) -> double"""
        return _AriaPy.ArDPPTU_getLastTiltRequest(self)

    def getPanSlew(self):
        """getPanSlew(self) -> double"""
        return _AriaPy.ArDPPTU_getPanSlew(self)

    def getTiltSlew(self):
        """getTiltSlew(self) -> double"""
        return _AriaPy.ArDPPTU_getTiltSlew(self)

    def getBasePanSlew(self):
        """getBasePanSlew(self) -> double"""
        return _AriaPy.ArDPPTU_getBasePanSlew(self)

    def getBaseTiltSlew(self):
        """getBaseTiltSlew(self) -> double"""
        return _AriaPy.ArDPPTU_getBaseTiltSlew(self)

    def getPanAccel(self):
        """getPanAccel(self) -> double"""
        return _AriaPy.ArDPPTU_getPanAccel(self)

    def getTiltAccel(self):
        """getTiltAccel(self) -> double"""
        return _AriaPy.ArDPPTU_getTiltAccel(self)

    def query(self):
        """query(self)"""
        return _AriaPy.ArDPPTU_query(self)

ArDPPTU_swigregister = _AriaPy.ArDPPTU_swigregister
ArDPPTU_swigregister(ArDPPTU)

class ArDeviceConnection(object):
    """Proxy of C++ ArDeviceConnection class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArDeviceConnection
    __del__ = lambda self : None;
    def read(self, *args):
        """
        read(self, char data, unsigned int size, unsigned int msWait = 0) -> int
        read(self, char data, unsigned int size) -> int
        """
        return _AriaPy.ArDeviceConnection_read(self, *args)

    def writePacket(self, *args):
        """writePacket(self, ArBasePacket packet) -> int"""
        return _AriaPy.ArDeviceConnection_writePacket(self, *args)

    def write(self, *args):
        """write(self, char data, unsigned int size) -> int"""
        return _AriaPy.ArDeviceConnection_write(self, *args)

    def getStatus(self):
        """getStatus(self) -> int"""
        return _AriaPy.ArDeviceConnection_getStatus(self)

    def getStatusMessage(self, *args):
        """getStatusMessage(self, int messageNumber) -> char"""
        return _AriaPy.ArDeviceConnection_getStatusMessage(self, *args)

    def openSimple(self):
        """openSimple(self) -> bool"""
        return _AriaPy.ArDeviceConnection_openSimple(self)

    def close(self):
        """close(self) -> bool"""
        return _AriaPy.ArDeviceConnection_close(self)

    def getOpenMessage(self, *args):
        """getOpenMessage(self, int messageNumber) -> char"""
        return _AriaPy.ArDeviceConnection_getOpenMessage(self, *args)

    STATUS_NEVER_OPENED = _AriaPy.ArDeviceConnection_STATUS_NEVER_OPENED
    STATUS_OPEN = _AriaPy.ArDeviceConnection_STATUS_OPEN
    STATUS_OPEN_FAILED = _AriaPy.ArDeviceConnection_STATUS_OPEN_FAILED
    STATUS_CLOSED_NORMALLY = _AriaPy.ArDeviceConnection_STATUS_CLOSED_NORMALLY
    STATUS_CLOSED_ERROR = _AriaPy.ArDeviceConnection_STATUS_CLOSED_ERROR
    def getTimeRead(self, *args):
        """getTimeRead(self, int index) -> ArTime"""
        return _AriaPy.ArDeviceConnection_getTimeRead(self, *args)

    def isTimeStamping(self):
        """isTimeStamping(self) -> bool"""
        return _AriaPy.ArDeviceConnection_isTimeStamping(self)

    def getPortName(self):
        """getPortName(self) -> char"""
        return _AriaPy.ArDeviceConnection_getPortName(self)

    def getPortType(self):
        """getPortType(self) -> char"""
        return _AriaPy.ArDeviceConnection_getPortType(self)

    def setDeviceName(self, *args):
        """setDeviceName(self, char deviceName)"""
        return _AriaPy.ArDeviceConnection_setDeviceName(self, *args)

    def getDeviceName(self):
        """getDeviceName(self) -> char"""
        return _AriaPy.ArDeviceConnection_getDeviceName(self)

    def debugStartPacket(self):
        """debugStartPacket(self)"""
        return _AriaPy.ArDeviceConnection_debugStartPacket(self)

    def debugBytesRead(self, *args):
        """debugBytesRead(self, int bytesRead)"""
        return _AriaPy.ArDeviceConnection_debugBytesRead(self, *args)

    def debugEndPacket(self, *args):
        """
        debugEndPacket(self, bool goodPacket, int type = 0)
        debugEndPacket(self, bool goodPacket)
        """
        return _AriaPy.ArDeviceConnection_debugEndPacket(self, *args)

    def debugShouldLog(*args):
        """debugShouldLog(bool shouldLog) -> bool"""
        return _AriaPy.ArDeviceConnection_debugShouldLog(*args)

    debugShouldLog = staticmethod(debugShouldLog)
ArDeviceConnection_swigregister = _AriaPy.ArDeviceConnection_swigregister
ArDeviceConnection_swigregister(ArDeviceConnection)

def ArDeviceConnection_debugShouldLog(*args):
  """ArDeviceConnection_debugShouldLog(bool shouldLog) -> bool"""
  return _AriaPy.ArDeviceConnection_debugShouldLog(*args)

class ArColor(object):
    """Proxy of C++ ArColor class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned char red, unsigned char green, unsigned char blue) -> ArColor
        __init__(self) -> ArColor
        __init__(self, Byte4 rgbValue) -> ArColor
        """
        this = _AriaPy.new_ArColor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArColor
    __del__ = lambda self : None;
    def getRed(self):
        """getRed(self) -> unsigned char"""
        return _AriaPy.ArColor_getRed(self)

    def getGreen(self):
        """getGreen(self) -> unsigned char"""
        return _AriaPy.ArColor_getGreen(self)

    def getBlue(self):
        """getBlue(self) -> unsigned char"""
        return _AriaPy.ArColor_getBlue(self)

    def colorToByte4(self):
        """colorToByte4(self) -> Byte4"""
        return _AriaPy.ArColor_colorToByte4(self)

ArColor_swigregister = _AriaPy.ArColor_swigregister
ArColor_swigregister(ArColor)

class ArDrawingData(object):
    """Proxy of C++ ArDrawingData class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DEFAULT_REFRESH_TIME = _AriaPy.ArDrawingData_DEFAULT_REFRESH_TIME
    def __init__(self, *args): 
        """
        __init__(self, char shape, ArColor primaryColor, int size, int layer, 
            unsigned int defaultRefreshTime = DEFAULT_REFRESH_TIME, 
            char visibility = "DefaultOn") -> ArDrawingData
        __init__(self, char shape, ArColor primaryColor, int size, int layer, 
            unsigned int defaultRefreshTime = DEFAULT_REFRESH_TIME) -> ArDrawingData
        __init__(self, char shape, ArColor primaryColor, int size, int layer) -> ArDrawingData
        __init__(self, char shape, ArColor primaryColor, int size, int layer, 
            unsigned int defaultRefreshTime, ArColor secondaryColor, 
            char visibility = "DefaultOn") -> ArDrawingData
        __init__(self, char shape, ArColor primaryColor, int size, int layer, 
            unsigned int defaultRefreshTime, ArColor secondaryColor) -> ArDrawingData
        """
        this = _AriaPy.new_ArDrawingData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArDrawingData
    __del__ = lambda self : None;
    def getShape(self):
        """getShape(self) -> char"""
        return _AriaPy.ArDrawingData_getShape(self)

    def getPrimaryColor(self):
        """getPrimaryColor(self) -> ArColor"""
        return _AriaPy.ArDrawingData_getPrimaryColor(self)

    def getSize(self):
        """getSize(self) -> int"""
        return _AriaPy.ArDrawingData_getSize(self)

    def getLayer(self):
        """getLayer(self) -> int"""
        return _AriaPy.ArDrawingData_getLayer(self)

    def getDefaultRefreshTime(self):
        """getDefaultRefreshTime(self) -> unsigned int"""
        return _AriaPy.ArDrawingData_getDefaultRefreshTime(self)

    def getSecondaryColor(self):
        """getSecondaryColor(self) -> ArColor"""
        return _AriaPy.ArDrawingData_getSecondaryColor(self)

    def getVisibility(self):
        """getVisibility(self) -> char"""
        return _AriaPy.ArDrawingData_getVisibility(self)

    def setShape(self, *args):
        """setShape(self, char shape)"""
        return _AriaPy.ArDrawingData_setShape(self, *args)

    def setPrimaryColor(self, *args):
        """setPrimaryColor(self, ArColor color)"""
        return _AriaPy.ArDrawingData_setPrimaryColor(self, *args)

    def setSize(self, *args):
        """setSize(self, int size)"""
        return _AriaPy.ArDrawingData_setSize(self, *args)

    def setLayer(self, *args):
        """setLayer(self, int layer)"""
        return _AriaPy.ArDrawingData_setLayer(self, *args)

    def setDefaultRefreshTime(self, *args):
        """setDefaultRefreshTime(self, unsigned int refreshTime)"""
        return _AriaPy.ArDrawingData_setDefaultRefreshTime(self, *args)

    def setSecondaryColor(self, *args):
        """setSecondaryColor(self, ArColor color)"""
        return _AriaPy.ArDrawingData_setSecondaryColor(self, *args)

    def setVisibility(self, *args):
        """setVisibility(self, char visibility)"""
        return _AriaPy.ArDrawingData_setVisibility(self, *args)

ArDrawingData_swigregister = _AriaPy.ArDrawingData_swigregister
ArDrawingData_swigregister(ArDrawingData)

class ArFileParser(object):
    """Proxy of C++ ArFileParser class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, baseDirectory = "./", isPreCompressQuotes = False): 
        """
        __init__(self, char baseDirectory = "./", bool isPreCompressQuotes = False) -> ArFileParser
        __init__(self, char baseDirectory = "./") -> ArFileParser
        __init__(self) -> ArFileParser
        """
        this = _AriaPy.new_ArFileParser(baseDirectory, isPreCompressQuotes)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArFileParser
    __del__ = lambda self : None;
    def addHandler(self, *args):
        """addHandler(self, char keyword, ArRetFunctor1_Bool_ArgumentBuilderP functor) -> bool"""
        return _AriaPy.ArFileParser_addHandler(self, *args)

    def addHandlerWithError(self, *args):
        """addHandlerWithError(self, char keyword, ArRetFunctor3<(bool,p.ArArgumentBuilder,p.char,size_t)> functor) -> bool"""
        return _AriaPy.ArFileParser_addHandlerWithError(self, *args)

    def remHandler(self, *args):
        """
        remHandler(self, char keyword, bool logIfCannotFind = True) -> bool
        remHandler(self, char keyword) -> bool
        remHandler(self, ArRetFunctor1_Bool_ArgumentBuilderP functor) -> bool
        remHandler(self, ArRetFunctor3<(bool,p.ArArgumentBuilder,p.char,size_t)> functor) -> bool
        """
        return _AriaPy.ArFileParser_remHandler(self, *args)

    def setPreParseFunctor(self, *args):
        """setPreParseFunctor(self, ArFunctor1_CString functor)"""
        return _AriaPy.ArFileParser_setPreParseFunctor(self, *args)

    def parseFile(self, *args):
        """
        parseFile(self, char fileName, bool continueOnErrors = True, bool noFileNotFoundMessage = False, 
            char errorBuffer = None, 
            size_t errorBufferLen = 0) -> bool
        parseFile(self, char fileName, bool continueOnErrors = True, bool noFileNotFoundMessage = False, 
            char errorBuffer = None) -> bool
        parseFile(self, char fileName, bool continueOnErrors = True, bool noFileNotFoundMessage = False) -> bool
        parseFile(self, char fileName, bool continueOnErrors = True) -> bool
        parseFile(self, char fileName) -> bool
        parseFile(self, FILE file, char buffer, int bufferLength, bool continueOnErrors = True, 
            char errorBuffer = None, 
            size_t errorBufferLen = 0) -> bool
        parseFile(self, FILE file, char buffer, int bufferLength, bool continueOnErrors = True, 
            char errorBuffer = None) -> bool
        parseFile(self, FILE file, char buffer, int bufferLength, bool continueOnErrors = True) -> bool
        parseFile(self, FILE file, char buffer, int bufferLength) -> bool
        """
        return _AriaPy.ArFileParser_parseFile(self, *args)

    def cancelParsing(self):
        """cancelParsing(self)"""
        return _AriaPy.ArFileParser_cancelParsing(self)

    def getBaseDirectory(self):
        """getBaseDirectory(self) -> char"""
        return _AriaPy.ArFileParser_getBaseDirectory(self)

    def setBaseDirectory(self, *args):
        """setBaseDirectory(self, char baseDirectory)"""
        return _AriaPy.ArFileParser_setBaseDirectory(self, *args)

    def setCommentDelimiters(self, *args):
        """setCommentDelimiters(self, std::list<(std::string,std::allocator<(std::string)>)> delimiters)"""
        return _AriaPy.ArFileParser_setCommentDelimiters(self, *args)

    def clearCommentDelimiters(self):
        """clearCommentDelimiters(self)"""
        return _AriaPy.ArFileParser_clearCommentDelimiters(self)

    def parseLine(self, *args):
        """
        parseLine(self, char line, char errorBuffer = None, size_t errorBufferLen = 0) -> bool
        parseLine(self, char line, char errorBuffer = None) -> bool
        parseLine(self, char line) -> bool
        """
        return _AriaPy.ArFileParser_parseLine(self, *args)

    def resetCounters(self):
        """resetCounters(self)"""
        return _AriaPy.ArFileParser_resetCounters(self)

    def setMaxNumArguments(self, maxNumArguments = 512):
        """
        setMaxNumArguments(self, size_t maxNumArguments = 512)
        setMaxNumArguments(self)
        """
        return _AriaPy.ArFileParser_setMaxNumArguments(self, maxNumArguments)

    def setQuiet(self, *args):
        """setQuiet(self, bool isQuiet)"""
        return _AriaPy.ArFileParser_setQuiet(self, *args)

ArFileParser_swigregister = _AriaPy.ArFileParser_swigregister
ArFileParser_swigregister(ArFileParser)

class ArForbiddenRangeDevice(ArRangeDevice):
    """Proxy of C++ ArForbiddenRangeDevice class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ArMapInterface armap, double distanceIncrement = 100, 
            unsigned int maxRange = 4000, char name = "forbidden") -> ArForbiddenRangeDevice
        __init__(self, ArMapInterface armap, double distanceIncrement = 100, 
            unsigned int maxRange = 4000) -> ArForbiddenRangeDevice
        __init__(self, ArMapInterface armap, double distanceIncrement = 100) -> ArForbiddenRangeDevice
        __init__(self, ArMapInterface armap) -> ArForbiddenRangeDevice
        """
        this = _AriaPy.new_ArForbiddenRangeDevice(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArForbiddenRangeDevice
    __del__ = lambda self : None;
    def processMap(self):
        """processMap(self)"""
        return _AriaPy.ArForbiddenRangeDevice_processMap(self)

    def processReadings(self):
        """processReadings(self)"""
        return _AriaPy.ArForbiddenRangeDevice_processReadings(self)

    def setRobot(self, *args):
        """setRobot(self, ArRobot robot)"""
        return _AriaPy.ArForbiddenRangeDevice_setRobot(self, *args)

    def enable(self):
        """enable(self)"""
        return _AriaPy.ArForbiddenRangeDevice_enable(self)

    def disable(self):
        """disable(self)"""
        return _AriaPy.ArForbiddenRangeDevice_disable(self)

    def isEnabled(self):
        """isEnabled(self) -> bool"""
        return _AriaPy.ArForbiddenRangeDevice_isEnabled(self)

    def getEnableCB(self):
        """getEnableCB(self) -> ArFunctor"""
        return _AriaPy.ArForbiddenRangeDevice_getEnableCB(self)

    def getDisableCB(self):
        """getDisableCB(self) -> ArFunctor"""
        return _AriaPy.ArForbiddenRangeDevice_getDisableCB(self)

ArForbiddenRangeDevice_swigregister = _AriaPy.ArForbiddenRangeDevice_swigregister
ArForbiddenRangeDevice_swigregister(ArForbiddenRangeDevice)

class ArFunctorASyncTask(ArASyncTask):
    """Proxy of C++ ArFunctorASyncTask class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRetFunctor1_VoidP_VoidP functor) -> ArFunctorASyncTask"""
        this = _AriaPy.new_ArFunctorASyncTask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArFunctorASyncTask
    __del__ = lambda self : None;
    def runThread(self, *args):
        """runThread(self, void arg) -> void"""
        return _AriaPy.ArFunctorASyncTask_runThread(self, *args)

ArFunctorASyncTask_swigregister = _AriaPy.ArFunctorASyncTask_swigregister
ArFunctorASyncTask_swigregister(ArFunctorASyncTask)

class ArGPS(object):
    """Proxy of C++ ArGPS class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ArGPS"""
        this = _AriaPy.new_ArGPS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArGPS
    __del__ = lambda self : None;
    def setDeviceConnection(self, *args):
        """setDeviceConnection(self, ArDeviceConnection deviceConn)"""
        return _AriaPy.ArGPS_setDeviceConnection(self, *args)

    def getDeviceConnection(self):
        """getDeviceConnection(self) -> ArDeviceConnection"""
        return _AriaPy.ArGPS_getDeviceConnection(self)

    def connect(self, connectTimeout = 20000):
        """
        connect(self, unsigned long connectTimeout = 20000) -> bool
        connect(self) -> bool
        """
        return _AriaPy.ArGPS_connect(self, connectTimeout)

    def blockingConnect(self, connectTimeout = 20000):
        """
        blockingConnect(self, unsigned long connectTimeout = 20000) -> bool
        blockingConnect(self) -> bool
        """
        return _AriaPy.ArGPS_blockingConnect(self, connectTimeout)

    ReadFinished = _AriaPy.ArGPS_ReadFinished
    ReadError = _AriaPy.ArGPS_ReadError
    ReadData = _AriaPy.ArGPS_ReadData
    ReadUpdated = _AriaPy.ArGPS_ReadUpdated
    ReadFlags = _swig_property(_AriaPy.ArGPS_ReadFlags_get, _AriaPy.ArGPS_ReadFlags_set)
    def read(self, maxTime = 0):
        """
        read(self, unsigned long maxTime = 0) -> int
        read(self) -> int
        """
        return _AriaPy.ArGPS_read(self, maxTime)

    def readWithLock(self, *args):
        """readWithLock(self, unsigned int maxTime) -> int"""
        return _AriaPy.ArGPS_readWithLock(self, *args)

    def lock(self):
        """lock(self)"""
        return _AriaPy.ArGPS_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _AriaPy.ArGPS_unlock(self)

    def setIgnoreChecksum(self, *args):
        """setIgnoreChecksum(self, bool ignore)"""
        return _AriaPy.ArGPS_setIgnoreChecksum(self, *args)

    def logData(self):
        """logData(self)"""
        return _AriaPy.ArGPS_logData(self)

    def printData(self, labels = True):
        """
        printData(self, bool labels = True)
        printData(self)
        """
        return _AriaPy.ArGPS_printData(self, labels)

    def printDataLabelsHeader(self):
        """printDataLabelsHeader(self)"""
        return _AriaPy.ArGPS_printDataLabelsHeader(self)

    NoFix = _AriaPy.ArGPS_NoFix
    BadFix = _AriaPy.ArGPS_BadFix
    GPSFix = _AriaPy.ArGPS_GPSFix
    DGPSFix = _AriaPy.ArGPS_DGPSFix
    PPSFix = _AriaPy.ArGPS_PPSFix
    RTKinFix = _AriaPy.ArGPS_RTKinFix
    FloatRTKinFix = _AriaPy.ArGPS_FloatRTKinFix
    DeadReckFix = _AriaPy.ArGPS_DeadReckFix
    ManualFix = _AriaPy.ArGPS_ManualFix
    SimulatedFix = _AriaPy.ArGPS_SimulatedFix
    UnknownFixType = _AriaPy.ArGPS_UnknownFixType
    OmnistarConverging = _AriaPy.ArGPS_OmnistarConverging
    OmnistarConverged = _AriaPy.ArGPS_OmnistarConverged
    def getCurrentDataRef(self):
        """getCurrentDataRef(self) -> Data"""
        return _AriaPy.ArGPS_getCurrentDataRef(self)

    def getFixType(self):
        """getFixType(self) -> FixType"""
        return _AriaPy.ArGPS_getFixType(self)

    def getFixTypeName(*args):
        """
        getFixTypeName() -> char
        getFixTypeName(FixType type) -> char
        """
        return _AriaPy.ArGPS_getFixTypeName(*args)

    getFixTypeName = staticmethod(getFixTypeName)
    def havePosition(self):
        """havePosition(self) -> bool"""
        return _AriaPy.ArGPS_havePosition(self)

    def haveLatitude(self):
        """haveLatitude(self) -> bool"""
        return _AriaPy.ArGPS_haveLatitude(self)

    def haveLongitude(self):
        """haveLongitude(self) -> bool"""
        return _AriaPy.ArGPS_haveLongitude(self)

    def getLatitude(self):
        """getLatitude(self) -> double"""
        return _AriaPy.ArGPS_getLatitude(self)

    def getLongitude(self):
        """getLongitude(self) -> double"""
        return _AriaPy.ArGPS_getLongitude(self)

    def getTimeReceivedPosition(self):
        """getTimeReceivedPosition(self) -> ArTime"""
        return _AriaPy.ArGPS_getTimeReceivedPosition(self)

    def haveSpeed(self):
        """haveSpeed(self) -> bool"""
        return _AriaPy.ArGPS_haveSpeed(self)

    def getSpeed(self):
        """getSpeed(self) -> double"""
        return _AriaPy.ArGPS_getSpeed(self)

    def getGPSPositionTimestamp(self):
        """getGPSPositionTimestamp(self) -> ArTime"""
        return _AriaPy.ArGPS_getGPSPositionTimestamp(self)

    def getNumSatellitesTracked(self):
        """getNumSatellitesTracked(self) -> int"""
        return _AriaPy.ArGPS_getNumSatellitesTracked(self)

    def haveDGPSStation(self):
        """haveDGPSStation(self) -> bool"""
        return _AriaPy.ArGPS_haveDGPSStation(self)

    def getDGPSStationID(self):
        """getDGPSStationID(self) -> unsigned short"""
        return _AriaPy.ArGPS_getDGPSStationID(self)

    def haveGarminPositionError(self):
        """haveGarminPositionError(self) -> bool"""
        return _AriaPy.ArGPS_haveGarminPositionError(self)

    def getGarminPositionError(self):
        """getGarminPositionError(self) -> double"""
        return _AriaPy.ArGPS_getGarminPositionError(self)

    def haveGarminVerticalPositionError(self):
        """haveGarminVerticalPositionError(self) -> bool"""
        return _AriaPy.ArGPS_haveGarminVerticalPositionError(self)

    def getGarminVerticalPositionError(self):
        """getGarminVerticalPositionError(self) -> double"""
        return _AriaPy.ArGPS_getGarminVerticalPositionError(self)

    def haveCompassHeadingMag(self):
        """haveCompassHeadingMag(self) -> bool"""
        return _AriaPy.ArGPS_haveCompassHeadingMag(self)

    def haveCompassHeadingTrue(self):
        """haveCompassHeadingTrue(self) -> bool"""
        return _AriaPy.ArGPS_haveCompassHeadingTrue(self)

    def getCompassHeadingMag(self):
        """getCompassHeadingMag(self) -> double"""
        return _AriaPy.ArGPS_getCompassHeadingMag(self)

    def getCompassHeadingTrue(self):
        """getCompassHeadingTrue(self) -> double"""
        return _AriaPy.ArGPS_getCompassHeadingTrue(self)

    def setCompassHeadingMag(self, *args):
        """setCompassHeadingMag(self, double val)"""
        return _AriaPy.ArGPS_setCompassHeadingMag(self, *args)

    def setCompassHeadingTrue(self, *args):
        """setCompassHeadingTrue(self, double val)"""
        return _AriaPy.ArGPS_setCompassHeadingTrue(self, *args)

    def setCompassHeadingMagWithLock(self, *args):
        """setCompassHeadingMagWithLock(self, double val)"""
        return _AriaPy.ArGPS_setCompassHeadingMagWithLock(self, *args)

    def setCompassHeadingTrueWithLock(self, *args):
        """setCompassHeadingTrueWithLock(self, double val)"""
        return _AriaPy.ArGPS_setCompassHeadingTrueWithLock(self, *args)

    def haveAltitude(self):
        """haveAltitude(self) -> bool"""
        return _AriaPy.ArGPS_haveAltitude(self)

    def getAltitude(self):
        """getAltitude(self) -> double"""
        return _AriaPy.ArGPS_getAltitude(self)

    def haveAltimeter(self):
        """haveAltimeter(self) -> bool"""
        return _AriaPy.ArGPS_haveAltimeter(self)

    def getAltimeter(self):
        """getAltimeter(self) -> double"""
        return _AriaPy.ArGPS_getAltimeter(self)

    def haveHDOP(self):
        """haveHDOP(self) -> bool"""
        return _AriaPy.ArGPS_haveHDOP(self)

    def getHDOP(self):
        """getHDOP(self) -> double"""
        return _AriaPy.ArGPS_getHDOP(self)

    def haveVDOP(self):
        """haveVDOP(self) -> bool"""
        return _AriaPy.ArGPS_haveVDOP(self)

    def getVDOP(self):
        """getVDOP(self) -> double"""
        return _AriaPy.ArGPS_getVDOP(self)

    def havePDOP(self):
        """havePDOP(self) -> bool"""
        return _AriaPy.ArGPS_havePDOP(self)

    def getPDOP(self):
        """getPDOP(self) -> double"""
        return _AriaPy.ArGPS_getPDOP(self)

    def haveSNR(self):
        """haveSNR(self) -> bool"""
        return _AriaPy.ArGPS_haveSNR(self)

    def getMeanSNR(self):
        """getMeanSNR(self) -> double"""
        return _AriaPy.ArGPS_getMeanSNR(self)

    def haveBeaconInfo(self):
        """haveBeaconInfo(self) -> bool"""
        return _AriaPy.ArGPS_haveBeaconInfo(self)

    def getBeaconSignalStrength(self):
        """getBeaconSignalStrength(self) -> double"""
        return _AriaPy.ArGPS_getBeaconSignalStrength(self)

    def getBeaconSNR(self):
        """getBeaconSNR(self) -> double"""
        return _AriaPy.ArGPS_getBeaconSNR(self)

    def getBeaconFreq(self):
        """getBeaconFreq(self) -> double"""
        return _AriaPy.ArGPS_getBeaconFreq(self)

    def getBecaonBPS(self):
        """getBecaonBPS(self) -> unsigned short"""
        return _AriaPy.ArGPS_getBecaonBPS(self)

    def getBeaconChannel(self):
        """getBeaconChannel(self) -> unsigned short"""
        return _AriaPy.ArGPS_getBeaconChannel(self)

    def haveErrorEllipse(self):
        """haveErrorEllipse(self) -> bool"""
        return _AriaPy.ArGPS_haveErrorEllipse(self)

    def getErrorEllipse(self):
        """getErrorEllipse(self) -> ArPose"""
        return _AriaPy.ArGPS_getErrorEllipse(self)

    def haveLatLonError(self):
        """haveLatLonError(self) -> bool"""
        return _AriaPy.ArGPS_haveLatLonError(self)

    def getLatLonError(self):
        """getLatLonError(self) -> ArPose"""
        return _AriaPy.ArGPS_getLatLonError(self)

    def getLatitudeError(self):
        """getLatitudeError(self) -> double"""
        return _AriaPy.ArGPS_getLatitudeError(self)

    def getLongitudeError(self):
        """getLongitudeError(self) -> double"""
        return _AriaPy.ArGPS_getLongitudeError(self)

    def haveAltitudeError(self):
        """haveAltitudeError(self) -> bool"""
        return _AriaPy.ArGPS_haveAltitudeError(self)

    def getAltitudeError(self):
        """getAltitudeError(self) -> double"""
        return _AriaPy.ArGPS_getAltitudeError(self)

    def haveInputsRMS(self):
        """haveInputsRMS(self) -> bool"""
        return _AriaPy.ArGPS_haveInputsRMS(self)

    def getInputsRMS(self):
        """getInputsRMS(self) -> double"""
        return _AriaPy.ArGPS_getInputsRMS(self)

    def addNMEAHandler(self, *args):
        """addNMEAHandler(self, char message, Handler handler)"""
        return _AriaPy.ArGPS_addNMEAHandler(self, *args)

    def removeNMEAHandler(self, *args):
        """removeNMEAHandler(self, char message)"""
        return _AriaPy.ArGPS_removeNMEAHandler(self, *args)

    def replaceNMEAHandler(self, *args):
        """replaceNMEAHandler(self, char message, Handler handler)"""
        return _AriaPy.ArGPS_replaceNMEAHandler(self, *args)

ArGPS_swigregister = _AriaPy.ArGPS_swigregister
ArGPS_swigregister(ArGPS)

def ArGPS_getFixTypeName(*args):
  """
    getFixTypeName() -> char
    ArGPS_getFixTypeName(FixType type) -> char
    """
  return _AriaPy.ArGPS_getFixTypeName(*args)

class ArSimulatedGPS(ArGPS):
    """Proxy of C++ ArSimulatedGPS class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, robot = None): 
        """
        __init__(self, ArRobot robot = None) -> ArSimulatedGPS
        __init__(self) -> ArSimulatedGPS
        """
        this = _AriaPy.new_ArSimulatedGPS(robot)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArSimulatedGPS
    __del__ = lambda self : None;
    def clearDummyPosition(self):
        """clearDummyPosition(self)"""
        return _AriaPy.ArSimulatedGPS_clearDummyPosition(self)

    def clearPosition(self):
        """clearPosition(self)"""
        return _AriaPy.ArSimulatedGPS_clearPosition(self)

    def setDummyPosition(self, *args):
        """
        setDummyPosition(self, double latitude, double longitude)
        setDummyPosition(self, double latitude, double longitude, double altitude)
        setDummyPosition(self, ArArgumentBuilder args)
        """
        return _AriaPy.ArSimulatedGPS_setDummyPosition(self, *args)

    def setDummyPositionFromArgs(self, *args):
        """setDummyPositionFromArgs(self, ArArgumentBuilder args)"""
        return _AriaPy.ArSimulatedGPS_setDummyPositionFromArgs(self, *args)

    def connect(self, connectTimeout = 10000):
        """
        connect(self, unsigned long connectTimeout = 10000) -> bool
        connect(self) -> bool
        """
        return _AriaPy.ArSimulatedGPS_connect(self, connectTimeout)

    def initDevice(self):
        """initDevice(self) -> bool"""
        return _AriaPy.ArSimulatedGPS_initDevice(self)

    def read(self, maxTime = 0):
        """
        read(self, unsigned long maxTime = 0) -> int
        read(self) -> int
        """
        return _AriaPy.ArSimulatedGPS_read(self, maxTime)

ArSimulatedGPS_swigregister = _AriaPy.ArSimulatedGPS_swigregister
ArSimulatedGPS_swigregister(ArSimulatedGPS)

class ArGPSConnector(object):
    """Proxy of C++ ArGPSConnector class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArArgumentParser argParser) -> ArGPSConnector"""
        this = _AriaPy.new_ArGPSConnector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArGPSConnector
    __del__ = lambda self : None;
    def parseArgs(self):
        """parseArgs(self) -> bool"""
        return _AriaPy.ArGPSConnector_parseArgs(self)

    def createGPS(self, robot = None):
        """
        createGPS(self, ArRobot robot = None) -> ArGPS
        createGPS(self) -> ArGPS
        """
        return _AriaPy.ArGPSConnector_createGPS(self, robot)

    def create(self, robot = None):
        """
        create(self, ArRobot robot = None) -> ArGPS
        create(self) -> ArGPS
        """
        return _AriaPy.ArGPSConnector_create(self, robot)

    Standard = _AriaPy.ArGPSConnector_Standard
    Novatel = _AriaPy.ArGPSConnector_Novatel
    Trimble = _AriaPy.ArGPSConnector_Trimble
    Invalid = _AriaPy.ArGPSConnector_Invalid
    NovatelSPAN = _AriaPy.ArGPSConnector_NovatelSPAN
    Simulator = _AriaPy.ArGPSConnector_Simulator
    def getGPSType(self):
        """getGPSType(self) -> GPSType"""
        return _AriaPy.ArGPSConnector_getGPSType(self)

ArGPSConnector_swigregister = _AriaPy.ArGPSConnector_swigregister
ArGPSConnector_swigregister(ArGPSConnector)

class Ar3DPoint(object):
    """Proxy of C++ Ar3DPoint class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Ar3DPoint
        __init__(self, double x, double y, double z) -> Ar3DPoint
        """
        this = _AriaPy.new_Ar3DPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_Ar3DPoint
    __del__ = lambda self : None;
    def __add__(self, *args):
        """__add__(self, Ar3DPoint c) -> Ar3DPoint"""
        return _AriaPy.Ar3DPoint___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, Ar3DPoint c) -> Ar3DPoint"""
        return _AriaPy.Ar3DPoint___sub__(self, *args)

    def __mul__(self, *args):
        """__mul__(self, double c) -> Ar3DPoint"""
        return _AriaPy.Ar3DPoint___mul__(self, *args)

    def dot(self, *args):
        """dot(self, Ar3DPoint c) -> double"""
        return _AriaPy.Ar3DPoint_dot(self, *args)

    def cross(self, *args):
        """cross(self, Ar3DPoint c) -> Ar3DPoint"""
        return _AriaPy.Ar3DPoint_cross(self, *args)

    def printPoint(self, head = None):
        """
        printPoint(self, char head = None)
        printPoint(self)
        """
        return _AriaPy.Ar3DPoint_printPoint(self, head)

    def getX(self):
        """getX(self) -> double"""
        return _AriaPy.Ar3DPoint_getX(self)

    def getY(self):
        """getY(self) -> double"""
        return _AriaPy.Ar3DPoint_getY(self)

    def getZ(self):
        """getZ(self) -> double"""
        return _AriaPy.Ar3DPoint_getZ(self)

    def setX(self, *args):
        """setX(self, double x)"""
        return _AriaPy.Ar3DPoint_setX(self, *args)

    def setY(self, *args):
        """setY(self, double y)"""
        return _AriaPy.Ar3DPoint_setY(self, *args)

    def setZ(self, *args):
        """setZ(self, double z)"""
        return _AriaPy.Ar3DPoint_setZ(self, *args)

Ar3DPoint_swigregister = _AriaPy.Ar3DPoint_swigregister
Ar3DPoint_swigregister(Ar3DPoint)

class ArWGS84(object):
    """Proxy of C++ ArWGS84 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ArWGS84"""
        this = _AriaPy.new_ArWGS84()
        try: self.this.append(this)
        except: self.this = this
    def getE():
        """getE() -> double"""
        return _AriaPy.ArWGS84_getE()

    getE = staticmethod(getE)
    def getA():
        """getA() -> double"""
        return _AriaPy.ArWGS84_getA()

    getA = staticmethod(getA)
    def getB():
        """getB() -> double"""
        return _AriaPy.ArWGS84_getB()

    getB = staticmethod(getB)
    def getEP():
        """getEP() -> double"""
        return _AriaPy.ArWGS84_getEP()

    getEP = staticmethod(getEP)
    def get1byf():
        """get1byf() -> double"""
        return _AriaPy.ArWGS84_get1byf()

    get1byf = staticmethod(get1byf)
    def getOmega():
        """getOmega() -> double"""
        return _AriaPy.ArWGS84_getOmega()

    getOmega = staticmethod(getOmega)
    def getGM():
        """getGM() -> double"""
        return _AriaPy.ArWGS84_getGM()

    getGM = staticmethod(getGM)
    __swig_destroy__ = _AriaPy.delete_ArWGS84
    __del__ = lambda self : None;
ArWGS84_swigregister = _AriaPy.ArWGS84_swigregister
ArWGS84_swigregister(ArWGS84)

def ArWGS84_getE():
  """ArWGS84_getE() -> double"""
  return _AriaPy.ArWGS84_getE()

def ArWGS84_getA():
  """ArWGS84_getA() -> double"""
  return _AriaPy.ArWGS84_getA()

def ArWGS84_getB():
  """ArWGS84_getB() -> double"""
  return _AriaPy.ArWGS84_getB()

def ArWGS84_getEP():
  """ArWGS84_getEP() -> double"""
  return _AriaPy.ArWGS84_getEP()

def ArWGS84_get1byf():
  """ArWGS84_get1byf() -> double"""
  return _AriaPy.ArWGS84_get1byf()

def ArWGS84_getOmega():
  """ArWGS84_getOmega() -> double"""
  return _AriaPy.ArWGS84_getOmega()

def ArWGS84_getGM():
  """ArWGS84_getGM() -> double"""
  return _AriaPy.ArWGS84_getGM()

class ArECEFCoords(Ar3DPoint):
    """Proxy of C++ ArECEFCoords class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, double x, double y, double z) -> ArECEFCoords"""
        this = _AriaPy.new_ArECEFCoords(*args)
        try: self.this.append(this)
        except: self.this = this
    def ECEF2LLA(self):
        """ECEF2LLA(self) -> ArLLACoords"""
        return _AriaPy.ArECEFCoords_ECEF2LLA(self)

    def ECEF2ENU(self, *args):
        """ECEF2ENU(self, ArECEFCoords ref) -> ArENUCoords"""
        return _AriaPy.ArECEFCoords_ECEF2ENU(self, *args)

    __swig_destroy__ = _AriaPy.delete_ArECEFCoords
    __del__ = lambda self : None;
ArECEFCoords_swigregister = _AriaPy.ArECEFCoords_swigregister
ArECEFCoords_swigregister(ArECEFCoords)

class ArLLACoords(Ar3DPoint):
    """Proxy of C++ ArLLACoords class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ArLLACoords
        __init__(self, double x, double y, double z) -> ArLLACoords
        """
        this = _AriaPy.new_ArLLACoords(*args)
        try: self.this.append(this)
        except: self.this = this
    def LLA2ECEF(self):
        """LLA2ECEF(self) -> ArECEFCoords"""
        return _AriaPy.ArLLACoords_LLA2ECEF(self)

    def getLatitude(self):
        """getLatitude(self) -> double"""
        return _AriaPy.ArLLACoords_getLatitude(self)

    def getLongitude(self):
        """getLongitude(self) -> double"""
        return _AriaPy.ArLLACoords_getLongitude(self)

    def getAltitude(self):
        """getAltitude(self) -> double"""
        return _AriaPy.ArLLACoords_getAltitude(self)

    def setLatitude(self, *args):
        """setLatitude(self, double l)"""
        return _AriaPy.ArLLACoords_setLatitude(self, *args)

    def setLongitude(self, *args):
        """setLongitude(self, double l)"""
        return _AriaPy.ArLLACoords_setLongitude(self, *args)

    def setAltitude(self, *args):
        """setAltitude(self, double a)"""
        return _AriaPy.ArLLACoords_setAltitude(self, *args)

    __swig_destroy__ = _AriaPy.delete_ArLLACoords
    __del__ = lambda self : None;
ArLLACoords_swigregister = _AriaPy.ArLLACoords_swigregister
ArLLACoords_swigregister(ArLLACoords)

class ArENUCoords(Ar3DPoint):
    """Proxy of C++ ArENUCoords class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, double x, double y, double z) -> ArENUCoords"""
        this = _AriaPy.new_ArENUCoords(*args)
        try: self.this.append(this)
        except: self.this = this
    def ENU2ECEF(self, *args):
        """ENU2ECEF(self, ArLLACoords ref) -> ArECEFCoords"""
        return _AriaPy.ArENUCoords_ENU2ECEF(self, *args)

    def getEast(self):
        """getEast(self) -> double"""
        return _AriaPy.ArENUCoords_getEast(self)

    def getNorth(self):
        """getNorth(self) -> double"""
        return _AriaPy.ArENUCoords_getNorth(self)

    def getUp(self):
        """getUp(self) -> double"""
        return _AriaPy.ArENUCoords_getUp(self)

    def setEast(self, *args):
        """setEast(self, double e)"""
        return _AriaPy.ArENUCoords_setEast(self, *args)

    def setNorth(self, *args):
        """setNorth(self, double n)"""
        return _AriaPy.ArENUCoords_setNorth(self, *args)

    def setUp(self, *args):
        """setUp(self, double u)"""
        return _AriaPy.ArENUCoords_setUp(self, *args)

    __swig_destroy__ = _AriaPy.delete_ArENUCoords
    __del__ = lambda self : None;
ArENUCoords_swigregister = _AriaPy.ArENUCoords_swigregister
ArENUCoords_swigregister(ArENUCoords)

class ArMapGPSCoords(ArENUCoords):
    """Proxy of C++ ArMapGPSCoords class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ArLLACoords org) -> ArMapGPSCoords
        __init__(self) -> ArMapGPSCoords
        """
        this = _AriaPy.new_ArMapGPSCoords(*args)
        try: self.this.append(this)
        except: self.this = this
    def convertMap2LLACoords(self, *args):
        """
        convertMap2LLACoords(self, double ea, double no, double up, double lat, double lon, 
            double alt) -> bool
        """
        return _AriaPy.ArMapGPSCoords_convertMap2LLACoords(self, *args)

    def convertLLA2MapCoords(self, *args):
        """
        convertLLA2MapCoords(self, double lat, double lon, double alt, double ea, double no, 
            double up) -> bool
        convertLLA2MapCoords(self, ArLLACoords lla, double ea, double no, double up) -> bool
        """
        return _AriaPy.ArMapGPSCoords_convertLLA2MapCoords(self, *args)

    def setOrigin(self, *args):
        """setOrigin(self, ArLLACoords org)"""
        return _AriaPy.ArMapGPSCoords_setOrigin(self, *args)

    myOriginECEF = _swig_property(_AriaPy.ArMapGPSCoords_myOriginECEF_get, _AriaPy.ArMapGPSCoords_myOriginECEF_set)
    myOriginLLA = _swig_property(_AriaPy.ArMapGPSCoords_myOriginLLA_get, _AriaPy.ArMapGPSCoords_myOriginLLA_set)
    myOriginSet = _swig_property(_AriaPy.ArMapGPSCoords_myOriginSet_get, _AriaPy.ArMapGPSCoords_myOriginSet_set)
    __swig_destroy__ = _AriaPy.delete_ArMapGPSCoords
    __del__ = lambda self : None;
ArMapGPSCoords_swigregister = _AriaPy.ArMapGPSCoords_swigregister
ArMapGPSCoords_swigregister(ArMapGPSCoords)

class ArGripperCommands(object):
    """Proxy of C++ ArGripperCommands class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GRIP_OPEN = _AriaPy.ArGripperCommands_GRIP_OPEN
    GRIP_CLOSE = _AriaPy.ArGripperCommands_GRIP_CLOSE
    GRIP_STOP = _AriaPy.ArGripperCommands_GRIP_STOP
    LIFT_UP = _AriaPy.ArGripperCommands_LIFT_UP
    LIFT_DOWN = _AriaPy.ArGripperCommands_LIFT_DOWN
    LIFT_STOP = _AriaPy.ArGripperCommands_LIFT_STOP
    GRIPPER_STORE = _AriaPy.ArGripperCommands_GRIPPER_STORE
    GRIPPER_DEPLOY = _AriaPy.ArGripperCommands_GRIPPER_DEPLOY
    GRIPPER_HALT = _AriaPy.ArGripperCommands_GRIPPER_HALT
    GRIP_PRESSURE = _AriaPy.ArGripperCommands_GRIP_PRESSURE
    LIFT_CARRY = _AriaPy.ArGripperCommands_LIFT_CARRY
    def __init__(self): 
        """__init__(self) -> ArGripperCommands"""
        this = _AriaPy.new_ArGripperCommands()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArGripperCommands
    __del__ = lambda self : None;
ArGripperCommands_swigregister = _AriaPy.ArGripperCommands_swigregister
ArGripperCommands_swigregister(ArGripperCommands)

class ArGripper(object):
    """Proxy of C++ ArGripper class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ArRobot robot, int gripperType = QUERYTYPE) -> ArGripper
        __init__(self, ArRobot robot) -> ArGripper
        """
        this = _AriaPy.new_ArGripper(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArGripper
    __del__ = lambda self : None;
    def gripOpen(self):
        """gripOpen(self) -> bool"""
        return _AriaPy.ArGripper_gripOpen(self)

    def gripClose(self):
        """gripClose(self) -> bool"""
        return _AriaPy.ArGripper_gripClose(self)

    def gripStop(self):
        """gripStop(self) -> bool"""
        return _AriaPy.ArGripper_gripStop(self)

    def liftUp(self):
        """liftUp(self) -> bool"""
        return _AriaPy.ArGripper_liftUp(self)

    def liftDown(self):
        """liftDown(self) -> bool"""
        return _AriaPy.ArGripper_liftDown(self)

    def liftStop(self):
        """liftStop(self) -> bool"""
        return _AriaPy.ArGripper_liftStop(self)

    def gripperStore(self):
        """gripperStore(self) -> bool"""
        return _AriaPy.ArGripper_gripperStore(self)

    def gripperDeploy(self):
        """gripperDeploy(self) -> bool"""
        return _AriaPy.ArGripper_gripperDeploy(self)

    def gripperHalt(self):
        """gripperHalt(self) -> bool"""
        return _AriaPy.ArGripper_gripperHalt(self)

    def gripPressure(self, *args):
        """gripPressure(self, int mSecIntervals) -> bool"""
        return _AriaPy.ArGripper_gripPressure(self, *args)

    def liftCarry(self, *args):
        """liftCarry(self, int mSecIntervals) -> bool"""
        return _AriaPy.ArGripper_liftCarry(self, *args)

    def isGripMoving(self):
        """isGripMoving(self) -> bool"""
        return _AriaPy.ArGripper_isGripMoving(self)

    def isLiftMoving(self):
        """isLiftMoving(self) -> bool"""
        return _AriaPy.ArGripper_isLiftMoving(self)

    def getGripState(self):
        """getGripState(self) -> int"""
        return _AriaPy.ArGripper_getGripState(self)

    def getPaddleState(self):
        """getPaddleState(self) -> int"""
        return _AriaPy.ArGripper_getPaddleState(self)

    def getBreakBeamState(self):
        """getBreakBeamState(self) -> int"""
        return _AriaPy.ArGripper_getBreakBeamState(self)

    def isLiftMaxed(self):
        """isLiftMaxed(self) -> bool"""
        return _AriaPy.ArGripper_isLiftMaxed(self)

    def getType(self):
        """getType(self) -> int"""
        return _AriaPy.ArGripper_getType(self)

    def setType(self, *args):
        """setType(self, int type)"""
        return _AriaPy.ArGripper_setType(self, *args)

    def getMSecSinceLastPacket(self):
        """getMSecSinceLastPacket(self) -> long"""
        return _AriaPy.ArGripper_getMSecSinceLastPacket(self)

    def getGraspTime(self):
        """getGraspTime(self) -> int"""
        return _AriaPy.ArGripper_getGraspTime(self)

    def logState(self):
        """logState(self)"""
        return _AriaPy.ArGripper_logState(self)

    def packetHandler(self, *args):
        """packetHandler(self, ArRobotPacket packet) -> bool"""
        return _AriaPy.ArGripper_packetHandler(self, *args)

    def connectHandler(self):
        """connectHandler(self)"""
        return _AriaPy.ArGripper_connectHandler(self)

    QUERYTYPE = _AriaPy.ArGripper_QUERYTYPE
    GENIO = _AriaPy.ArGripper_GENIO
    USERIO = _AriaPy.ArGripper_USERIO
    GRIPPAC = _AriaPy.ArGripper_GRIPPAC
    NOGRIPPER = _AriaPy.ArGripper_NOGRIPPER
ArGripper_swigregister = _AriaPy.ArGripper_swigregister
ArGripper_swigregister(ArGripper)

class ArIRs(ArRangeDevice):
    """Proxy of C++ ArIRs class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, currentBufferSize = 10, cumulativeBufferSize = 10, 
    name = "irs", maxSecondsToKeepCurrent = 15): 
        """
        __init__(self, size_t currentBufferSize = 10, size_t cumulativeBufferSize = 10, 
            char name = "irs", int maxSecondsToKeepCurrent = 15) -> ArIRs
        __init__(self, size_t currentBufferSize = 10, size_t cumulativeBufferSize = 10, 
            char name = "irs") -> ArIRs
        __init__(self, size_t currentBufferSize = 10, size_t cumulativeBufferSize = 10) -> ArIRs
        __init__(self, size_t currentBufferSize = 10) -> ArIRs
        __init__(self) -> ArIRs
        """
        this = _AriaPy.new_ArIRs(currentBufferSize, cumulativeBufferSize, name, maxSecondsToKeepCurrent)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArIRs
    __del__ = lambda self : None;
    def setRobot(self, *args):
        """setRobot(self, ArRobot robot)"""
        return _AriaPy.ArIRs_setRobot(self, *args)

    def processReadings(self):
        """processReadings(self)"""
        return _AriaPy.ArIRs_processReadings(self)

ArIRs_swigregister = _AriaPy.ArIRs_swigregister
ArIRs_swigregister(ArIRs)

class ArInterpolation(object):
    """Proxy of C++ ArInterpolation class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, numberOfReadings = 100): 
        """
        __init__(self, size_t numberOfReadings = 100) -> ArInterpolation
        __init__(self) -> ArInterpolation
        """
        this = _AriaPy.new_ArInterpolation(numberOfReadings)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArInterpolation
    __del__ = lambda self : None;
    def addReading(self, *args):
        """addReading(self, ArTime timeOfReading, ArPose position) -> bool"""
        return _AriaPy.ArInterpolation_addReading(self, *args)

    def getPose(self, *args):
        """
        getPose(self, ArTime timeStamp, ArPose position, ArPoseWithTime lastData = None) -> int
        getPose(self, ArTime timeStamp, ArPose position) -> int
        """
        return _AriaPy.ArInterpolation_getPose(self, *args)

    def setName(self, *args):
        """setName(self, char name)"""
        return _AriaPy.ArInterpolation_setName(self, *args)

    def getName(self):
        """getName(self) -> char"""
        return _AriaPy.ArInterpolation_getName(self)

    def setAllowedMSForPrediction(self, *args):
        """
        setAllowedMSForPrediction(self, int ms = -1)
        setAllowedMSForPrediction(self)
        """
        return _AriaPy.ArInterpolation_setAllowedMSForPrediction(self, *args)

    def getAllowedMSForPrediction(self):
        """getAllowedMSForPrediction(self) -> int"""
        return _AriaPy.ArInterpolation_getAllowedMSForPrediction(self)

    def setAllowedPercentageForPrediction(self, percentage = 5000):
        """
        setAllowedPercentageForPrediction(self, int percentage = 5000)
        setAllowedPercentageForPrediction(self)
        """
        return _AriaPy.ArInterpolation_setAllowedPercentageForPrediction(self, percentage)

    def getAllowedPercentageForPrediction(self):
        """getAllowedPercentageForPrediction(self) -> int"""
        return _AriaPy.ArInterpolation_getAllowedPercentageForPrediction(self)

    def setLogPrediction(self, logPrediction = False):
        """
        setLogPrediction(self, bool logPrediction = False)
        setLogPrediction(self)
        """
        return _AriaPy.ArInterpolation_setLogPrediction(self, logPrediction)

    def getLogPrediction(self):
        """getLogPrediction(self) -> bool"""
        return _AriaPy.ArInterpolation_getLogPrediction(self)

    def setNumberOfReadings(self, *args):
        """setNumberOfReadings(self, size_t numberOfReadings)"""
        return _AriaPy.ArInterpolation_setNumberOfReadings(self, *args)

    def getNumberOfReadings(self):
        """getNumberOfReadings(self) -> size_t"""
        return _AriaPy.ArInterpolation_getNumberOfReadings(self)

    def reset(self):
        """reset(self)"""
        return _AriaPy.ArInterpolation_reset(self)

ArInterpolation_swigregister = _AriaPy.ArInterpolation_swigregister
ArInterpolation_swigregister(ArInterpolation)

class ArIrrfDevice(ArRangeDevice):
    """Proxy of C++ ArIrrfDevice class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, currentBufferSize = 91, cumulativeBufferSize = 273, 
    name = "irrf"): 
        """
        __init__(self, size_t currentBufferSize = 91, size_t cumulativeBufferSize = 273, 
            char name = "irrf") -> ArIrrfDevice
        __init__(self, size_t currentBufferSize = 91, size_t cumulativeBufferSize = 273) -> ArIrrfDevice
        __init__(self, size_t currentBufferSize = 91) -> ArIrrfDevice
        __init__(self) -> ArIrrfDevice
        """
        this = _AriaPy.new_ArIrrfDevice(currentBufferSize, cumulativeBufferSize, name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArIrrfDevice
    __del__ = lambda self : None;
    def packetHandler(self, *args):
        """packetHandler(self, ArRobotPacket packet) -> bool"""
        return _AriaPy.ArIrrfDevice_packetHandler(self, *args)

    def setCumulativeMaxRange(self, *args):
        """setCumulativeMaxRange(self, double r)"""
        return _AriaPy.ArIrrfDevice_setCumulativeMaxRange(self, *args)

    def setRobot(self, *args):
        """setRobot(self, ArRobot arg0)"""
        return _AriaPy.ArIrrfDevice_setRobot(self, *args)

ArIrrfDevice_swigregister = _AriaPy.ArIrrfDevice_swigregister
ArIrrfDevice_swigregister(ArIrrfDevice)

class ArJoyHandler(object):
    """Proxy of C++ ArJoyHandler class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, useOSCal = True, useOldJoystick = False): 
        """
        __init__(self, bool useOSCal = True, bool useOldJoystick = False) -> ArJoyHandler
        __init__(self, bool useOSCal = True) -> ArJoyHandler
        __init__(self) -> ArJoyHandler
        """
        this = _AriaPy.new_ArJoyHandler(useOSCal, useOldJoystick)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArJoyHandler
    __del__ = lambda self : None;
    def init(self):
        """init(self) -> bool"""
        return _AriaPy.ArJoyHandler_init(self)

    def haveJoystick(self):
        """haveJoystick(self) -> bool"""
        return _AriaPy.ArJoyHandler_haveJoystick(self)

    def getDoubles(self):
        """
        getDoubles(self)
        getDoubles(self)
        """
        return _AriaPy.ArJoyHandler_getDoubles(self)

    def getButton(self, *args):
        """getButton(self, unsigned int button) -> bool"""
        return _AriaPy.ArJoyHandler_getButton(self, *args)

    def haveZAxis(self):
        """haveZAxis(self) -> bool"""
        return _AriaPy.ArJoyHandler_haveZAxis(self)

    def setSpeeds(self, *args):
        """
        setSpeeds(self, int x, int y, int z = 0)
        setSpeeds(self, int x, int y)
        """
        return _AriaPy.ArJoyHandler_setSpeeds(self, *args)

    def getAdjusted(self):
        """
        getAdjusted(self)
        getAdjusted(self)
        """
        return _AriaPy.ArJoyHandler_getAdjusted(self)

    def getNumAxes(self):
        """getNumAxes(self) -> unsigned int"""
        return _AriaPy.ArJoyHandler_getNumAxes(self)

    def getAxis(self, *args):
        """getAxis(self, unsigned int axis) -> double"""
        return _AriaPy.ArJoyHandler_getAxis(self, *args)

    def getNumButtons(self):
        """getNumButtons(self) -> unsigned int"""
        return _AriaPy.ArJoyHandler_getNumButtons(self)

    def setUseOSCal(self, *args):
        """setUseOSCal(self, bool useOSCal)"""
        return _AriaPy.ArJoyHandler_setUseOSCal(self, *args)

    def getUseOSCal(self):
        """getUseOSCal(self) -> bool"""
        return _AriaPy.ArJoyHandler_getUseOSCal(self)

    def startCal(self):
        """startCal(self)"""
        return _AriaPy.ArJoyHandler_startCal(self)

    def endCal(self):
        """endCal(self)"""
        return _AriaPy.ArJoyHandler_endCal(self)

    def getUnfiltered(self):
        """
        getUnfiltered(self)
        getUnfiltered(self)
        """
        return _AriaPy.ArJoyHandler_getUnfiltered(self)

    def getStats(self, *args):
        """getStats(self, int maxX, int minX, int maxY, int minY, int cenX, int cenY)"""
        return _AriaPy.ArJoyHandler_getStats(self, *args)

    def setStats(self, *args):
        """setStats(self, int maxX, int minX, int maxY, int minY, int cenX, int cenY)"""
        return _AriaPy.ArJoyHandler_setStats(self, *args)

    def getSpeeds(self):
        """getSpeeds(self)"""
        return _AriaPy.ArJoyHandler_getSpeeds(self)

ArJoyHandler_swigregister = _AriaPy.ArJoyHandler_swigregister
ArJoyHandler_swigregister(ArJoyHandler)

class ArKeyHandler(object):
    """Proxy of C++ ArKeyHandler class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, blocking = False, addAriaExitCB = True, stream = None, 
    takeKeysInConstructor = True): 
        """
        __init__(self, bool blocking = False, bool addAriaExitCB = True, FILE stream = None, 
            bool takeKeysInConstructor = True) -> ArKeyHandler
        __init__(self, bool blocking = False, bool addAriaExitCB = True, FILE stream = None) -> ArKeyHandler
        __init__(self, bool blocking = False, bool addAriaExitCB = True) -> ArKeyHandler
        __init__(self, bool blocking = False) -> ArKeyHandler
        __init__(self) -> ArKeyHandler
        """
        this = _AriaPy.new_ArKeyHandler(blocking, addAriaExitCB, stream, takeKeysInConstructor)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArKeyHandler
    __del__ = lambda self : None;
    UP = _AriaPy.ArKeyHandler_UP
    DOWN = _AriaPy.ArKeyHandler_DOWN
    LEFT = _AriaPy.ArKeyHandler_LEFT
    RIGHT = _AriaPy.ArKeyHandler_RIGHT
    ESCAPE = _AriaPy.ArKeyHandler_ESCAPE
    SPACE = _AriaPy.ArKeyHandler_SPACE
    TAB = _AriaPy.ArKeyHandler_TAB
    ENTER = _AriaPy.ArKeyHandler_ENTER
    BACKSPACE = _AriaPy.ArKeyHandler_BACKSPACE
    _StartFKeys = _AriaPy.ArKeyHandler__StartFKeys
    F1 = _AriaPy.ArKeyHandler_F1
    F2 = _AriaPy.ArKeyHandler_F2
    F3 = _AriaPy.ArKeyHandler_F3
    F4 = _AriaPy.ArKeyHandler_F4
    F5 = _AriaPy.ArKeyHandler_F5
    F6 = _AriaPy.ArKeyHandler_F6
    F7 = _AriaPy.ArKeyHandler_F7
    F8 = _AriaPy.ArKeyHandler_F8
    F9 = _AriaPy.ArKeyHandler_F9
    F10 = _AriaPy.ArKeyHandler_F10
    F11 = _AriaPy.ArKeyHandler_F11
    F12 = _AriaPy.ArKeyHandler_F12
    _EndFKeys = _AriaPy.ArKeyHandler__EndFKeys
    PAGEUP = _AriaPy.ArKeyHandler_PAGEUP
    PAGEDOWN = _AriaPy.ArKeyHandler_PAGEDOWN
    HOME = _AriaPy.ArKeyHandler_HOME
    END = _AriaPy.ArKeyHandler_END
    INSERT = _AriaPy.ArKeyHandler_INSERT
    DEL = _AriaPy.ArKeyHandler_DEL
    def addKeyHandler(self, *args):
        """addKeyHandler(self, int keyToHandle, ArFunctor functor) -> bool"""
        return _AriaPy.ArKeyHandler_addKeyHandler(self, *args)

    def remKeyHandler(self, *args):
        """
        remKeyHandler(self, int keyToHandler) -> bool
        remKeyHandler(self, ArFunctor functor) -> bool
        """
        return _AriaPy.ArKeyHandler_remKeyHandler(self, *args)

    def takeKeys(self, blocking = False):
        """
        takeKeys(self, bool blocking = False)
        takeKeys(self)
        """
        return _AriaPy.ArKeyHandler_takeKeys(self, blocking)

    def restore(self):
        """restore(self)"""
        return _AriaPy.ArKeyHandler_restore(self)

    def checkKeys(self):
        """checkKeys(self)"""
        return _AriaPy.ArKeyHandler_checkKeys(self)

    def getKey(self):
        """getKey(self) -> int"""
        return _AriaPy.ArKeyHandler_getKey(self)

ArKeyHandler_swigregister = _AriaPy.ArKeyHandler_swigregister
ArKeyHandler_swigregister(ArKeyHandler)

class ArLaserConnector(object):
    """Proxy of C++ ArLaserConnector class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ArArgumentParser parser, ArRobot robot, ArRobotConnector robotConnector, 
            bool autoParseArgs = True, 
            LogLevel infoLogLevel = Verbose, ArRetFunctor1<(bool,p.q(const).char)> turnOnPowerOutputCB = None, 
            ArRetFunctor1<(bool,p.q(const).char)> turnOffPowerOutputCB = None) -> ArLaserConnector
        __init__(self, ArArgumentParser parser, ArRobot robot, ArRobotConnector robotConnector, 
            bool autoParseArgs = True, 
            LogLevel infoLogLevel = Verbose, ArRetFunctor1<(bool,p.q(const).char)> turnOnPowerOutputCB = None) -> ArLaserConnector
        __init__(self, ArArgumentParser parser, ArRobot robot, ArRobotConnector robotConnector, 
            bool autoParseArgs = True, 
            LogLevel infoLogLevel = Verbose) -> ArLaserConnector
        __init__(self, ArArgumentParser parser, ArRobot robot, ArRobotConnector robotConnector, 
            bool autoParseArgs = True) -> ArLaserConnector
        __init__(self, ArArgumentParser parser, ArRobot robot, ArRobotConnector robotConnector) -> ArLaserConnector
        """
        this = _AriaPy.new_ArLaserConnector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArLaserConnector
    __del__ = lambda self : None;
    def connectLasers(self, continueOnFailedConnect = False, addConnectedLasersToRobot = True, 
    addAllLasersToRobot = False, 
    turnOnLasers = True, powerCycleLaserOnFailedConnect = True, 
    failedOnLaser = None):
        """
        connectLasers(self, bool continueOnFailedConnect = False, bool addConnectedLasersToRobot = True, 
            bool addAllLasersToRobot = False, 
            bool turnOnLasers = True, bool powerCycleLaserOnFailedConnect = True, 
            int failedOnLaser = None) -> bool
        connectLasers(self, bool continueOnFailedConnect = False, bool addConnectedLasersToRobot = True, 
            bool addAllLasersToRobot = False, 
            bool turnOnLasers = True, bool powerCycleLaserOnFailedConnect = True) -> bool
        connectLasers(self, bool continueOnFailedConnect = False, bool addConnectedLasersToRobot = True, 
            bool addAllLasersToRobot = False, 
            bool turnOnLasers = True) -> bool
        connectLasers(self, bool continueOnFailedConnect = False, bool addConnectedLasersToRobot = True, 
            bool addAllLasersToRobot = False) -> bool
        connectLasers(self, bool continueOnFailedConnect = False, bool addConnectedLasersToRobot = True) -> bool
        connectLasers(self, bool continueOnFailedConnect = False) -> bool
        connectLasers(self) -> bool
        """
        return _AriaPy.ArLaserConnector_connectLasers(self, continueOnFailedConnect, addConnectedLasersToRobot, 
    addAllLasersToRobot, turnOnLasers, powerCycleLaserOnFailedConnect, 
    failedOnLaser)

    def setupLaser(self, *args):
        """
        setupLaser(self, ArLaser laser, int laserNumber = 1) -> bool
        setupLaser(self, ArLaser laser) -> bool
        """
        return _AriaPy.ArLaserConnector_setupLaser(self, *args)

    def connectLaser(self, *args):
        """
        connectLaser(self, ArLaser laser, int laserNumber = 1, bool forceConnection = True) -> bool
        connectLaser(self, ArLaser laser, int laserNumber = 1) -> bool
        connectLaser(self, ArLaser laser) -> bool
        """
        return _AriaPy.ArLaserConnector_connectLaser(self, *args)

    def addLaser(self, *args):
        """
        addLaser(self, ArLaser laser, int laserNumber = 1) -> bool
        addLaser(self, ArLaser laser) -> bool
        """
        return _AriaPy.ArLaserConnector_addLaser(self, *args)

    def addPlaceholderLaser(self, *args):
        """
        addPlaceholderLaser(self, ArLaser placeholderLaser, int laserNumber = 1, bool takeOwnershipOfPlaceholder = False) -> bool
        addPlaceholderLaser(self, ArLaser placeholderLaser, int laserNumber = 1) -> bool
        addPlaceholderLaser(self, ArLaser placeholderLaser) -> bool
        """
        return _AriaPy.ArLaserConnector_addPlaceholderLaser(self, *args)

    def parseArgs(self, *args):
        """
        parseArgs(self) -> bool
        parseArgs(self, ArArgumentParser parser) -> bool
        """
        return _AriaPy.ArLaserConnector_parseArgs(self, *args)

    def logOptions(self):
        """logOptions(self)"""
        return _AriaPy.ArLaserConnector_logOptions(self)

    def getLaser(self, *args):
        """getLaser(self, int laserNumber) -> ArLaser"""
        return _AriaPy.ArLaserConnector_getLaser(self, *args)

    def replaceLaser(self, *args):
        """replaceLaser(self, ArLaser laser, int laserNumber) -> bool"""
        return _AriaPy.ArLaserConnector_replaceLaser(self, *args)

ArLaserConnector_swigregister = _AriaPy.ArLaserConnector_swigregister
ArLaserConnector_swigregister(ArLaserConnector)

class ArLaserFilter(ArLaser):
    """Proxy of C++ ArLaserFilter class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ArLaser laser, char name = None) -> ArLaserFilter
        __init__(self, ArLaser laser) -> ArLaserFilter
        """
        this = _AriaPy.new_ArLaserFilter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArLaserFilter
    __del__ = lambda self : None;
    def setRobot(self, *args):
        """setRobot(self, ArRobot robot)"""
        return _AriaPy.ArLaserFilter_setRobot(self, *args)

    def addToConfig(self, *args):
        """
        addToConfig(self, ArConfig config, char sectionName, char prefix = "")
        addToConfig(self, ArConfig config, char sectionName)
        """
        return _AriaPy.ArLaserFilter_addToConfig(self, *args)

    def blockingConnect(self):
        """blockingConnect(self) -> bool"""
        return _AriaPy.ArLaserFilter_blockingConnect(self)

    def asyncConnect(self):
        """asyncConnect(self) -> bool"""
        return _AriaPy.ArLaserFilter_asyncConnect(self)

    def disconnect(self):
        """disconnect(self) -> bool"""
        return _AriaPy.ArLaserFilter_disconnect(self)

    def isConnected(self):
        """isConnected(self) -> bool"""
        return _AriaPy.ArLaserFilter_isConnected(self)

    def isTryingToConnect(self):
        """isTryingToConnect(self) -> bool"""
        return _AriaPy.ArLaserFilter_isTryingToConnect(self)

    def runThread(self, *args):
        """runThread(self, void arg) -> void"""
        return _AriaPy.ArLaserFilter_runThread(self, *args)

    def laserCheckParams(self):
        """laserCheckParams(self) -> bool"""
        return _AriaPy.ArLaserFilter_laserCheckParams(self)

    def getBaseLaser(self):
        """getBaseLaser(self) -> ArLaser"""
        return _AriaPy.ArLaserFilter_getBaseLaser(self)

ArLaserFilter_swigregister = _AriaPy.ArLaserFilter_swigregister
ArLaserFilter_swigregister(ArLaserFilter)

class ArLaserLogger(object):
    """Proxy of C++ ArLaserLogger class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ArRobot robot, ArLaser laser, double distDiff, double degDiff, 
            char fileName, bool addGoals = False, 
            ArJoyHandler joyHandler = None, char baseDirectory = None, 
            bool useReflectorValues = False, 
            ArRobotJoyHandler robotJoyHandler = None, 
            std::map<(std::string,p.ArRetFunctor3<(int,ArTime,p.ArPose,p.ArPoseWithTime)>,ArStrCaseCmpOp,std::allocator<(std::pair<(q(const).std::string,p.ArRetFunctor3<(int,ArTime,p.ArPose,p.ArPoseWithTime)>)>)>)> extraLocationData = None, 
            std::list<(p.ArLaser,std::allocator<(p.ArLaser)>)> extraLasers = None) -> ArLaserLogger
        __init__(self, ArRobot robot, ArLaser laser, double distDiff, double degDiff, 
            char fileName, bool addGoals = False, 
            ArJoyHandler joyHandler = None, char baseDirectory = None, 
            bool useReflectorValues = False, 
            ArRobotJoyHandler robotJoyHandler = None, 
            std::map<(std::string,p.ArRetFunctor3<(int,ArTime,p.ArPose,p.ArPoseWithTime)>,ArStrCaseCmpOp,std::allocator<(std::pair<(q(const).std::string,p.ArRetFunctor3<(int,ArTime,p.ArPose,p.ArPoseWithTime)>)>)>)> extraLocationData = None) -> ArLaserLogger
        __init__(self, ArRobot robot, ArLaser laser, double distDiff, double degDiff, 
            char fileName, bool addGoals = False, 
            ArJoyHandler joyHandler = None, char baseDirectory = None, 
            bool useReflectorValues = False, 
            ArRobotJoyHandler robotJoyHandler = None) -> ArLaserLogger
        __init__(self, ArRobot robot, ArLaser laser, double distDiff, double degDiff, 
            char fileName, bool addGoals = False, 
            ArJoyHandler joyHandler = None, char baseDirectory = None, 
            bool useReflectorValues = False) -> ArLaserLogger
        __init__(self, ArRobot robot, ArLaser laser, double distDiff, double degDiff, 
            char fileName, bool addGoals = False, 
            ArJoyHandler joyHandler = None, char baseDirectory = None) -> ArLaserLogger
        __init__(self, ArRobot robot, ArLaser laser, double distDiff, double degDiff, 
            char fileName, bool addGoals = False, 
            ArJoyHandler joyHandler = None) -> ArLaserLogger
        __init__(self, ArRobot robot, ArLaser laser, double distDiff, double degDiff, 
            char fileName, bool addGoals = False) -> ArLaserLogger
        __init__(self, ArRobot robot, ArLaser laser, double distDiff, double degDiff, 
            char fileName) -> ArLaserLogger
        """
        this = _AriaPy.new_ArLaserLogger(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArLaserLogger
    __del__ = lambda self : None;
    def addTagToLogPlain(self, *args):
        """addTagToLogPlain(self, char str)"""
        return _AriaPy.ArLaserLogger_addTagToLogPlain(self, *args)

    def addInfoToLogPlain(self, *args):
        """addInfoToLogPlain(self, char str)"""
        return _AriaPy.ArLaserLogger_addInfoToLogPlain(self, *args)

    def setDistDiff(self, *args):
        """setDistDiff(self, double distDiff)"""
        return _AriaPy.ArLaserLogger_setDistDiff(self, *args)

    def getDistDiff(self):
        """getDistDiff(self) -> double"""
        return _AriaPy.ArLaserLogger_getDistDiff(self)

    def setDegDiff(self, *args):
        """setDegDiff(self, double degDiff)"""
        return _AriaPy.ArLaserLogger_setDegDiff(self, *args)

    def getDegDiff(self):
        """getDegDiff(self) -> double"""
        return _AriaPy.ArLaserLogger_getDegDiff(self)

    def takeReading(self):
        """takeReading(self)"""
        return _AriaPy.ArLaserLogger_takeReading(self)

    def addGoal(self):
        """addGoal(self)"""
        return _AriaPy.ArLaserLogger_addGoal(self)

    def wasFileOpenedSuccessfully(self):
        """wasFileOpenedSuccessfully(self) -> bool"""
        return _AriaPy.ArLaserLogger_wasFileOpenedSuccessfully(self)

    def takingOldReadings(self):
        """takingOldReadings(self) -> bool"""
        return _AriaPy.ArLaserLogger_takingOldReadings(self)

    def takeOldReadings(self, *args):
        """takeOldReadings(self, bool takeOld)"""
        return _AriaPy.ArLaserLogger_takeOldReadings(self, *args)

    def takingNewReadings(self):
        """takingNewReadings(self) -> bool"""
        return _AriaPy.ArLaserLogger_takingNewReadings(self)

    def takeNewReadings(self, *args):
        """takeNewReadings(self, bool takeNew)"""
        return _AriaPy.ArLaserLogger_takeNewReadings(self, *args)

ArLaserLogger_swigregister = _AriaPy.ArLaserLogger_swigregister
ArLaserLogger_swigregister(ArLaserLogger)

class ArLaserReflectorDevice(ArRangeDevice):
    """Proxy of C++ ArLaserReflectorDevice class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ArRangeDevice laser, ArRobot robot, char name = "reflector") -> ArLaserReflectorDevice
        __init__(self, ArRangeDevice laser, ArRobot robot) -> ArLaserReflectorDevice
        """
        this = _AriaPy.new_ArLaserReflectorDevice(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArLaserReflectorDevice
    __del__ = lambda self : None;
    def processReadings(self):
        """processReadings(self)"""
        return _AriaPy.ArLaserReflectorDevice_processReadings(self)

    def setRobot(self, *args):
        """setRobot(self, ArRobot robot)"""
        return _AriaPy.ArLaserReflectorDevice_setRobot(self, *args)

    def addToConfig(self, *args):
        """addToConfig(self, ArConfig config, char section)"""
        return _AriaPy.ArLaserReflectorDevice_addToConfig(self, *args)

ArLaserReflectorDevice_swigregister = _AriaPy.ArLaserReflectorDevice_swigregister
ArLaserReflectorDevice_swigregister(ArLaserReflectorDevice)

class ArLineFinder(object):
    """Proxy of C++ ArLineFinder class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRangeDevice dev) -> ArLineFinder"""
        this = _AriaPy.new_ArLineFinder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArLineFinder
    __del__ = lambda self : None;
    def getLinesAsSet(self):
        """getLinesAsSet(self) -> std::set<(p.ArLineFinderSegment,std::less<(p.ArLineFinderSegment)>,std::allocator<(p.ArLineFinderSegment)>)>"""
        return _AriaPy.ArLineFinder_getLinesAsSet(self)

    def getNonLinePointsAsSet(self):
        """getNonLinePointsAsSet(self) -> std::set<(ArPose,std::less<(ArPose)>,std::allocator<(ArPose)>)>"""
        return _AriaPy.ArLineFinder_getNonLinePointsAsSet(self)

    def getLinesTakenPose(self):
        """getLinesTakenPose(self) -> ArPose"""
        return _AriaPy.ArLineFinder_getLinesTakenPose(self)

    def saveLast(self):
        """saveLast(self)"""
        return _AriaPy.ArLineFinder_saveLast(self)

    def getLinesAndSaveThem(self):
        """getLinesAndSaveThem(self)"""
        return _AriaPy.ArLineFinder_getLinesAndSaveThem(self)

    def setVerbose(self, *args):
        """setVerbose(self, bool verbose)"""
        return _AriaPy.ArLineFinder_setVerbose(self, *args)

    def getVerbose(self):
        """getVerbose(self) -> bool"""
        return _AriaPy.ArLineFinder_getVerbose(self)

    def setLineCreationParams(self, minLineLen = 40, minLinePoints = 2):
        """
        setLineCreationParams(self, int minLineLen = 40, int minLinePoints = 2)
        setLineCreationParams(self, int minLineLen = 40)
        setLineCreationParams(self)
        """
        return _AriaPy.ArLineFinder_setLineCreationParams(self, minLineLen, minLinePoints)

    def setLineCombiningParams(self, angleTol = 30, linesCloseEnough = 75):
        """
        setLineCombiningParams(self, int angleTol = 30, int linesCloseEnough = 75)
        setLineCombiningParams(self, int angleTol = 30)
        setLineCombiningParams(self)
        """
        return _AriaPy.ArLineFinder_setLineCombiningParams(self, angleTol, linesCloseEnough)

    def setLineFilteringParams(self, minPointsInLine = 3, minLineLength = 75):
        """
        setLineFilteringParams(self, int minPointsInLine = 3, int minLineLength = 75)
        setLineFilteringParams(self, int minPointsInLine = 3)
        setLineFilteringParams(self)
        """
        return _AriaPy.ArLineFinder_setLineFilteringParams(self, minPointsInLine, minLineLength)

    def setLineValidParams(self, maxDistFromLine = 30, maxAveDistFromLine = 20):
        """
        setLineValidParams(self, int maxDistFromLine = 30, int maxAveDistFromLine = 20)
        setLineValidParams(self, int maxDistFromLine = 30)
        setLineValidParams(self)
        """
        return _AriaPy.ArLineFinder_setLineValidParams(self, maxDistFromLine, maxAveDistFromLine)

    def setMaxDistBetweenPoints(self, maxDistBetweenPoints = 0):
        """
        setMaxDistBetweenPoints(self, int maxDistBetweenPoints = 0)
        setMaxDistBetweenPoints(self)
        """
        return _AriaPy.ArLineFinder_setMaxDistBetweenPoints(self, maxDistBetweenPoints)

    def addToConfig(self, *args):
        """addToConfig(self, ArConfig config, char section)"""
        return _AriaPy.ArLineFinder_addToConfig(self, *args)

ArLineFinder_swigregister = _AriaPy.ArLineFinder_swigregister
ArLineFinder_swigregister(ArLineFinder)

class ArLineFinderSegment(ArLineSegment):
    """Proxy of C++ ArLineFinderSegment class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ArLineFinderSegment
        __init__(self, double x1, double y1, double x2, double y2, int numPoints = 0, 
            int startPoint = 0, int endPoint = 0) -> ArLineFinderSegment
        __init__(self, double x1, double y1, double x2, double y2, int numPoints = 0, 
            int startPoint = 0) -> ArLineFinderSegment
        __init__(self, double x1, double y1, double x2, double y2, int numPoints = 0) -> ArLineFinderSegment
        __init__(self, double x1, double y1, double x2, double y2) -> ArLineFinderSegment
        """
        this = _AriaPy.new_ArLineFinderSegment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArLineFinderSegment
    __del__ = lambda self : None;
    def newEndPoints(self, *args):
        """
        newEndPoints(self, double x1, double y1, double x2, double y2, int numPoints = 0, 
            int startPoint = 0, int endPoint = 0)
        newEndPoints(self, double x1, double y1, double x2, double y2, int numPoints = 0, 
            int startPoint = 0)
        newEndPoints(self, double x1, double y1, double x2, double y2, int numPoints = 0)
        newEndPoints(self, double x1, double y1, double x2, double y2)
        """
        return _AriaPy.ArLineFinderSegment_newEndPoints(self, *args)

    def getLineAngle(self):
        """getLineAngle(self) -> double"""
        return _AriaPy.ArLineFinderSegment_getLineAngle(self)

    def getLength(self):
        """getLength(self) -> double"""
        return _AriaPy.ArLineFinderSegment_getLength(self)

    def getNumPoints(self):
        """getNumPoints(self) -> int"""
        return _AriaPy.ArLineFinderSegment_getNumPoints(self)

    def getStartPoint(self):
        """getStartPoint(self) -> int"""
        return _AriaPy.ArLineFinderSegment_getStartPoint(self)

    def getEndPoint(self):
        """getEndPoint(self) -> int"""
        return _AriaPy.ArLineFinderSegment_getEndPoint(self)

    def setAveDistFromLine(self, *args):
        """setAveDistFromLine(self, double aveDistFromLine)"""
        return _AriaPy.ArLineFinderSegment_setAveDistFromLine(self, *args)

    def getAveDistFromLine(self):
        """getAveDistFromLine(self) -> double"""
        return _AriaPy.ArLineFinderSegment_getAveDistFromLine(self)

ArLineFinderSegment_swigregister = _AriaPy.ArLineFinderSegment_swigregister
ArLineFinderSegment_swigregister(ArLineFinderSegment)

class ArLog(object):
    """Proxy of C++ ArLog class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    StdOut = _AriaPy.ArLog_StdOut
    StdErr = _AriaPy.ArLog_StdErr
    File = _AriaPy.ArLog_File
    Colbert = _AriaPy.ArLog_Colbert
    NoLog = _AriaPy.ArLog_NoLog
    Terse = _AriaPy.ArLog_Terse
    Normal = _AriaPy.ArLog_Normal
    Verbose = _AriaPy.ArLog_Verbose
    def log(*args):
        """log(LogLevel level, char str)"""
        return _AriaPy.ArLog_log(*args)

    log = staticmethod(log)
    def init(*args):
        """
        init(LogType type, LogLevel level, char fileName = "", bool logTime = False, 
            bool alsoPrint = False, 
            bool printThisCall = True) -> bool
        init(LogType type, LogLevel level, char fileName = "", bool logTime = False, 
            bool alsoPrint = False) -> bool
        init(LogType type, LogLevel level, char fileName = "", bool logTime = False) -> bool
        init(LogType type, LogLevel level, char fileName = "") -> bool
        init(LogType type, LogLevel level) -> bool
        """
        return _AriaPy.ArLog_init(*args)

    init = staticmethod(init)
    def close():
        """close()"""
        return _AriaPy.ArLog_close()

    close = staticmethod(close)
    def logErrorFromOS(*args):
        """logErrorFromOS(LogLevel level, char str, v(...) *args)"""
        return _AriaPy.ArLog_logErrorFromOS(*args)

    logErrorFromOS = staticmethod(logErrorFromOS)
    def logErrorFromOSPlain(*args):
        """logErrorFromOSPlain(LogLevel level, char str)"""
        return _AriaPy.ArLog_logErrorFromOSPlain(*args)

    logErrorFromOSPlain = staticmethod(logErrorFromOSPlain)
    def logBacktrace(*args):
        """logBacktrace(LogLevel level)"""
        return _AriaPy.ArLog_logBacktrace(*args)

    logBacktrace = staticmethod(logBacktrace)
    def logFileContents(*args):
        """logFileContents(LogLevel level, char fileName) -> bool"""
        return _AriaPy.ArLog_logFileContents(*args)

    logFileContents = staticmethod(logFileContents)
    colbertPrint = _swig_property(_AriaPy.ArLog_colbertPrint_get, _AriaPy.ArLog_colbertPrint_set)
    def addToConfig(*args):
        """addToConfig(ArConfig config)"""
        return _AriaPy.ArLog_addToConfig(*args)

    addToConfig = staticmethod(addToConfig)
    def aramInit(*args):
        """
        aramInit(char prefix, LogLevel defaultLevel = Normal, double defaultSize = 10, 
            bool daemonized = False)
        aramInit(char prefix, LogLevel defaultLevel = Normal, double defaultSize = 10)
        aramInit(char prefix, LogLevel defaultLevel = Normal)
        aramInit(char prefix)
        """
        return _AriaPy.ArLog_aramInit(*args)

    aramInit = staticmethod(aramInit)
    def setFunctor(*args):
        """setFunctor(ArFunctor1_CString functor)"""
        return _AriaPy.ArLog_setFunctor(*args)

    setFunctor = staticmethod(setFunctor)
    def clearFunctor():
        """clearFunctor()"""
        return _AriaPy.ArLog_clearFunctor()

    clearFunctor = staticmethod(clearFunctor)
    def internalForceLockup():
        """internalForceLockup()"""
        return _AriaPy.ArLog_internalForceLockup()

    internalForceLockup = staticmethod(internalForceLockup)
    def __init__(self): 
        """__init__(self) -> ArLog"""
        this = _AriaPy.new_ArLog()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArLog
    __del__ = lambda self : None;
ArLog_swigregister = _AriaPy.ArLog_swigregister
ArLog_swigregister(ArLog)

def ArLog_log(*args):
  """ArLog_log(LogLevel level, char str)"""
  return _AriaPy.ArLog_log(*args)

def ArLog_init(*args):
  """
    init(LogType type, LogLevel level, char fileName = "", bool logTime = False, 
        bool alsoPrint = False, 
        bool printThisCall = True) -> bool
    init(LogType type, LogLevel level, char fileName = "", bool logTime = False, 
        bool alsoPrint = False) -> bool
    init(LogType type, LogLevel level, char fileName = "", bool logTime = False) -> bool
    init(LogType type, LogLevel level, char fileName = "") -> bool
    ArLog_init(LogType type, LogLevel level) -> bool
    """
  return _AriaPy.ArLog_init(*args)

def ArLog_close():
  """ArLog_close()"""
  return _AriaPy.ArLog_close()

def ArLog_logErrorFromOS(*args):
  """ArLog_logErrorFromOS(LogLevel level, char str, v(...) *args)"""
  return _AriaPy.ArLog_logErrorFromOS(*args)

def ArLog_logErrorFromOSPlain(*args):
  """ArLog_logErrorFromOSPlain(LogLevel level, char str)"""
  return _AriaPy.ArLog_logErrorFromOSPlain(*args)

def ArLog_logBacktrace(*args):
  """ArLog_logBacktrace(LogLevel level)"""
  return _AriaPy.ArLog_logBacktrace(*args)

def ArLog_logFileContents(*args):
  """ArLog_logFileContents(LogLevel level, char fileName) -> bool"""
  return _AriaPy.ArLog_logFileContents(*args)

def ArLog_addToConfig(*args):
  """ArLog_addToConfig(ArConfig config)"""
  return _AriaPy.ArLog_addToConfig(*args)

def ArLog_aramInit(*args):
  """
    aramInit(char prefix, LogLevel defaultLevel = Normal, double defaultSize = 10, 
        bool daemonized = False)
    aramInit(char prefix, LogLevel defaultLevel = Normal, double defaultSize = 10)
    aramInit(char prefix, LogLevel defaultLevel = Normal)
    ArLog_aramInit(char prefix)
    """
  return _AriaPy.ArLog_aramInit(*args)

def ArLog_setFunctor(*args):
  """ArLog_setFunctor(ArFunctor1_CString functor)"""
  return _AriaPy.ArLog_setFunctor(*args)

def ArLog_clearFunctor():
  """ArLog_clearFunctor()"""
  return _AriaPy.ArLog_clearFunctor()

def ArLog_internalForceLockup():
  """ArLog_internalForceLockup()"""
  return _AriaPy.ArLog_internalForceLockup()

class ArLogFileConnection(ArDeviceConnection):
    """Proxy of C++ ArLogFileConnection class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ArLogFileConnection"""
        this = _AriaPy.new_ArLogFileConnection()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArLogFileConnection
    __del__ = lambda self : None;
    def open(self, fname = None):
        """
        open(self, char fname = None) -> int
        open(self) -> int
        """
        return _AriaPy.ArLogFileConnection_open(self, fname)

    def setLogFile(self, fname = None):
        """
        setLogFile(self, char fname = None)
        setLogFile(self)
        """
        return _AriaPy.ArLogFileConnection_setLogFile(self, fname)

    def openSimple(self):
        """openSimple(self) -> bool"""
        return _AriaPy.ArLogFileConnection_openSimple(self)

    def getStatus(self):
        """getStatus(self) -> int"""
        return _AriaPy.ArLogFileConnection_getStatus(self)

    def close(self):
        """close(self) -> bool"""
        return _AriaPy.ArLogFileConnection_close(self)

    def read(self, *args):
        """
        read(self, char data, unsigned int size, unsigned int msWait = 0) -> int
        read(self, char data, unsigned int size) -> int
        """
        return _AriaPy.ArLogFileConnection_read(self, *args)

    def write(self, *args):
        """write(self, char data, unsigned int size) -> int"""
        return _AriaPy.ArLogFileConnection_write(self, *args)

    def getOpenMessage(self, *args):
        """getOpenMessage(self, int messageNumber) -> char"""
        return _AriaPy.ArLogFileConnection_getOpenMessage(self, *args)

    def getTimeRead(self, *args):
        """getTimeRead(self, int index) -> ArTime"""
        return _AriaPy.ArLogFileConnection_getTimeRead(self, *args)

    def isTimeStamping(self):
        """isTimeStamping(self) -> bool"""
        return _AriaPy.ArLogFileConnection_isTimeStamping(self)

    def getLogFile(self):
        """getLogFile(self) -> char"""
        return _AriaPy.ArLogFileConnection_getLogFile(self)

    def internalOpen(self):
        """internalOpen(self) -> int"""
        return _AriaPy.ArLogFileConnection_internalOpen(self)

    OPEN_FILE_NOT_FOUND = _AriaPy.ArLogFileConnection_OPEN_FILE_NOT_FOUND
    OPEN_NOT_A_LOG_FILE = _AriaPy.ArLogFileConnection_OPEN_NOT_A_LOG_FILE
    myPose = _swig_property(_AriaPy.ArLogFileConnection_myPose_get, _AriaPy.ArLogFileConnection_myPose_set)
    havePose = _swig_property(_AriaPy.ArLogFileConnection_havePose_get, _AriaPy.ArLogFileConnection_havePose_set)
    myName = _swig_property(_AriaPy.ArLogFileConnection_myName_get, _AriaPy.ArLogFileConnection_myName_set)
    myType = _swig_property(_AriaPy.ArLogFileConnection_myType_get, _AriaPy.ArLogFileConnection_myType_set)
    mySubtype = _swig_property(_AriaPy.ArLogFileConnection_mySubtype_get, _AriaPy.ArLogFileConnection_mySubtype_set)
ArLogFileConnection_swigregister = _AriaPy.ArLogFileConnection_swigregister
ArLogFileConnection_swigregister(ArLogFileConnection)

class ArMD5Calculator(object):
    """Proxy of C++ ArMD5Calculator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DIGEST_LENGTH = _AriaPy.ArMD5Calculator_DIGEST_LENGTH
    DISPLAY_LENGTH = _AriaPy.ArMD5Calculator_DISPLAY_LENGTH
    def toDisplay(*args):
        """
        toDisplay(unsigned char digestBuf, size_t digestLength, char displayBuf, 
            size_t displayLength)
        """
        return _AriaPy.ArMD5Calculator_toDisplay(*args)

    toDisplay = staticmethod(toDisplay)
    def calculateChecksum(*args):
        """calculateChecksum(char fileName, unsigned char md5DigestBuffer, size_t md5DigestBufferLen) -> bool"""
        return _AriaPy.ArMD5Calculator_calculateChecksum(*args)

    calculateChecksum = staticmethod(calculateChecksum)
    def __init__(self, secondFunctor = None): 
        """
        __init__(self, ArFunctor1_CString secondFunctor = None) -> ArMD5Calculator
        __init__(self) -> ArMD5Calculator
        """
        this = _AriaPy.new_ArMD5Calculator(secondFunctor)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArMD5Calculator
    __del__ = lambda self : None;
    def reset(self):
        """reset(self)"""
        return _AriaPy.ArMD5Calculator_reset(self)

    def append(self, *args):
        """append(self, char str)"""
        return _AriaPy.ArMD5Calculator_append(self, *args)

    def getDigest(self):
        """getDigest(self) -> unsigned char"""
        return _AriaPy.ArMD5Calculator_getDigest(self)

    def getFunctor(self):
        """getFunctor(self) -> ArFunctor1_CString"""
        return _AriaPy.ArMD5Calculator_getFunctor(self)

    def getSecondFunctor(self):
        """getSecondFunctor(self) -> ArFunctor1_CString"""
        return _AriaPy.ArMD5Calculator_getSecondFunctor(self)

    def setSecondFunctor(self, *args):
        """setSecondFunctor(self, ArFunctor1_CString secondFunctor)"""
        return _AriaPy.ArMD5Calculator_setSecondFunctor(self, *args)

ArMD5Calculator_swigregister = _AriaPy.ArMD5Calculator_swigregister
ArMD5Calculator_swigregister(ArMD5Calculator)

def ArMD5Calculator_toDisplay(*args):
  """
    ArMD5Calculator_toDisplay(unsigned char digestBuf, size_t digestLength, char displayBuf, 
        size_t displayLength)
    """
  return _AriaPy.ArMD5Calculator_toDisplay(*args)

def ArMD5Calculator_calculateChecksum(*args):
  """ArMD5Calculator_calculateChecksum(char fileName, unsigned char md5DigestBuffer, size_t md5DigestBufferLen) -> bool"""
  return _AriaPy.ArMD5Calculator_calculateChecksum(*args)

ARMAP_DEFAULT_SCAN_TYPE = _AriaPy.ARMAP_DEFAULT_SCAN_TYPE
class ArMapScanInterface(object):
    """Proxy of C++ ArMapScanInterface class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def isDefaultScanType(*args):
        """isDefaultScanType(char scanType) -> bool"""
        return _AriaPy.ArMapScanInterface_isDefaultScanType(*args)

    isDefaultScanType = staticmethod(isDefaultScanType)
    def isSummaryScanType(*args):
        """isSummaryScanType(char scanType) -> bool"""
        return _AriaPy.ArMapScanInterface_isSummaryScanType(*args)

    isSummaryScanType = staticmethod(isSummaryScanType)
    __swig_destroy__ = _AriaPy.delete_ArMapScanInterface
    __del__ = lambda self : None;
    def getDisplayString(self, scanType = ""):
        """
        getDisplayString(self, char scanType = "") -> char
        getDisplayString(self) -> char
        """
        return _AriaPy.ArMapScanInterface_getDisplayString(self, scanType)

    def getPoints(self, scanType = ""):
        """
        getPoints(self, char scanType = "") -> std::vector<(ArPose,std::allocator<(ArPose)>)>
        getPoints(self) -> std::vector<(ArPose,std::allocator<(ArPose)>)>
        """
        return _AriaPy.ArMapScanInterface_getPoints(self, scanType)

    def getMinPose(self, scanType = ""):
        """
        getMinPose(self, char scanType = "") -> ArPose
        getMinPose(self) -> ArPose
        """
        return _AriaPy.ArMapScanInterface_getMinPose(self, scanType)

    def getMaxPose(self, scanType = ""):
        """
        getMaxPose(self, char scanType = "") -> ArPose
        getMaxPose(self) -> ArPose
        """
        return _AriaPy.ArMapScanInterface_getMaxPose(self, scanType)

    def getNumPoints(self, scanType = ""):
        """
        getNumPoints(self, char scanType = "") -> int
        getNumPoints(self) -> int
        """
        return _AriaPy.ArMapScanInterface_getNumPoints(self, scanType)

    def isSortedPoints(self, scanType = ""):
        """
        isSortedPoints(self, char scanType = "") -> bool
        isSortedPoints(self) -> bool
        """
        return _AriaPy.ArMapScanInterface_isSortedPoints(self, scanType)

    def setPoints(self, *args):
        """
        setPoints(self, std::vector<(ArPose,std::allocator<(ArPose)>)> points, 
            char scanType = "", bool isSortedPoints = False, 
            ArMapChangeDetails changeDetails = None)
        setPoints(self, std::vector<(ArPose,std::allocator<(ArPose)>)> points, 
            char scanType = "", bool isSortedPoints = False)
        setPoints(self, std::vector<(ArPose,std::allocator<(ArPose)>)> points, 
            char scanType = "")
        setPoints(self, std::vector<(ArPose,std::allocator<(ArPose)>)> points)
        """
        return _AriaPy.ArMapScanInterface_setPoints(self, *args)

    def getLines(self, scanType = ""):
        """
        getLines(self, char scanType = "") -> std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)>
        getLines(self) -> std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)>
        """
        return _AriaPy.ArMapScanInterface_getLines(self, scanType)

    def getLineMinPose(self, scanType = ""):
        """
        getLineMinPose(self, char scanType = "") -> ArPose
        getLineMinPose(self) -> ArPose
        """
        return _AriaPy.ArMapScanInterface_getLineMinPose(self, scanType)

    def getLineMaxPose(self, scanType = ""):
        """
        getLineMaxPose(self, char scanType = "") -> ArPose
        getLineMaxPose(self) -> ArPose
        """
        return _AriaPy.ArMapScanInterface_getLineMaxPose(self, scanType)

    def getNumLines(self, scanType = ""):
        """
        getNumLines(self, char scanType = "") -> int
        getNumLines(self) -> int
        """
        return _AriaPy.ArMapScanInterface_getNumLines(self, scanType)

    def isSortedLines(self, scanType = ""):
        """
        isSortedLines(self, char scanType = "") -> bool
        isSortedLines(self) -> bool
        """
        return _AriaPy.ArMapScanInterface_isSortedLines(self, scanType)

    def setLines(self, *args):
        """
        setLines(self, std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)> lines, 
            char scanType = "", bool isSortedLines = False, 
            ArMapChangeDetails changeDetails = None)
        setLines(self, std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)> lines, 
            char scanType = "", bool isSortedLines = False)
        setLines(self, std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)> lines, 
            char scanType = "")
        setLines(self, std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)> lines)
        """
        return _AriaPy.ArMapScanInterface_setLines(self, *args)

    def getResolution(self, scanType = ""):
        """
        getResolution(self, char scanType = "") -> int
        getResolution(self) -> int
        """
        return _AriaPy.ArMapScanInterface_getResolution(self, scanType)

    def setResolution(self, *args):
        """
        setResolution(self, int resolution, char scanType = "", ArMapChangeDetails changeDetails = None)
        setResolution(self, int resolution, char scanType = "")
        setResolution(self, int resolution)
        """
        return _AriaPy.ArMapScanInterface_setResolution(self, *args)

    def writeScanToFunctor(self, *args):
        """
        writeScanToFunctor(self, ArFunctor1_CString functor, char endOfLineChars, char scanType = "")
        writeScanToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)
        """
        return _AriaPy.ArMapScanInterface_writeScanToFunctor(self, *args)

    def writePointsToFunctor(self, *args):
        """
        writePointsToFunctor(self, ArFunctor2<(int,p.std::vector<(ArPose,std::allocator<(ArPose)>)>)> functor, 
            char scanType = "", 
            ArFunctor1_CString keywordFunctor = None)
        writePointsToFunctor(self, ArFunctor2<(int,p.std::vector<(ArPose,std::allocator<(ArPose)>)>)> functor, 
            char scanType = "")
        writePointsToFunctor(self, ArFunctor2<(int,p.std::vector<(ArPose,std::allocator<(ArPose)>)>)> functor)
        """
        return _AriaPy.ArMapScanInterface_writePointsToFunctor(self, *args)

    def writeLinesToFunctor(self, *args):
        """
        writeLinesToFunctor(self, ArFunctor2<(int,p.std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)>)> functor, 
            char scanType = "", 
            ArFunctor1_CString keywordFunctor = None)
        writeLinesToFunctor(self, ArFunctor2<(int,p.std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)>)> functor, 
            char scanType = "")
        writeLinesToFunctor(self, ArFunctor2<(int,p.std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)>)> functor)
        """
        return _AriaPy.ArMapScanInterface_writeLinesToFunctor(self, *args)

    def addToFileParser(self, *args):
        """addToFileParser(self, ArFileParser fileParser) -> bool"""
        return _AriaPy.ArMapScanInterface_addToFileParser(self, *args)

    def remFromFileParser(self, *args):
        """remFromFileParser(self, ArFileParser fileParser) -> bool"""
        return _AriaPy.ArMapScanInterface_remFromFileParser(self, *args)

    def readDataPoint(self, *args):
        """readDataPoint(self, char line) -> bool"""
        return _AriaPy.ArMapScanInterface_readDataPoint(self, *args)

    def readLineSegment(self, *args):
        """readLineSegment(self, char line) -> bool"""
        return _AriaPy.ArMapScanInterface_readLineSegment(self, *args)

    def loadDataPoint(self, *args):
        """loadDataPoint(self, double x, double y)"""
        return _AriaPy.ArMapScanInterface_loadDataPoint(self, *args)

    def loadLineSegment(self, *args):
        """loadLineSegment(self, double x1, double y1, double x2, double y2)"""
        return _AriaPy.ArMapScanInterface_loadLineSegment(self, *args)

ArMapScanInterface_swigregister = _AriaPy.ArMapScanInterface_swigregister
ArMapScanInterface_swigregister(ArMapScanInterface)

def ArMapScanInterface_isDefaultScanType(*args):
  """ArMapScanInterface_isDefaultScanType(char scanType) -> bool"""
  return _AriaPy.ArMapScanInterface_isDefaultScanType(*args)

def ArMapScanInterface_isSummaryScanType(*args):
  """ArMapScanInterface_isSummaryScanType(char scanType) -> bool"""
  return _AriaPy.ArMapScanInterface_isSummaryScanType(*args)

class ArMapObjectsInterface(object):
    """Proxy of C++ ArMapObjectsInterface class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArMapObjectsInterface
    __del__ = lambda self : None;
    def findFirstMapObject(self, *args):
        """
        findFirstMapObject(self, char name, char type, bool isIncludeWithHeading = False) -> ArMapObject
        findFirstMapObject(self, char name, char type) -> ArMapObject
        """
        return _AriaPy.ArMapObjectsInterface_findFirstMapObject(self, *args)

    def findMapObject(self, *args):
        """
        findMapObject(self, char name, char type = None, bool isIncludeWithHeading = False) -> ArMapObject
        findMapObject(self, char name, char type = None) -> ArMapObject
        findMapObject(self, char name) -> ArMapObject
        """
        return _AriaPy.ArMapObjectsInterface_findMapObject(self, *args)

    def findMapObjectsOfType(self, *args):
        """
        findMapObjectsOfType(self, char type, bool isIncludeWithHeading = False) -> ArMapObjectPtrList
        findMapObjectsOfType(self, char type) -> ArMapObjectPtrList
        """
        return _AriaPy.ArMapObjectsInterface_findMapObjectsOfType(self, *args)

    def getMapObjects(self):
        """getMapObjects(self) -> ArMapObjectPtrList"""
        return _AriaPy.ArMapObjectsInterface_getMapObjects(self)

    def setMapObjects(self, *args):
        """
        setMapObjects(self, ArMapObjectPtrList mapObjects, bool isSortedObjects = False, 
            ArMapChangeDetails changeDetails = None)
        setMapObjects(self, ArMapObjectPtrList mapObjects, bool isSortedObjects = False)
        setMapObjects(self, ArMapObjectPtrList mapObjects)
        """
        return _AriaPy.ArMapObjectsInterface_setMapObjects(self, *args)

    def writeObjectListToFunctor(self, *args):
        """writeObjectListToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)"""
        return _AriaPy.ArMapObjectsInterface_writeObjectListToFunctor(self, *args)

ArMapObjectsInterface_swigregister = _AriaPy.ArMapObjectsInterface_swigregister
ArMapObjectsInterface_swigregister(ArMapObjectsInterface)

class ArMapInfoInterface(object):
    """Proxy of C++ ArMapInfoInterface class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    MAP_INFO_NAME = _swig_property(_AriaPy.ArMapInfoInterface_MAP_INFO_NAME_get, _AriaPy.ArMapInfoInterface_MAP_INFO_NAME_set)
    META_INFO_NAME = _swig_property(_AriaPy.ArMapInfoInterface_META_INFO_NAME_get, _AriaPy.ArMapInfoInterface_META_INFO_NAME_set)
    TASK_INFO_NAME = _swig_property(_AriaPy.ArMapInfoInterface_TASK_INFO_NAME_get, _AriaPy.ArMapInfoInterface_TASK_INFO_NAME_set)
    ROUTE_INFO_NAME = _swig_property(_AriaPy.ArMapInfoInterface_ROUTE_INFO_NAME_get, _AriaPy.ArMapInfoInterface_ROUTE_INFO_NAME_set)
    SCHED_TASK_INFO_NAME = _swig_property(_AriaPy.ArMapInfoInterface_SCHED_TASK_INFO_NAME_get, _AriaPy.ArMapInfoInterface_SCHED_TASK_INFO_NAME_set)
    SCHED_INFO_NAME = _swig_property(_AriaPy.ArMapInfoInterface_SCHED_INFO_NAME_get, _AriaPy.ArMapInfoInterface_SCHED_INFO_NAME_set)
    CAIRN_INFO_NAME = _swig_property(_AriaPy.ArMapInfoInterface_CAIRN_INFO_NAME_get, _AriaPy.ArMapInfoInterface_CAIRN_INFO_NAME_set)
    CUSTOM_INFO_NAME = _swig_property(_AriaPy.ArMapInfoInterface_CUSTOM_INFO_NAME_get, _AriaPy.ArMapInfoInterface_CUSTOM_INFO_NAME_set)
    __swig_destroy__ = _AriaPy.delete_ArMapInfoInterface
    __del__ = lambda self : None;
    def getInfoCount(self):
        """getInfoCount(self) -> int"""
        return _AriaPy.ArMapInfoInterface_getInfoCount(self)

    def getInfoNames(self):
        """getInfoNames(self) -> std::list<(std::string,std::allocator<(std::string)>)>"""
        return _AriaPy.ArMapInfoInterface_getInfoNames(self)

    def getInfo(self, *args):
        """
        getInfo(self, char infoName) -> ArArgumentBuilderPtrList
        getInfo(self, int infoType) -> ArArgumentBuilderPtrList
        """
        return _AriaPy.ArMapInfoInterface_getInfo(self, *args)

    def getMapInfo(self):
        """getMapInfo(self) -> ArArgumentBuilderPtrList"""
        return _AriaPy.ArMapInfoInterface_getMapInfo(self)

    def setInfo(self, *args):
        """
        setInfo(self, char infoName, ArArgumentBuilderPtrList infoList, ArMapChangeDetails changeDetails = None) -> bool
        setInfo(self, char infoName, ArArgumentBuilderPtrList infoList) -> bool
        setInfo(self, int infoType, ArArgumentBuilderPtrList infoList, ArMapChangeDetails changeDetails = None) -> bool
        setInfo(self, int infoType, ArArgumentBuilderPtrList infoList) -> bool
        """
        return _AriaPy.ArMapInfoInterface_setInfo(self, *args)

    def setMapInfo(self, *args):
        """
        setMapInfo(self, ArArgumentBuilderPtrList mapInfo, ArMapChangeDetails changeDetails = None) -> bool
        setMapInfo(self, ArArgumentBuilderPtrList mapInfo) -> bool
        """
        return _AriaPy.ArMapInfoInterface_setMapInfo(self, *args)

    def writeInfoToFunctor(self, *args):
        """writeInfoToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)"""
        return _AriaPy.ArMapInfoInterface_writeInfoToFunctor(self, *args)

    MAP_INFO = _AriaPy.ArMapInfoInterface_MAP_INFO
    FIRST_INFO = _AriaPy.ArMapInfoInterface_FIRST_INFO
    META_INFO = _AriaPy.ArMapInfoInterface_META_INFO
    TASK_INFO = _AriaPy.ArMapInfoInterface_TASK_INFO
    ROUTE_INFO = _AriaPy.ArMapInfoInterface_ROUTE_INFO
    SCHED_TASK_INFO = _AriaPy.ArMapInfoInterface_SCHED_TASK_INFO
    SCHED_INFO = _AriaPy.ArMapInfoInterface_SCHED_INFO
    CAIRN_INFO = _AriaPy.ArMapInfoInterface_CAIRN_INFO
    CUSTOM_INFO = _AriaPy.ArMapInfoInterface_CUSTOM_INFO
    LAST_INFO = _AriaPy.ArMapInfoInterface_LAST_INFO
    INFO_COUNT = _AriaPy.ArMapInfoInterface_INFO_COUNT
    def getInfoName(self, *args):
        """getInfoName(self, int infoType) -> char"""
        return _AriaPy.ArMapInfoInterface_getInfoName(self, *args)

ArMapInfoInterface_swigregister = _AriaPy.ArMapInfoInterface_swigregister
ArMapInfoInterface_swigregister(ArMapInfoInterface)

class ArMapSupplementInterface(object):
    """Proxy of C++ ArMapSupplementInterface class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArMapSupplementInterface
    __del__ = lambda self : None;
    def hasOriginLatLongAlt(self):
        """hasOriginLatLongAlt(self) -> bool"""
        return _AriaPy.ArMapSupplementInterface_hasOriginLatLongAlt(self)

    def getOriginLatLong(self):
        """getOriginLatLong(self) -> ArPose"""
        return _AriaPy.ArMapSupplementInterface_getOriginLatLong(self)

    def getOriginAltitude(self):
        """getOriginAltitude(self) -> double"""
        return _AriaPy.ArMapSupplementInterface_getOriginAltitude(self)

    def setOriginLatLongAlt(self, *args):
        """
        setOriginLatLongAlt(self, bool hasOriginLatLong, ArPose originLatLong, double altitude, 
            ArMapChangeDetails changeDetails = None)
        setOriginLatLongAlt(self, bool hasOriginLatLong, ArPose originLatLong, double altitude)
        """
        return _AriaPy.ArMapSupplementInterface_setOriginLatLongAlt(self, *args)

    def writeSupplementToFunctor(self, *args):
        """writeSupplementToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)"""
        return _AriaPy.ArMapSupplementInterface_writeSupplementToFunctor(self, *args)

ArMapSupplementInterface_swigregister = _AriaPy.ArMapSupplementInterface_swigregister
ArMapSupplementInterface_swigregister(ArMapSupplementInterface)

class ArMapInterface(ArMapInfoInterface,ArMapObjectsInterface,ArMapScanInterface,ArMapSupplementInterface):
    """Proxy of C++ ArMapInterface class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    MAX_MAP_NAME_LENGTH = _AriaPy.ArMapInterface_MAX_MAP_NAME_LENGTH
    MAP_CATEGORY_2D = _swig_property(_AriaPy.ArMapInterface_MAP_CATEGORY_2D_get, _AriaPy.ArMapInterface_MAP_CATEGORY_2D_set)
    MAP_CATEGORY_2D_MULTI_SOURCES = _swig_property(_AriaPy.ArMapInterface_MAP_CATEGORY_2D_MULTI_SOURCES_get, _AriaPy.ArMapInterface_MAP_CATEGORY_2D_MULTI_SOURCES_set)
    MAP_CATEGORY_2D_EXTENDED = _swig_property(_AriaPy.ArMapInterface_MAP_CATEGORY_2D_EXTENDED_get, _AriaPy.ArMapInterface_MAP_CATEGORY_2D_EXTENDED_set)
    MAP_CATEGORY_2D_COMPOSITE = _swig_property(_AriaPy.ArMapInterface_MAP_CATEGORY_2D_COMPOSITE_get, _AriaPy.ArMapInterface_MAP_CATEGORY_2D_COMPOSITE_set)
    __swig_destroy__ = _AriaPy.delete_ArMapInterface
    __del__ = lambda self : None;
    def clear(self):
        """clear(self)"""
        return _AriaPy.ArMapInterface_clear(self)

    def set(self, *args):
        """set(self, ArMapInterface other) -> bool"""
        return _AriaPy.ArMapInterface_set(self, *args)

    def clone(self):
        """clone(self) -> ArMapInterface"""
        return _AriaPy.ArMapInterface_clone(self)

    def getScanTypes(self):
        """getScanTypes(self) -> std::list<(std::string,std::allocator<(std::string)>)>"""
        return _AriaPy.ArMapInterface_getScanTypes(self)

    def setScanTypes(self, *args):
        """setScanTypes(self, std::list<(std::string,std::allocator<(std::string)>)> scanTypeList) -> bool"""
        return _AriaPy.ArMapInterface_setScanTypes(self, *args)

    def lock(self):
        """lock(self) -> int"""
        return _AriaPy.ArMapInterface_lock(self)

    def tryLock(self):
        """tryLock(self) -> int"""
        return _AriaPy.ArMapInterface_tryLock(self)

    def unlock(self):
        """unlock(self) -> int"""
        return _AriaPy.ArMapInterface_unlock(self)

    def mapChanged(self):
        """mapChanged(self)"""
        return _AriaPy.ArMapInterface_mapChanged(self)

    def addMapChangedCBPos(self, *args):
        """addMapChangedCBPos(self, ArFunctor functor, Pos position)"""
        return _AriaPy.ArMapInterface_addMapChangedCBPos(self, *args)

    def addMapChangedCB(self, *args):
        """
        addMapChangedCB(self, ArFunctor functor, int position = 50)
        addMapChangedCB(self, ArFunctor functor)
        """
        return _AriaPy.ArMapInterface_addMapChangedCB(self, *args)

    def remMapChangedCB(self, *args):
        """remMapChangedCB(self, ArFunctor functor)"""
        return _AriaPy.ArMapInterface_remMapChangedCB(self, *args)

    def addPreMapChangedCBPos(self, *args):
        """addPreMapChangedCBPos(self, ArFunctor functor, Pos position)"""
        return _AriaPy.ArMapInterface_addPreMapChangedCBPos(self, *args)

    def addPreMapChangedCB(self, *args):
        """
        addPreMapChangedCB(self, ArFunctor functor, int position = 50)
        addPreMapChangedCB(self, ArFunctor functor)
        """
        return _AriaPy.ArMapInterface_addPreMapChangedCB(self, *args)

    def remPreMapChangedCB(self, *args):
        """remPreMapChangedCB(self, ArFunctor functor)"""
        return _AriaPy.ArMapInterface_remPreMapChangedCB(self, *args)

    def setMapChangedLogLevel(self, *args):
        """setMapChangedLogLevel(self, LogLevel level)"""
        return _AriaPy.ArMapInterface_setMapChangedLogLevel(self, *args)

    def getMapChangedLogLevel(self):
        """getMapChangedLogLevel(self) -> LogLevel"""
        return _AriaPy.ArMapInterface_getMapChangedLogLevel(self)

    def writeToFunctor(self, *args):
        """writeToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)"""
        return _AriaPy.ArMapInterface_writeToFunctor(self, *args)

    def writeObjectsToFunctor(self, *args):
        """
        writeObjectsToFunctor(self, ArFunctor1_CString functor, char endOfLineChars, bool isOverrideAsSingleScan = False, 
            char maxCategory = None)
        writeObjectsToFunctor(self, ArFunctor1_CString functor, char endOfLineChars, bool isOverrideAsSingleScan = False)
        writeObjectsToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)
        """
        return _AriaPy.ArMapInterface_writeObjectsToFunctor(self, *args)

    def addPreWriteFileCB(self, *args):
        """
        addPreWriteFileCB(self, ArFunctor functor, Pos position = LAST)
        addPreWriteFileCB(self, ArFunctor functor)
        """
        return _AriaPy.ArMapInterface_addPreWriteFileCB(self, *args)

    def remPreWriteFileCB(self, *args):
        """remPreWriteFileCB(self, ArFunctor functor)"""
        return _AriaPy.ArMapInterface_remPreWriteFileCB(self, *args)

    def addPostWriteFileCB(self, *args):
        """
        addPostWriteFileCB(self, ArFunctor functor, Pos position = LAST)
        addPostWriteFileCB(self, ArFunctor functor)
        """
        return _AriaPy.ArMapInterface_addPostWriteFileCB(self, *args)

    def remPostWriteFileCB(self, *args):
        """remPostWriteFileCB(self, ArFunctor functor)"""
        return _AriaPy.ArMapInterface_remPostWriteFileCB(self, *args)

    def getMapId(self, *args):
        """
        getMapId(self, ArMapId mapIdOut, bool isInternalCall = False) -> bool
        getMapId(self, ArMapId mapIdOut) -> bool
        """
        return _AriaPy.ArMapInterface_getMapId(self, *args)

    def calculateChecksum(self, *args):
        """calculateChecksum(self, unsigned char md5DigestBuffer, size_t md5DigestBufferLen) -> bool"""
        return _AriaPy.ArMapInterface_calculateChecksum(self, *args)

    def getBaseDirectory(self):
        """getBaseDirectory(self) -> char"""
        return _AriaPy.ArMapInterface_getBaseDirectory(self)

    def setBaseDirectory(self, *args):
        """setBaseDirectory(self, char baseDirectory)"""
        return _AriaPy.ArMapInterface_setBaseDirectory(self, *args)

    def getTempDirectory(self):
        """getTempDirectory(self) -> char"""
        return _AriaPy.ArMapInterface_getTempDirectory(self)

    def setTempDirectory(self, *args):
        """setTempDirectory(self, char tempDirectory)"""
        return _AriaPy.ArMapInterface_setTempDirectory(self, *args)

    def createRealFileName(self, *args):
        """
        createRealFileName(self, char baseDirectory, char fileName, bool isIgnoreCase) -> string
        createRealFileName(self, char fileName) -> string
        """
        return _AriaPy.ArMapInterface_createRealFileName(self, *args)

    def getFileName(self):
        """getFileName(self) -> char"""
        return _AriaPy.ArMapInterface_getFileName(self)

    def setSourceFileName(self, *args):
        """
        setSourceFileName(self, char sourceName, char fileName, bool isInternalCall = False)
        setSourceFileName(self, char sourceName, char fileName)
        """
        return _AriaPy.ArMapInterface_setSourceFileName(self, *args)

    def refresh(self):
        """refresh(self) -> bool"""
        return _AriaPy.ArMapInterface_refresh(self)

    def setIgnoreEmptyFileName(self, *args):
        """setIgnoreEmptyFileName(self, bool ignore)"""
        return _AriaPy.ArMapInterface_setIgnoreEmptyFileName(self, *args)

    def getIgnoreEmptyFileName(self):
        """getIgnoreEmptyFileName(self) -> bool"""
        return _AriaPy.ArMapInterface_getIgnoreEmptyFileName(self)

    def setIgnoreCase(self, ignoreCase = False):
        """
        setIgnoreCase(self, bool ignoreCase = False)
        setIgnoreCase(self)
        """
        return _AriaPy.ArMapInterface_setIgnoreCase(self, ignoreCase)

    def getIgnoreCase(self):
        """getIgnoreCase(self) -> bool"""
        return _AriaPy.ArMapInterface_getIgnoreCase(self)

    def getInactiveInfo(self):
        """getInactiveInfo(self) -> ArMapInfoInterface"""
        return _AriaPy.ArMapInterface_getInactiveInfo(self)

    def getInactiveObjects(self):
        """getInactiveObjects(self) -> ArMapObjectsInterface"""
        return _AriaPy.ArMapInterface_getInactiveObjects(self)

    def getChildObjects(self):
        """getChildObjects(self) -> ArMapObjectsInterface"""
        return _AriaPy.ArMapInterface_getChildObjects(self)

    def findMapObjectParams(self, *args):
        """findMapObjectParams(self, char mapObjectName) -> ArArgumentBuilder"""
        return _AriaPy.ArMapInterface_findMapObjectParams(self, *args)

    def setMapObjectParams(self, *args):
        """
        setMapObjectParams(self, char mapObjectName, ArArgumentBuilder params, ArMapChangeDetails changeDetails = None) -> bool
        setMapObjectParams(self, char mapObjectName, ArArgumentBuilder params) -> bool
        """
        return _AriaPy.ArMapInterface_setMapObjectParams(self, *args)

    def getRemainder(self):
        """getRemainder(self) -> ArArgumentBuilderPtrList"""
        return _AriaPy.ArMapInterface_getRemainder(self)

    def setQuiet(self, *args):
        """setQuiet(self, bool isQuiet)"""
        return _AriaPy.ArMapInterface_setQuiet(self, *args)

    def parseLine(self, *args):
        """parseLine(self, char line) -> bool"""
        return _AriaPy.ArMapInterface_parseLine(self, *args)

    def parsingComplete(self):
        """parsingComplete(self)"""
        return _AriaPy.ArMapInterface_parsingComplete(self)

    def isLoadingDataStarted(self):
        """isLoadingDataStarted(self) -> bool"""
        return _AriaPy.ArMapInterface_isLoadingDataStarted(self)

    def isLoadingLinesAndDataStarted(self):
        """isLoadingLinesAndDataStarted(self) -> bool"""
        return _AriaPy.ArMapInterface_isLoadingLinesAndDataStarted(self)

ArMapInterface_swigregister = _AriaPy.ArMapInterface_swigregister
ArMapInterface_swigregister(ArMapInterface)

class ArMap(ArMapInterface):
    """Proxy of C++ ArMap class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, char baseDirectory = "./", bool addToGlobalConfig = True, 
            char configSection = "Files", char configParam = "Map", 
            char configDesc = "Map of the environment that the robot uses for navigation", 
            bool ignoreEmptyFileName = True, 
            Priority priority = IMPORTANT, 
            char tempDirectory = None, 
            int configProcessFilePriority = 100) -> ArMap
        __init__(self, char baseDirectory = "./", bool addToGlobalConfig = True, 
            char configSection = "Files", char configParam = "Map", 
            char configDesc = "Map of the environment that the robot uses for navigation", 
            bool ignoreEmptyFileName = True, 
            Priority priority = IMPORTANT, 
            char tempDirectory = None) -> ArMap
        __init__(self, char baseDirectory = "./", bool addToGlobalConfig = True, 
            char configSection = "Files", char configParam = "Map", 
            char configDesc = "Map of the environment that the robot uses for navigation", 
            bool ignoreEmptyFileName = True, 
            Priority priority = IMPORTANT) -> ArMap
        __init__(self, char baseDirectory = "./", bool addToGlobalConfig = True, 
            char configSection = "Files", char configParam = "Map", 
            char configDesc = "Map of the environment that the robot uses for navigation", 
            bool ignoreEmptyFileName = True) -> ArMap
        __init__(self, char baseDirectory = "./", bool addToGlobalConfig = True, 
            char configSection = "Files", char configParam = "Map", 
            char configDesc = "Map of the environment that the robot uses for navigation") -> ArMap
        __init__(self, char baseDirectory = "./", bool addToGlobalConfig = True, 
            char configSection = "Files", char configParam = "Map") -> ArMap
        __init__(self, char baseDirectory = "./", bool addToGlobalConfig = True, 
            char configSection = "Files") -> ArMap
        __init__(self, char baseDirectory = "./", bool addToGlobalConfig = True) -> ArMap
        __init__(self, char baseDirectory = "./") -> ArMap
        __init__(self) -> ArMap
        __init__(self, ArMap other) -> ArMap
        """
        this = _AriaPy.new_ArMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArMap
    __del__ = lambda self : None;
    def getScanTypes(self):
        """getScanTypes(self) -> std::list<(std::string,std::allocator<(std::string)>)>"""
        return _AriaPy.ArMap_getScanTypes(self)

    def setScanTypes(self, *args):
        """setScanTypes(self, std::list<(std::string,std::allocator<(std::string)>)> scanTypeList) -> bool"""
        return _AriaPy.ArMap_setScanTypes(self, *args)

    def lock(self):
        """lock(self) -> int"""
        return _AriaPy.ArMap_lock(self)

    def tryLock(self):
        """tryLock(self) -> int"""
        return _AriaPy.ArMap_tryLock(self)

    def unlock(self):
        """unlock(self) -> int"""
        return _AriaPy.ArMap_unlock(self)

    def getDisplayString(self, scanType = ""):
        """
        getDisplayString(self, char scanType = "") -> char
        getDisplayString(self) -> char
        """
        return _AriaPy.ArMap_getDisplayString(self, scanType)

    def getPoints(self, scanType = ""):
        """
        getPoints(self, char scanType = "") -> std::vector<(ArPose,std::allocator<(ArPose)>)>
        getPoints(self) -> std::vector<(ArPose,std::allocator<(ArPose)>)>
        """
        return _AriaPy.ArMap_getPoints(self, scanType)

    def getMinPose(self, scanType = ""):
        """
        getMinPose(self, char scanType = "") -> ArPose
        getMinPose(self) -> ArPose
        """
        return _AriaPy.ArMap_getMinPose(self, scanType)

    def getMaxPose(self, scanType = ""):
        """
        getMaxPose(self, char scanType = "") -> ArPose
        getMaxPose(self) -> ArPose
        """
        return _AriaPy.ArMap_getMaxPose(self, scanType)

    def getNumPoints(self, scanType = ""):
        """
        getNumPoints(self, char scanType = "") -> int
        getNumPoints(self) -> int
        """
        return _AriaPy.ArMap_getNumPoints(self, scanType)

    def isSortedPoints(self, scanType = ""):
        """
        isSortedPoints(self, char scanType = "") -> bool
        isSortedPoints(self) -> bool
        """
        return _AriaPy.ArMap_isSortedPoints(self, scanType)

    def setPoints(self, *args):
        """
        setPoints(self, std::vector<(ArPose,std::allocator<(ArPose)>)> points, 
            char scanType = "", bool isSortedPoints = False, 
            ArMapChangeDetails changeDetails = None)
        setPoints(self, std::vector<(ArPose,std::allocator<(ArPose)>)> points, 
            char scanType = "", bool isSortedPoints = False)
        setPoints(self, std::vector<(ArPose,std::allocator<(ArPose)>)> points, 
            char scanType = "")
        setPoints(self, std::vector<(ArPose,std::allocator<(ArPose)>)> points)
        """
        return _AriaPy.ArMap_setPoints(self, *args)

    def getLines(self, scanType = ""):
        """
        getLines(self, char scanType = "") -> std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)>
        getLines(self) -> std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)>
        """
        return _AriaPy.ArMap_getLines(self, scanType)

    def getLineMinPose(self, scanType = ""):
        """
        getLineMinPose(self, char scanType = "") -> ArPose
        getLineMinPose(self) -> ArPose
        """
        return _AriaPy.ArMap_getLineMinPose(self, scanType)

    def getLineMaxPose(self, scanType = ""):
        """
        getLineMaxPose(self, char scanType = "") -> ArPose
        getLineMaxPose(self) -> ArPose
        """
        return _AriaPy.ArMap_getLineMaxPose(self, scanType)

    def getNumLines(self, scanType = ""):
        """
        getNumLines(self, char scanType = "") -> int
        getNumLines(self) -> int
        """
        return _AriaPy.ArMap_getNumLines(self, scanType)

    def isSortedLines(self, scanType = ""):
        """
        isSortedLines(self, char scanType = "") -> bool
        isSortedLines(self) -> bool
        """
        return _AriaPy.ArMap_isSortedLines(self, scanType)

    def setLines(self, *args):
        """
        setLines(self, std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)> lines, 
            char scanType = "", bool isSortedLines = False, 
            ArMapChangeDetails changeDetails = None)
        setLines(self, std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)> lines, 
            char scanType = "", bool isSortedLines = False)
        setLines(self, std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)> lines, 
            char scanType = "")
        setLines(self, std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)> lines)
        """
        return _AriaPy.ArMap_setLines(self, *args)

    def getResolution(self, scanType = ""):
        """
        getResolution(self, char scanType = "") -> int
        getResolution(self) -> int
        """
        return _AriaPy.ArMap_getResolution(self, scanType)

    def setResolution(self, *args):
        """
        setResolution(self, int resolution, char scanType = "", ArMapChangeDetails changeDetails = None)
        setResolution(self, int resolution, char scanType = "")
        setResolution(self, int resolution)
        """
        return _AriaPy.ArMap_setResolution(self, *args)

    def writeScanToFunctor(self, *args):
        """
        writeScanToFunctor(self, ArFunctor1_CString functor, char endOfLineChars, char scanType = "")
        writeScanToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)
        """
        return _AriaPy.ArMap_writeScanToFunctor(self, *args)

    def writePointsToFunctor(self, *args):
        """
        writePointsToFunctor(self, ArFunctor2<(int,p.std::vector<(ArPose,std::allocator<(ArPose)>)>)> functor, 
            char scanType = "", 
            ArFunctor1_CString keywordFunctor = None)
        writePointsToFunctor(self, ArFunctor2<(int,p.std::vector<(ArPose,std::allocator<(ArPose)>)>)> functor, 
            char scanType = "")
        writePointsToFunctor(self, ArFunctor2<(int,p.std::vector<(ArPose,std::allocator<(ArPose)>)>)> functor)
        """
        return _AriaPy.ArMap_writePointsToFunctor(self, *args)

    def writeLinesToFunctor(self, *args):
        """
        writeLinesToFunctor(self, ArFunctor2<(int,p.std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)>)> functor, 
            char scanType = "", 
            ArFunctor1_CString keywordFunctor = None)
        writeLinesToFunctor(self, ArFunctor2<(int,p.std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)>)> functor, 
            char scanType = "")
        writeLinesToFunctor(self, ArFunctor2<(int,p.std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)>)> functor)
        """
        return _AriaPy.ArMap_writeLinesToFunctor(self, *args)

    def addToFileParser(self, *args):
        """addToFileParser(self, ArFileParser fileParser) -> bool"""
        return _AriaPy.ArMap_addToFileParser(self, *args)

    def remFromFileParser(self, *args):
        """remFromFileParser(self, ArFileParser fileParser) -> bool"""
        return _AriaPy.ArMap_remFromFileParser(self, *args)

    def readDataPoint(self, *args):
        """readDataPoint(self, char line) -> bool"""
        return _AriaPy.ArMap_readDataPoint(self, *args)

    def readLineSegment(self, *args):
        """readLineSegment(self, char line) -> bool"""
        return _AriaPy.ArMap_readLineSegment(self, *args)

    def loadDataPoint(self, *args):
        """loadDataPoint(self, double x, double y)"""
        return _AriaPy.ArMap_loadDataPoint(self, *args)

    def loadLineSegment(self, *args):
        """loadLineSegment(self, double x1, double y1, double x2, double y2)"""
        return _AriaPy.ArMap_loadLineSegment(self, *args)

    def findFirstMapObject(self, *args):
        """
        findFirstMapObject(self, char name, char type, bool isIncludeWithHeading = False) -> ArMapObject
        findFirstMapObject(self, char name, char type) -> ArMapObject
        """
        return _AriaPy.ArMap_findFirstMapObject(self, *args)

    def findMapObject(self, *args):
        """
        findMapObject(self, char name, char type = None, bool isIncludeWithHeading = False) -> ArMapObject
        findMapObject(self, char name, char type = None) -> ArMapObject
        findMapObject(self, char name) -> ArMapObject
        """
        return _AriaPy.ArMap_findMapObject(self, *args)

    def findMapObjectsOfType(self, *args):
        """
        findMapObjectsOfType(self, char type, bool isIncludeWithHeading = False) -> ArMapObjectPtrList
        findMapObjectsOfType(self, char type) -> ArMapObjectPtrList
        """
        return _AriaPy.ArMap_findMapObjectsOfType(self, *args)

    def getMapObjects(self):
        """getMapObjects(self) -> ArMapObjectPtrList"""
        return _AriaPy.ArMap_getMapObjects(self)

    def setMapObjects(self, *args):
        """
        setMapObjects(self, ArMapObjectPtrList mapObjects, bool isSortedObjects = False, 
            ArMapChangeDetails changeDetails = None)
        setMapObjects(self, ArMapObjectPtrList mapObjects, bool isSortedObjects = False)
        setMapObjects(self, ArMapObjectPtrList mapObjects)
        """
        return _AriaPy.ArMap_setMapObjects(self, *args)

    def writeObjectListToFunctor(self, *args):
        """writeObjectListToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)"""
        return _AriaPy.ArMap_writeObjectListToFunctor(self, *args)

    def getInfo(self, *args):
        """
        getInfo(self, char infoName) -> ArArgumentBuilderPtrList
        getInfo(self, int infoType) -> ArArgumentBuilderPtrList
        """
        return _AriaPy.ArMap_getInfo(self, *args)

    def getMapInfo(self):
        """getMapInfo(self) -> ArArgumentBuilderPtrList"""
        return _AriaPy.ArMap_getMapInfo(self)

    def getInfoCount(self):
        """getInfoCount(self) -> int"""
        return _AriaPy.ArMap_getInfoCount(self)

    def getInfoNames(self):
        """getInfoNames(self) -> std::list<(std::string,std::allocator<(std::string)>)>"""
        return _AriaPy.ArMap_getInfoNames(self)

    def setInfo(self, *args):
        """
        setInfo(self, char infoName, ArArgumentBuilderPtrList infoList, ArMapChangeDetails changeDetails = None) -> bool
        setInfo(self, char infoName, ArArgumentBuilderPtrList infoList) -> bool
        setInfo(self, int infoType, ArArgumentBuilderPtrList infoList, ArMapChangeDetails changeDetails = None) -> bool
        setInfo(self, int infoType, ArArgumentBuilderPtrList infoList) -> bool
        """
        return _AriaPy.ArMap_setInfo(self, *args)

    def setMapInfo(self, *args):
        """
        setMapInfo(self, ArArgumentBuilderPtrList mapInfo, ArMapChangeDetails changeDetails = None) -> bool
        setMapInfo(self, ArArgumentBuilderPtrList mapInfo) -> bool
        """
        return _AriaPy.ArMap_setMapInfo(self, *args)

    def getInfoName(self, *args):
        """getInfoName(self, int infoType) -> char"""
        return _AriaPy.ArMap_getInfoName(self, *args)

    def writeInfoToFunctor(self, *args):
        """writeInfoToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)"""
        return _AriaPy.ArMap_writeInfoToFunctor(self, *args)

    def hasOriginLatLongAlt(self):
        """hasOriginLatLongAlt(self) -> bool"""
        return _AriaPy.ArMap_hasOriginLatLongAlt(self)

    def getOriginLatLong(self):
        """getOriginLatLong(self) -> ArPose"""
        return _AriaPy.ArMap_getOriginLatLong(self)

    def getOriginAltitude(self):
        """getOriginAltitude(self) -> double"""
        return _AriaPy.ArMap_getOriginAltitude(self)

    def setOriginLatLongAlt(self, *args):
        """
        setOriginLatLongAlt(self, bool hasOriginLatLong, ArPose originLatLong, double altitude, 
            ArMapChangeDetails changeDetails = None)
        setOriginLatLongAlt(self, bool hasOriginLatLong, ArPose originLatLong, double altitude)
        """
        return _AriaPy.ArMap_setOriginLatLongAlt(self, *args)

    def writeSupplementToFunctor(self, *args):
        """writeSupplementToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)"""
        return _AriaPy.ArMap_writeSupplementToFunctor(self, *args)

    def clear(self):
        """clear(self)"""
        return _AriaPy.ArMap_clear(self)

    def set(self, *args):
        """set(self, ArMapInterface other) -> bool"""
        return _AriaPy.ArMap_set(self, *args)

    def clone(self):
        """clone(self) -> ArMapInterface"""
        return _AriaPy.ArMap_clone(self)

    def mapChanged(self):
        """mapChanged(self)"""
        return _AriaPy.ArMap_mapChanged(self)

    def addMapChangedCB(self, *args):
        """
        addMapChangedCB(self, ArFunctor functor, int position = 50)
        addMapChangedCB(self, ArFunctor functor)
        """
        return _AriaPy.ArMap_addMapChangedCB(self, *args)

    def remMapChangedCB(self, *args):
        """remMapChangedCB(self, ArFunctor functor)"""
        return _AriaPy.ArMap_remMapChangedCB(self, *args)

    def addPreMapChangedCB(self, *args):
        """
        addPreMapChangedCB(self, ArFunctor functor, int position = 50)
        addPreMapChangedCB(self, ArFunctor functor)
        """
        return _AriaPy.ArMap_addPreMapChangedCB(self, *args)

    def remPreMapChangedCB(self, *args):
        """remPreMapChangedCB(self, ArFunctor functor)"""
        return _AriaPy.ArMap_remPreMapChangedCB(self, *args)

    def setMapChangedLogLevel(self, *args):
        """setMapChangedLogLevel(self, LogLevel level)"""
        return _AriaPy.ArMap_setMapChangedLogLevel(self, *args)

    def getMapChangedLogLevel(self):
        """getMapChangedLogLevel(self) -> LogLevel"""
        return _AriaPy.ArMap_getMapChangedLogLevel(self)

    def writeToFunctor(self, *args):
        """writeToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)"""
        return _AriaPy.ArMap_writeToFunctor(self, *args)

    def writeObjectsToFunctor(self, *args):
        """
        writeObjectsToFunctor(self, ArFunctor1_CString functor, char endOfLineChars, bool isOverrideAsSingleScan = False, 
            char maxCategory = None)
        writeObjectsToFunctor(self, ArFunctor1_CString functor, char endOfLineChars, bool isOverrideAsSingleScan = False)
        writeObjectsToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)
        """
        return _AriaPy.ArMap_writeObjectsToFunctor(self, *args)

    def addPreWriteFileCB(self, *args):
        """
        addPreWriteFileCB(self, ArFunctor functor, Pos position = LAST)
        addPreWriteFileCB(self, ArFunctor functor)
        """
        return _AriaPy.ArMap_addPreWriteFileCB(self, *args)

    def remPreWriteFileCB(self, *args):
        """remPreWriteFileCB(self, ArFunctor functor)"""
        return _AriaPy.ArMap_remPreWriteFileCB(self, *args)

    def addPostWriteFileCB(self, *args):
        """
        addPostWriteFileCB(self, ArFunctor functor, Pos position = LAST)
        addPostWriteFileCB(self, ArFunctor functor)
        """
        return _AriaPy.ArMap_addPostWriteFileCB(self, *args)

    def remPostWriteFileCB(self, *args):
        """remPostWriteFileCB(self, ArFunctor functor)"""
        return _AriaPy.ArMap_remPostWriteFileCB(self, *args)

    def forceMapLoadOnConfigProcessFile(self):
        """forceMapLoadOnConfigProcessFile(self)"""
        return _AriaPy.ArMap_forceMapLoadOnConfigProcessFile(self)

    def readFile(self, *args):
        """readFile(self, char fileName) -> bool"""
        return _AriaPy.ArMap_readFile(self, *args)

    def writeFile(self, *args):
        """writeFile(self, char fileName) -> bool"""
        return _AriaPy.ArMap_writeFile(self, *args)

    def getMapId(self, *args):
        """
        getMapId(self, ArMapId mapIdOut, bool isInternalCall = False) -> bool
        getMapId(self, ArMapId mapIdOut) -> bool
        """
        return _AriaPy.ArMap_getMapId(self, *args)

    def calculateChecksum(self, *args):
        """calculateChecksum(self, unsigned char md5DigestBuffer, size_t md5DigestBufferLen) -> bool"""
        return _AriaPy.ArMap_calculateChecksum(self, *args)

    def getBaseDirectory(self):
        """getBaseDirectory(self) -> char"""
        return _AriaPy.ArMap_getBaseDirectory(self)

    def setBaseDirectory(self, *args):
        """setBaseDirectory(self, char baseDirectory)"""
        return _AriaPy.ArMap_setBaseDirectory(self, *args)

    def getTempDirectory(self):
        """getTempDirectory(self) -> char"""
        return _AriaPy.ArMap_getTempDirectory(self)

    def setTempDirectory(self, *args):
        """setTempDirectory(self, char tempDirectory)"""
        return _AriaPy.ArMap_setTempDirectory(self, *args)

    def createRealFileName(self, *args):
        """createRealFileName(self, char fileName) -> string"""
        return _AriaPy.ArMap_createRealFileName(self, *args)

    def getFileName(self):
        """getFileName(self) -> char"""
        return _AriaPy.ArMap_getFileName(self)

    def setSourceFileName(self, *args):
        """
        setSourceFileName(self, char sourceName, char fileName, bool isInternalCall = False)
        setSourceFileName(self, char sourceName, char fileName)
        """
        return _AriaPy.ArMap_setSourceFileName(self, *args)

    def refresh(self):
        """refresh(self) -> bool"""
        return _AriaPy.ArMap_refresh(self)

    def setIgnoreEmptyFileName(self, *args):
        """setIgnoreEmptyFileName(self, bool ignore)"""
        return _AriaPy.ArMap_setIgnoreEmptyFileName(self, *args)

    def getIgnoreEmptyFileName(self):
        """getIgnoreEmptyFileName(self) -> bool"""
        return _AriaPy.ArMap_getIgnoreEmptyFileName(self)

    def setIgnoreCase(self, ignoreCase = False):
        """
        setIgnoreCase(self, bool ignoreCase = False)
        setIgnoreCase(self)
        """
        return _AriaPy.ArMap_setIgnoreCase(self, ignoreCase)

    def getIgnoreCase(self):
        """getIgnoreCase(self) -> bool"""
        return _AriaPy.ArMap_getIgnoreCase(self)

    def getInactiveInfo(self):
        """getInactiveInfo(self) -> ArMapInfoInterface"""
        return _AriaPy.ArMap_getInactiveInfo(self)

    def getInactiveObjects(self):
        """getInactiveObjects(self) -> ArMapObjectsInterface"""
        return _AriaPy.ArMap_getInactiveObjects(self)

    def getChildObjects(self):
        """getChildObjects(self) -> ArMapObjectsInterface"""
        return _AriaPy.ArMap_getChildObjects(self)

    def findMapObjectParams(self, *args):
        """findMapObjectParams(self, char mapObjectName) -> ArArgumentBuilder"""
        return _AriaPy.ArMap_findMapObjectParams(self, *args)

    def setMapObjectParams(self, *args):
        """
        setMapObjectParams(self, char mapObjectName, ArArgumentBuilder params, ArMapChangeDetails changeDetails = None) -> bool
        setMapObjectParams(self, char mapObjectName, ArArgumentBuilder params) -> bool
        """
        return _AriaPy.ArMap_setMapObjectParams(self, *args)

    def getRemainder(self):
        """getRemainder(self) -> ArArgumentBuilderPtrList"""
        return _AriaPy.ArMap_getRemainder(self)

    def setQuiet(self, *args):
        """setQuiet(self, bool isQuiet)"""
        return _AriaPy.ArMap_setQuiet(self, *args)

    def parseLine(self, *args):
        """parseLine(self, char line) -> bool"""
        return _AriaPy.ArMap_parseLine(self, *args)

    def parsingComplete(self):
        """parsingComplete(self)"""
        return _AriaPy.ArMap_parsingComplete(self)

    def isLoadingDataStarted(self):
        """isLoadingDataStarted(self) -> bool"""
        return _AriaPy.ArMap_isLoadingDataStarted(self)

    def isLoadingLinesAndDataStarted(self):
        """isLoadingLinesAndDataStarted(self) -> bool"""
        return _AriaPy.ArMap_isLoadingLinesAndDataStarted(self)

    def readFileAndChangeConfig(self, *args):
        """readFileAndChangeConfig(self, char fileName) -> bool"""
        return _AriaPy.ArMap_readFileAndChangeConfig(self, *args)

    def changeConfigMapName(self, *args):
        """changeConfigMapName(self, char fileName)"""
        return _AriaPy.ArMap_changeConfigMapName(self, *args)

ArMap_swigregister = _AriaPy.ArMap_swigregister
ArMap_swigregister(ArMap)

class ArMapScan(ArMapScanInterface):
    """Proxy of C++ ArMapScan class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, char scanType = "") -> ArMapScan
        __init__(self) -> ArMapScan
        __init__(self, ArMapScan other) -> ArMapScan
        """
        this = _AriaPy.new_ArMapScan(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArMapScan
    __del__ = lambda self : None;
    def getDisplayString(self, scanType = ""):
        """
        getDisplayString(self, char scanType = "") -> char
        getDisplayString(self) -> char
        """
        return _AriaPy.ArMapScan_getDisplayString(self, scanType)

    def getPoints(self, scanType = ""):
        """
        getPoints(self, char scanType = "") -> std::vector<(ArPose,std::allocator<(ArPose)>)>
        getPoints(self) -> std::vector<(ArPose,std::allocator<(ArPose)>)>
        """
        return _AriaPy.ArMapScan_getPoints(self, scanType)

    def getLines(self, scanType = ""):
        """
        getLines(self, char scanType = "") -> std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)>
        getLines(self) -> std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)>
        """
        return _AriaPy.ArMapScan_getLines(self, scanType)

    def getMinPose(self, scanType = ""):
        """
        getMinPose(self, char scanType = "") -> ArPose
        getMinPose(self) -> ArPose
        """
        return _AriaPy.ArMapScan_getMinPose(self, scanType)

    def getMaxPose(self, scanType = ""):
        """
        getMaxPose(self, char scanType = "") -> ArPose
        getMaxPose(self) -> ArPose
        """
        return _AriaPy.ArMapScan_getMaxPose(self, scanType)

    def getNumPoints(self, scanType = ""):
        """
        getNumPoints(self, char scanType = "") -> int
        getNumPoints(self) -> int
        """
        return _AriaPy.ArMapScan_getNumPoints(self, scanType)

    def isSortedPoints(self, scanType = ""):
        """
        isSortedPoints(self, char scanType = "") -> bool
        isSortedPoints(self) -> bool
        """
        return _AriaPy.ArMapScan_isSortedPoints(self, scanType)

    def setPoints(self, *args):
        """
        setPoints(self, std::vector<(ArPose,std::allocator<(ArPose)>)> points, 
            char scanType = "", bool isSortedPoints = False, 
            ArMapChangeDetails changeDetails = None)
        setPoints(self, std::vector<(ArPose,std::allocator<(ArPose)>)> points, 
            char scanType = "", bool isSortedPoints = False)
        setPoints(self, std::vector<(ArPose,std::allocator<(ArPose)>)> points, 
            char scanType = "")
        setPoints(self, std::vector<(ArPose,std::allocator<(ArPose)>)> points)
        """
        return _AriaPy.ArMapScan_setPoints(self, *args)

    def getLineMinPose(self, scanType = ""):
        """
        getLineMinPose(self, char scanType = "") -> ArPose
        getLineMinPose(self) -> ArPose
        """
        return _AriaPy.ArMapScan_getLineMinPose(self, scanType)

    def getLineMaxPose(self, scanType = ""):
        """
        getLineMaxPose(self, char scanType = "") -> ArPose
        getLineMaxPose(self) -> ArPose
        """
        return _AriaPy.ArMapScan_getLineMaxPose(self, scanType)

    def getNumLines(self, scanType = ""):
        """
        getNumLines(self, char scanType = "") -> int
        getNumLines(self) -> int
        """
        return _AriaPy.ArMapScan_getNumLines(self, scanType)

    def isSortedLines(self, scanType = ""):
        """
        isSortedLines(self, char scanType = "") -> bool
        isSortedLines(self) -> bool
        """
        return _AriaPy.ArMapScan_isSortedLines(self, scanType)

    def setLines(self, *args):
        """
        setLines(self, std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)> lines, 
            char scanType = "", bool isSortedLines = False, 
            ArMapChangeDetails changeDetails = None)
        setLines(self, std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)> lines, 
            char scanType = "", bool isSortedLines = False)
        setLines(self, std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)> lines, 
            char scanType = "")
        setLines(self, std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)> lines)
        """
        return _AriaPy.ArMapScan_setLines(self, *args)

    def getResolution(self, scanType = ""):
        """
        getResolution(self, char scanType = "") -> int
        getResolution(self) -> int
        """
        return _AriaPy.ArMapScan_getResolution(self, scanType)

    def setResolution(self, *args):
        """
        setResolution(self, int resolution, char scanType = "", ArMapChangeDetails changeDetails = None)
        setResolution(self, int resolution, char scanType = "")
        setResolution(self, int resolution)
        """
        return _AriaPy.ArMapScan_setResolution(self, *args)

    def writeScanToFunctor(self, *args):
        """
        writeScanToFunctor(self, ArFunctor1_CString functor, char endOfLineChars, char scanType = "")
        writeScanToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)
        """
        return _AriaPy.ArMapScan_writeScanToFunctor(self, *args)

    def addToFileParser(self, *args):
        """addToFileParser(self, ArFileParser fileParser) -> bool"""
        return _AriaPy.ArMapScan_addToFileParser(self, *args)

    def remFromFileParser(self, *args):
        """remFromFileParser(self, ArFileParser fileParser) -> bool"""
        return _AriaPy.ArMapScan_remFromFileParser(self, *args)

    def readDataPoint(self, *args):
        """readDataPoint(self, char line) -> bool"""
        return _AriaPy.ArMapScan_readDataPoint(self, *args)

    def readLineSegment(self, *args):
        """readLineSegment(self, char line) -> bool"""
        return _AriaPy.ArMapScan_readLineSegment(self, *args)

    def loadDataPoint(self, *args):
        """loadDataPoint(self, double x, double y)"""
        return _AriaPy.ArMapScan_loadDataPoint(self, *args)

    def loadLineSegment(self, *args):
        """loadLineSegment(self, double x1, double y1, double x2, double y2)"""
        return _AriaPy.ArMapScan_loadLineSegment(self, *args)

    def clear(self):
        """clear(self)"""
        return _AriaPy.ArMapScan_clear(self)

    def unite(self, *args):
        """
        unite(self, ArMapScan other, bool isIncludeDataPointsAndLines = False) -> bool
        unite(self, ArMapScan other) -> bool
        """
        return _AriaPy.ArMapScan_unite(self, *args)

    def getTimeChanged(self):
        """getTimeChanged(self) -> ArTime"""
        return _AriaPy.ArMapScan_getTimeChanged(self)

    def getScanType(self):
        """getScanType(self) -> char"""
        return _AriaPy.ArMapScan_getScanType(self)

    def getPointsKeyword(self):
        """getPointsKeyword(self) -> char"""
        return _AriaPy.ArMapScan_getPointsKeyword(self)

    def getLinesKeyword(self):
        """getLinesKeyword(self) -> char"""
        return _AriaPy.ArMapScan_getLinesKeyword(self)

    def writePointsToFunctor(self, *args):
        """
        writePointsToFunctor(self, ArFunctor2<(int,p.std::vector<(ArPose,std::allocator<(ArPose)>)>)> functor, 
            char scanType = "", 
            ArFunctor1_CString keywordFunctor = None)
        writePointsToFunctor(self, ArFunctor2<(int,p.std::vector<(ArPose,std::allocator<(ArPose)>)>)> functor, 
            char scanType = "")
        writePointsToFunctor(self, ArFunctor2<(int,p.std::vector<(ArPose,std::allocator<(ArPose)>)>)> functor)
        writePointsToFunctor(self, ArFunctor1_CString functor, char endOfLineChars, char scanType = "")
        writePointsToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)
        """
        return _AriaPy.ArMapScan_writePointsToFunctor(self, *args)

    def writeLinesToFunctor(self, *args):
        """
        writeLinesToFunctor(self, ArFunctor2<(int,p.std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)>)> functor, 
            char scanType = "", 
            ArFunctor1_CString keywordFunctor = None)
        writeLinesToFunctor(self, ArFunctor2<(int,p.std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)>)> functor, 
            char scanType = "")
        writeLinesToFunctor(self, ArFunctor2<(int,p.std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)>)> functor)
        writeLinesToFunctor(self, ArFunctor1_CString functor, char endOfLineChars, char scanType = "")
        writeLinesToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)
        """
        return _AriaPy.ArMapScan_writeLinesToFunctor(self, *args)

    def addExtraToFileParser(self, *args):
        """addExtraToFileParser(self, ArFileParser fileParser, bool isAddLineHandler) -> bool"""
        return _AriaPy.ArMapScan_addExtraToFileParser(self, *args)

    def remExtraFromFileParser(self, *args):
        """remExtraFromFileParser(self, ArFileParser fileParser) -> bool"""
        return _AriaPy.ArMapScan_remExtraFromFileParser(self, *args)

ArMapScan_swigregister = _AriaPy.ArMapScan_swigregister
ArMapScan_swigregister(ArMapScan)

class ArMapObjects(ArMapObjectsInterface):
    """Proxy of C++ ArMapObjects class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DEFAULT_KEYWORD = _swig_property(_AriaPy.ArMapObjects_DEFAULT_KEYWORD_get, _AriaPy.ArMapObjects_DEFAULT_KEYWORD_set)
    def __init__(self, *args): 
        """
        __init__(self, char keyword = "Cairn:") -> ArMapObjects
        __init__(self) -> ArMapObjects
        __init__(self, ArMapObjects other) -> ArMapObjects
        """
        this = _AriaPy.new_ArMapObjects(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArMapObjects
    __del__ = lambda self : None;
    def findFirstMapObject(self, *args):
        """
        findFirstMapObject(self, char name, char type, bool isIncludeWithHeading = False) -> ArMapObject
        findFirstMapObject(self, char name, char type) -> ArMapObject
        """
        return _AriaPy.ArMapObjects_findFirstMapObject(self, *args)

    def findMapObject(self, *args):
        """
        findMapObject(self, char name, char type = None, bool isIncludeWithHeading = False) -> ArMapObject
        findMapObject(self, char name, char type = None) -> ArMapObject
        findMapObject(self, char name) -> ArMapObject
        """
        return _AriaPy.ArMapObjects_findMapObject(self, *args)

    def findMapObjectsOfType(self, *args):
        """
        findMapObjectsOfType(self, char type, bool isIncludeWithHeading = False) -> ArMapObjectPtrList
        findMapObjectsOfType(self, char type) -> ArMapObjectPtrList
        """
        return _AriaPy.ArMapObjects_findMapObjectsOfType(self, *args)

    def getMapObjects(self):
        """getMapObjects(self) -> ArMapObjectPtrList"""
        return _AriaPy.ArMapObjects_getMapObjects(self)

    def setMapObjects(self, *args):
        """
        setMapObjects(self, ArMapObjectPtrList mapObjects, bool isSortedObjects = False, 
            ArMapChangeDetails changeDetails = None)
        setMapObjects(self, ArMapObjectPtrList mapObjects, bool isSortedObjects = False)
        setMapObjects(self, ArMapObjectPtrList mapObjects)
        """
        return _AriaPy.ArMapObjects_setMapObjects(self, *args)

    def writeObjectListToFunctor(self, *args):
        """writeObjectListToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)"""
        return _AriaPy.ArMapObjects_writeObjectListToFunctor(self, *args)

    def clear(self):
        """clear(self)"""
        return _AriaPy.ArMapObjects_clear(self)

    def addToFileParser(self, *args):
        """addToFileParser(self, ArFileParser fileParser) -> bool"""
        return _AriaPy.ArMapObjects_addToFileParser(self, *args)

    def remFromFileParser(self, *args):
        """remFromFileParser(self, ArFileParser fileParser) -> bool"""
        return _AriaPy.ArMapObjects_remFromFileParser(self, *args)

    def getTimeChanged(self):
        """getTimeChanged(self) -> ArTime"""
        return _AriaPy.ArMapObjects_getTimeChanged(self)

ArMapObjects_swigregister = _AriaPy.ArMapObjects_swigregister
ArMapObjects_swigregister(ArMapObjects)

class ArMapInfo(ArMapInfoInterface):
    """Proxy of C++ ArMapInfo class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, char infoNameList = None, size_t infoNameCount = 0, 
            char keywordPrefix = None) -> ArMapInfo
        __init__(self, char infoNameList = None, size_t infoNameCount = 0) -> ArMapInfo
        __init__(self, char infoNameList = None) -> ArMapInfo
        __init__(self) -> ArMapInfo
        __init__(self, ArMapInfo other) -> ArMapInfo
        """
        this = _AriaPy.new_ArMapInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArMapInfo
    __del__ = lambda self : None;
    def getInfo(self, *args):
        """
        getInfo(self, char infoName) -> ArArgumentBuilderPtrList
        getInfo(self, int infoType) -> ArArgumentBuilderPtrList
        """
        return _AriaPy.ArMapInfo_getInfo(self, *args)

    def getMapInfo(self):
        """getMapInfo(self) -> ArArgumentBuilderPtrList"""
        return _AriaPy.ArMapInfo_getMapInfo(self)

    def getInfoCount(self):
        """getInfoCount(self) -> int"""
        return _AriaPy.ArMapInfo_getInfoCount(self)

    def getInfoNames(self):
        """getInfoNames(self) -> std::list<(std::string,std::allocator<(std::string)>)>"""
        return _AriaPy.ArMapInfo_getInfoNames(self)

    def setInfo(self, *args):
        """
        setInfo(self, char infoName, ArArgumentBuilderPtrList infoList, ArMapChangeDetails changeDetails) -> bool
        setInfo(self, int infoType, ArArgumentBuilderPtrList infoList, ArMapChangeDetails changeDetails = None) -> bool
        setInfo(self, int infoType, ArArgumentBuilderPtrList infoList) -> bool
        """
        return _AriaPy.ArMapInfo_setInfo(self, *args)

    def setMapInfo(self, *args):
        """
        setMapInfo(self, ArArgumentBuilderPtrList mapInfo, ArMapChangeDetails changeDetails = None) -> bool
        setMapInfo(self, ArArgumentBuilderPtrList mapInfo) -> bool
        """
        return _AriaPy.ArMapInfo_setMapInfo(self, *args)

    def getInfoName(self, *args):
        """getInfoName(self, int infoType) -> char"""
        return _AriaPy.ArMapInfo_getInfoName(self, *args)

    def writeInfoToFunctor(self, *args):
        """writeInfoToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)"""
        return _AriaPy.ArMapInfo_writeInfoToFunctor(self, *args)

    def clear(self):
        """clear(self)"""
        return _AriaPy.ArMapInfo_clear(self)

    def addToFileParser(self, *args):
        """addToFileParser(self, ArFileParser fileParser) -> bool"""
        return _AriaPy.ArMapInfo_addToFileParser(self, *args)

    def remFromFileParser(self, *args):
        """remFromFileParser(self, ArFileParser fileParser) -> bool"""
        return _AriaPy.ArMapInfo_remFromFileParser(self, *args)

    def getTimeChanged(self):
        """getTimeChanged(self) -> ArTime"""
        return _AriaPy.ArMapInfo_getTimeChanged(self)

ArMapInfo_swigregister = _AriaPy.ArMapInfo_swigregister
ArMapInfo_swigregister(ArMapInfo)

class ArMapSupplement(ArMapSupplementInterface):
    """Proxy of C++ ArMapSupplement class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ArMapSupplement
        __init__(self, ArMapSupplement other) -> ArMapSupplement
        """
        this = _AriaPy.new_ArMapSupplement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArMapSupplement
    __del__ = lambda self : None;
    def hasOriginLatLongAlt(self):
        """hasOriginLatLongAlt(self) -> bool"""
        return _AriaPy.ArMapSupplement_hasOriginLatLongAlt(self)

    def getOriginLatLong(self):
        """getOriginLatLong(self) -> ArPose"""
        return _AriaPy.ArMapSupplement_getOriginLatLong(self)

    def getOriginAltitude(self):
        """getOriginAltitude(self) -> double"""
        return _AriaPy.ArMapSupplement_getOriginAltitude(self)

    def setOriginLatLongAlt(self, *args):
        """
        setOriginLatLongAlt(self, bool hasOriginLatLong, ArPose originLatLong, double altitude, 
            ArMapChangeDetails changeDetails = None)
        setOriginLatLongAlt(self, bool hasOriginLatLong, ArPose originLatLong, double altitude)
        """
        return _AriaPy.ArMapSupplement_setOriginLatLongAlt(self, *args)

    def writeSupplementToFunctor(self, *args):
        """writeSupplementToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)"""
        return _AriaPy.ArMapSupplement_writeSupplementToFunctor(self, *args)

    def clear(self):
        """clear(self)"""
        return _AriaPy.ArMapSupplement_clear(self)

    def addToFileParser(self, *args):
        """addToFileParser(self, ArFileParser fileParser) -> bool"""
        return _AriaPy.ArMapSupplement_addToFileParser(self, *args)

    def remFromFileParser(self, *args):
        """remFromFileParser(self, ArFileParser fileParser) -> bool"""
        return _AriaPy.ArMapSupplement_remFromFileParser(self, *args)

    def getTimeChanged(self):
        """getTimeChanged(self) -> ArTime"""
        return _AriaPy.ArMapSupplement_getTimeChanged(self)

ArMapSupplement_swigregister = _AriaPy.ArMapSupplement_swigregister
ArMapSupplement_swigregister(ArMapSupplement)

class ArDataTagCaseCmpOp(object):
    """Proxy of C++ ArDataTagCaseCmpOp class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __call__(self, *args):
        """__call__(self, string s1, string s2) -> bool"""
        return _AriaPy.ArDataTagCaseCmpOp___call__(self, *args)

    def __init__(self): 
        """__init__(self) -> ArDataTagCaseCmpOp"""
        this = _AriaPy.new_ArDataTagCaseCmpOp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArDataTagCaseCmpOp
    __del__ = lambda self : None;
ArDataTagCaseCmpOp_swigregister = _AriaPy.ArDataTagCaseCmpOp_swigregister
ArDataTagCaseCmpOp_swigregister(ArDataTagCaseCmpOp)

class ArMapSimple(ArMapInterface):
    """Proxy of C++ ArMapSimple class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, char baseDirectory = "./", char tempDirectory = None, 
            char overrideMutexName = None) -> ArMapSimple
        __init__(self, char baseDirectory = "./", char tempDirectory = None) -> ArMapSimple
        __init__(self, char baseDirectory = "./") -> ArMapSimple
        __init__(self) -> ArMapSimple
        __init__(self, ArMapSimple other) -> ArMapSimple
        """
        this = _AriaPy.new_ArMapSimple(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArMapSimple
    __del__ = lambda self : None;
    def clear(self):
        """clear(self)"""
        return _AriaPy.ArMapSimple_clear(self)

    def set(self, *args):
        """set(self, ArMapInterface other) -> bool"""
        return _AriaPy.ArMapSimple_set(self, *args)

    def clone(self):
        """clone(self) -> ArMapInterface"""
        return _AriaPy.ArMapSimple_clone(self)

    def getScanTypes(self):
        """getScanTypes(self) -> std::list<(std::string,std::allocator<(std::string)>)>"""
        return _AriaPy.ArMapSimple_getScanTypes(self)

    def setScanTypes(self, *args):
        """setScanTypes(self, std::list<(std::string,std::allocator<(std::string)>)> scanTypeList) -> bool"""
        return _AriaPy.ArMapSimple_setScanTypes(self, *args)

    def lock(self):
        """lock(self) -> int"""
        return _AriaPy.ArMapSimple_lock(self)

    def tryLock(self):
        """tryLock(self) -> int"""
        return _AriaPy.ArMapSimple_tryLock(self)

    def unlock(self):
        """unlock(self) -> int"""
        return _AriaPy.ArMapSimple_unlock(self)

    def getInfo(self, *args):
        """
        getInfo(self, char infoName) -> ArArgumentBuilderPtrList
        getInfo(self, int infoType) -> ArArgumentBuilderPtrList
        """
        return _AriaPy.ArMapSimple_getInfo(self, *args)

    def getMapInfo(self):
        """getMapInfo(self) -> ArArgumentBuilderPtrList"""
        return _AriaPy.ArMapSimple_getMapInfo(self)

    def getInfoCount(self):
        """getInfoCount(self) -> int"""
        return _AriaPy.ArMapSimple_getInfoCount(self)

    def getInfoNames(self):
        """getInfoNames(self) -> std::list<(std::string,std::allocator<(std::string)>)>"""
        return _AriaPy.ArMapSimple_getInfoNames(self)

    def setInfo(self, *args):
        """
        setInfo(self, char infoName, ArArgumentBuilderPtrList infoList, ArMapChangeDetails changeDetails = None) -> bool
        setInfo(self, char infoName, ArArgumentBuilderPtrList infoList) -> bool
        setInfo(self, int infoType, ArArgumentBuilderPtrList infoList, ArMapChangeDetails changeDetails = None) -> bool
        setInfo(self, int infoType, ArArgumentBuilderPtrList infoList) -> bool
        """
        return _AriaPy.ArMapSimple_setInfo(self, *args)

    def setMapInfo(self, *args):
        """
        setMapInfo(self, ArArgumentBuilderPtrList mapInfo, ArMapChangeDetails changeDetails = None) -> bool
        setMapInfo(self, ArArgumentBuilderPtrList mapInfo) -> bool
        """
        return _AriaPy.ArMapSimple_setMapInfo(self, *args)

    def writeInfoToFunctor(self, *args):
        """writeInfoToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)"""
        return _AriaPy.ArMapSimple_writeInfoToFunctor(self, *args)

    def getInfoName(self, *args):
        """getInfoName(self, int infoType) -> char"""
        return _AriaPy.ArMapSimple_getInfoName(self, *args)

    def findFirstMapObject(self, *args):
        """
        findFirstMapObject(self, char name, char type, bool isIncludeWithHeading = False) -> ArMapObject
        findFirstMapObject(self, char name, char type) -> ArMapObject
        """
        return _AriaPy.ArMapSimple_findFirstMapObject(self, *args)

    def findMapObject(self, *args):
        """
        findMapObject(self, char name, char type = None, bool isIncludeWithHeading = False) -> ArMapObject
        findMapObject(self, char name, char type = None) -> ArMapObject
        findMapObject(self, char name) -> ArMapObject
        """
        return _AriaPy.ArMapSimple_findMapObject(self, *args)

    def findMapObjectsOfType(self, *args):
        """
        findMapObjectsOfType(self, char type, bool isIncludeWithHeading = False) -> ArMapObjectPtrList
        findMapObjectsOfType(self, char type) -> ArMapObjectPtrList
        """
        return _AriaPy.ArMapSimple_findMapObjectsOfType(self, *args)

    def getMapObjects(self):
        """getMapObjects(self) -> ArMapObjectPtrList"""
        return _AriaPy.ArMapSimple_getMapObjects(self)

    def setMapObjects(self, *args):
        """
        setMapObjects(self, ArMapObjectPtrList mapObjects, bool isSortedObjects = False, 
            ArMapChangeDetails changeDetails = None)
        setMapObjects(self, ArMapObjectPtrList mapObjects, bool isSortedObjects = False)
        setMapObjects(self, ArMapObjectPtrList mapObjects)
        """
        return _AriaPy.ArMapSimple_setMapObjects(self, *args)

    def writeObjectListToFunctor(self, *args):
        """writeObjectListToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)"""
        return _AriaPy.ArMapSimple_writeObjectListToFunctor(self, *args)

    def hasOriginLatLongAlt(self):
        """hasOriginLatLongAlt(self) -> bool"""
        return _AriaPy.ArMapSimple_hasOriginLatLongAlt(self)

    def getOriginLatLong(self):
        """getOriginLatLong(self) -> ArPose"""
        return _AriaPy.ArMapSimple_getOriginLatLong(self)

    def getOriginAltitude(self):
        """getOriginAltitude(self) -> double"""
        return _AriaPy.ArMapSimple_getOriginAltitude(self)

    def setOriginLatLongAlt(self, *args):
        """
        setOriginLatLongAlt(self, bool hasOriginLatLong, ArPose originLatLong, double altitude, 
            ArMapChangeDetails changeDetails = None)
        setOriginLatLongAlt(self, bool hasOriginLatLong, ArPose originLatLong, double altitude)
        """
        return _AriaPy.ArMapSimple_setOriginLatLongAlt(self, *args)

    def writeSupplementToFunctor(self, *args):
        """writeSupplementToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)"""
        return _AriaPy.ArMapSimple_writeSupplementToFunctor(self, *args)

    def getDisplayString(self, scanType = ""):
        """
        getDisplayString(self, char scanType = "") -> char
        getDisplayString(self) -> char
        """
        return _AriaPy.ArMapSimple_getDisplayString(self, scanType)

    def getPoints(self, scanType = ""):
        """
        getPoints(self, char scanType = "") -> std::vector<(ArPose,std::allocator<(ArPose)>)>
        getPoints(self) -> std::vector<(ArPose,std::allocator<(ArPose)>)>
        """
        return _AriaPy.ArMapSimple_getPoints(self, scanType)

    def getMinPose(self, scanType = ""):
        """
        getMinPose(self, char scanType = "") -> ArPose
        getMinPose(self) -> ArPose
        """
        return _AriaPy.ArMapSimple_getMinPose(self, scanType)

    def getMaxPose(self, scanType = ""):
        """
        getMaxPose(self, char scanType = "") -> ArPose
        getMaxPose(self) -> ArPose
        """
        return _AriaPy.ArMapSimple_getMaxPose(self, scanType)

    def getNumPoints(self, scanType = ""):
        """
        getNumPoints(self, char scanType = "") -> int
        getNumPoints(self) -> int
        """
        return _AriaPy.ArMapSimple_getNumPoints(self, scanType)

    def isSortedPoints(self, scanType = ""):
        """
        isSortedPoints(self, char scanType = "") -> bool
        isSortedPoints(self) -> bool
        """
        return _AriaPy.ArMapSimple_isSortedPoints(self, scanType)

    def setPoints(self, *args):
        """
        setPoints(self, std::vector<(ArPose,std::allocator<(ArPose)>)> points, 
            char scanType = "", bool isSortedPoints = False, 
            ArMapChangeDetails changeDetails = None)
        setPoints(self, std::vector<(ArPose,std::allocator<(ArPose)>)> points, 
            char scanType = "", bool isSortedPoints = False)
        setPoints(self, std::vector<(ArPose,std::allocator<(ArPose)>)> points, 
            char scanType = "")
        setPoints(self, std::vector<(ArPose,std::allocator<(ArPose)>)> points)
        """
        return _AriaPy.ArMapSimple_setPoints(self, *args)

    def getLines(self, scanType = ""):
        """
        getLines(self, char scanType = "") -> std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)>
        getLines(self) -> std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)>
        """
        return _AriaPy.ArMapSimple_getLines(self, scanType)

    def getLineMinPose(self, scanType = ""):
        """
        getLineMinPose(self, char scanType = "") -> ArPose
        getLineMinPose(self) -> ArPose
        """
        return _AriaPy.ArMapSimple_getLineMinPose(self, scanType)

    def getLineMaxPose(self, scanType = ""):
        """
        getLineMaxPose(self, char scanType = "") -> ArPose
        getLineMaxPose(self) -> ArPose
        """
        return _AriaPy.ArMapSimple_getLineMaxPose(self, scanType)

    def getNumLines(self, scanType = ""):
        """
        getNumLines(self, char scanType = "") -> int
        getNumLines(self) -> int
        """
        return _AriaPy.ArMapSimple_getNumLines(self, scanType)

    def isSortedLines(self, scanType = ""):
        """
        isSortedLines(self, char scanType = "") -> bool
        isSortedLines(self) -> bool
        """
        return _AriaPy.ArMapSimple_isSortedLines(self, scanType)

    def setLines(self, *args):
        """
        setLines(self, std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)> lines, 
            char scanType = "", bool isSortedLines = False, 
            ArMapChangeDetails changeDetails = None)
        setLines(self, std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)> lines, 
            char scanType = "", bool isSortedLines = False)
        setLines(self, std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)> lines, 
            char scanType = "")
        setLines(self, std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)> lines)
        """
        return _AriaPy.ArMapSimple_setLines(self, *args)

    def getResolution(self, scanType = ""):
        """
        getResolution(self, char scanType = "") -> int
        getResolution(self) -> int
        """
        return _AriaPy.ArMapSimple_getResolution(self, scanType)

    def setResolution(self, *args):
        """
        setResolution(self, int resolution, char scanType = "", ArMapChangeDetails changeDetails = None)
        setResolution(self, int resolution, char scanType = "")
        setResolution(self, int resolution)
        """
        return _AriaPy.ArMapSimple_setResolution(self, *args)

    def writeScanToFunctor(self, *args):
        """
        writeScanToFunctor(self, ArFunctor1_CString functor, char endOfLineChars, char scanType = "")
        writeScanToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)
        """
        return _AriaPy.ArMapSimple_writeScanToFunctor(self, *args)

    def writePointsToFunctor(self, *args):
        """
        writePointsToFunctor(self, ArFunctor2<(int,p.std::vector<(ArPose,std::allocator<(ArPose)>)>)> functor, 
            char scanType = "", 
            ArFunctor1_CString keywordFunctor = None)
        writePointsToFunctor(self, ArFunctor2<(int,p.std::vector<(ArPose,std::allocator<(ArPose)>)>)> functor, 
            char scanType = "")
        writePointsToFunctor(self, ArFunctor2<(int,p.std::vector<(ArPose,std::allocator<(ArPose)>)>)> functor)
        """
        return _AriaPy.ArMapSimple_writePointsToFunctor(self, *args)

    def writeLinesToFunctor(self, *args):
        """
        writeLinesToFunctor(self, ArFunctor2<(int,p.std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)>)> functor, 
            char scanType = "", 
            ArFunctor1_CString keywordFunctor = None)
        writeLinesToFunctor(self, ArFunctor2<(int,p.std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)>)> functor, 
            char scanType = "")
        writeLinesToFunctor(self, ArFunctor2<(int,p.std::vector<(ArLineSegment,std::allocator<(ArLineSegment)>)>)> functor)
        """
        return _AriaPy.ArMapSimple_writeLinesToFunctor(self, *args)

    def addToFileParser(self, *args):
        """addToFileParser(self, ArFileParser fileParser) -> bool"""
        return _AriaPy.ArMapSimple_addToFileParser(self, *args)

    def remFromFileParser(self, *args):
        """remFromFileParser(self, ArFileParser fileParser) -> bool"""
        return _AriaPy.ArMapSimple_remFromFileParser(self, *args)

    def readDataPoint(self, *args):
        """readDataPoint(self, char line) -> bool"""
        return _AriaPy.ArMapSimple_readDataPoint(self, *args)

    def readLineSegment(self, *args):
        """readLineSegment(self, char line) -> bool"""
        return _AriaPy.ArMapSimple_readLineSegment(self, *args)

    def loadDataPoint(self, *args):
        """loadDataPoint(self, double x, double y)"""
        return _AriaPy.ArMapSimple_loadDataPoint(self, *args)

    def loadLineSegment(self, *args):
        """loadLineSegment(self, double x1, double y1, double x2, double y2)"""
        return _AriaPy.ArMapSimple_loadLineSegment(self, *args)

    def mapChanged(self):
        """mapChanged(self)"""
        return _AriaPy.ArMapSimple_mapChanged(self)

    def addMapChangedCB(self, *args):
        """
        addMapChangedCB(self, ArFunctor functor, int position = 50)
        addMapChangedCB(self, ArFunctor functor)
        """
        return _AriaPy.ArMapSimple_addMapChangedCB(self, *args)

    def remMapChangedCB(self, *args):
        """remMapChangedCB(self, ArFunctor functor)"""
        return _AriaPy.ArMapSimple_remMapChangedCB(self, *args)

    def addPreMapChangedCB(self, *args):
        """
        addPreMapChangedCB(self, ArFunctor functor, int position = 50)
        addPreMapChangedCB(self, ArFunctor functor)
        """
        return _AriaPy.ArMapSimple_addPreMapChangedCB(self, *args)

    def remPreMapChangedCB(self, *args):
        """remPreMapChangedCB(self, ArFunctor functor)"""
        return _AriaPy.ArMapSimple_remPreMapChangedCB(self, *args)

    def setMapChangedLogLevel(self, *args):
        """setMapChangedLogLevel(self, LogLevel level)"""
        return _AriaPy.ArMapSimple_setMapChangedLogLevel(self, *args)

    def getMapChangedLogLevel(self):
        """getMapChangedLogLevel(self) -> LogLevel"""
        return _AriaPy.ArMapSimple_getMapChangedLogLevel(self)

    def writeToFunctor(self, *args):
        """writeToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)"""
        return _AriaPy.ArMapSimple_writeToFunctor(self, *args)

    def writeObjectsToFunctor(self, *args):
        """
        writeObjectsToFunctor(self, ArFunctor1_CString functor, char endOfLineChars, bool isOverrideAsSingleScan = False, 
            char maxCategory = None)
        writeObjectsToFunctor(self, ArFunctor1_CString functor, char endOfLineChars, bool isOverrideAsSingleScan = False)
        writeObjectsToFunctor(self, ArFunctor1_CString functor, char endOfLineChars)
        """
        return _AriaPy.ArMapSimple_writeObjectsToFunctor(self, *args)

    def addPreWriteFileCB(self, *args):
        """
        addPreWriteFileCB(self, ArFunctor functor, Pos position = LAST)
        addPreWriteFileCB(self, ArFunctor functor)
        """
        return _AriaPy.ArMapSimple_addPreWriteFileCB(self, *args)

    def remPreWriteFileCB(self, *args):
        """remPreWriteFileCB(self, ArFunctor functor)"""
        return _AriaPy.ArMapSimple_remPreWriteFileCB(self, *args)

    def addPostWriteFileCB(self, *args):
        """
        addPostWriteFileCB(self, ArFunctor functor, Pos position = LAST)
        addPostWriteFileCB(self, ArFunctor functor)
        """
        return _AriaPy.ArMapSimple_addPostWriteFileCB(self, *args)

    def remPostWriteFileCB(self, *args):
        """remPostWriteFileCB(self, ArFunctor functor)"""
        return _AriaPy.ArMapSimple_remPostWriteFileCB(self, *args)

    def readFile(self, *args):
        """
        readFile(self, char fileName, char errorBuffer = None, size_t errorBufferLen = 0, 
            unsigned char md5DigestBuffer = None, 
            size_t md5DigestBufferLen = 0) -> bool
        readFile(self, char fileName, char errorBuffer = None, size_t errorBufferLen = 0, 
            unsigned char md5DigestBuffer = None) -> bool
        readFile(self, char fileName, char errorBuffer = None, size_t errorBufferLen = 0) -> bool
        readFile(self, char fileName, char errorBuffer = None) -> bool
        readFile(self, char fileName) -> bool
        """
        return _AriaPy.ArMapSimple_readFile(self, *args)

    def writeFile(self, *args):
        """
        writeFile(self, char fileName, bool internalCall = False, unsigned char md5DigestBuffer = None, 
            size_t md5DigestBufferLen = 0, 
            time_t fileTimestamp = -1) -> bool
        writeFile(self, char fileName, bool internalCall = False, unsigned char md5DigestBuffer = None, 
            size_t md5DigestBufferLen = 0) -> bool
        writeFile(self, char fileName, bool internalCall = False, unsigned char md5DigestBuffer = None) -> bool
        writeFile(self, char fileName, bool internalCall = False) -> bool
        writeFile(self, char fileName) -> bool
        """
        return _AriaPy.ArMapSimple_writeFile(self, *args)

    def getMapId(self, *args):
        """
        getMapId(self, ArMapId mapIdOut, bool isInternalCall = False) -> bool
        getMapId(self, ArMapId mapIdOut) -> bool
        """
        return _AriaPy.ArMapSimple_getMapId(self, *args)

    def calculateChecksum(self, *args):
        """calculateChecksum(self, unsigned char md5DigestBuffer, size_t md5DigestBufferLen) -> bool"""
        return _AriaPy.ArMapSimple_calculateChecksum(self, *args)

    def getBaseDirectory(self):
        """getBaseDirectory(self) -> char"""
        return _AriaPy.ArMapSimple_getBaseDirectory(self)

    def setBaseDirectory(self, *args):
        """setBaseDirectory(self, char baseDirectory)"""
        return _AriaPy.ArMapSimple_setBaseDirectory(self, *args)

    def getTempDirectory(self):
        """getTempDirectory(self) -> char"""
        return _AriaPy.ArMapSimple_getTempDirectory(self)

    def setTempDirectory(self, *args):
        """setTempDirectory(self, char tempDirectory)"""
        return _AriaPy.ArMapSimple_setTempDirectory(self, *args)

    def createRealFileName(self, *args):
        """createRealFileName(self, char fileName) -> string"""
        return _AriaPy.ArMapSimple_createRealFileName(self, *args)

    def getFileName(self):
        """getFileName(self) -> char"""
        return _AriaPy.ArMapSimple_getFileName(self)

    def setSourceFileName(self, *args):
        """
        setSourceFileName(self, char sourceName, char fileName, bool isInternalCall = False)
        setSourceFileName(self, char sourceName, char fileName)
        """
        return _AriaPy.ArMapSimple_setSourceFileName(self, *args)

    def refresh(self):
        """refresh(self) -> bool"""
        return _AriaPy.ArMapSimple_refresh(self)

    def setIgnoreEmptyFileName(self, *args):
        """setIgnoreEmptyFileName(self, bool ignore)"""
        return _AriaPy.ArMapSimple_setIgnoreEmptyFileName(self, *args)

    def getIgnoreEmptyFileName(self):
        """getIgnoreEmptyFileName(self) -> bool"""
        return _AriaPy.ArMapSimple_getIgnoreEmptyFileName(self)

    def setIgnoreCase(self, ignoreCase = False):
        """
        setIgnoreCase(self, bool ignoreCase = False)
        setIgnoreCase(self)
        """
        return _AriaPy.ArMapSimple_setIgnoreCase(self, ignoreCase)

    def getIgnoreCase(self):
        """getIgnoreCase(self) -> bool"""
        return _AriaPy.ArMapSimple_getIgnoreCase(self)

    def getInactiveInfo(self):
        """getInactiveInfo(self) -> ArMapInfoInterface"""
        return _AriaPy.ArMapSimple_getInactiveInfo(self)

    def getInactiveObjects(self):
        """getInactiveObjects(self) -> ArMapObjectsInterface"""
        return _AriaPy.ArMapSimple_getInactiveObjects(self)

    def getChildObjects(self):
        """getChildObjects(self) -> ArMapObjectsInterface"""
        return _AriaPy.ArMapSimple_getChildObjects(self)

    def findMapObjectParams(self, *args):
        """findMapObjectParams(self, char mapObjectName) -> ArArgumentBuilder"""
        return _AriaPy.ArMapSimple_findMapObjectParams(self, *args)

    def setMapObjectParams(self, *args):
        """
        setMapObjectParams(self, char mapObjectName, ArArgumentBuilder params, ArMapChangeDetails changeDetails = None) -> bool
        setMapObjectParams(self, char mapObjectName, ArArgumentBuilder params) -> bool
        """
        return _AriaPy.ArMapSimple_setMapObjectParams(self, *args)

    def getRemainder(self):
        """getRemainder(self) -> ArArgumentBuilderPtrList"""
        return _AriaPy.ArMapSimple_getRemainder(self)

    def setQuiet(self, *args):
        """setQuiet(self, bool isQuiet)"""
        return _AriaPy.ArMapSimple_setQuiet(self, *args)

    def parseLine(self, *args):
        """parseLine(self, char line) -> bool"""
        return _AriaPy.ArMapSimple_parseLine(self, *args)

    def parsingComplete(self):
        """parsingComplete(self)"""
        return _AriaPy.ArMapSimple_parsingComplete(self)

    def isLoadingDataStarted(self):
        """isLoadingDataStarted(self) -> bool"""
        return _AriaPy.ArMapSimple_isLoadingDataStarted(self)

    def isLoadingLinesAndDataStarted(self):
        """isLoadingLinesAndDataStarted(self) -> bool"""
        return _AriaPy.ArMapSimple_isLoadingLinesAndDataStarted(self)

    def findMapObjectParamInfo(*args):
        """findMapObjectParamInfo(char mapObjectName, ArArgumentBuilderPtrList cairnInfoList) -> std::list<(p.ArArgumentBuilder,std::allocator<(p.ArArgumentBuilder)>)>::iterator"""
        return _AriaPy.ArMapSimple_findMapObjectParamInfo(*args)

    findMapObjectParamInfo = staticmethod(findMapObjectParamInfo)
ArMapSimple_swigregister = _AriaPy.ArMapSimple_swigregister
ArMapSimple_swigregister(ArMapSimple)

def ArMapSimple_findMapObjectParamInfo(*args):
  """ArMapSimple_findMapObjectParamInfo(char mapObjectName, ArArgumentBuilderPtrList cairnInfoList) -> std::list<(p.ArArgumentBuilder,std::allocator<(p.ArArgumentBuilder)>)>::iterator"""
  return _AriaPy.ArMapSimple_findMapObjectParamInfo(*args)

class ArMapObject(object):
    """Proxy of C++ ArMapObject class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def createMapObject(*args):
        """createMapObject(ArArgumentBuilder arg) -> ArMapObject"""
        return _AriaPy.ArMapObject_createMapObject(*args)

    createMapObject = staticmethod(createMapObject)
    TYPE_ARG_INDEX = _AriaPy.ArMapObject_TYPE_ARG_INDEX
    POSE_X_ARG_INDEX = _AriaPy.ArMapObject_POSE_X_ARG_INDEX
    POSE_Y_ARG_INDEX = _AriaPy.ArMapObject_POSE_Y_ARG_INDEX
    TH_ARG_INDEX = _AriaPy.ArMapObject_TH_ARG_INDEX
    DESC_ARG_INDEX = _AriaPy.ArMapObject_DESC_ARG_INDEX
    ICON_ARG_INDEX = _AriaPy.ArMapObject_ICON_ARG_INDEX
    NAME_ARG_INDEX = _AriaPy.ArMapObject_NAME_ARG_INDEX
    LAST_POSE_ARG_INDEX = _AriaPy.ArMapObject_LAST_POSE_ARG_INDEX
    FROM_X_ARG_INDEX = _AriaPy.ArMapObject_FROM_X_ARG_INDEX
    FROM_Y_ARG_INDEX = _AriaPy.ArMapObject_FROM_Y_ARG_INDEX
    TO_X_ARG_INDEX = _AriaPy.ArMapObject_TO_X_ARG_INDEX
    TO_Y_ARG_INDEX = _AriaPy.ArMapObject_TO_Y_ARG_INDEX
    LAST_ARG_INDEX = _AriaPy.ArMapObject_LAST_ARG_INDEX
    ARG_INDEX_COUNT = _AriaPy.ArMapObject_ARG_INDEX_COUNT
    def __init__(self, *args): 
        """
        __init__(self, char type, ArPose pose, char description, char iconName, 
            char name, bool hasFromTo, ArPose fromPose, 
            ArPose toPose) -> ArMapObject
        __init__(self, ArMapObject mapObject) -> ArMapObject
        """
        this = _AriaPy.new_ArMapObject(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArMapObject
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> char"""
        return _AriaPy.ArMapObject_getType(self)

    def getBaseType(self):
        """getBaseType(self) -> char"""
        return _AriaPy.ArMapObject_getBaseType(self)

    def getName(self):
        """getName(self) -> char"""
        return _AriaPy.ArMapObject_getName(self)

    def getDescription(self):
        """getDescription(self) -> char"""
        return _AriaPy.ArMapObject_getDescription(self)

    def getIconName(self):
        """getIconName(self) -> char"""
        return _AriaPy.ArMapObject_getIconName(self)

    def getId(self):
        """getId(self) -> int"""
        return _AriaPy.ArMapObject_getId(self)

    def setDescription(self, *args):
        """setDescription(self, char description)"""
        return _AriaPy.ArMapObject_setDescription(self, *args)

    def getPose(self):
        """getPose(self) -> ArPose"""
        return _AriaPy.ArMapObject_getPose(self)

    def hasFromTo(self):
        """hasFromTo(self) -> bool"""
        return _AriaPy.ArMapObject_hasFromTo(self)

    def getFromPose(self):
        """getFromPose(self) -> ArPose"""
        return _AriaPy.ArMapObject_getFromPose(self)

    def getToPose(self):
        """getToPose(self) -> ArPose"""
        return _AriaPy.ArMapObject_getToPose(self)

    def getFromToRotation(self):
        """getFromToRotation(self) -> double"""
        return _AriaPy.ArMapObject_getFromToRotation(self)

    def getFromToSegments(self):
        """getFromToSegments(self) -> ArLineSegmentList"""
        return _AriaPy.ArMapObject_getFromToSegments(self)

    def getFromToSegment(self):
        """getFromToSegment(self) -> ArLineSegment"""
        return _AriaPy.ArMapObject_getFromToSegment(self)

    def findCenter(self):
        """findCenter(self) -> ArPose"""
        return _AriaPy.ArMapObject_findCenter(self)

    def toString(self):
        """toString(self) -> char"""
        return _AriaPy.ArMapObject_toString(self)

    def getStringRepresentation(self):
        """getStringRepresentation(self) -> char"""
        return _AriaPy.ArMapObject_getStringRepresentation(self)

    def log(self, intro = None):
        """
        log(self, char intro = None)
        log(self)
        """
        return _AriaPy.ArMapObject_log(self, intro)

    def __lt__(self, *args):
        """__lt__(self, ArMapObject other) -> bool"""
        return _AriaPy.ArMapObject___lt__(self, *args)

    def getFileName(self):
        """getFileName(self) -> char"""
        return _AriaPy.ArMapObject_getFileName(self)

ArMapObject_swigregister = _AriaPy.ArMapObject_swigregister
ArMapObject_swigregister(ArMapObject)

def ArMapObject_createMapObject(*args):
  """ArMapObject_createMapObject(ArArgumentBuilder arg) -> ArMapObject"""
  return _AriaPy.ArMapObject_createMapObject(*args)

class ArMapId(object):
    """Proxy of C++ ArMapId class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def create(*args):
        """create(char fileName, ArMapId mapIdOut) -> bool"""
        return _AriaPy.ArMapId_create(*args)

    create = staticmethod(create)
    def toPacket(*args):
        """toPacket(ArMapId mapId, ArBasePacket packetOut) -> bool"""
        return _AriaPy.ArMapId_toPacket(*args)

    toPacket = staticmethod(toPacket)
    def fromPacket(*args):
        """fromPacket(ArBasePacket packetIn, ArMapId mapIdOut) -> bool"""
        return _AriaPy.ArMapId_fromPacket(*args)

    fromPacket = staticmethod(fromPacket)
    def __init__(self, *args): 
        """
        __init__(self) -> ArMapId
        __init__(self, char sourceName, char fileName, unsigned char checksum, 
            size_t checksumLength, long size, time_t timestamp) -> ArMapId
        __init__(self, ArMapId other) -> ArMapId
        """
        this = _AriaPy.new_ArMapId(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArMapId
    __del__ = lambda self : None;
    def isNull(self):
        """isNull(self) -> bool"""
        return _AriaPy.ArMapId_isNull(self)

    def getSourceName(self):
        """getSourceName(self) -> char"""
        return _AriaPy.ArMapId_getSourceName(self)

    def getFileName(self):
        """getFileName(self) -> char"""
        return _AriaPy.ArMapId_getFileName(self)

    def getChecksum(self):
        """getChecksum(self) -> unsigned char"""
        return _AriaPy.ArMapId_getChecksum(self)

    def getChecksumLength(self):
        """getChecksumLength(self) -> size_t"""
        return _AriaPy.ArMapId_getChecksumLength(self)

    def getDisplayChecksum(self):
        """getDisplayChecksum(self) -> char"""
        return _AriaPy.ArMapId_getDisplayChecksum(self)

    def getSize(self):
        """getSize(self) -> long"""
        return _AriaPy.ArMapId_getSize(self)

    def getTimestamp(self):
        """getTimestamp(self) -> time_t"""
        return _AriaPy.ArMapId_getTimestamp(self)

    def clear(self):
        """clear(self)"""
        return _AriaPy.ArMapId_clear(self)

    def setSourceName(self, *args):
        """setSourceName(self, char sourceName)"""
        return _AriaPy.ArMapId_setSourceName(self, *args)

    def setFileName(self, *args):
        """setFileName(self, char fileName)"""
        return _AriaPy.ArMapId_setFileName(self, *args)

    def setChecksum(self, *args):
        """setChecksum(self, unsigned char checksum, size_t checksumLen)"""
        return _AriaPy.ArMapId_setChecksum(self, *args)

    def setSize(self, *args):
        """setSize(self, long size)"""
        return _AriaPy.ArMapId_setSize(self, *args)

    def setTimestamp(self, *args):
        """setTimestamp(self, time_t timestamp)"""
        return _AriaPy.ArMapId_setTimestamp(self, *args)

    def isSameFile(self, *args):
        """isSameFile(self, ArMapId other) -> bool"""
        return _AriaPy.ArMapId_isSameFile(self, *args)

    def isVersionOfSameFile(self, *args):
        """isVersionOfSameFile(self, ArMapId other) -> bool"""
        return _AriaPy.ArMapId_isVersionOfSameFile(self, *args)

    def isValidTimestamp(self):
        """isValidTimestamp(self) -> bool"""
        return _AriaPy.ArMapId_isValidTimestamp(self)

    def log(self, *args):
        """log(self, char prefix)"""
        return _AriaPy.ArMapId_log(self, *args)

ArMapId_swigregister = _AriaPy.ArMapId_swigregister
ArMapId_swigregister(ArMapId)

def ArMapId_create(*args):
  """ArMapId_create(char fileName, ArMapId mapIdOut) -> bool"""
  return _AriaPy.ArMapId_create(*args)

def ArMapId_toPacket(*args):
  """ArMapId_toPacket(ArMapId mapId, ArBasePacket packetOut) -> bool"""
  return _AriaPy.ArMapId_toPacket(*args)

def ArMapId_fromPacket(*args):
  """ArMapId_fromPacket(ArBasePacket packetIn, ArMapId mapIdOut) -> bool"""
  return _AriaPy.ArMapId_fromPacket(*args)

class ArMode(object):
    """Proxy of C++ ArMode class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArMode
    __del__ = lambda self : None;
    def getName(self):
        """getName(self) -> char"""
        return _AriaPy.ArMode_getName(self)

    def activate(self):
        """activate(self)"""
        return _AriaPy.ArMode_activate(self)

    def deactivate(self):
        """deactivate(self)"""
        return _AriaPy.ArMode_deactivate(self)

    def userTask(self):
        """userTask(self)"""
        return _AriaPy.ArMode_userTask(self)

    def help(self):
        """help(self)"""
        return _AriaPy.ArMode_help(self)

    def baseActivate(self):
        """baseActivate(self) -> bool"""
        return _AriaPy.ArMode_baseActivate(self)

    def baseDeactivate(self):
        """baseDeactivate(self) -> bool"""
        return _AriaPy.ArMode_baseDeactivate(self)

    def baseHelp():
        """baseHelp()"""
        return _AriaPy.ArMode_baseHelp()

    baseHelp = staticmethod(baseHelp)
    def getKey(self):
        """getKey(self) -> char"""
        return _AriaPy.ArMode_getKey(self)

    def getKey2(self):
        """getKey2(self) -> char"""
        return _AriaPy.ArMode_getKey2(self)

ArMode_swigregister = _AriaPy.ArMode_swigregister
ArMode_swigregister(ArMode)

def ArMode_baseHelp():
  """ArMode_baseHelp()"""
  return _AriaPy.ArMode_baseHelp()

class ArModeTeleop(ArMode):
    """Proxy of C++ ArModeTeleop class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot, char name, char key, char key2) -> ArModeTeleop"""
        this = _AriaPy.new_ArModeTeleop(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArModeTeleop
    __del__ = lambda self : None;
    def activate(self):
        """activate(self)"""
        return _AriaPy.ArModeTeleop_activate(self)

    def deactivate(self):
        """deactivate(self)"""
        return _AriaPy.ArModeTeleop_deactivate(self)

    def help(self):
        """help(self)"""
        return _AriaPy.ArModeTeleop_help(self)

    def userTask(self):
        """userTask(self)"""
        return _AriaPy.ArModeTeleop_userTask(self)

ArModeTeleop_swigregister = _AriaPy.ArModeTeleop_swigregister
ArModeTeleop_swigregister(ArModeTeleop)

class ArModeUnguardedTeleop(ArMode):
    """Proxy of C++ ArModeUnguardedTeleop class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot, char name, char key, char key2) -> ArModeUnguardedTeleop"""
        this = _AriaPy.new_ArModeUnguardedTeleop(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArModeUnguardedTeleop
    __del__ = lambda self : None;
    def activate(self):
        """activate(self)"""
        return _AriaPy.ArModeUnguardedTeleop_activate(self)

    def deactivate(self):
        """deactivate(self)"""
        return _AriaPy.ArModeUnguardedTeleop_deactivate(self)

    def help(self):
        """help(self)"""
        return _AriaPy.ArModeUnguardedTeleop_help(self)

    def userTask(self):
        """userTask(self)"""
        return _AriaPy.ArModeUnguardedTeleop_userTask(self)

ArModeUnguardedTeleop_swigregister = _AriaPy.ArModeUnguardedTeleop_swigregister
ArModeUnguardedTeleop_swigregister(ArModeUnguardedTeleop)

class ArModeWander(ArMode):
    """Proxy of C++ ArModeWander class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot, char name, char key, char key2) -> ArModeWander"""
        this = _AriaPy.new_ArModeWander(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArModeWander
    __del__ = lambda self : None;
    def activate(self):
        """activate(self)"""
        return _AriaPy.ArModeWander_activate(self)

    def deactivate(self):
        """deactivate(self)"""
        return _AriaPy.ArModeWander_deactivate(self)

    def help(self):
        """help(self)"""
        return _AriaPy.ArModeWander_help(self)

    def userTask(self):
        """userTask(self)"""
        return _AriaPy.ArModeWander_userTask(self)

ArModeWander_swigregister = _AriaPy.ArModeWander_swigregister
ArModeWander_swigregister(ArModeWander)

class ArModeGripper(ArMode):
    """Proxy of C++ ArModeGripper class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot, char name, char key, char key2) -> ArModeGripper"""
        this = _AriaPy.new_ArModeGripper(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArModeGripper
    __del__ = lambda self : None;
    def activate(self):
        """activate(self)"""
        return _AriaPy.ArModeGripper_activate(self)

    def deactivate(self):
        """deactivate(self)"""
        return _AriaPy.ArModeGripper_deactivate(self)

    def userTask(self):
        """userTask(self)"""
        return _AriaPy.ArModeGripper_userTask(self)

    def help(self):
        """help(self)"""
        return _AriaPy.ArModeGripper_help(self)

    def open(self):
        """open(self)"""
        return _AriaPy.ArModeGripper_open(self)

    def close(self):
        """close(self)"""
        return _AriaPy.ArModeGripper_close(self)

    def up(self):
        """up(self)"""
        return _AriaPy.ArModeGripper_up(self)

    def down(self):
        """down(self)"""
        return _AriaPy.ArModeGripper_down(self)

    def stop(self):
        """stop(self)"""
        return _AriaPy.ArModeGripper_stop(self)

    def exercise(self):
        """exercise(self)"""
        return _AriaPy.ArModeGripper_exercise(self)

ArModeGripper_swigregister = _AriaPy.ArModeGripper_swigregister
ArModeGripper_swigregister(ArModeGripper)

class ArModeCamera(ArMode):
    """Proxy of C++ ArModeCamera class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot, char name, char key, char key2) -> ArModeCamera"""
        this = _AriaPy.new_ArModeCamera(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArModeCamera
    __del__ = lambda self : None;
    def activate(self):
        """activate(self)"""
        return _AriaPy.ArModeCamera_activate(self)

    def deactivate(self):
        """deactivate(self)"""
        return _AriaPy.ArModeCamera_deactivate(self)

    def userTask(self):
        """userTask(self)"""
        return _AriaPy.ArModeCamera_userTask(self)

    def help(self):
        """help(self)"""
        return _AriaPy.ArModeCamera_help(self)

    def up(self):
        """up(self)"""
        return _AriaPy.ArModeCamera_up(self)

    def down(self):
        """down(self)"""
        return _AriaPy.ArModeCamera_down(self)

    def left(self):
        """left(self)"""
        return _AriaPy.ArModeCamera_left(self)

    def right(self):
        """right(self)"""
        return _AriaPy.ArModeCamera_right(self)

    def center(self):
        """center(self)"""
        return _AriaPy.ArModeCamera_center(self)

    def zoomIn(self):
        """zoomIn(self)"""
        return _AriaPy.ArModeCamera_zoomIn(self)

    def zoomOut(self):
        """zoomOut(self)"""
        return _AriaPy.ArModeCamera_zoomOut(self)

    def exercise(self):
        """exercise(self)"""
        return _AriaPy.ArModeCamera_exercise(self)

    def toggleAutoFocus(self):
        """toggleAutoFocus(self)"""
        return _AriaPy.ArModeCamera_toggleAutoFocus(self)

    def sony(self):
        """sony(self)"""
        return _AriaPy.ArModeCamera_sony(self)

    def canon(self):
        """canon(self)"""
        return _AriaPy.ArModeCamera_canon(self)

    def dpptu(self):
        """dpptu(self)"""
        return _AriaPy.ArModeCamera_dpptu(self)

    def amptu(self):
        """amptu(self)"""
        return _AriaPy.ArModeCamera_amptu(self)

    def canonInverted(self):
        """canonInverted(self)"""
        return _AriaPy.ArModeCamera_canonInverted(self)

    def sonySerial(self):
        """sonySerial(self)"""
        return _AriaPy.ArModeCamera_sonySerial(self)

    def canonSerial(self):
        """canonSerial(self)"""
        return _AriaPy.ArModeCamera_canonSerial(self)

    def dpptuSerial(self):
        """dpptuSerial(self)"""
        return _AriaPy.ArModeCamera_dpptuSerial(self)

    def amptuSerial(self):
        """amptuSerial(self)"""
        return _AriaPy.ArModeCamera_amptuSerial(self)

    def canonInvertedSerial(self):
        """canonInvertedSerial(self)"""
        return _AriaPy.ArModeCamera_canonInvertedSerial(self)

    def rvisionSerial(self):
        """rvisionSerial(self)"""
        return _AriaPy.ArModeCamera_rvisionSerial(self)

    def com1(self):
        """com1(self)"""
        return _AriaPy.ArModeCamera_com1(self)

    def com2(self):
        """com2(self)"""
        return _AriaPy.ArModeCamera_com2(self)

    def com3(self):
        """com3(self)"""
        return _AriaPy.ArModeCamera_com3(self)

    def com4(self):
        """com4(self)"""
        return _AriaPy.ArModeCamera_com4(self)

    def aux1(self):
        """aux1(self)"""
        return _AriaPy.ArModeCamera_aux1(self)

    def aux2(self):
        """aux2(self)"""
        return _AriaPy.ArModeCamera_aux2(self)

ArModeCamera_swigregister = _AriaPy.ArModeCamera_swigregister
ArModeCamera_swigregister(ArModeCamera)

class ArModeSonar(ArMode):
    """Proxy of C++ ArModeSonar class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot, char name, char key, char key2) -> ArModeSonar"""
        this = _AriaPy.new_ArModeSonar(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArModeSonar
    __del__ = lambda self : None;
    def activate(self):
        """activate(self)"""
        return _AriaPy.ArModeSonar_activate(self)

    def deactivate(self):
        """deactivate(self)"""
        return _AriaPy.ArModeSonar_deactivate(self)

    def userTask(self):
        """userTask(self)"""
        return _AriaPy.ArModeSonar_userTask(self)

    def help(self):
        """help(self)"""
        return _AriaPy.ArModeSonar_help(self)

    def allSonar(self):
        """allSonar(self)"""
        return _AriaPy.ArModeSonar_allSonar(self)

    def firstSonar(self):
        """firstSonar(self)"""
        return _AriaPy.ArModeSonar_firstSonar(self)

    def secondSonar(self):
        """secondSonar(self)"""
        return _AriaPy.ArModeSonar_secondSonar(self)

    def thirdSonar(self):
        """thirdSonar(self)"""
        return _AriaPy.ArModeSonar_thirdSonar(self)

    def fourthSonar(self):
        """fourthSonar(self)"""
        return _AriaPy.ArModeSonar_fourthSonar(self)

ArModeSonar_swigregister = _AriaPy.ArModeSonar_swigregister
ArModeSonar_swigregister(ArModeSonar)

class ArModeBumps(ArMode):
    """Proxy of C++ ArModeBumps class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot, char name, char key, char key2) -> ArModeBumps"""
        this = _AriaPy.new_ArModeBumps(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArModeBumps
    __del__ = lambda self : None;
    def activate(self):
        """activate(self)"""
        return _AriaPy.ArModeBumps_activate(self)

    def deactivate(self):
        """deactivate(self)"""
        return _AriaPy.ArModeBumps_deactivate(self)

    def userTask(self):
        """userTask(self)"""
        return _AriaPy.ArModeBumps_userTask(self)

    def help(self):
        """help(self)"""
        return _AriaPy.ArModeBumps_help(self)

ArModeBumps_swigregister = _AriaPy.ArModeBumps_swigregister
ArModeBumps_swigregister(ArModeBumps)

class ArModePosition(ArMode):
    """Proxy of C++ ArModePosition class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ArRobot robot, char name, char key, char key2, ArAnalogGyro gyro = None) -> ArModePosition
        __init__(self, ArRobot robot, char name, char key, char key2) -> ArModePosition
        """
        this = _AriaPy.new_ArModePosition(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArModePosition
    __del__ = lambda self : None;
    def activate(self):
        """activate(self)"""
        return _AriaPy.ArModePosition_activate(self)

    def deactivate(self):
        """deactivate(self)"""
        return _AriaPy.ArModePosition_deactivate(self)

    def userTask(self):
        """userTask(self)"""
        return _AriaPy.ArModePosition_userTask(self)

    def help(self):
        """help(self)"""
        return _AriaPy.ArModePosition_help(self)

    def up(self):
        """up(self)"""
        return _AriaPy.ArModePosition_up(self)

    def down(self):
        """down(self)"""
        return _AriaPy.ArModePosition_down(self)

    def left(self):
        """left(self)"""
        return _AriaPy.ArModePosition_left(self)

    def right(self):
        """right(self)"""
        return _AriaPy.ArModePosition_right(self)

    def stop(self):
        """stop(self)"""
        return _AriaPy.ArModePosition_stop(self)

    def reset(self):
        """reset(self)"""
        return _AriaPy.ArModePosition_reset(self)

    def mode(self):
        """mode(self)"""
        return _AriaPy.ArModePosition_mode(self)

    def gyro(self):
        """gyro(self)"""
        return _AriaPy.ArModePosition_gyro(self)

    def incDistance(self):
        """incDistance(self)"""
        return _AriaPy.ArModePosition_incDistance(self)

    def decDistance(self):
        """decDistance(self)"""
        return _AriaPy.ArModePosition_decDistance(self)

ArModePosition_swigregister = _AriaPy.ArModePosition_swigregister
ArModePosition_swigregister(ArModePosition)

class ArModeIO(ArMode):
    """Proxy of C++ ArModeIO class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot, char name, char key, char key2) -> ArModeIO"""
        this = _AriaPy.new_ArModeIO(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArModeIO
    __del__ = lambda self : None;
    def activate(self):
        """activate(self)"""
        return _AriaPy.ArModeIO_activate(self)

    def deactivate(self):
        """deactivate(self)"""
        return _AriaPy.ArModeIO_deactivate(self)

    def userTask(self):
        """userTask(self)"""
        return _AriaPy.ArModeIO_userTask(self)

    def help(self):
        """help(self)"""
        return _AriaPy.ArModeIO_help(self)

ArModeIO_swigregister = _AriaPy.ArModeIO_swigregister
ArModeIO_swigregister(ArModeIO)

class ArModeLaser(ArMode):
    """Proxy of C++ ArModeLaser class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ArRobot robot, char name, char key, char key2, ArSick obsolete = None) -> ArModeLaser
        __init__(self, ArRobot robot, char name, char key, char key2) -> ArModeLaser
        """
        this = _AriaPy.new_ArModeLaser(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArModeLaser
    __del__ = lambda self : None;
    def activate(self):
        """activate(self)"""
        return _AriaPy.ArModeLaser_activate(self)

    def deactivate(self):
        """deactivate(self)"""
        return _AriaPy.ArModeLaser_deactivate(self)

    def userTask(self):
        """userTask(self)"""
        return _AriaPy.ArModeLaser_userTask(self)

    def help(self):
        """help(self)"""
        return _AriaPy.ArModeLaser_help(self)

    def switchToLaser(self, *args):
        """switchToLaser(self, int laserNumber)"""
        return _AriaPy.ArModeLaser_switchToLaser(self, *args)

ArModeLaser_swigregister = _AriaPy.ArModeLaser_swigregister
ArModeLaser_swigregister(ArModeLaser)

class ArModeActs(ArMode):
    """Proxy of C++ ArModeActs class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ArRobot robot, char name, char key, char key2, ArACTS_1_2 acts = None) -> ArModeActs
        __init__(self, ArRobot robot, char name, char key, char key2) -> ArModeActs
        """
        this = _AriaPy.new_ArModeActs(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArModeActs
    __del__ = lambda self : None;
    def activate(self):
        """activate(self)"""
        return _AriaPy.ArModeActs_activate(self)

    def deactivate(self):
        """deactivate(self)"""
        return _AriaPy.ArModeActs_deactivate(self)

    def help(self):
        """help(self)"""
        return _AriaPy.ArModeActs_help(self)

    def userTask(self):
        """userTask(self)"""
        return _AriaPy.ArModeActs_userTask(self)

    def channel1(self):
        """channel1(self)"""
        return _AriaPy.ArModeActs_channel1(self)

    def channel2(self):
        """channel2(self)"""
        return _AriaPy.ArModeActs_channel2(self)

    def channel3(self):
        """channel3(self)"""
        return _AriaPy.ArModeActs_channel3(self)

    def channel4(self):
        """channel4(self)"""
        return _AriaPy.ArModeActs_channel4(self)

    def channel5(self):
        """channel5(self)"""
        return _AriaPy.ArModeActs_channel5(self)

    def channel6(self):
        """channel6(self)"""
        return _AriaPy.ArModeActs_channel6(self)

    def channel7(self):
        """channel7(self)"""
        return _AriaPy.ArModeActs_channel7(self)

    def channel8(self):
        """channel8(self)"""
        return _AriaPy.ArModeActs_channel8(self)

    def stop(self):
        """stop(self)"""
        return _AriaPy.ArModeActs_stop(self)

    def start(self):
        """start(self)"""
        return _AriaPy.ArModeActs_start(self)

    def toggleAcquire(self):
        """toggleAcquire(self)"""
        return _AriaPy.ArModeActs_toggleAcquire(self)

ArModeActs_swigregister = _AriaPy.ArModeActs_swigregister
ArModeActs_swigregister(ArModeActs)

class ArModeCommand(ArMode):
    """Proxy of C++ ArModeCommand class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot, char name, char key, char key2) -> ArModeCommand"""
        this = _AriaPy.new_ArModeCommand(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArModeCommand
    __del__ = lambda self : None;
    def activate(self):
        """activate(self)"""
        return _AriaPy.ArModeCommand_activate(self)

    def deactivate(self):
        """deactivate(self)"""
        return _AriaPy.ArModeCommand_deactivate(self)

    def help(self):
        """help(self)"""
        return _AriaPy.ArModeCommand_help(self)

ArModeCommand_swigregister = _AriaPy.ArModeCommand_swigregister
ArModeCommand_swigregister(ArModeCommand)

class ArModeTCM2(ArMode):
    """Proxy of C++ ArModeTCM2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ArRobot robot, char name, char key, char key2, ArTCM2 tcm2 = None) -> ArModeTCM2
        __init__(self, ArRobot robot, char name, char key, char key2) -> ArModeTCM2
        """
        this = _AriaPy.new_ArModeTCM2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArModeTCM2
    __del__ = lambda self : None;
    def activate(self):
        """activate(self)"""
        return _AriaPy.ArModeTCM2_activate(self)

    def deactivate(self):
        """deactivate(self)"""
        return _AriaPy.ArModeTCM2_deactivate(self)

    def help(self):
        """help(self)"""
        return _AriaPy.ArModeTCM2_help(self)

    def userTask(self):
        """userTask(self)"""
        return _AriaPy.ArModeTCM2_userTask(self)

ArModeTCM2_swigregister = _AriaPy.ArModeTCM2_swigregister
ArModeTCM2_swigregister(ArModeTCM2)

class ArModeConfig(ArMode):
    """Proxy of C++ ArModeConfig class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot, char name, char key, char key2) -> ArModeConfig"""
        this = _AriaPy.new_ArModeConfig(*args)
        try: self.this.append(this)
        except: self.this = this
    def activate(self):
        """activate(self)"""
        return _AriaPy.ArModeConfig_activate(self)

    def deactivate(self):
        """deactivate(self)"""
        return _AriaPy.ArModeConfig_deactivate(self)

    def help(self):
        """help(self)"""
        return _AriaPy.ArModeConfig_help(self)

    __swig_destroy__ = _AriaPy.delete_ArModeConfig
    __del__ = lambda self : None;
ArModeConfig_swigregister = _AriaPy.ArModeConfig_swigregister
ArModeConfig_swigregister(ArModeConfig)

class ArModeRobotStatus(ArMode):
    """Proxy of C++ ArModeRobotStatus class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot, char name, char key, char key2) -> ArModeRobotStatus"""
        this = _AriaPy.new_ArModeRobotStatus(*args)
        try: self.this.append(this)
        except: self.this = this
    def activate(self):
        """activate(self)"""
        return _AriaPy.ArModeRobotStatus_activate(self)

    def deactivate(self):
        """deactivate(self)"""
        return _AriaPy.ArModeRobotStatus_deactivate(self)

    def help(self):
        """help(self)"""
        return _AriaPy.ArModeRobotStatus_help(self)

    def userTask(self):
        """userTask(self)"""
        return _AriaPy.ArModeRobotStatus_userTask(self)

    __swig_destroy__ = _AriaPy.delete_ArModeRobotStatus
    __del__ = lambda self : None;
ArModeRobotStatus_swigregister = _AriaPy.ArModeRobotStatus_swigregister
ArModeRobotStatus_swigregister(ArModeRobotStatus)

class ArModule(object):
    """Proxy of C++ ArModule class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArModule
    __del__ = lambda self : None;
    def init(self, *args):
        """
        init(self, ArRobot robot, void argument = None) -> bool
        init(self, ArRobot robot) -> bool
        """
        return _AriaPy.ArModule_init(self, *args)

    def exit(self):
        """exit(self) -> bool"""
        return _AriaPy.ArModule_exit(self)

    def getRobot(self):
        """getRobot(self) -> ArRobot"""
        return _AriaPy.ArModule_getRobot(self)

    def setRobot(self, *args):
        """setRobot(self, ArRobot robot)"""
        return _AriaPy.ArModule_setRobot(self, *args)

ArModule_swigregister = _AriaPy.ArModule_swigregister
ArModule_swigregister(ArModule)

class ArModuleLoader(object):
    """Proxy of C++ ArModuleLoader class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    STATUS_SUCCESS = _AriaPy.ArModuleLoader_STATUS_SUCCESS
    STATUS_ALREADY_LOADED = _AriaPy.ArModuleLoader_STATUS_ALREADY_LOADED
    STATUS_FAILED_OPEN = _AriaPy.ArModuleLoader_STATUS_FAILED_OPEN
    STATUS_INVALID = _AriaPy.ArModuleLoader_STATUS_INVALID
    STATUS_INIT_FAILED = _AriaPy.ArModuleLoader_STATUS_INIT_FAILED
    STATUS_EXIT_FAILED = _AriaPy.ArModuleLoader_STATUS_EXIT_FAILED
    STATUS_NOT_FOUND = _AriaPy.ArModuleLoader_STATUS_NOT_FOUND
    def load(*args):
        """
        load(char modName, ArRobot robot, void modArgument = None, 
            bool quiet = False) -> Status
        load(char modName, ArRobot robot, void modArgument = None) -> Status
        load(char modName, ArRobot robot) -> Status
        """
        return _AriaPy.ArModuleLoader_load(*args)

    load = staticmethod(load)
    def reload(*args):
        """
        reload(char modName, ArRobot robot, void modArgument = None, 
            bool quiet = False) -> Status
        reload(char modName, ArRobot robot, void modArgument = None) -> Status
        reload(char modName, ArRobot robot) -> Status
        """
        return _AriaPy.ArModuleLoader_reload(*args)

    reload = staticmethod(reload)
    def close(*args):
        """
        close(char modName, bool quiet = False) -> Status
        close(char modName) -> Status
        """
        return _AriaPy.ArModuleLoader_close(*args)

    close = staticmethod(close)
    def closeAll():
        """closeAll()"""
        return _AriaPy.ArModuleLoader_closeAll()

    closeAll = staticmethod(closeAll)
    def __init__(self): 
        """__init__(self) -> ArModuleLoader"""
        this = _AriaPy.new_ArModuleLoader()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArModuleLoader
    __del__ = lambda self : None;
ArModuleLoader_swigregister = _AriaPy.ArModuleLoader_swigregister
ArModuleLoader_swigregister(ArModuleLoader)

def ArModuleLoader_load(*args):
  """
    load(char modName, ArRobot robot, void modArgument = None, 
        bool quiet = False) -> Status
    load(char modName, ArRobot robot, void modArgument = None) -> Status
    ArModuleLoader_load(char modName, ArRobot robot) -> Status
    """
  return _AriaPy.ArModuleLoader_load(*args)

def ArModuleLoader_reload(*args):
  """
    reload(char modName, ArRobot robot, void modArgument = None, 
        bool quiet = False) -> Status
    reload(char modName, ArRobot robot, void modArgument = None) -> Status
    ArModuleLoader_reload(char modName, ArRobot robot) -> Status
    """
  return _AriaPy.ArModuleLoader_reload(*args)

def ArModuleLoader_close(*args):
  """
    close(char modName, bool quiet = False) -> Status
    ArModuleLoader_close(char modName) -> Status
    """
  return _AriaPy.ArModuleLoader_close(*args)

def ArModuleLoader_closeAll():
  """ArModuleLoader_closeAll()"""
  return _AriaPy.ArModuleLoader_closeAll()

class ArMutex(object):
    """Proxy of C++ ArMutex class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    STATUS_FAILED_INIT = _AriaPy.ArMutex_STATUS_FAILED_INIT
    STATUS_FAILED = _AriaPy.ArMutex_STATUS_FAILED
    STATUS_ALREADY_LOCKED = _AriaPy.ArMutex_STATUS_ALREADY_LOCKED
    __swig_destroy__ = _AriaPy.delete_ArMutex
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self, bool recursive = True) -> ArMutex
        __init__(self) -> ArMutex
        __init__(self, ArMutex mutex) -> ArMutex
        """
        this = _AriaPy.new_ArMutex(*args)
        try: self.this.append(this)
        except: self.this = this
    def lock(self):
        """lock(self) -> int"""
        return _AriaPy.ArMutex_lock(self)

    def tryLock(self):
        """tryLock(self) -> int"""
        return _AriaPy.ArMutex_tryLock(self)

    def unlock(self):
        """unlock(self) -> int"""
        return _AriaPy.ArMutex_unlock(self)

    def getError(self, *args):
        """getError(self, int messageNumber) -> char"""
        return _AriaPy.ArMutex_getError(self, *args)

    def setLog(self, *args):
        """setLog(self, bool log)"""
        return _AriaPy.ArMutex_setLog(self, *args)

    def setLogName(self, *args):
        """setLogName(self, char logName)"""
        return _AriaPy.ArMutex_setLogName(self, *args)

    def getMutex(self):
        """getMutex(self) -> MutexType"""
        return _AriaPy.ArMutex_getMutex(self)

    def setLockWarningTime(*args):
        """setLockWarningTime(double lockWarningSeconds)"""
        return _AriaPy.ArMutex_setLockWarningTime(*args)

    setLockWarningTime = staticmethod(setLockWarningTime)
    def getLockWarningTime():
        """getLockWarningTime() -> double"""
        return _AriaPy.ArMutex_getLockWarningTime()

    getLockWarningTime = staticmethod(getLockWarningTime)
    def setUnlockWarningTime(*args):
        """setUnlockWarningTime(double unlockWarningSeconds)"""
        return _AriaPy.ArMutex_setUnlockWarningTime(*args)

    setUnlockWarningTime = staticmethod(setUnlockWarningTime)
    def getUnlockWarningTime():
        """getUnlockWarningTime() -> double"""
        return _AriaPy.ArMutex_getUnlockWarningTime()

    getUnlockWarningTime = staticmethod(getUnlockWarningTime)
ArMutex_swigregister = _AriaPy.ArMutex_swigregister
ArMutex_swigregister(ArMutex)

def ArMutex_setLockWarningTime(*args):
  """ArMutex_setLockWarningTime(double lockWarningSeconds)"""
  return _AriaPy.ArMutex_setLockWarningTime(*args)

def ArMutex_getLockWarningTime():
  """ArMutex_getLockWarningTime() -> double"""
  return _AriaPy.ArMutex_getLockWarningTime()

def ArMutex_setUnlockWarningTime(*args):
  """ArMutex_setUnlockWarningTime(double unlockWarningSeconds)"""
  return _AriaPy.ArMutex_setUnlockWarningTime(*args)

def ArMutex_getUnlockWarningTime():
  """ArMutex_getUnlockWarningTime() -> double"""
  return _AriaPy.ArMutex_getUnlockWarningTime()

class ArNMEAParser(object):
    """Proxy of C++ ArNMEAParser class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, name = "NMEA Parser"): 
        """
        __init__(self, char name = "NMEA Parser") -> ArNMEAParser
        __init__(self) -> ArNMEAParser
        """
        this = _AriaPy.new_ArNMEAParser(name)
        try: self.this.append(this)
        except: self.this = this
    ParseFinished = _AriaPy.ArNMEAParser_ParseFinished
    ParseError = _AriaPy.ArNMEAParser_ParseError
    ParseData = _AriaPy.ArNMEAParser_ParseData
    ParseUpdated = _AriaPy.ArNMEAParser_ParseUpdated
    ParseFlags = _swig_property(_AriaPy.ArNMEAParser_ParseFlags_get, _AriaPy.ArNMEAParser_ParseFlags_set)
    def setIgnoreChecksum(self, *args):
        """setIgnoreChecksum(self, bool ignore)"""
        return _AriaPy.ArNMEAParser_setIgnoreChecksum(self, *args)

    def addHandler(self, *args):
        """addHandler(self, char message, Handler handler)"""
        return _AriaPy.ArNMEAParser_addHandler(self, *args)

    def removeHandler(self, *args):
        """removeHandler(self, char message)"""
        return _AriaPy.ArNMEAParser_removeHandler(self, *args)

    def parse(self, *args):
        """
        parse(self, ArDeviceConnection dev) -> int
        parse(self, char buf, int n) -> int
        """
        return _AriaPy.ArNMEAParser_parse(self, *args)

    def getHandlersRef(self):
        """getHandlersRef(self) -> HandlerMap"""
        return _AriaPy.ArNMEAParser_getHandlersRef(self)

    __swig_destroy__ = _AriaPy.delete_ArNMEAParser
    __del__ = lambda self : None;
ArNMEAParser_swigregister = _AriaPy.ArNMEAParser_swigregister
ArNMEAParser_swigregister(ArNMEAParser)

class ArNMEAParser_Message(object):
    """Proxy of C++ ArNMEAParser_Message class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    message = _swig_property(_AriaPy.ArNMEAParser_Message_message_get, _AriaPy.ArNMEAParser_Message_message_set)
    timeParseStarted = _swig_property(_AriaPy.ArNMEAParser_Message_timeParseStarted_get, _AriaPy.ArNMEAParser_Message_timeParseStarted_set)
    def __init__(self): 
        """__init__(self) -> ArNMEAParser_Message"""
        this = _AriaPy.new_ArNMEAParser_Message()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArNMEAParser_Message
    __del__ = lambda self : None;
ArNMEAParser_Message_swigregister = _AriaPy.ArNMEAParser_Message_swigregister
ArNMEAParser_Message_swigregister(ArNMEAParser_Message)

class ArNetServer(object):
    """Proxy of C++ ArNetServer class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, addAriaExitCB = True, doNotAddShutdownServer = False, 
    name = "ArNetServer", childServer = None): 
        """
        __init__(self, bool addAriaExitCB = True, bool doNotAddShutdownServer = False, 
            char name = "ArNetServer", ArNetServer childServer = None) -> ArNetServer
        __init__(self, bool addAriaExitCB = True, bool doNotAddShutdownServer = False, 
            char name = "ArNetServer") -> ArNetServer
        __init__(self, bool addAriaExitCB = True, bool doNotAddShutdownServer = False) -> ArNetServer
        __init__(self, bool addAriaExitCB = True) -> ArNetServer
        __init__(self) -> ArNetServer
        """
        this = _AriaPy.new_ArNetServer(addAriaExitCB, doNotAddShutdownServer, name, childServer)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArNetServer
    __del__ = lambda self : None;
    def open(self, *args):
        """
        open(self, ArRobot robot, unsigned int port, char password, bool multipleClients = True, 
            char openOnIP = None) -> bool
        open(self, ArRobot robot, unsigned int port, char password, bool multipleClients = True) -> bool
        open(self, ArRobot robot, unsigned int port, char password) -> bool
        """
        return _AriaPy.ArNetServer_open(self, *args)

    def close(self):
        """close(self)"""
        return _AriaPy.ArNetServer_close(self)

    def addCommand(self, *args):
        """
        addCommand(self, char command, ArFunctor3<(p.p.char,int,p.ArSocket)> functor, 
            char help) -> bool
        """
        return _AriaPy.ArNetServer_addCommand(self, *args)

    def remCommand(self, *args):
        """remCommand(self, char command) -> bool"""
        return _AriaPy.ArNetServer_remCommand(self, *args)

    def getName(self):
        """getName(self) -> char"""
        return _AriaPy.ArNetServer_getName(self)

    def sendToAllClientsPlain(self, *args):
        """sendToAllClientsPlain(self, char str)"""
        return _AriaPy.ArNetServer_sendToAllClientsPlain(self, *args)

    def sendToAllClientsNextCyclePlain(self, *args):
        """sendToAllClientsNextCyclePlain(self, char str)"""
        return _AriaPy.ArNetServer_sendToAllClientsNextCyclePlain(self, *args)

    def sendToAllClientsNextCyclePlainBool(self, *args):
        """sendToAllClientsNextCyclePlainBool(self, char str) -> bool"""
        return _AriaPy.ArNetServer_sendToAllClientsNextCyclePlainBool(self, *args)

    def sendToClientPlain(self, *args):
        """sendToClientPlain(self, ArSocket socket, char ipString, char str)"""
        return _AriaPy.ArNetServer_sendToClientPlain(self, *args)

    def isOpen(self):
        """isOpen(self) -> bool"""
        return _AriaPy.ArNetServer_isOpen(self)

    def setLoggingDataSent(self, *args):
        """setLoggingDataSent(self, bool loggingData)"""
        return _AriaPy.ArNetServer_setLoggingDataSent(self, *args)

    def getLoggingDataSent(self):
        """getLoggingDataSent(self) -> bool"""
        return _AriaPy.ArNetServer_getLoggingDataSent(self)

    def setLoggingDataReceived(self, *args):
        """setLoggingDataReceived(self, bool loggingData)"""
        return _AriaPy.ArNetServer_setLoggingDataReceived(self, *args)

    def getLoggingDataReceived(self):
        """getLoggingDataReceived(self) -> bool"""
        return _AriaPy.ArNetServer_getLoggingDataReceived(self)

    def setUseWrongEndChars(self, *args):
        """setUseWrongEndChars(self, bool useWrongEndChars)"""
        return _AriaPy.ArNetServer_setUseWrongEndChars(self, *args)

    def getUseWrongEndChars(self):
        """getUseWrongEndChars(self) -> bool"""
        return _AriaPy.ArNetServer_getUseWrongEndChars(self)

    def runOnce(self):
        """runOnce(self)"""
        return _AriaPy.ArNetServer_runOnce(self)

    def internalGreeting(self, *args):
        """internalGreeting(self, ArSocket socket)"""
        return _AriaPy.ArNetServer_internalGreeting(self, *args)

    def internalHelp(self, *args):
        """
        internalHelp(self, ArSocket socket)
        internalHelp(self, char argv, int argc, ArSocket socket)
        """
        return _AriaPy.ArNetServer_internalHelp(self, *args)

    def internalEcho(self, *args):
        """internalEcho(self, char argv, int argc, ArSocket socket)"""
        return _AriaPy.ArNetServer_internalEcho(self, *args)

    def internalQuit(self, *args):
        """internalQuit(self, char argv, int argc, ArSocket socket)"""
        return _AriaPy.ArNetServer_internalQuit(self, *args)

    def internalShutdownServer(self, *args):
        """internalShutdownServer(self, char argv, int argc, ArSocket socket)"""
        return _AriaPy.ArNetServer_internalShutdownServer(self, *args)

    def parseCommandOnSocket(self, *args):
        """
        parseCommandOnSocket(self, ArArgumentBuilder args, ArSocket socket, bool allowLog = True)
        parseCommandOnSocket(self, ArArgumentBuilder args, ArSocket socket)
        """
        return _AriaPy.ArNetServer_parseCommandOnSocket(self, *args)

    def internalAddSocketToList(self, *args):
        """internalAddSocketToList(self, ArSocket socket)"""
        return _AriaPy.ArNetServer_internalAddSocketToList(self, *args)

    def internalAddSocketToDeleteList(self, *args):
        """internalAddSocketToDeleteList(self, ArSocket socket)"""
        return _AriaPy.ArNetServer_internalAddSocketToDeleteList(self, *args)

    def squelchNormal(self):
        """squelchNormal(self)"""
        return _AriaPy.ArNetServer_squelchNormal(self)

    def setExtraString(self, *args):
        """setExtraString(self, char str)"""
        return _AriaPy.ArNetServer_setExtraString(self, *args)

    def getExtraString(self):
        """getExtraString(self) -> char"""
        return _AriaPy.ArNetServer_getExtraString(self)

    def lock(self):
        """lock(self) -> int"""
        return _AriaPy.ArNetServer_lock(self)

    def tryLock(self):
        """tryLock(self) -> int"""
        return _AriaPy.ArNetServer_tryLock(self)

    def unlock(self):
        """unlock(self) -> int"""
        return _AriaPy.ArNetServer_unlock(self)

ArNetServer_swigregister = _AriaPy.ArNetServer_swigregister
ArNetServer_swigregister(ArNetServer)

class ArNovatelGPS(ArGPS):
    """Proxy of C++ ArNovatelGPS class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ArNovatelGPS"""
        this = _AriaPy.new_ArNovatelGPS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArNovatelGPS
    __del__ = lambda self : None;
ArNovatelGPS_swigregister = _AriaPy.ArNovatelGPS_swigregister
ArNovatelGPS_swigregister(ArNovatelGPS)

class ArNovatelSPAN(ArNovatelGPS):
    """Proxy of C++ ArNovatelSPAN class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GPSLatitude = _swig_property(_AriaPy.ArNovatelSPAN_GPSLatitude_get, _AriaPy.ArNovatelSPAN_GPSLatitude_set)
    GPSLongitude = _swig_property(_AriaPy.ArNovatelSPAN_GPSLongitude_get, _AriaPy.ArNovatelSPAN_GPSLongitude_set)
    haveGPSPosition = _swig_property(_AriaPy.ArNovatelSPAN_haveGPSPosition_get, _AriaPy.ArNovatelSPAN_haveGPSPosition_set)
    GPSValidFlag = _swig_property(_AriaPy.ArNovatelSPAN_GPSValidFlag_get, _AriaPy.ArNovatelSPAN_GPSValidFlag_set)
    timeGotGPSPosition = _swig_property(_AriaPy.ArNovatelSPAN_timeGotGPSPosition_get, _AriaPy.ArNovatelSPAN_timeGotGPSPosition_set)
    GPSTimestamp = _swig_property(_AriaPy.ArNovatelSPAN_GPSTimestamp_get, _AriaPy.ArNovatelSPAN_GPSTimestamp_set)
    def __init__(self): 
        """__init__(self) -> ArNovatelSPAN"""
        this = _AriaPy.new_ArNovatelSPAN()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArNovatelSPAN
    __del__ = lambda self : None;
ArNovatelSPAN_swigregister = _AriaPy.ArNovatelSPAN_swigregister
ArNovatelSPAN_swigregister(ArNovatelSPAN)

class P2ArmJoint(object):
    """Proxy of C++ P2ArmJoint class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> P2ArmJoint"""
        this = _AriaPy.new_P2ArmJoint()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_P2ArmJoint
    __del__ = lambda self : None;
    myPos = _swig_property(_AriaPy.P2ArmJoint_myPos_get, _AriaPy.P2ArmJoint_myPos_set)
    myVel = _swig_property(_AriaPy.P2ArmJoint_myVel_get, _AriaPy.P2ArmJoint_myVel_set)
    myHome = _swig_property(_AriaPy.P2ArmJoint_myHome_get, _AriaPy.P2ArmJoint_myHome_set)
    myMin = _swig_property(_AriaPy.P2ArmJoint_myMin_get, _AriaPy.P2ArmJoint_myMin_set)
    myCenter = _swig_property(_AriaPy.P2ArmJoint_myCenter_get, _AriaPy.P2ArmJoint_myCenter_set)
    myMax = _swig_property(_AriaPy.P2ArmJoint_myMax_get, _AriaPy.P2ArmJoint_myMax_set)
    myTicksPer90 = _swig_property(_AriaPy.P2ArmJoint_myTicksPer90_get, _AriaPy.P2ArmJoint_myTicksPer90_set)
P2ArmJoint_swigregister = _AriaPy.P2ArmJoint_swigregister
P2ArmJoint_swigregister(P2ArmJoint)

class ArP2Arm(object):
    """Proxy of C++ ArP2Arm class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    SUCCESS = _AriaPy.ArP2Arm_SUCCESS
    ALREADY_INITED = _AriaPy.ArP2Arm_ALREADY_INITED
    NOT_INITED = _AriaPy.ArP2Arm_NOT_INITED
    ROBOT_NOT_SETUP = _AriaPy.ArP2Arm_ROBOT_NOT_SETUP
    NO_ARM_FOUND = _AriaPy.ArP2Arm_NO_ARM_FOUND
    COMM_FAILED = _AriaPy.ArP2Arm_COMM_FAILED
    COULD_NOT_OPEN_PORT = _AriaPy.ArP2Arm_COULD_NOT_OPEN_PORT
    COULD_NOT_SET_UP_PORT = _AriaPy.ArP2Arm_COULD_NOT_SET_UP_PORT
    ALREADY_CONNECTED = _AriaPy.ArP2Arm_ALREADY_CONNECTED
    NOT_CONNECTED = _AriaPy.ArP2Arm_NOT_CONNECTED
    INVALID_JOINT = _AriaPy.ArP2Arm_INVALID_JOINT
    INVALID_POSITION = _AriaPy.ArP2Arm_INVALID_POSITION
    StatusPacket = _AriaPy.ArP2Arm_StatusPacket
    InfoPacket = _AriaPy.ArP2Arm_InfoPacket
    StatusOff = _AriaPy.ArP2Arm_StatusOff
    StatusSingle = _AriaPy.ArP2Arm_StatusSingle
    StatusContinuous = _AriaPy.ArP2Arm_StatusContinuous
    NumJoints = _swig_property(_AriaPy.ArP2Arm_NumJoints_get, _AriaPy.ArP2Arm_NumJoints_set)
    def __init__(self): 
        """__init__(self) -> ArP2Arm"""
        this = _AriaPy.new_ArP2Arm()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArP2Arm
    __del__ = lambda self : None;
    def setRobot(self, *args):
        """setRobot(self, ArRobot robot)"""
        return _AriaPy.ArP2Arm_setRobot(self, *args)

    def init(self):
        """init(self) -> State"""
        return _AriaPy.ArP2Arm_init(self)

    def uninit(self):
        """uninit(self) -> State"""
        return _AriaPy.ArP2Arm_uninit(self)

    def powerOn(self, doWait = True):
        """
        powerOn(self, bool doWait = True) -> State
        powerOn(self) -> State
        """
        return _AriaPy.ArP2Arm_powerOn(self, doWait)

    def powerOff(self):
        """powerOff(self) -> State"""
        return _AriaPy.ArP2Arm_powerOff(self)

    def requestInfo(self):
        """requestInfo(self) -> State"""
        return _AriaPy.ArP2Arm_requestInfo(self)

    def requestStatus(self, *args):
        """requestStatus(self, StatusType status) -> State"""
        return _AriaPy.ArP2Arm_requestStatus(self, *args)

    def requestInit(self):
        """requestInit(self) -> State"""
        return _AriaPy.ArP2Arm_requestInit(self)

    def checkArm(self, waitForResponse = True):
        """
        checkArm(self, bool waitForResponse = True) -> State
        checkArm(self) -> State
        """
        return _AriaPy.ArP2Arm_checkArm(self, waitForResponse)

    def home(self, *args):
        """
        home(self, int joint = -1) -> State
        home(self) -> State
        """
        return _AriaPy.ArP2Arm_home(self, *args)

    def park(self):
        """park(self) -> State"""
        return _AriaPy.ArP2Arm_park(self)

    def moveTo(self, *args):
        """
        moveTo(self, int joint, float pos, unsigned char vel = 0) -> State
        moveTo(self, int joint, float pos) -> State
        """
        return _AriaPy.ArP2Arm_moveTo(self, *args)

    def moveToTicks(self, *args):
        """moveToTicks(self, int joint, unsigned char pos) -> State"""
        return _AriaPy.ArP2Arm_moveToTicks(self, *args)

    def moveStep(self, *args):
        """
        moveStep(self, int joint, float pos, unsigned char vel = 0) -> State
        moveStep(self, int joint, float pos) -> State
        """
        return _AriaPy.ArP2Arm_moveStep(self, *args)

    def moveStepTicks(self, *args):
        """moveStepTicks(self, int joint, signed char pos) -> State"""
        return _AriaPy.ArP2Arm_moveStepTicks(self, *args)

    def moveVel(self, *args):
        """moveVel(self, int joint, int vel) -> State"""
        return _AriaPy.ArP2Arm_moveVel(self, *args)

    def stop(self):
        """stop(self) -> State"""
        return _AriaPy.ArP2Arm_stop(self)

    def setAutoParkTimer(self, *args):
        """setAutoParkTimer(self, int waitSecs) -> State"""
        return _AriaPy.ArP2Arm_setAutoParkTimer(self, *args)

    def setGripperParkTimer(self, *args):
        """setGripperParkTimer(self, int waitSecs) -> State"""
        return _AriaPy.ArP2Arm_setGripperParkTimer(self, *args)

    def setStoppedCB(self, *args):
        """setStoppedCB(self, ArFunctor func)"""
        return _AriaPy.ArP2Arm_setStoppedCB(self, *args)

    def setPacketCB(self, *args):
        """setPacketCB(self, ArFunctor1<(ArP2Arm::PacketType)> func)"""
        return _AriaPy.ArP2Arm_setPacketCB(self, *args)

    def getArmVersion(self):
        """getArmVersion(self) -> string"""
        return _AriaPy.ArP2Arm_getArmVersion(self)

    def getJointPos(self, *args):
        """getJointPos(self, int joint) -> float"""
        return _AriaPy.ArP2Arm_getJointPos(self, *args)

    def getJointPosTicks(self, *args):
        """getJointPosTicks(self, int joint) -> unsigned char"""
        return _AriaPy.ArP2Arm_getJointPosTicks(self, *args)

    def getMoving(self, *args):
        """
        getMoving(self, int joint = -1) -> bool
        getMoving(self) -> bool
        """
        return _AriaPy.ArP2Arm_getMoving(self, *args)

    def isPowered(self):
        """isPowered(self) -> bool"""
        return _AriaPy.ArP2Arm_isPowered(self)

    def isGood(self):
        """isGood(self) -> bool"""
        return _AriaPy.ArP2Arm_isGood(self)

    def getStatus(self):
        """getStatus(self) -> int"""
        return _AriaPy.ArP2Arm_getStatus(self)

    def getLastStatusTime(self):
        """getLastStatusTime(self) -> ArTime"""
        return _AriaPy.ArP2Arm_getLastStatusTime(self)

    def getRobot(self):
        """getRobot(self) -> ArRobot"""
        return _AriaPy.ArP2Arm_getRobot(self)

    def getJoint(self, *args):
        """getJoint(self, int joint) -> P2ArmJoint"""
        return _AriaPy.ArP2Arm_getJoint(self, *args)

    def convertDegToTicks(self, *args):
        """convertDegToTicks(self, int joint, float pos, unsigned char ticks) -> bool"""
        return _AriaPy.ArP2Arm_convertDegToTicks(self, *args)

    def convertTicksToDeg(self, *args):
        """convertTicksToDeg(self, int joint, unsigned char pos, float degrees) -> bool"""
        return _AriaPy.ArP2Arm_convertTicksToDeg(self, *args)

ArP2Arm_swigregister = _AriaPy.ArP2Arm_swigregister
ArP2Arm_swigregister(ArP2Arm)
ArP2Arm.ArmJoint1 = _AriaPy.cvar.ArP2Arm_ArmJoint1
ArP2Arm.ArmJoint2 = _AriaPy.cvar.ArP2Arm_ArmJoint2
ArP2Arm.ArmJoint3 = _AriaPy.cvar.ArP2Arm_ArmJoint3
ArP2Arm.ArmJoint4 = _AriaPy.cvar.ArP2Arm_ArmJoint4
ArP2Arm.ArmJoint5 = _AriaPy.cvar.ArP2Arm_ArmJoint5
ArP2Arm.ArmJoint6 = _AriaPy.cvar.ArP2Arm_ArmJoint6
ArP2Arm.ArmGood = _AriaPy.cvar.ArP2Arm_ArmGood
ArP2Arm.ArmInited = _AriaPy.cvar.ArP2Arm_ArmInited
ArP2Arm.ArmPower = _AriaPy.cvar.ArP2Arm_ArmPower
ArP2Arm.ArmHoming = _AriaPy.cvar.ArP2Arm_ArmHoming

class ArPriorityResolver(ArResolver):
    """Proxy of C++ ArPriorityResolver class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ArPriorityResolver"""
        this = _AriaPy.new_ArPriorityResolver()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArPriorityResolver
    __del__ = lambda self : None;
    def resolve(self, *args):
        """
        resolve(self, ActionMap actions, ArRobot robot, bool logActions = False) -> ArActionDesired
        resolve(self, ActionMap actions, ArRobot robot) -> ArActionDesired
        """
        return _AriaPy.ArPriorityResolver_resolve(self, *args)

ArPriorityResolver_swigregister = _AriaPy.ArPriorityResolver_swigregister
ArPriorityResolver_swigregister(ArPriorityResolver)

class ArRangeBuffer(object):
    """Proxy of C++ ArRangeBuffer class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, int size) -> ArRangeBuffer"""
        this = _AriaPy.new_ArRangeBuffer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArRangeBuffer
    __del__ = lambda self : None;
    def getSize(self):
        """getSize(self) -> size_t"""
        return _AriaPy.ArRangeBuffer_getSize(self)

    def setSize(self, *args):
        """setSize(self, size_t size)"""
        return _AriaPy.ArRangeBuffer_setSize(self, *args)

    def getPoseTaken(self):
        """getPoseTaken(self) -> ArPose"""
        return _AriaPy.ArRangeBuffer_getPoseTaken(self)

    def setPoseTaken(self, *args):
        """setPoseTaken(self, ArPose p)"""
        return _AriaPy.ArRangeBuffer_setPoseTaken(self, *args)

    def getEncoderPoseTaken(self):
        """getEncoderPoseTaken(self) -> ArPose"""
        return _AriaPy.ArRangeBuffer_getEncoderPoseTaken(self)

    def setEncoderPoseTaken(self, *args):
        """setEncoderPoseTaken(self, ArPose p)"""
        return _AriaPy.ArRangeBuffer_setEncoderPoseTaken(self, *args)

    def addReading(self, *args):
        """addReading(self, double x, double y)"""
        return _AriaPy.ArRangeBuffer_addReading(self, *args)

    def addReadingConditional(self, *args):
        """
        addReadingConditional(self, double x, double y, double closeDistSquared, bool wasAdded = None)
        addReadingConditional(self, double x, double y, double closeDistSquared)
        """
        return _AriaPy.ArRangeBuffer_addReadingConditional(self, *args)

    def beginInvalidationSweep(self):
        """beginInvalidationSweep(self)"""
        return _AriaPy.ArRangeBuffer_beginInvalidationSweep(self)

    def invalidateReading(self, *args):
        """invalidateReading(self, std::list<(p.ArPoseWithTime,std::allocator<(p.ArPoseWithTime)>)>::iterator readingIt)"""
        return _AriaPy.ArRangeBuffer_invalidateReading(self, *args)

    def endInvalidationSweep(self):
        """endInvalidationSweep(self)"""
        return _AriaPy.ArRangeBuffer_endInvalidationSweep(self)

    def getBuffer(self):
        """getBuffer(self) -> ArPoseWithTimePtrList"""
        return _AriaPy.ArRangeBuffer_getBuffer(self)

    def getClosestPolar(self, *args):
        """
        getClosestPolar(self, double startAngle, double endAngle, ArPose position, 
            unsigned int maxRange, double angle = None) -> double
        getClosestPolar(self, double startAngle, double endAngle, ArPose position, 
            unsigned int maxRange) -> double
        """
        return _AriaPy.ArRangeBuffer_getClosestPolar(self, *args)

    def getClosestBox(self, *args):
        """
        getClosestBox(self, double x1, double y1, double x2, double y2, ArPose position, 
            unsigned int maxRange, ArPose readingPos = None, 
            ArPose targetPose = ArPose(0, 0, 0)) -> double
        getClosestBox(self, double x1, double y1, double x2, double y2, ArPose position, 
            unsigned int maxRange, ArPose readingPos = None) -> double
        getClosestBox(self, double x1, double y1, double x2, double y2, ArPose position, 
            unsigned int maxRange) -> double
        """
        return _AriaPy.ArRangeBuffer_getClosestBox(self, *args)

    def applyTransform(self, *args):
        """applyTransform(self, ArTransform trans)"""
        return _AriaPy.ArRangeBuffer_applyTransform(self, *args)

    def clear(self):
        """clear(self)"""
        return _AriaPy.ArRangeBuffer_clear(self)

    def clearOlderThan(self, *args):
        """clearOlderThan(self, int milliSeconds)"""
        return _AriaPy.ArRangeBuffer_clearOlderThan(self, *args)

    def clearOlderThanSeconds(self, *args):
        """clearOlderThanSeconds(self, int seconds)"""
        return _AriaPy.ArRangeBuffer_clearOlderThanSeconds(self, *args)

    def reset(self):
        """reset(self)"""
        return _AriaPy.ArRangeBuffer_reset(self)

    def beginRedoBuffer(self):
        """beginRedoBuffer(self)"""
        return _AriaPy.ArRangeBuffer_beginRedoBuffer(self)

    def redoReading(self, *args):
        """redoReading(self, double x, double y)"""
        return _AriaPy.ArRangeBuffer_redoReading(self, *args)

    def endRedoBuffer(self):
        """endRedoBuffer(self)"""
        return _AriaPy.ArRangeBuffer_endRedoBuffer(self)

    def getBufferAsVector(self):
        """getBufferAsVector(self) -> ArPoseWithTimeVector"""
        return _AriaPy.ArRangeBuffer_getBufferAsVector(self)

    def getClosestPolarInList(*args):
        """
        getClosestPolarInList(double startAngle, double endAngle, ArPose position, 
            unsigned int maxRange, double angle, ArPoseWithTimePtrList buffer) -> double
        """
        return _AriaPy.ArRangeBuffer_getClosestPolarInList(*args)

    getClosestPolarInList = staticmethod(getClosestPolarInList)
    def getClosestBoxInList(*args):
        """
        getClosestBoxInList(double x1, double y1, double x2, double y2, ArPose position, 
            unsigned int maxRange, ArPose readingPos, 
            ArPose targetPose, ArPoseWithTimePtrList buffer) -> double
        """
        return _AriaPy.ArRangeBuffer_getClosestBoxInList(*args)

    getClosestBoxInList = staticmethod(getClosestBoxInList)
ArRangeBuffer_swigregister = _AriaPy.ArRangeBuffer_swigregister
ArRangeBuffer_swigregister(ArRangeBuffer)

def ArRangeBuffer_getClosestPolarInList(*args):
  """
    ArRangeBuffer_getClosestPolarInList(double startAngle, double endAngle, ArPose position, 
        unsigned int maxRange, double angle, ArPoseWithTimePtrList buffer) -> double
    """
  return _AriaPy.ArRangeBuffer_getClosestPolarInList(*args)

def ArRangeBuffer_getClosestBoxInList(*args):
  """
    ArRangeBuffer_getClosestBoxInList(double x1, double y1, double x2, double y2, ArPose position, 
        unsigned int maxRange, ArPose readingPos, 
        ArPose targetPose, ArPoseWithTimePtrList buffer) -> double
    """
  return _AriaPy.ArRangeBuffer_getClosestBoxInList(*args)

class ArRatioInputJoydrive(object):
    """Proxy of C++ ArRatioInputJoydrive class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ArRobot robot, ArActionRatioInput input, int priority = 50, 
            bool stopIfNoButtonPressed = False, 
            bool useOSCalForJoystick = True) -> ArRatioInputJoydrive
        __init__(self, ArRobot robot, ArActionRatioInput input, int priority = 50, 
            bool stopIfNoButtonPressed = False) -> ArRatioInputJoydrive
        __init__(self, ArRobot robot, ArActionRatioInput input, int priority = 50) -> ArRatioInputJoydrive
        __init__(self, ArRobot robot, ArActionRatioInput input) -> ArRatioInputJoydrive
        """
        this = _AriaPy.new_ArRatioInputJoydrive(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArRatioInputJoydrive
    __del__ = lambda self : None;
    def joystickInited(self):
        """joystickInited(self) -> bool"""
        return _AriaPy.ArRatioInputJoydrive_joystickInited(self)

    def setStopIfNoButtonPressed(self, *args):
        """setStopIfNoButtonPressed(self, bool stopIfNoButtonPressed)"""
        return _AriaPy.ArRatioInputJoydrive_setStopIfNoButtonPressed(self, *args)

    def getStopIfNoButtonPressed(self):
        """getStopIfNoButtonPressed(self) -> bool"""
        return _AriaPy.ArRatioInputJoydrive_getStopIfNoButtonPressed(self)

    def setUseOSCal(self, *args):
        """setUseOSCal(self, bool useOSCal)"""
        return _AriaPy.ArRatioInputJoydrive_setUseOSCal(self, *args)

    def getUseOSCal(self):
        """getUseOSCal(self) -> bool"""
        return _AriaPy.ArRatioInputJoydrive_getUseOSCal(self)

    def getJoyHandler(self):
        """getJoyHandler(self) -> ArJoyHandler"""
        return _AriaPy.ArRatioInputJoydrive_getJoyHandler(self)

ArRatioInputJoydrive_swigregister = _AriaPy.ArRatioInputJoydrive_swigregister
ArRatioInputJoydrive_swigregister(ArRatioInputJoydrive)

class ArRatioInputKeydrive(object):
    """Proxy of C++ ArRatioInputKeydrive class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ArRobot robot, ArActionRatioInput input, int priority = 25, 
            double velIncrement = 5) -> ArRatioInputKeydrive
        __init__(self, ArRobot robot, ArActionRatioInput input, int priority = 25) -> ArRatioInputKeydrive
        __init__(self, ArRobot robot, ArActionRatioInput input) -> ArRatioInputKeydrive
        """
        this = _AriaPy.new_ArRatioInputKeydrive(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArRatioInputKeydrive
    __del__ = lambda self : None;
    def takeKeys(self):
        """takeKeys(self)"""
        return _AriaPy.ArRatioInputKeydrive_takeKeys(self)

    def giveUpKeys(self):
        """giveUpKeys(self)"""
        return _AriaPy.ArRatioInputKeydrive_giveUpKeys(self)

    def up(self):
        """up(self)"""
        return _AriaPy.ArRatioInputKeydrive_up(self)

    def down(self):
        """down(self)"""
        return _AriaPy.ArRatioInputKeydrive_down(self)

    def z(self):
        """z(self)"""
        return _AriaPy.ArRatioInputKeydrive_z(self)

    def x(self):
        """x(self)"""
        return _AriaPy.ArRatioInputKeydrive_x(self)

    def left(self):
        """left(self)"""
        return _AriaPy.ArRatioInputKeydrive_left(self)

    def right(self):
        """right(self)"""
        return _AriaPy.ArRatioInputKeydrive_right(self)

    def space(self):
        """space(self)"""
        return _AriaPy.ArRatioInputKeydrive_space(self)

    def getFireCB(self):
        """getFireCB(self) -> ArFunctor"""
        return _AriaPy.ArRatioInputKeydrive_getFireCB(self)

ArRatioInputKeydrive_swigregister = _AriaPy.ArRatioInputKeydrive_swigregister
ArRatioInputKeydrive_swigregister(ArRatioInputKeydrive)

class ArRatioInputRobotJoydrive(object):
    """Proxy of C++ ArRatioInputRobotJoydrive class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ArRobot robot, ArActionRatioInput input, int priority = 75, 
            bool requireDeadmanPushed = True) -> ArRatioInputRobotJoydrive
        __init__(self, ArRobot robot, ArActionRatioInput input, int priority = 75) -> ArRatioInputRobotJoydrive
        __init__(self, ArRobot robot, ArActionRatioInput input) -> ArRatioInputRobotJoydrive
        """
        this = _AriaPy.new_ArRatioInputRobotJoydrive(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArRatioInputRobotJoydrive
    __del__ = lambda self : None;
ArRatioInputRobotJoydrive_swigregister = _AriaPy.ArRatioInputRobotJoydrive_swigregister
ArRatioInputRobotJoydrive_swigregister(ArRatioInputRobotJoydrive)

class ArRecurrentTask(ArASyncTask):
    """Proxy of C++ ArRecurrentTask class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArRecurrentTask
    __del__ = lambda self : None;
    def task(self):
        """task(self)"""
        return _AriaPy.ArRecurrentTask_task(self)

    def go(self):
        """go(self)"""
        return _AriaPy.ArRecurrentTask_go(self)

    def done(self):
        """done(self) -> int"""
        return _AriaPy.ArRecurrentTask_done(self)

    def reset(self):
        """reset(self)"""
        return _AriaPy.ArRecurrentTask_reset(self)

    def kill(self):
        """kill(self)"""
        return _AriaPy.ArRecurrentTask_kill(self)

    def runThread(self, *args):
        """runThread(self, void ptr) -> void"""
        return _AriaPy.ArRecurrentTask_runThread(self, *args)

ArRecurrentTask_swigregister = _AriaPy.ArRecurrentTask_swigregister
ArRecurrentTask_swigregister(ArRecurrentTask)

class ArRobot(object):
    """Proxy of C++ ArRobot class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    WAIT_CONNECTED = _AriaPy.ArRobot_WAIT_CONNECTED
    WAIT_FAILED_CONN = _AriaPy.ArRobot_WAIT_FAILED_CONN
    WAIT_RUN_EXIT = _AriaPy.ArRobot_WAIT_RUN_EXIT
    WAIT_TIMEDOUT = _AriaPy.ArRobot_WAIT_TIMEDOUT
    WAIT_INTR = _AriaPy.ArRobot_WAIT_INTR
    WAIT_FAIL = _AriaPy.ArRobot_WAIT_FAIL
    CHARGING_UNKNOWN = _AriaPy.ArRobot_CHARGING_UNKNOWN
    CHARGING_NOT = _AriaPy.ArRobot_CHARGING_NOT
    CHARGING_BULK = _AriaPy.ArRobot_CHARGING_BULK
    CHARGING_OVERCHARGE = _AriaPy.ArRobot_CHARGING_OVERCHARGE
    CHARGING_FLOAT = _AriaPy.ArRobot_CHARGING_FLOAT
    CHARGING_BALANCE = _AriaPy.ArRobot_CHARGING_BALANCE
    def __init__(self, name = None, ignored = True, doSigHandle = True, normalInit = True, 
    addAriaExitCallback = True): 
        """
        __init__(self, char name = None, bool ignored = True, bool doSigHandle = True, 
            bool normalInit = True, bool addAriaExitCallback = True) -> ArRobot
        __init__(self, char name = None, bool ignored = True, bool doSigHandle = True, 
            bool normalInit = True) -> ArRobot
        __init__(self, char name = None, bool ignored = True, bool doSigHandle = True) -> ArRobot
        __init__(self, char name = None, bool ignored = True) -> ArRobot
        __init__(self, char name = None) -> ArRobot
        __init__(self) -> ArRobot
        """
        this = _AriaPy.new_ArRobot(name, ignored, doSigHandle, normalInit, addAriaExitCallback)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArRobot
    __del__ = lambda self : None;
    def run(self, *args):
        """
        run(self, bool stopRunIfNotConnected, bool runNonThreaded = False)
        run(self, bool stopRunIfNotConnected)
        """
        return _AriaPy.ArRobot_run(self, *args)

    def runAsync(self, *args):
        """
        runAsync(self, bool stopRunIfNotConnected, bool runNonThreadedPacketReader = False)
        runAsync(self, bool stopRunIfNotConnected)
        """
        return _AriaPy.ArRobot_runAsync(self, *args)

    def isRunning(self):
        """isRunning(self) -> bool"""
        return _AriaPy.ArRobot_isRunning(self)

    def stopRunning(self, doDisconnect = True):
        """
        stopRunning(self, bool doDisconnect = True)
        stopRunning(self)
        """
        return _AriaPy.ArRobot_stopRunning(self, doDisconnect)

    def setDeviceConnection(self, *args):
        """setDeviceConnection(self, ArDeviceConnection connection)"""
        return _AriaPy.ArRobot_setDeviceConnection(self, *args)

    def getDeviceConnection(self):
        """getDeviceConnection(self) -> ArDeviceConnection"""
        return _AriaPy.ArRobot_getDeviceConnection(self)

    def isConnected(self):
        """isConnected(self) -> bool"""
        return _AriaPy.ArRobot_isConnected(self)

    def blockingConnect(self):
        """blockingConnect(self) -> bool"""
        return _AriaPy.ArRobot_blockingConnect(self)

    def asyncConnect(self):
        """asyncConnect(self) -> bool"""
        return _AriaPy.ArRobot_asyncConnect(self)

    def disconnect(self):
        """disconnect(self) -> bool"""
        return _AriaPy.ArRobot_disconnect(self)

    def clearDirectMotion(self):
        """clearDirectMotion(self)"""
        return _AriaPy.ArRobot_clearDirectMotion(self)

    def isDirectMotion(self):
        """isDirectMotion(self) -> bool"""
        return _AriaPy.ArRobot_isDirectMotion(self)

    def stopStateReflection(self):
        """stopStateReflection(self)"""
        return _AriaPy.ArRobot_stopStateReflection(self)

    def enableMotors(self):
        """enableMotors(self)"""
        return _AriaPy.ArRobot_enableMotors(self)

    def disableMotors(self):
        """disableMotors(self)"""
        return _AriaPy.ArRobot_disableMotors(self)

    def enableSonar(self):
        """enableSonar(self)"""
        return _AriaPy.ArRobot_enableSonar(self)

    def enableAutonomousDrivingSonar(self):
        """enableAutonomousDrivingSonar(self)"""
        return _AriaPy.ArRobot_enableAutonomousDrivingSonar(self)

    def disableSonar(self):
        """disableSonar(self)"""
        return _AriaPy.ArRobot_disableSonar(self)

    def stop(self):
        """stop(self)"""
        return _AriaPy.ArRobot_stop(self)

    def setVel(self, *args):
        """setVel(self, double velocity)"""
        return _AriaPy.ArRobot_setVel(self, *args)

    def setVel2(self, *args):
        """setVel2(self, double leftVelocity, double rightVelocity)"""
        return _AriaPy.ArRobot_setVel2(self, *args)

    def move(self, *args):
        """move(self, double distance)"""
        return _AriaPy.ArRobot_move(self, *args)

    def isMoveDone(self, delta = 0.0):
        """
        isMoveDone(self, double delta = 0.0) -> bool
        isMoveDone(self) -> bool
        """
        return _AriaPy.ArRobot_isMoveDone(self, delta)

    def setMoveDoneDist(self, *args):
        """setMoveDoneDist(self, double dist)"""
        return _AriaPy.ArRobot_setMoveDoneDist(self, *args)

    def getMoveDoneDist(self):
        """getMoveDoneDist(self) -> double"""
        return _AriaPy.ArRobot_getMoveDoneDist(self)

    def setHeading(self, *args):
        """setHeading(self, double heading)"""
        return _AriaPy.ArRobot_setHeading(self, *args)

    def setRotVel(self, *args):
        """setRotVel(self, double velocity)"""
        return _AriaPy.ArRobot_setRotVel(self, *args)

    def setDeltaHeading(self, *args):
        """setDeltaHeading(self, double deltaHeading)"""
        return _AriaPy.ArRobot_setDeltaHeading(self, *args)

    def isHeadingDone(self, delta = 0.0):
        """
        isHeadingDone(self, double delta = 0.0) -> bool
        isHeadingDone(self) -> bool
        """
        return _AriaPy.ArRobot_isHeadingDone(self, delta)

    def setHeadingDoneDiff(self, *args):
        """setHeadingDoneDiff(self, double degrees)"""
        return _AriaPy.ArRobot_setHeadingDoneDiff(self, *args)

    def getHeadingDoneDiff(self):
        """getHeadingDoneDiff(self) -> double"""
        return _AriaPy.ArRobot_getHeadingDoneDiff(self)

    def setLatVel(self, *args):
        """setLatVel(self, double latVelocity)"""
        return _AriaPy.ArRobot_setLatVel(self, *args)

    def isStopped(self, stoppedVel = 0.0, stoppedRotVel = 0.0, stoppedLatVel = 0.0):
        """
        isStopped(self, double stoppedVel = 0.0, double stoppedRotVel = 0.0, 
            double stoppedLatVel = 0.0) -> bool
        isStopped(self, double stoppedVel = 0.0, double stoppedRotVel = 0.0) -> bool
        isStopped(self, double stoppedVel = 0.0) -> bool
        isStopped(self) -> bool
        """
        return _AriaPy.ArRobot_isStopped(self, stoppedVel, stoppedRotVel, stoppedLatVel)

    def setStoppedVels(self, *args):
        """setStoppedVels(self, double stoppedVel, double stoppedRotVel, double stoppedLatVel)"""
        return _AriaPy.ArRobot_setStoppedVels(self, *args)

    def setDirectMotionPrecedenceTime(self, *args):
        """setDirectMotionPrecedenceTime(self, int mSec)"""
        return _AriaPy.ArRobot_setDirectMotionPrecedenceTime(self, *args)

    def getDirectMotionPrecedenceTime(self):
        """getDirectMotionPrecedenceTime(self) -> unsigned int"""
        return _AriaPy.ArRobot_getDirectMotionPrecedenceTime(self)

    def com(self, *args):
        """com(self, unsigned char command) -> bool"""
        return _AriaPy.ArRobot_com(self, *args)

    def comInt(self, *args):
        """comInt(self, unsigned char command, short argument) -> bool"""
        return _AriaPy.ArRobot_comInt(self, *args)

    def com2Bytes(self, *args):
        """com2Bytes(self, unsigned char command, char high, char low) -> bool"""
        return _AriaPy.ArRobot_com2Bytes(self, *args)

    def comStr(self, *args):
        """comStr(self, unsigned char command, char argument) -> bool"""
        return _AriaPy.ArRobot_comStr(self, *args)

    def comStrN(self, *args):
        """comStrN(self, unsigned char command, char str, int size) -> bool"""
        return _AriaPy.ArRobot_comStrN(self, *args)

    def comDataN(self, *args):
        """comDataN(self, unsigned char command, char data, int size) -> bool"""
        return _AriaPy.ArRobot_comDataN(self, *args)

    def getRobotName(self):
        """getRobotName(self) -> char"""
        return _AriaPy.ArRobot_getRobotName(self)

    def getRobotType(self):
        """getRobotType(self) -> char"""
        return _AriaPy.ArRobot_getRobotType(self)

    def getRobotSubType(self):
        """getRobotSubType(self) -> char"""
        return _AriaPy.ArRobot_getRobotSubType(self)

    def getAbsoluteMaxTransVel(self):
        """getAbsoluteMaxTransVel(self) -> double"""
        return _AriaPy.ArRobot_getAbsoluteMaxTransVel(self)

    def setAbsoluteMaxTransVel(self, *args):
        """setAbsoluteMaxTransVel(self, double maxVel) -> bool"""
        return _AriaPy.ArRobot_setAbsoluteMaxTransVel(self, *args)

    def getAbsoluteMaxTransNegVel(self):
        """getAbsoluteMaxTransNegVel(self) -> double"""
        return _AriaPy.ArRobot_getAbsoluteMaxTransNegVel(self)

    def setAbsoluteMaxTransNegVel(self, *args):
        """setAbsoluteMaxTransNegVel(self, double maxVel) -> bool"""
        return _AriaPy.ArRobot_setAbsoluteMaxTransNegVel(self, *args)

    def getAbsoluteMaxTransAccel(self):
        """getAbsoluteMaxTransAccel(self) -> double"""
        return _AriaPy.ArRobot_getAbsoluteMaxTransAccel(self)

    def setAbsoluteMaxTransAccel(self, *args):
        """setAbsoluteMaxTransAccel(self, double maxAccel) -> bool"""
        return _AriaPy.ArRobot_setAbsoluteMaxTransAccel(self, *args)

    def getAbsoluteMaxTransDecel(self):
        """getAbsoluteMaxTransDecel(self) -> double"""
        return _AriaPy.ArRobot_getAbsoluteMaxTransDecel(self)

    def setAbsoluteMaxTransDecel(self, *args):
        """setAbsoluteMaxTransDecel(self, double maxDecel) -> bool"""
        return _AriaPy.ArRobot_setAbsoluteMaxTransDecel(self, *args)

    def getAbsoluteMaxRotVel(self):
        """getAbsoluteMaxRotVel(self) -> double"""
        return _AriaPy.ArRobot_getAbsoluteMaxRotVel(self)

    def setAbsoluteMaxRotVel(self, *args):
        """setAbsoluteMaxRotVel(self, double maxVel) -> bool"""
        return _AriaPy.ArRobot_setAbsoluteMaxRotVel(self, *args)

    def getAbsoluteMaxRotAccel(self):
        """getAbsoluteMaxRotAccel(self) -> double"""
        return _AriaPy.ArRobot_getAbsoluteMaxRotAccel(self)

    def setAbsoluteMaxRotAccel(self, *args):
        """setAbsoluteMaxRotAccel(self, double maxAccel) -> bool"""
        return _AriaPy.ArRobot_setAbsoluteMaxRotAccel(self, *args)

    def getAbsoluteMaxRotDecel(self):
        """getAbsoluteMaxRotDecel(self) -> double"""
        return _AriaPy.ArRobot_getAbsoluteMaxRotDecel(self)

    def setAbsoluteMaxRotDecel(self, *args):
        """setAbsoluteMaxRotDecel(self, double maxDecel) -> bool"""
        return _AriaPy.ArRobot_setAbsoluteMaxRotDecel(self, *args)

    def getAbsoluteMaxLatVel(self):
        """getAbsoluteMaxLatVel(self) -> double"""
        return _AriaPy.ArRobot_getAbsoluteMaxLatVel(self)

    def setAbsoluteMaxLatVel(self, *args):
        """setAbsoluteMaxLatVel(self, double maxVel) -> bool"""
        return _AriaPy.ArRobot_setAbsoluteMaxLatVel(self, *args)

    def getAbsoluteMaxLatAccel(self):
        """getAbsoluteMaxLatAccel(self) -> double"""
        return _AriaPy.ArRobot_getAbsoluteMaxLatAccel(self)

    def setAbsoluteMaxLatAccel(self, *args):
        """setAbsoluteMaxLatAccel(self, double maxAccel) -> bool"""
        return _AriaPy.ArRobot_setAbsoluteMaxLatAccel(self, *args)

    def getAbsoluteMaxLatDecel(self):
        """getAbsoluteMaxLatDecel(self) -> double"""
        return _AriaPy.ArRobot_getAbsoluteMaxLatDecel(self)

    def setAbsoluteMaxLatDecel(self, *args):
        """setAbsoluteMaxLatDecel(self, double maxDecel) -> bool"""
        return _AriaPy.ArRobot_setAbsoluteMaxLatDecel(self, *args)

    def getPose(self):
        """getPose(self) -> ArPose"""
        return _AriaPy.ArRobot_getPose(self)

    def getX(self):
        """getX(self) -> double"""
        return _AriaPy.ArRobot_getX(self)

    def getY(self):
        """getY(self) -> double"""
        return _AriaPy.ArRobot_getY(self)

    def getTh(self):
        """getTh(self) -> double"""
        return _AriaPy.ArRobot_getTh(self)

    def findDistanceTo(self, *args):
        """findDistanceTo(self, ArPose pose) -> double"""
        return _AriaPy.ArRobot_findDistanceTo(self, *args)

    def findAngleTo(self, *args):
        """findAngleTo(self, ArPose pose) -> double"""
        return _AriaPy.ArRobot_findAngleTo(self, *args)

    def findDeltaHeadingTo(self, *args):
        """findDeltaHeadingTo(self, ArPose pose) -> double"""
        return _AriaPy.ArRobot_findDeltaHeadingTo(self, *args)

    def getVel(self):
        """getVel(self) -> double"""
        return _AriaPy.ArRobot_getVel(self)

    def getRotVel(self):
        """getRotVel(self) -> double"""
        return _AriaPy.ArRobot_getRotVel(self)

    def getLatVel(self):
        """getLatVel(self) -> double"""
        return _AriaPy.ArRobot_getLatVel(self)

    def hasLatVel(self):
        """hasLatVel(self) -> bool"""
        return _AriaPy.ArRobot_hasLatVel(self)

    def getRobotRadius(self):
        """getRobotRadius(self) -> double"""
        return _AriaPy.ArRobot_getRobotRadius(self)

    def getRobotWidth(self):
        """getRobotWidth(self) -> double"""
        return _AriaPy.ArRobot_getRobotWidth(self)

    def getRobotLength(self):
        """getRobotLength(self) -> double"""
        return _AriaPy.ArRobot_getRobotLength(self)

    def getRobotLengthFront(self):
        """getRobotLengthFront(self) -> double"""
        return _AriaPy.ArRobot_getRobotLengthFront(self)

    def getRobotLengthRear(self):
        """getRobotLengthRear(self) -> double"""
        return _AriaPy.ArRobot_getRobotLengthRear(self)

    def getRobotDiagonal(self):
        """getRobotDiagonal(self) -> double"""
        return _AriaPy.ArRobot_getRobotDiagonal(self)

    def getBatteryVoltage(self):
        """getBatteryVoltage(self) -> double"""
        return _AriaPy.ArRobot_getBatteryVoltage(self)

    def getBatteryVoltageNow(self):
        """getBatteryVoltageNow(self) -> double"""
        return _AriaPy.ArRobot_getBatteryVoltageNow(self)

    def getRealBatteryVoltage(self):
        """getRealBatteryVoltage(self) -> double"""
        return _AriaPy.ArRobot_getRealBatteryVoltage(self)

    def getRealBatteryVoltageNow(self):
        """getRealBatteryVoltageNow(self) -> double"""
        return _AriaPy.ArRobot_getRealBatteryVoltageNow(self)

    def haveStateOfCharge(self):
        """haveStateOfCharge(self) -> bool"""
        return _AriaPy.ArRobot_haveStateOfCharge(self)

    def hasStateOfCHarge(self):
        """hasStateOfCHarge(self) -> bool"""
        return _AriaPy.ArRobot_hasStateOfCHarge(self)

    def getStateOfCharge(self):
        """getStateOfCharge(self) -> double"""
        return _AriaPy.ArRobot_getStateOfCharge(self)

    def getStateOfChargeSetTime(self):
        """getStateOfChargeSetTime(self) -> ArTime"""
        return _AriaPy.ArRobot_getStateOfChargeSetTime(self)

    def getStateOfChargeLow(self):
        """getStateOfChargeLow(self) -> double"""
        return _AriaPy.ArRobot_getStateOfChargeLow(self)

    def getStateOfChargeShutdown(self):
        """getStateOfChargeShutdown(self) -> double"""
        return _AriaPy.ArRobot_getStateOfChargeShutdown(self)

    def getLeftVel(self):
        """getLeftVel(self) -> double"""
        return _AriaPy.ArRobot_getLeftVel(self)

    def getRightVel(self):
        """getRightVel(self) -> double"""
        return _AriaPy.ArRobot_getRightVel(self)

    def getStallValue(self):
        """getStallValue(self) -> int"""
        return _AriaPy.ArRobot_getStallValue(self)

    def isLeftMotorStalled(self):
        """isLeftMotorStalled(self) -> bool"""
        return _AriaPy.ArRobot_isLeftMotorStalled(self)

    def isRightMotorStalled(self):
        """isRightMotorStalled(self) -> bool"""
        return _AriaPy.ArRobot_isRightMotorStalled(self)

    def isFrontBumperTriggered(self):
        """isFrontBumperTriggered(self) -> bool"""
        return _AriaPy.ArRobot_isFrontBumperTriggered(self)

    def isRearBumperTriggered(self):
        """isRearBumperTriggered(self) -> bool"""
        return _AriaPy.ArRobot_isRearBumperTriggered(self)

    def getControl(self):
        """getControl(self) -> double"""
        return _AriaPy.ArRobot_getControl(self)

    def setKeepControlRaw(self, *args):
        """setKeepControlRaw(self, bool keepControlRaw)"""
        return _AriaPy.ArRobot_setKeepControlRaw(self, *args)

    def getKeepControlRaw(self):
        """getKeepControlRaw(self) -> bool"""
        return _AriaPy.ArRobot_getKeepControlRaw(self)

    def getFlags(self):
        """getFlags(self) -> int"""
        return _AriaPy.ArRobot_getFlags(self)

    def getFaultFlags(self):
        """getFaultFlags(self) -> int"""
        return _AriaPy.ArRobot_getFaultFlags(self)

    def hasFaultFlags(self):
        """hasFaultFlags(self) -> bool"""
        return _AriaPy.ArRobot_hasFaultFlags(self)

    def getFlags3(self):
        """getFlags3(self) -> int"""
        return _AriaPy.ArRobot_getFlags3(self)

    def hasFlags3(self):
        """hasFlags3(self) -> bool"""
        return _AriaPy.ArRobot_hasFlags3(self)

    def areMotorsEnabled(self):
        """areMotorsEnabled(self) -> bool"""
        return _AriaPy.ArRobot_areMotorsEnabled(self)

    def areSonarsEnabled(self):
        """areSonarsEnabled(self) -> bool"""
        return _AriaPy.ArRobot_areSonarsEnabled(self)

    def areAutonomousDrivingSonarsEnabled(self):
        """areAutonomousDrivingSonarsEnabled(self) -> bool"""
        return _AriaPy.ArRobot_areAutonomousDrivingSonarsEnabled(self)

    def areSonarsEnabledLegacy(self):
        """areSonarsEnabledLegacy(self) -> bool"""
        return _AriaPy.ArRobot_areSonarsEnabledLegacy(self)

    def isEStopPressed(self):
        """isEStopPressed(self) -> bool"""
        return _AriaPy.ArRobot_isEStopPressed(self)

    def getEstop(self):
        """getEstop(self) -> bool"""
        return _AriaPy.ArRobot_getEstop(self)

    def getCompass(self):
        """getCompass(self) -> double"""
        return _AriaPy.ArRobot_getCompass(self)

    def getAnalogPortSelected(self):
        """getAnalogPortSelected(self) -> int"""
        return _AriaPy.ArRobot_getAnalogPortSelected(self)

    def getAnalog(self):
        """getAnalog(self) -> unsigned char"""
        return _AriaPy.ArRobot_getAnalog(self)

    def getDigIn(self):
        """getDigIn(self) -> unsigned char"""
        return _AriaPy.ArRobot_getDigIn(self)

    def getDigOut(self):
        """getDigOut(self) -> unsigned char"""
        return _AriaPy.ArRobot_getDigOut(self)

    def getChargeState(self):
        """getChargeState(self) -> ChargeState"""
        return _AriaPy.ArRobot_getChargeState(self)

    def getChargeStateName(self):
        """getChargeStateName(self) -> char"""
        return _AriaPy.ArRobot_getChargeStateName(self)

    def isChargerPowerGood(self):
        """isChargerPowerGood(self) -> bool"""
        return _AriaPy.ArRobot_isChargerPowerGood(self)

    def getIOAnalogSize(self):
        """getIOAnalogSize(self) -> int"""
        return _AriaPy.ArRobot_getIOAnalogSize(self)

    def getIODigInSize(self):
        """getIODigInSize(self) -> int"""
        return _AriaPy.ArRobot_getIODigInSize(self)

    def getIODigOutSize(self):
        """getIODigOutSize(self) -> int"""
        return _AriaPy.ArRobot_getIODigOutSize(self)

    def getIOAnalog(self, *args):
        """getIOAnalog(self, int num) -> int"""
        return _AriaPy.ArRobot_getIOAnalog(self, *args)

    def getIOAnalogVoltage(self, *args):
        """getIOAnalogVoltage(self, int num) -> double"""
        return _AriaPy.ArRobot_getIOAnalogVoltage(self, *args)

    def getIODigIn(self, *args):
        """getIODigIn(self, int num) -> unsigned char"""
        return _AriaPy.ArRobot_getIODigIn(self, *args)

    def getIODigOut(self, *args):
        """getIODigOut(self, int num) -> unsigned char"""
        return _AriaPy.ArRobot_getIODigOut(self, *args)

    def hasTableSensingIR(self):
        """hasTableSensingIR(self) -> bool"""
        return _AriaPy.ArRobot_hasTableSensingIR(self)

    def isLeftTableSensingIRTriggered(self):
        """isLeftTableSensingIRTriggered(self) -> bool"""
        return _AriaPy.ArRobot_isLeftTableSensingIRTriggered(self)

    def isRightTableSensingIRTriggered(self):
        """isRightTableSensingIRTriggered(self) -> bool"""
        return _AriaPy.ArRobot_isRightTableSensingIRTriggered(self)

    def isLeftBreakBeamTriggered(self):
        """isLeftBreakBeamTriggered(self) -> bool"""
        return _AriaPy.ArRobot_isLeftBreakBeamTriggered(self)

    def isRightBreakBeamTriggered(self):
        """isRightBreakBeamTriggered(self) -> bool"""
        return _AriaPy.ArRobot_isRightBreakBeamTriggered(self)

    def getIOPacketTime(self):
        """getIOPacketTime(self) -> ArTime"""
        return _AriaPy.ArRobot_getIOPacketTime(self)

    def hasFrontBumpers(self):
        """hasFrontBumpers(self) -> bool"""
        return _AriaPy.ArRobot_hasFrontBumpers(self)

    def getNumFrontBumpers(self):
        """getNumFrontBumpers(self) -> unsigned int"""
        return _AriaPy.ArRobot_getNumFrontBumpers(self)

    def hasRearBumpers(self):
        """hasRearBumpers(self) -> bool"""
        return _AriaPy.ArRobot_hasRearBumpers(self)

    def getNumRearBumpers(self):
        """getNumRearBumpers(self) -> unsigned int"""
        return _AriaPy.ArRobot_getNumRearBumpers(self)

    def getEncoderPose(self):
        """getEncoderPose(self) -> ArPose"""
        return _AriaPy.ArRobot_getEncoderPose(self)

    def getEncoderX(self):
        """getEncoderX(self) -> double"""
        return _AriaPy.ArRobot_getEncoderX(self)

    def getEncoderY(self):
        """getEncoderY(self) -> double"""
        return _AriaPy.ArRobot_getEncoderY(self)

    def getEncoderTh(self):
        """getEncoderTh(self) -> double"""
        return _AriaPy.ArRobot_getEncoderTh(self)

    def isTryingToMove(self):
        """isTryingToMove(self) -> bool"""
        return _AriaPy.ArRobot_isTryingToMove(self)

    def forceTryingToMove(self):
        """forceTryingToMove(self)"""
        return _AriaPy.ArRobot_forceTryingToMove(self)

    def getMotorPacCount(self):
        """getMotorPacCount(self) -> int"""
        return _AriaPy.ArRobot_getMotorPacCount(self)

    def getSonarPacCount(self):
        """getSonarPacCount(self) -> int"""
        return _AriaPy.ArRobot_getSonarPacCount(self)

    def getSonarRange(self, *args):
        """getSonarRange(self, int num) -> int"""
        return _AriaPy.ArRobot_getSonarRange(self, *args)

    def isSonarNew(self, *args):
        """isSonarNew(self, int num) -> bool"""
        return _AriaPy.ArRobot_isSonarNew(self, *args)

    def getNumSonar(self):
        """getNumSonar(self) -> int"""
        return _AriaPy.ArRobot_getNumSonar(self)

    def getSonarReading(self, *args):
        """getSonarReading(self, int num) -> ArSensorReading"""
        return _AriaPy.ArRobot_getSonarReading(self, *args)

    def getClosestSonarRange(self, *args):
        """getClosestSonarRange(self, double startAngle, double endAngle) -> int"""
        return _AriaPy.ArRobot_getClosestSonarRange(self, *args)

    def getClosestSonarNumber(self, *args):
        """getClosestSonarNumber(self, double startAngle, double endAngle) -> int"""
        return _AriaPy.ArRobot_getClosestSonarNumber(self, *args)

    def getName(self):
        """getName(self) -> char"""
        return _AriaPy.ArRobot_getName(self)

    def setName(self, *args):
        """setName(self, char name)"""
        return _AriaPy.ArRobot_setName(self, *args)

    def moveTo(self, *args):
        """
        moveTo(self, ArPose pose, bool doCumulative = True)
        moveTo(self, ArPose pose)
        moveTo(self, ArPose to, ArPose _from, bool doCumulative = True)
        moveTo(self, ArPose to, ArPose _from)
        """
        return _AriaPy.ArRobot_moveTo(self, *args)

    def setStateOfCharge(self, *args):
        """setStateOfCharge(self, double stateOfCharge)"""
        return _AriaPy.ArRobot_setStateOfCharge(self, *args)

    def setStateOfChargeLow(self, *args):
        """setStateOfChargeLow(self, double stateOfChargeLow)"""
        return _AriaPy.ArRobot_setStateOfChargeLow(self, *args)

    def setStateOfChargeShutdown(self, *args):
        """setStateOfChargeShutdown(self, double stateOfChargeShutdown)"""
        return _AriaPy.ArRobot_setStateOfChargeShutdown(self, *args)

    def setChargeState(self, *args):
        """setChargeState(self, ChargeState chargeState)"""
        return _AriaPy.ArRobot_setChargeState(self, *args)

    def setIsChargerPowerGood(self, *args):
        """setIsChargerPowerGood(self, bool onCharger)"""
        return _AriaPy.ArRobot_setIsChargerPowerGood(self, *args)

    def setIgnoreMicroControllerBatteryInfo(self, *args):
        """setIgnoreMicroControllerBatteryInfo(self, bool ignoreMicroControllerBatteryInfo)"""
        return _AriaPy.ArRobot_setIgnoreMicroControllerBatteryInfo(self, *args)

    def setBatteryInfo(self, *args):
        """
        setBatteryInfo(self, double realBatteryVoltage, double normalizedBatteryVoltage, 
            bool haveStateOfCharge, double stateOfCharge)
        """
        return _AriaPy.ArRobot_setBatteryInfo(self, *args)

    def getBatteryVoltageAverageOfNum(self):
        """getBatteryVoltageAverageOfNum(self) -> size_t"""
        return _AriaPy.ArRobot_getBatteryVoltageAverageOfNum(self)

    def setBatteryVoltageAverageOfNum(self, *args):
        """setBatteryVoltageAverageOfNum(self, size_t numToAverage)"""
        return _AriaPy.ArRobot_setBatteryVoltageAverageOfNum(self, *args)

    def getRealBatteryVoltageAverageOfNum(self):
        """getRealBatteryVoltageAverageOfNum(self) -> size_t"""
        return _AriaPy.ArRobot_getRealBatteryVoltageAverageOfNum(self)

    def setRealBatteryVoltageAverageOfNum(self, *args):
        """setRealBatteryVoltageAverageOfNum(self, size_t numToAverage)"""
        return _AriaPy.ArRobot_setRealBatteryVoltageAverageOfNum(self, *args)

    def hasTemperature(self):
        """hasTemperature(self) -> bool"""
        return _AriaPy.ArRobot_hasTemperature(self)

    def getTemperature(self):
        """getTemperature(self) -> int"""
        return _AriaPy.ArRobot_getTemperature(self)

    def requestEncoderPackets(self):
        """requestEncoderPackets(self)"""
        return _AriaPy.ArRobot_requestEncoderPackets(self)

    def requestIOPackets(self):
        """requestIOPackets(self)"""
        return _AriaPy.ArRobot_requestIOPackets(self)

    def stopEncoderPackets(self):
        """stopEncoderPackets(self)"""
        return _AriaPy.ArRobot_stopEncoderPackets(self)

    def stopIOPackets(self):
        """stopIOPackets(self)"""
        return _AriaPy.ArRobot_stopIOPackets(self)

    def haveRequestedEncoderPackets(self):
        """haveRequestedEncoderPackets(self) -> bool"""
        return _AriaPy.ArRobot_haveRequestedEncoderPackets(self)

    def haveRequestedIOPackets(self):
        """haveRequestedIOPackets(self) -> bool"""
        return _AriaPy.ArRobot_haveRequestedIOPackets(self)

    def getLeftEncoder(self):
        """getLeftEncoder(self) -> long"""
        return _AriaPy.ArRobot_getLeftEncoder(self)

    def getRightEncoder(self):
        """getRightEncoder(self) -> long"""
        return _AriaPy.ArRobot_getRightEncoder(self)

    def setEncoderTransform(self, *args):
        """
        setEncoderTransform(self, ArPose deadReconPos, ArPose globalPos)
        setEncoderTransform(self, ArPose transformPos)
        setEncoderTransform(self, ArTransform transform)
        """
        return _AriaPy.ArRobot_setEncoderTransform(self, *args)

    def setEncoderPose(self, *args):
        """setEncoderPose(self, ArPose encoderPose)"""
        return _AriaPy.ArRobot_setEncoderPose(self, *args)

    def setRawEncoderPose(self, *args):
        """setRawEncoderPose(self, ArPose rawEncoderPose)"""
        return _AriaPy.ArRobot_setRawEncoderPose(self, *args)

    def addSetEncoderTransformCB(self, *args):
        """
        addSetEncoderTransformCB(self, ArFunctor functor, int position = 50)
        addSetEncoderTransformCB(self, ArFunctor functor)
        """
        return _AriaPy.ArRobot_addSetEncoderTransformCB(self, *args)

    def remSetEncoderTransformCB(self, *args):
        """remSetEncoderTransformCB(self, ArFunctor functor)"""
        return _AriaPy.ArRobot_remSetEncoderTransformCB(self, *args)

    def setMTXTimeUSecCB(self, *args):
        """setMTXTimeUSecCB(self, ArRetFunctor1<(bool,p.ArTypes::UByte4)> functor)"""
        return _AriaPy.ArRobot_setMTXTimeUSecCB(self, *args)

    def getEncoderTransform(self):
        """getEncoderTransform(self) -> ArTransform"""
        return _AriaPy.ArRobot_getEncoderTransform(self)

    def getToGlobalTransform(self):
        """getToGlobalTransform(self) -> ArTransform"""
        return _AriaPy.ArRobot_getToGlobalTransform(self)

    def getToLocalTransform(self):
        """getToLocalTransform(self) -> ArTransform"""
        return _AriaPy.ArRobot_getToLocalTransform(self)

    def applyTransform(self, *args):
        """
        applyTransform(self, ArTransform trans, bool doCumulative = True)
        applyTransform(self, ArTransform trans)
        """
        return _AriaPy.ArRobot_applyTransform(self, *args)

    def setDeadReconPose(self, *args):
        """setDeadReconPose(self, ArPose pose)"""
        return _AriaPy.ArRobot_setDeadReconPose(self, *args)

    def getTripOdometerDistance(self):
        """getTripOdometerDistance(self) -> double"""
        return _AriaPy.ArRobot_getTripOdometerDistance(self)

    def getTripOdometerDegrees(self):
        """getTripOdometerDegrees(self) -> double"""
        return _AriaPy.ArRobot_getTripOdometerDegrees(self)

    def getTripOdometerTime(self):
        """getTripOdometerTime(self) -> double"""
        return _AriaPy.ArRobot_getTripOdometerTime(self)

    def resetTripOdometer(self):
        """resetTripOdometer(self)"""
        return _AriaPy.ArRobot_resetTripOdometer(self)

    def getOdometerDistance(self):
        """getOdometerDistance(self) -> double"""
        return _AriaPy.ArRobot_getOdometerDistance(self)

    def getOdometerDistanceMeters(self):
        """getOdometerDistanceMeters(self) -> double"""
        return _AriaPy.ArRobot_getOdometerDistanceMeters(self)

    def getOdometerDegrees(self):
        """getOdometerDegrees(self) -> double"""
        return _AriaPy.ArRobot_getOdometerDegrees(self)

    def getOdometerTime(self):
        """getOdometerTime(self) -> double"""
        return _AriaPy.ArRobot_getOdometerTime(self)

    def getOdometerTimeMinutes(self):
        """getOdometerTimeMinutes(self) -> double"""
        return _AriaPy.ArRobot_getOdometerTimeMinutes(self)

    def addRangeDevice(self, *args):
        """addRangeDevice(self, ArRangeDevice device)"""
        return _AriaPy.ArRobot_addRangeDevice(self, *args)

    def remRangeDevice(self, *args):
        """
        remRangeDevice(self, char name)
        remRangeDevice(self, ArRangeDevice device)
        """
        return _AriaPy.ArRobot_remRangeDevice(self, *args)

    def findRangeDevice(self, *args):
        """
        findRangeDevice(self, char name, bool ignoreCase = False) -> ArRangeDevice
        findRangeDevice(self, char name) -> ArRangeDevice
        findRangeDevice(self, char name, bool ignoreCase = False) -> ArRangeDevice
        findRangeDevice(self, char name) -> ArRangeDevice
        """
        return _AriaPy.ArRobot_findRangeDevice(self, *args)

    def getRangeDeviceList(self):
        """getRangeDeviceList(self) -> ArRangeDevicePtrList"""
        return _AriaPy.ArRobot_getRangeDeviceList(self)

    def hasRangeDevice(self, *args):
        """hasRangeDevice(self, ArRangeDevice device) -> bool"""
        return _AriaPy.ArRobot_hasRangeDevice(self, *args)

    def checkRangeDevicesCurrentPolar(self, *args):
        """
        checkRangeDevicesCurrentPolar(self, double startAngle, double endAngle, double angle = None, 
            ArRangeDevice rangeDevice = None, bool useLocationDependentDevices = True) -> double
        checkRangeDevicesCurrentPolar(self, double startAngle, double endAngle, double angle = None, 
            ArRangeDevice rangeDevice = None) -> double
        checkRangeDevicesCurrentPolar(self, double startAngle, double endAngle, double angle = None) -> double
        checkRangeDevicesCurrentPolar(self, double startAngle, double endAngle) -> double
        """
        return _AriaPy.ArRobot_checkRangeDevicesCurrentPolar(self, *args)

    def checkRangeDevicesCumulativePolar(self, *args):
        """
        checkRangeDevicesCumulativePolar(self, double startAngle, double endAngle, double angle = None, 
            ArRangeDevice rangeDevice = None, bool useLocationDependentDevices = True) -> double
        checkRangeDevicesCumulativePolar(self, double startAngle, double endAngle, double angle = None, 
            ArRangeDevice rangeDevice = None) -> double
        checkRangeDevicesCumulativePolar(self, double startAngle, double endAngle, double angle = None) -> double
        checkRangeDevicesCumulativePolar(self, double startAngle, double endAngle) -> double
        """
        return _AriaPy.ArRobot_checkRangeDevicesCumulativePolar(self, *args)

    def checkRangeDevicesCurrentBox(self, *args):
        """
        checkRangeDevicesCurrentBox(self, double x1, double y1, double x2, double y2, ArPose readingPos = None, 
            ArRangeDevice rangeDevice = None, 
            bool useLocationDependentDevices = True) -> double
        checkRangeDevicesCurrentBox(self, double x1, double y1, double x2, double y2, ArPose readingPos = None, 
            ArRangeDevice rangeDevice = None) -> double
        checkRangeDevicesCurrentBox(self, double x1, double y1, double x2, double y2, ArPose readingPos = None) -> double
        checkRangeDevicesCurrentBox(self, double x1, double y1, double x2, double y2) -> double
        """
        return _AriaPy.ArRobot_checkRangeDevicesCurrentBox(self, *args)

    def checkRangeDevicesCumulativeBox(self, *args):
        """
        checkRangeDevicesCumulativeBox(self, double x1, double y1, double x2, double y2, ArPose readingPos = None, 
            ArRangeDevice rangeDevice = None, 
            bool useLocationDependentDevices = True) -> double
        checkRangeDevicesCumulativeBox(self, double x1, double y1, double x2, double y2, ArPose readingPos = None, 
            ArRangeDevice rangeDevice = None) -> double
        checkRangeDevicesCumulativeBox(self, double x1, double y1, double x2, double y2, ArPose readingPos = None) -> double
        checkRangeDevicesCumulativeBox(self, double x1, double y1, double x2, double y2) -> double
        """
        return _AriaPy.ArRobot_checkRangeDevicesCumulativeBox(self, *args)

    def addLaser(self, *args):
        """
        addLaser(self, ArLaser laser, int laserNumber, bool addAsRangeDevice = True) -> bool
        addLaser(self, ArLaser laser, int laserNumber) -> bool
        """
        return _AriaPy.ArRobot_addLaser(self, *args)

    def remLaser(self, *args):
        """
        remLaser(self, ArLaser laser, bool removeAsRangeDevice = True) -> bool
        remLaser(self, ArLaser laser) -> bool
        remLaser(self, int laserNumber, bool removeAsRangeDevice = True) -> bool
        remLaser(self, int laserNumber) -> bool
        """
        return _AriaPy.ArRobot_remLaser(self, *args)

    def findLaser(self, *args):
        """
        findLaser(self, int laserNumber) -> ArLaser
        findLaser(self, int laserNumber) -> ArLaser
        """
        return _AriaPy.ArRobot_findLaser(self, *args)

    def getLaserMap(self, *args):
        """
        getLaserMap(self) -> std::map<(int,p.ArLaser,std::less<(int)>,std::allocator<(std::pair<(q(const).int,p.ArLaser)>)>)>
        getLaserMap(self) -> std::map<(int,p.ArLaser,std::less<(int)>,std::allocator<(std::pair<(q(const).int,p.ArLaser)>)>)>
        """
        return _AriaPy.ArRobot_getLaserMap(self, *args)

    def hasLaser(self, *args):
        """hasLaser(self, ArLaser device) -> bool"""
        return _AriaPy.ArRobot_hasLaser(self, *args)

    def addBattery(self, *args):
        """addBattery(self, ArBatteryMTX battery, int batteryNumber) -> bool"""
        return _AriaPy.ArRobot_addBattery(self, *args)

    def remBattery(self, *args):
        """
        remBattery(self, ArBatteryMTX battery) -> bool
        remBattery(self, int batteryNumber) -> bool
        """
        return _AriaPy.ArRobot_remBattery(self, *args)

    def findBattery(self, *args):
        """
        findBattery(self, int batteryNumber) -> ArBatteryMTX
        findBattery(self, int batteryNumber) -> ArBatteryMTX
        """
        return _AriaPy.ArRobot_findBattery(self, *args)

    def getBatteryMap(self, *args):
        """
        getBatteryMap(self) -> std::map<(int,p.ArBatteryMTX,std::less<(int)>,std::allocator<(std::pair<(q(const).int,p.ArBatteryMTX)>)>)>
        getBatteryMap(self) -> std::map<(int,p.ArBatteryMTX,std::less<(int)>,std::allocator<(std::pair<(q(const).int,p.ArBatteryMTX)>)>)>
        """
        return _AriaPy.ArRobot_getBatteryMap(self, *args)

    def hasBattery(self, *args):
        """hasBattery(self, ArBatteryMTX device) -> bool"""
        return _AriaPy.ArRobot_hasBattery(self, *args)

    def addLCD(self, *args):
        """addLCD(self, ArLCDMTX lcd, int lcdNumber) -> bool"""
        return _AriaPy.ArRobot_addLCD(self, *args)

    def remLCD(self, *args):
        """
        remLCD(self, ArLCDMTX lcd) -> bool
        remLCD(self, int lcdNumber) -> bool
        """
        return _AriaPy.ArRobot_remLCD(self, *args)

    def findLCD(self, *args):
        """
        findLCD(self, int lcdNumber = 1) -> ArLCDMTX
        findLCD(self) -> ArLCDMTX
        findLCD(self, int lcdNumber = 1) -> ArLCDMTX
        findLCD(self) -> ArLCDMTX
        """
        return _AriaPy.ArRobot_findLCD(self, *args)

    def getLCDMap(self, *args):
        """
        getLCDMap(self) -> std::map<(int,p.ArLCDMTX,std::less<(int)>,std::allocator<(std::pair<(q(const).int,p.ArLCDMTX)>)>)>
        getLCDMap(self) -> std::map<(int,p.ArLCDMTX,std::less<(int)>,std::allocator<(std::pair<(q(const).int,p.ArLCDMTX)>)>)>
        """
        return _AriaPy.ArRobot_getLCDMap(self, *args)

    def hasLCD(self, *args):
        """hasLCD(self, ArLCDMTX device) -> bool"""
        return _AriaPy.ArRobot_hasLCD(self, *args)

    def addSonar(self, *args):
        """addSonar(self, ArSonarMTX sonar, int sonarNumber) -> bool"""
        return _AriaPy.ArRobot_addSonar(self, *args)

    def remSonar(self, *args):
        """
        remSonar(self, ArSonarMTX sonar) -> bool
        remSonar(self, int sonarNumber) -> bool
        """
        return _AriaPy.ArRobot_remSonar(self, *args)

    def findSonar(self, *args):
        """
        findSonar(self, int sonarNumber) -> ArSonarMTX
        findSonar(self, int sonarNumber) -> ArSonarMTX
        """
        return _AriaPy.ArRobot_findSonar(self, *args)

    def getSonarMap(self, *args):
        """
        getSonarMap(self) -> std::map<(int,p.ArSonarMTX,std::less<(int)>,std::allocator<(std::pair<(q(const).int,p.ArSonarMTX)>)>)>
        getSonarMap(self) -> std::map<(int,p.ArSonarMTX,std::less<(int)>,std::allocator<(std::pair<(q(const).int,p.ArSonarMTX)>)>)>
        """
        return _AriaPy.ArRobot_getSonarMap(self, *args)

    def hasSonar(self, *args):
        """hasSonar(self, ArSonarMTX device) -> bool"""
        return _AriaPy.ArRobot_hasSonar(self, *args)

    def setPTZ(self, *args):
        """setPTZ(self, ArPTZ ptz)"""
        return _AriaPy.ArRobot_setPTZ(self, *args)

    def getPTZ(self):
        """getPTZ(self) -> ArPTZ"""
        return _AriaPy.ArRobot_getPTZ(self)

    def setStateReflectionRefreshTime(self, *args):
        """setStateReflectionRefreshTime(self, int msec)"""
        return _AriaPy.ArRobot_setStateReflectionRefreshTime(self, *args)

    def getStateReflectionRefreshTime(self):
        """getStateReflectionRefreshTime(self) -> int"""
        return _AriaPy.ArRobot_getStateReflectionRefreshTime(self)

    def addPacketHandler(self, *args):
        """
        addPacketHandler(self, ArRetFunctor1_Bool_ArRobotPacketP functor, Pos position = LAST)
        addPacketHandler(self, ArRetFunctor1_Bool_ArRobotPacketP functor)
        """
        return _AriaPy.ArRobot_addPacketHandler(self, *args)

    def remPacketHandler(self, *args):
        """remPacketHandler(self, ArRetFunctor1_Bool_ArRobotPacketP functor)"""
        return _AriaPy.ArRobot_remPacketHandler(self, *args)

    def addConnectCB(self, *args):
        """
        addConnectCB(self, ArFunctor functor, Pos position = LAST)
        addConnectCB(self, ArFunctor functor)
        """
        return _AriaPy.ArRobot_addConnectCB(self, *args)

    def remConnectCB(self, *args):
        """remConnectCB(self, ArFunctor functor)"""
        return _AriaPy.ArRobot_remConnectCB(self, *args)

    def addFailedConnectCB(self, *args):
        """
        addFailedConnectCB(self, ArFunctor functor, Pos position = LAST)
        addFailedConnectCB(self, ArFunctor functor)
        """
        return _AriaPy.ArRobot_addFailedConnectCB(self, *args)

    def remFailedConnectCB(self, *args):
        """remFailedConnectCB(self, ArFunctor functor)"""
        return _AriaPy.ArRobot_remFailedConnectCB(self, *args)

    def addDisconnectNormallyCB(self, *args):
        """
        addDisconnectNormallyCB(self, ArFunctor functor, Pos position = LAST)
        addDisconnectNormallyCB(self, ArFunctor functor)
        """
        return _AriaPy.ArRobot_addDisconnectNormallyCB(self, *args)

    def remDisconnectNormallyCB(self, *args):
        """remDisconnectNormallyCB(self, ArFunctor functor)"""
        return _AriaPy.ArRobot_remDisconnectNormallyCB(self, *args)

    def addDisconnectOnErrorCB(self, *args):
        """
        addDisconnectOnErrorCB(self, ArFunctor functor, Pos position = LAST)
        addDisconnectOnErrorCB(self, ArFunctor functor)
        """
        return _AriaPy.ArRobot_addDisconnectOnErrorCB(self, *args)

    def remDisconnectOnErrorCB(self, *args):
        """remDisconnectOnErrorCB(self, ArFunctor functor)"""
        return _AriaPy.ArRobot_remDisconnectOnErrorCB(self, *args)

    def addRunExitCB(self, *args):
        """
        addRunExitCB(self, ArFunctor functor, Pos position = LAST)
        addRunExitCB(self, ArFunctor functor)
        """
        return _AriaPy.ArRobot_addRunExitCB(self, *args)

    def remRunExitCB(self, *args):
        """remRunExitCB(self, ArFunctor functor)"""
        return _AriaPy.ArRobot_remRunExitCB(self, *args)

    def waitForConnect(self, msecs = 0):
        """
        waitForConnect(self, unsigned int msecs = 0) -> WaitState
        waitForConnect(self) -> WaitState
        """
        return _AriaPy.ArRobot_waitForConnect(self, msecs)

    def waitForConnectOrConnFail(self, msecs = 0):
        """
        waitForConnectOrConnFail(self, unsigned int msecs = 0) -> WaitState
        waitForConnectOrConnFail(self) -> WaitState
        """
        return _AriaPy.ArRobot_waitForConnectOrConnFail(self, msecs)

    def waitForRunExit(self, msecs = 0):
        """
        waitForRunExit(self, unsigned int msecs = 0) -> WaitState
        waitForRunExit(self) -> WaitState
        """
        return _AriaPy.ArRobot_waitForRunExit(self, msecs)

    def wakeAllWaitingThreads(self):
        """wakeAllWaitingThreads(self)"""
        return _AriaPy.ArRobot_wakeAllWaitingThreads(self)

    def wakeAllConnWaitingThreads(self):
        """wakeAllConnWaitingThreads(self)"""
        return _AriaPy.ArRobot_wakeAllConnWaitingThreads(self)

    def wakeAllConnOrFailWaitingThreads(self):
        """wakeAllConnOrFailWaitingThreads(self)"""
        return _AriaPy.ArRobot_wakeAllConnOrFailWaitingThreads(self)

    def wakeAllRunExitWaitingThreads(self):
        """wakeAllRunExitWaitingThreads(self)"""
        return _AriaPy.ArRobot_wakeAllRunExitWaitingThreads(self)

    def addUserTask(self, *args):
        """
        addUserTask(self, char name, int position, ArFunctor functor, State state = None) -> bool
        addUserTask(self, char name, int position, ArFunctor functor) -> bool
        """
        return _AriaPy.ArRobot_addUserTask(self, *args)

    def remUserTask(self, *args):
        """
        remUserTask(self, char name)
        remUserTask(self, ArFunctor functor)
        """
        return _AriaPy.ArRobot_remUserTask(self, *args)

    def findUserTask(self, *args):
        """
        findUserTask(self, char name) -> ArSyncTask
        findUserTask(self, ArFunctor functor) -> ArSyncTask
        """
        return _AriaPy.ArRobot_findUserTask(self, *args)

    def logUserTasks(self):
        """logUserTasks(self)"""
        return _AriaPy.ArRobot_logUserTasks(self)

    def logAllTasks(self):
        """logAllTasks(self)"""
        return _AriaPy.ArRobot_logAllTasks(self)

    def addSensorInterpTask(self, *args):
        """
        addSensorInterpTask(self, char name, int position, ArFunctor functor, State state = None) -> bool
        addSensorInterpTask(self, char name, int position, ArFunctor functor) -> bool
        """
        return _AriaPy.ArRobot_addSensorInterpTask(self, *args)

    def remSensorInterpTask(self, *args):
        """
        remSensorInterpTask(self, char name)
        remSensorInterpTask(self, ArFunctor functor)
        """
        return _AriaPy.ArRobot_remSensorInterpTask(self, *args)

    def findTask(self, *args):
        """
        findTask(self, char name) -> ArSyncTask
        findTask(self, ArFunctor functor) -> ArSyncTask
        """
        return _AriaPy.ArRobot_findTask(self, *args)

    def addAction(self, *args):
        """addAction(self, ArAction action, int priority) -> bool"""
        return _AriaPy.ArRobot_addAction(self, *args)

    def remAction(self, *args):
        """
        remAction(self, ArAction action) -> bool
        remAction(self, char actionName) -> bool
        """
        return _AriaPy.ArRobot_remAction(self, *args)

    def findAction(self, *args):
        """findAction(self, char actionName) -> ArAction"""
        return _AriaPy.ArRobot_findAction(self, *args)

    def getActionMap(self):
        """getActionMap(self) -> ActionMap"""
        return _AriaPy.ArRobot_getActionMap(self)

    def deactivateActions(self):
        """deactivateActions(self)"""
        return _AriaPy.ArRobot_deactivateActions(self)

    def logActions(self, logDeactivated = False):
        """
        logActions(self, bool logDeactivated = False)
        logActions(self)
        """
        return _AriaPy.ArRobot_logActions(self, logDeactivated)

    def getResolver(self):
        """getResolver(self) -> ArResolver"""
        return _AriaPy.ArRobot_getResolver(self)

    def setResolver(self, *args):
        """setResolver(self, ArResolver resolver)"""
        return _AriaPy.ArRobot_setResolver(self, *args)

    def setEncoderCorrectionCallback(self, *args):
        """setEncoderCorrectionCallback(self, ArRetFunctor1_Double_ArPoseWithTime functor)"""
        return _AriaPy.ArRobot_setEncoderCorrectionCallback(self, *args)

    def getEncoderCorrectionCallback(self):
        """getEncoderCorrectionCallback(self) -> ArRetFunctor1_Double_ArPoseWithTime"""
        return _AriaPy.ArRobot_getEncoderCorrectionCallback(self)

    def getConnectionOpenedTime(self):
        """getConnectionOpenedTime(self) -> ArTime"""
        return _AriaPy.ArRobot_getConnectionOpenedTime(self)

    def setCycleTime(self, *args):
        """setCycleTime(self, unsigned int ms)"""
        return _AriaPy.ArRobot_setCycleTime(self, *args)

    def getCycleTime(self):
        """getCycleTime(self) -> unsigned int"""
        return _AriaPy.ArRobot_getCycleTime(self)

    def setCycleWarningTime(self, *args):
        """setCycleWarningTime(self, unsigned int ms)"""
        return _AriaPy.ArRobot_setCycleWarningTime(self, *args)

    def getCycleWarningTime(self, *args):
        """
        getCycleWarningTime(self) -> unsigned int
        getCycleWarningTime(self) -> unsigned int
        """
        return _AriaPy.ArRobot_getCycleWarningTime(self, *args)

    def setConnectionCycleMultiplier(self, *args):
        """setConnectionCycleMultiplier(self, unsigned int multiplier)"""
        return _AriaPy.ArRobot_setConnectionCycleMultiplier(self, *args)

    def getConnectionCycleMultiplier(self):
        """getConnectionCycleMultiplier(self) -> unsigned int"""
        return _AriaPy.ArRobot_getConnectionCycleMultiplier(self)

    def setCycleChained(self, *args):
        """setCycleChained(self, bool cycleChained)"""
        return _AriaPy.ArRobot_setCycleChained(self, *args)

    def isCycleChained(self):
        """isCycleChained(self) -> bool"""
        return _AriaPy.ArRobot_isCycleChained(self)

    def setConnectionTimeoutTime(self, *args):
        """setConnectionTimeoutTime(self, int mSecs)"""
        return _AriaPy.ArRobot_setConnectionTimeoutTime(self, *args)

    def getConnectionTimeoutTime(self):
        """getConnectionTimeoutTime(self) -> int"""
        return _AriaPy.ArRobot_getConnectionTimeoutTime(self)

    def getLastPacketTime(self):
        """getLastPacketTime(self) -> ArTime"""
        return _AriaPy.ArRobot_getLastPacketTime(self)

    def getLastOdometryTime(self):
        """getLastOdometryTime(self) -> ArTime"""
        return _AriaPy.ArRobot_getLastOdometryTime(self)

    def setPoseInterpNumReadings(self, *args):
        """setPoseInterpNumReadings(self, size_t numReadings)"""
        return _AriaPy.ArRobot_setPoseInterpNumReadings(self, *args)

    def getPoseInterpNumReadings(self):
        """getPoseInterpNumReadings(self) -> size_t"""
        return _AriaPy.ArRobot_getPoseInterpNumReadings(self)

    def getPoseInterpPosition(self, *args):
        """
        getPoseInterpPosition(self, ArTime timeStamp, ArPose position, ArPoseWithTime mostRecent = None) -> int
        getPoseInterpPosition(self, ArTime timeStamp, ArPose position) -> int
        """
        return _AriaPy.ArRobot_getPoseInterpPosition(self, *args)

    def getPoseInterpolation(self):
        """getPoseInterpolation(self) -> ArInterpolation"""
        return _AriaPy.ArRobot_getPoseInterpolation(self)

    def getPoseInterpPositionCallback(self):
        """getPoseInterpPositionCallback(self) -> ArRetFunctor3<(int,ArTime,p.ArPose,p.ArPoseWithTime)>"""
        return _AriaPy.ArRobot_getPoseInterpPositionCallback(self)

    def setEncoderPoseInterpNumReadings(self, *args):
        """setEncoderPoseInterpNumReadings(self, size_t numReadings)"""
        return _AriaPy.ArRobot_setEncoderPoseInterpNumReadings(self, *args)

    def getEncoderPoseInterpNumReadings(self):
        """getEncoderPoseInterpNumReadings(self) -> size_t"""
        return _AriaPy.ArRobot_getEncoderPoseInterpNumReadings(self)

    def getEncoderPoseInterpPosition(self, *args):
        """
        getEncoderPoseInterpPosition(self, ArTime timeStamp, ArPose position, ArPoseWithTime mostRecent = None) -> int
        getEncoderPoseInterpPosition(self, ArTime timeStamp, ArPose position) -> int
        """
        return _AriaPy.ArRobot_getEncoderPoseInterpPosition(self, *args)

    def getEncoderPoseInterpolation(self):
        """getEncoderPoseInterpolation(self) -> ArInterpolation"""
        return _AriaPy.ArRobot_getEncoderPoseInterpolation(self)

    def getEncoderPoseInterpPositionCallback(self):
        """getEncoderPoseInterpPositionCallback(self) -> ArRetFunctor3<(int,ArTime,p.ArPose,p.ArPoseWithTime)>"""
        return _AriaPy.ArRobot_getEncoderPoseInterpPositionCallback(self)

    def applyEncoderOffset(self, *args):
        """applyEncoderOffset(self, ArPoseWithTime _from, ArTime to, ArPose result) -> int"""
        return _AriaPy.ArRobot_applyEncoderOffset(self, *args)

    def getCounter(self):
        """getCounter(self) -> unsigned int"""
        return _AriaPy.ArRobot_getCounter(self)

    def getRobotParams(self):
        """getRobotParams(self) -> ArRobotParams"""
        return _AriaPy.ArRobot_getRobotParams(self)

    def setRequireConfigPacket(self, *args):
        """setRequireConfigPacket(self, bool requireConfigPacket)"""
        return _AriaPy.ArRobot_setRequireConfigPacket(self, *args)

    def getOrigRobotConfig(self):
        """getOrigRobotConfig(self) -> ArRobotConfigPacketReader"""
        return _AriaPy.ArRobot_getOrigRobotConfig(self)

    def getBatteryPacketReader(self):
        """getBatteryPacketReader(self) -> ArRobotBatteryPacketReader"""
        return _AriaPy.ArRobot_getBatteryPacketReader(self)

    def setTransVelMax(self, *args):
        """setTransVelMax(self, double vel)"""
        return _AriaPy.ArRobot_setTransVelMax(self, *args)

    def setTransNegVelMax(self, *args):
        """setTransNegVelMax(self, double negVel)"""
        return _AriaPy.ArRobot_setTransNegVelMax(self, *args)

    def setTransAccel(self, *args):
        """setTransAccel(self, double acc)"""
        return _AriaPy.ArRobot_setTransAccel(self, *args)

    def setTransDecel(self, *args):
        """setTransDecel(self, double decel)"""
        return _AriaPy.ArRobot_setTransDecel(self, *args)

    def setRotVelMax(self, *args):
        """setRotVelMax(self, double vel)"""
        return _AriaPy.ArRobot_setRotVelMax(self, *args)

    def setRotAccel(self, *args):
        """setRotAccel(self, double acc)"""
        return _AriaPy.ArRobot_setRotAccel(self, *args)

    def setRotDecel(self, *args):
        """setRotDecel(self, double decel)"""
        return _AriaPy.ArRobot_setRotDecel(self, *args)

    def setLatVelMax(self, *args):
        """setLatVelMax(self, double vel)"""
        return _AriaPy.ArRobot_setLatVelMax(self, *args)

    def setLatAccel(self, *args):
        """setLatAccel(self, double acc)"""
        return _AriaPy.ArRobot_setLatAccel(self, *args)

    def setLatDecel(self, *args):
        """setLatDecel(self, double decel)"""
        return _AriaPy.ArRobot_setLatDecel(self, *args)

    def hasSettableVelMaxes(self):
        """hasSettableVelMaxes(self) -> bool"""
        return _AriaPy.ArRobot_hasSettableVelMaxes(self)

    def getTransVelMax(self):
        """getTransVelMax(self) -> double"""
        return _AriaPy.ArRobot_getTransVelMax(self)

    def getTransNegVelMax(self):
        """getTransNegVelMax(self) -> double"""
        return _AriaPy.ArRobot_getTransNegVelMax(self)

    def getRotVelMax(self):
        """getRotVelMax(self) -> double"""
        return _AriaPy.ArRobot_getRotVelMax(self)

    def hasSettableAccsDecs(self):
        """hasSettableAccsDecs(self) -> bool"""
        return _AriaPy.ArRobot_hasSettableAccsDecs(self)

    def getTransAccel(self):
        """getTransAccel(self) -> double"""
        return _AriaPy.ArRobot_getTransAccel(self)

    def getTransDecel(self):
        """getTransDecel(self) -> double"""
        return _AriaPy.ArRobot_getTransDecel(self)

    def getRotAccel(self):
        """getRotAccel(self) -> double"""
        return _AriaPy.ArRobot_getRotAccel(self)

    def getRotDecel(self):
        """getRotDecel(self) -> double"""
        return _AriaPy.ArRobot_getRotDecel(self)

    def getLatVelMax(self):
        """getLatVelMax(self) -> double"""
        return _AriaPy.ArRobot_getLatVelMax(self)

    def getLatAccel(self):
        """getLatAccel(self) -> double"""
        return _AriaPy.ArRobot_getLatAccel(self)

    def getLatDecel(self):
        """getLatDecel(self) -> double"""
        return _AriaPy.ArRobot_getLatDecel(self)

    def loadParamFile(self, *args):
        """loadParamFile(self, char file) -> bool"""
        return _AriaPy.ArRobot_loadParamFile(self, *args)

    def setRobotParams(self, *args):
        """setRobotParams(self, ArRobotParams params)"""
        return _AriaPy.ArRobot_setRobotParams(self, *args)

    def attachKeyHandler(self, *args):
        """
        attachKeyHandler(self, ArKeyHandler keyHandler, bool exitOnEscape = True, 
            bool useExitNotShutdown = True)
        attachKeyHandler(self, ArKeyHandler keyHandler, bool exitOnEscape = True)
        attachKeyHandler(self, ArKeyHandler keyHandler)
        """
        return _AriaPy.ArRobot_attachKeyHandler(self, *args)

    def getKeyHandler(self):
        """getKeyHandler(self) -> ArKeyHandler"""
        return _AriaPy.ArRobot_getKeyHandler(self)

    def lock(self):
        """lock(self) -> int"""
        return _AriaPy.ArRobot_lock(self)

    def tryLock(self):
        """tryLock(self) -> int"""
        return _AriaPy.ArRobot_tryLock(self)

    def unlock(self):
        """unlock(self) -> int"""
        return _AriaPy.ArRobot_unlock(self)

    def setMutexLogging(self, *args):
        """setMutexLogging(self, bool v)"""
        return _AriaPy.ArRobot_setMutexLogging(self, *args)

    def setMutexLockWarningTime(self, *args):
        """setMutexLockWarningTime(self, double sec)"""
        return _AriaPy.ArRobot_setMutexLockWarningTime(self, *args)

    def setMutexUnlockWarningTime(self, *args):
        """setMutexUnlockWarningTime(self, double sec)"""
        return _AriaPy.ArRobot_setMutexUnlockWarningTime(self, *args)

    def isStabilizing(self):
        """isStabilizing(self) -> bool"""
        return _AriaPy.ArRobot_isStabilizing(self)

    def setStabilizingTime(self, *args):
        """setStabilizingTime(self, int mSecs)"""
        return _AriaPy.ArRobot_setStabilizingTime(self, *args)

    def getStabilizingTime(self):
        """getStabilizingTime(self) -> int"""
        return _AriaPy.ArRobot_getStabilizingTime(self)

    def addStabilizingCB(self, *args):
        """
        addStabilizingCB(self, ArFunctor functor, Pos position = LAST)
        addStabilizingCB(self, ArFunctor functor)
        """
        return _AriaPy.ArRobot_addStabilizingCB(self, *args)

    def remStabilizingCB(self, *args):
        """remStabilizingCB(self, ArFunctor functor)"""
        return _AriaPy.ArRobot_remStabilizingCB(self, *args)

    def getSyncTaskRoot(self):
        """getSyncTaskRoot(self) -> ArSyncTask"""
        return _AriaPy.ArRobot_getSyncTaskRoot(self)

    def loopOnce(self):
        """loopOnce(self)"""
        return _AriaPy.ArRobot_loopOnce(self)

    def setOdometryDelay(self, *args):
        """setOdometryDelay(self, int msec)"""
        return _AriaPy.ArRobot_setOdometryDelay(self, *args)

    def getOdometryDelay(self):
        """getOdometryDelay(self) -> int"""
        return _AriaPy.ArRobot_getOdometryDelay(self)

    def getLogMovementSent(self):
        """getLogMovementSent(self) -> bool"""
        return _AriaPy.ArRobot_getLogMovementSent(self)

    def setLogMovementSent(self, *args):
        """setLogMovementSent(self, bool logMovementSent)"""
        return _AriaPy.ArRobot_setLogMovementSent(self, *args)

    def getLogMovementReceived(self):
        """getLogMovementReceived(self) -> bool"""
        return _AriaPy.ArRobot_getLogMovementReceived(self)

    def setLogMovementReceived(self, *args):
        """setLogMovementReceived(self, bool logMovementReceived)"""
        return _AriaPy.ArRobot_setLogMovementReceived(self, *args)

    def getLogVelocitiesReceived(self):
        """getLogVelocitiesReceived(self) -> bool"""
        return _AriaPy.ArRobot_getLogVelocitiesReceived(self)

    def setLogVelocitiesReceived(self, *args):
        """setLogVelocitiesReceived(self, bool logVelocitiesReceived)"""
        return _AriaPy.ArRobot_setLogVelocitiesReceived(self, *args)

    def getPacketsReceivedTracking(self):
        """getPacketsReceivedTracking(self) -> bool"""
        return _AriaPy.ArRobot_getPacketsReceivedTracking(self)

    def setPacketsReceivedTracking(self, *args):
        """setPacketsReceivedTracking(self, bool packetsReceivedTracking)"""
        return _AriaPy.ArRobot_setPacketsReceivedTracking(self, *args)

    def getLogSIPContents(self):
        """getLogSIPContents(self) -> bool"""
        return _AriaPy.ArRobot_getLogSIPContents(self)

    def setLogSIPContents(self, *args):
        """setLogSIPContents(self, bool logSIP)"""
        return _AriaPy.ArRobot_setLogSIPContents(self, *args)

    def getPacketsSentTracking(self):
        """getPacketsSentTracking(self) -> bool"""
        return _AriaPy.ArRobot_getPacketsSentTracking(self)

    def setPacketsSentTracking(self, *args):
        """setPacketsSentTracking(self, bool packetsSentTracking)"""
        return _AriaPy.ArRobot_setPacketsSentTracking(self, *args)

    def getLogActions(self):
        """getLogActions(self) -> bool"""
        return _AriaPy.ArRobot_getLogActions(self)

    def setLogActions(self, *args):
        """setLogActions(self, bool logActions)"""
        return _AriaPy.ArRobot_setLogActions(self, *args)

    def setDoNotSwitchBaud(self, *args):
        """setDoNotSwitchBaud(self, bool doNotSwitchBaud)"""
        return _AriaPy.ArRobot_setDoNotSwitchBaud(self, *args)

    def getDoNotSwitchBaud(self):
        """getDoNotSwitchBaud(self) -> bool"""
        return _AriaPy.ArRobot_getDoNotSwitchBaud(self)

    def incCounter(self):
        """incCounter(self)"""
        return _AriaPy.ArRobot_incCounter(self)

    def packetHandler(self):
        """packetHandler(self)"""
        return _AriaPy.ArRobot_packetHandler(self)

    def actionHandler(self):
        """actionHandler(self)"""
        return _AriaPy.ArRobot_actionHandler(self)

    def stateReflector(self):
        """stateReflector(self)"""
        return _AriaPy.ArRobot_stateReflector(self)

    def robotLocker(self):
        """robotLocker(self)"""
        return _AriaPy.ArRobot_robotLocker(self)

    def robotUnlocker(self):
        """robotUnlocker(self)"""
        return _AriaPy.ArRobot_robotUnlocker(self)

    def packetHandlerNonThreaded(self):
        """packetHandlerNonThreaded(self)"""
        return _AriaPy.ArRobot_packetHandlerNonThreaded(self)

    def packetHandlerThreadedProcessor(self):
        """packetHandlerThreadedProcessor(self)"""
        return _AriaPy.ArRobot_packetHandlerThreadedProcessor(self)

    def packetHandlerThreadedReader(self):
        """packetHandlerThreadedReader(self)"""
        return _AriaPy.ArRobot_packetHandlerThreadedReader(self)

    def keyHandlerExit(self):
        """keyHandlerExit(self)"""
        return _AriaPy.ArRobot_keyHandlerExit(self)

    def processMotorPacket(self, *args):
        """processMotorPacket(self, ArRobotPacket packet) -> bool"""
        return _AriaPy.ArRobot_processMotorPacket(self, *args)

    def processNewSonar(self, *args):
        """processNewSonar(self, char number, int range, ArTime timeReceived)"""
        return _AriaPy.ArRobot_processNewSonar(self, *args)

    def processEncoderPacket(self, *args):
        """processEncoderPacket(self, ArRobotPacket packet) -> bool"""
        return _AriaPy.ArRobot_processEncoderPacket(self, *args)

    def processIOPacket(self, *args):
        """processIOPacket(self, ArRobotPacket packet) -> bool"""
        return _AriaPy.ArRobot_processIOPacket(self, *args)

    def init(self):
        """init(self)"""
        return _AriaPy.ArRobot_init(self)

    def setUpSyncList(self):
        """setUpSyncList(self)"""
        return _AriaPy.ArRobot_setUpSyncList(self)

    def setUpPacketHandlers(self):
        """setUpPacketHandlers(self)"""
        return _AriaPy.ArRobot_setUpPacketHandlers(self)

    myMotorPacketCB = _swig_property(_AriaPy.ArRobot_myMotorPacketCB_get, _AriaPy.ArRobot_myMotorPacketCB_set)
    myEncoderPacketCB = _swig_property(_AriaPy.ArRobot_myEncoderPacketCB_get, _AriaPy.ArRobot_myEncoderPacketCB_set)
    myIOPacketCB = _swig_property(_AriaPy.ArRobot_myIOPacketCB_get, _AriaPy.ArRobot_myIOPacketCB_set)
    myPacketHandlerCB = _swig_property(_AriaPy.ArRobot_myPacketHandlerCB_get, _AriaPy.ArRobot_myPacketHandlerCB_set)
    myActionHandlerCB = _swig_property(_AriaPy.ArRobot_myActionHandlerCB_get, _AriaPy.ArRobot_myActionHandlerCB_set)
    myStateReflectorCB = _swig_property(_AriaPy.ArRobot_myStateReflectorCB_get, _AriaPy.ArRobot_myStateReflectorCB_set)
    myRobotLockerCB = _swig_property(_AriaPy.ArRobot_myRobotLockerCB_get, _AriaPy.ArRobot_myRobotLockerCB_set)
    myRobotUnlockerCB = _swig_property(_AriaPy.ArRobot_myRobotUnlockerCB_get, _AriaPy.ArRobot_myRobotUnlockerCB_set)
    myKeyHandlerExitCB = _swig_property(_AriaPy.ArRobot_myKeyHandlerExitCB_get, _AriaPy.ArRobot_myKeyHandlerExitCB_set)
    myKeyHandlerCB = _swig_property(_AriaPy.ArRobot_myKeyHandlerCB_get, _AriaPy.ArRobot_myKeyHandlerCB_set)
    def asyncConnectHandler(self, *args):
        """asyncConnectHandler(self, bool tryHarderToConnect) -> int"""
        return _AriaPy.ArRobot_asyncConnectHandler(self, *args)

    def dropConnection(self, technicalReason = "Lost connection to the microcontroller because of undefined error.", 
    userReason = None):
        """
        dropConnection(self, char technicalReason = "Lost connection to the microcontroller because of undefined error.", 
            char userReason = None)
        dropConnection(self, char technicalReason = "Lost connection to the microcontroller because of undefined error.")
        dropConnection(self)
        """
        return _AriaPy.ArRobot_dropConnection(self, technicalReason, userReason)

    def getDropConnectionReason(self):
        """getDropConnectionReason(self) -> char"""
        return _AriaPy.ArRobot_getDropConnectionReason(self)

    def getDropConnectionUserReason(self):
        """getDropConnectionUserReason(self) -> char"""
        return _AriaPy.ArRobot_getDropConnectionUserReason(self)

    def failedConnect(self):
        """failedConnect(self)"""
        return _AriaPy.ArRobot_failedConnect(self)

    def madeConnection(self, resetConnectionTime = True):
        """
        madeConnection(self, bool resetConnectionTime = True) -> bool
        madeConnection(self) -> bool
        """
        return _AriaPy.ArRobot_madeConnection(self, resetConnectionTime)

    def startStabilization(self):
        """startStabilization(self)"""
        return _AriaPy.ArRobot_startStabilization(self)

    def finishedConnection(self):
        """finishedConnection(self)"""
        return _AriaPy.ArRobot_finishedConnection(self)

    def cancelConnection(self):
        """cancelConnection(self)"""
        return _AriaPy.ArRobot_cancelConnection(self)

    def handlePacket(self, *args):
        """handlePacket(self, ArRobotPacket packet) -> bool"""
        return _AriaPy.ArRobot_handlePacket(self, *args)

    def getRunExitListCopy(self):
        """getRunExitListCopy(self) -> ArFunctorPtrList"""
        return _AriaPy.ArRobot_getRunExitListCopy(self)

    def processParamFile(self):
        """processParamFile(self)"""
        return _AriaPy.ArRobot_processParamFile(self)

    def getRawEncoderPose(self):
        """getRawEncoderPose(self) -> ArPose"""
        return _AriaPy.ArRobot_getRawEncoderPose(self)

    def getNoTimeWarningThisCycle(self):
        """getNoTimeWarningThisCycle(self) -> bool"""
        return _AriaPy.ArRobot_getNoTimeWarningThisCycle(self)

    def setNoTimeWarningThisCycle(self, *args):
        """setNoTimeWarningThisCycle(self, bool noTimeWarningThisCycle)"""
        return _AriaPy.ArRobot_setNoTimeWarningThisCycle(self, *args)

    myGetCycleWarningTimeCB = _swig_property(_AriaPy.ArRobot_myGetCycleWarningTimeCB_get, _AriaPy.ArRobot_myGetCycleWarningTimeCB_set)
    myGetNoTimeWarningThisCycleCB = _swig_property(_AriaPy.ArRobot_myGetNoTimeWarningThisCycleCB_get, _AriaPy.ArRobot_myGetNoTimeWarningThisCycleCB_set)
    def ariaExitCallback(self):
        """ariaExitCallback(self)"""
        return _AriaPy.ArRobot_ariaExitCallback(self)

    def setConnectWithNoParams(self, *args):
        """setConnectWithNoParams(self, bool connectWithNoParams)"""
        return _AriaPy.ArRobot_setConnectWithNoParams(self, *args)

    def getOSThread(self):
        """getOSThread(self) -> ThreadType"""
        return _AriaPy.ArRobot_getOSThread(self)

    def getAsyncConnectState(self):
        """getAsyncConnectState(self) -> int"""
        return _AriaPy.ArRobot_getAsyncConnectState(self)

    def getPacketSender(self):
        """getPacketSender(self) -> ArRobotPacketSender"""
        return _AriaPy.ArRobot_getPacketSender(self)

    def getPacketReceiver(self):
        """getPacketReceiver(self) -> ArRobotPacketReceiver"""
        return _AriaPy.ArRobot_getPacketReceiver(self)

    def getRobotParamsInternal(self):
        """getRobotParamsInternal(self) -> ArRobotParams"""
        return _AriaPy.ArRobot_getRobotParamsInternal(self)

    def internalSetFakeFirstEncoderPose(self, *args):
        """internalSetFakeFirstEncoderPose(self, bool fakeFirstEncoderPose)"""
        return _AriaPy.ArRobot_internalSetFakeFirstEncoderPose(self, *args)

    def internalIgnoreNextPacket(self):
        """internalIgnoreNextPacket(self)"""
        return _AriaPy.ArRobot_internalIgnoreNextPacket(self)

ArRobot_swigregister = _AriaPy.ArRobot_swigregister
ArRobot_swigregister(ArRobot)

class ArRobotConfig(object):
    """Proxy of C++ ArRobotConfig class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot) -> ArRobotConfig"""
        this = _AriaPy.new_ArRobotConfig(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArRobotConfig
    __del__ = lambda self : None;
    def addAnalogGyro(self, *args):
        """addAnalogGyro(self, ArAnalogGyro gyro)"""
        return _AriaPy.ArRobotConfig_addAnalogGyro(self, *args)

    def processFile(self):
        """processFile(self) -> bool"""
        return _AriaPy.ArRobotConfig_processFile(self)

    def connectCallback(self):
        """connectCallback(self)"""
        return _AriaPy.ArRobotConfig_connectCallback(self)

ArRobotConfig_swigregister = _AriaPy.ArRobotConfig_swigregister
ArRobotConfig_swigregister(ArRobotConfig)

class ArRobotConfigPacketReader(object):
    """Proxy of C++ ArRobotConfigPacketReader class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ArRobot robot, bool onlyOneRequest = False, ArFunctor packetedArrivedCB = None) -> ArRobotConfigPacketReader
        __init__(self, ArRobot robot, bool onlyOneRequest = False) -> ArRobotConfigPacketReader
        __init__(self, ArRobot robot) -> ArRobotConfigPacketReader
        """
        this = _AriaPy.new_ArRobotConfigPacketReader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArRobotConfigPacketReader
    __del__ = lambda self : None;
    def requestPacket(self):
        """requestPacket(self) -> bool"""
        return _AriaPy.ArRobotConfigPacketReader_requestPacket(self)

    def hasPacketBeenRequested(self):
        """hasPacketBeenRequested(self) -> bool"""
        return _AriaPy.ArRobotConfigPacketReader_hasPacketBeenRequested(self)

    def hasPacketArrived(self):
        """hasPacketArrived(self) -> bool"""
        return _AriaPy.ArRobotConfigPacketReader_hasPacketArrived(self)

    def getRobotPacket(self):
        """getRobotPacket(self) -> ArRobotPacket"""
        return _AriaPy.ArRobotConfigPacketReader_getRobotPacket(self)

    def log(self):
        """log(self)"""
        return _AriaPy.ArRobotConfigPacketReader_log(self)

    def logMovement(self):
        """logMovement(self)"""
        return _AriaPy.ArRobotConfigPacketReader_logMovement(self)

    def buildString(self):
        """buildString(self) -> string"""
        return _AriaPy.ArRobotConfigPacketReader_buildString(self)

    def buildStringMovement(self):
        """buildStringMovement(self) -> string"""
        return _AriaPy.ArRobotConfigPacketReader_buildStringMovement(self)

    def getType(self):
        """getType(self) -> char"""
        return _AriaPy.ArRobotConfigPacketReader_getType(self)

    def getSubType(self):
        """getSubType(self) -> char"""
        return _AriaPy.ArRobotConfigPacketReader_getSubType(self)

    def getSerialNumber(self):
        """getSerialNumber(self) -> char"""
        return _AriaPy.ArRobotConfigPacketReader_getSerialNumber(self)

    def getRotVelTop(self):
        """getRotVelTop(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getRotVelTop(self)

    def getTransVelTop(self):
        """getTransVelTop(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getTransVelTop(self)

    def getRotAccelTop(self):
        """getRotAccelTop(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getRotAccelTop(self)

    def getTransAccelTop(self):
        """getTransAccelTop(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getTransAccelTop(self)

    def getPwmMax(self):
        """getPwmMax(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getPwmMax(self)

    def getName(self):
        """getName(self) -> char"""
        return _AriaPy.ArRobotConfigPacketReader_getName(self)

    def getSipCycleTime(self):
        """getSipCycleTime(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getSipCycleTime(self)

    def getHostBaud(self):
        """getHostBaud(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getHostBaud(self)

    def getAux1Baud(self):
        """getAux1Baud(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getAux1Baud(self)

    def getHasGripper(self):
        """getHasGripper(self) -> bool"""
        return _AriaPy.ArRobotConfigPacketReader_getHasGripper(self)

    def getFrontSonar(self):
        """getFrontSonar(self) -> bool"""
        return _AriaPy.ArRobotConfigPacketReader_getFrontSonar(self)

    def getRearSonar(self):
        """getRearSonar(self) -> bool"""
        return _AriaPy.ArRobotConfigPacketReader_getRearSonar(self)

    def getLowBattery(self):
        """getLowBattery(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getLowBattery(self)

    def getRevCount(self):
        """getRevCount(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getRevCount(self)

    def getWatchdog(self):
        """getWatchdog(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getWatchdog(self)

    def getNormalMPacs(self):
        """getNormalMPacs(self) -> bool"""
        return _AriaPy.ArRobotConfigPacketReader_getNormalMPacs(self)

    def getStallVal(self):
        """getStallVal(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getStallVal(self)

    def getStallCount(self):
        """getStallCount(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getStallCount(self)

    def getJoyVel(self):
        """getJoyVel(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getJoyVel(self)

    def getJoyRotVel(self):
        """getJoyRotVel(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getJoyRotVel(self)

    def getRotVelMax(self):
        """getRotVelMax(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getRotVelMax(self)

    def getTransVelMax(self):
        """getTransVelMax(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getTransVelMax(self)

    def getRotAccel(self):
        """getRotAccel(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getRotAccel(self)

    def getRotDecel(self):
        """getRotDecel(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getRotDecel(self)

    def getRotKP(self):
        """getRotKP(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getRotKP(self)

    def getRotKV(self):
        """getRotKV(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getRotKV(self)

    def getRotKI(self):
        """getRotKI(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getRotKI(self)

    def getTransAccel(self):
        """getTransAccel(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getTransAccel(self)

    def getTransDecel(self):
        """getTransDecel(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getTransDecel(self)

    def getTransKP(self):
        """getTransKP(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getTransKP(self)

    def getTransKV(self):
        """getTransKV(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getTransKV(self)

    def getTransKI(self):
        """getTransKI(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getTransKI(self)

    def getFrontBumps(self):
        """getFrontBumps(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getFrontBumps(self)

    def getRearBumps(self):
        """getRearBumps(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getRearBumps(self)

    def getHasCharger(self):
        """getHasCharger(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getHasCharger(self)

    def getSonarCycle(self):
        """getSonarCycle(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getSonarCycle(self)

    def getResetBaud(self):
        """getResetBaud(self) -> bool"""
        return _AriaPy.ArRobotConfigPacketReader_getResetBaud(self)

    def getHasGyro(self):
        """getHasGyro(self) -> bool"""
        return _AriaPy.ArRobotConfigPacketReader_getHasGyro(self)

    def getGyroType(self):
        """getGyroType(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getGyroType(self)

    def getDriftFactor(self):
        """getDriftFactor(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getDriftFactor(self)

    def getAux2Baud(self):
        """getAux2Baud(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getAux2Baud(self)

    def getAux3Baud(self):
        """getAux3Baud(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getAux3Baud(self)

    def getTicksMM(self):
        """getTicksMM(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getTicksMM(self)

    def getShutdownVoltage(self):
        """getShutdownVoltage(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getShutdownVoltage(self)

    def getFirmwareVersion(self):
        """getFirmwareVersion(self) -> char"""
        return _AriaPy.ArRobotConfigPacketReader_getFirmwareVersion(self)

    def getGyroCW(self):
        """getGyroCW(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getGyroCW(self)

    def getGyroCCW(self):
        """getGyroCCW(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getGyroCCW(self)

    def getKinematicsDelay(self):
        """getKinematicsDelay(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getKinematicsDelay(self)

    def getLatVelTop(self):
        """getLatVelTop(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getLatVelTop(self)

    def getLatAccelTop(self):
        """getLatAccelTop(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getLatAccelTop(self)

    def getLatVelMax(self):
        """getLatVelMax(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getLatVelMax(self)

    def getLatAccel(self):
        """getLatAccel(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getLatAccel(self)

    def getLatDecel(self):
        """getLatDecel(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getLatDecel(self)

    def getPowerbotChargeThreshold(self):
        """getPowerbotChargeThreshold(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getPowerbotChargeThreshold(self)

    def getPDBPort(self):
        """getPDBPort(self) -> unsigned char"""
        return _AriaPy.ArRobotConfigPacketReader_getPDBPort(self)

    def getGyroRateLimit(self):
        """getGyroRateLimit(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getGyroRateLimit(self)

    def getHighTemperatureShutdown(self):
        """getHighTemperatureShutdown(self) -> char"""
        return _AriaPy.ArRobotConfigPacketReader_getHighTemperatureShutdown(self)

    def getPowerBits(self):
        """getPowerBits(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getPowerBits(self)

    def getBatteryType(self):
        """getBatteryType(self) -> unsigned char"""
        return _AriaPy.ArRobotConfigPacketReader_getBatteryType(self)

    def getStateOfChargeLow(self):
        """getStateOfChargeLow(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getStateOfChargeLow(self)

    def getStateOfChargeShutdown(self):
        """getStateOfChargeShutdown(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getStateOfChargeShutdown(self)

    def getFirmwareBootloaderVersion(self):
        """getFirmwareBootloaderVersion(self) -> char"""
        return _AriaPy.ArRobotConfigPacketReader_getFirmwareBootloaderVersion(self)

    def getConfigFlags(self):
        """getConfigFlags(self) -> unsigned int"""
        return _AriaPy.ArRobotConfigPacketReader_getConfigFlags(self)

    def getGyroFWVersion(self):
        """getGyroFWVersion(self) -> int"""
        return _AriaPy.ArRobotConfigPacketReader_getGyroFWVersion(self)

    def packetHandler(self, *args):
        """packetHandler(self, ArRobotPacket packet) -> bool"""
        return _AriaPy.ArRobotConfigPacketReader_packetHandler(self, *args)

    def connected(self):
        """connected(self)"""
        return _AriaPy.ArRobotConfigPacketReader_connected(self)

ArRobotConfigPacketReader_swigregister = _AriaPy.ArRobotConfigPacketReader_swigregister
ArRobotConfigPacketReader_swigregister(ArRobotConfigPacketReader)

class ArRobotConnector(object):
    """Proxy of C++ ArRobotConnector class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ArArgumentParser parser, ArRobot robot, bool autoParseArgs = True, 
            bool connectAllComponents = True) -> ArRobotConnector
        __init__(self, ArArgumentParser parser, ArRobot robot, bool autoParseArgs = True) -> ArRobotConnector
        __init__(self, ArArgumentParser parser, ArRobot robot) -> ArRobotConnector
        """
        this = _AriaPy.new_ArRobotConnector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArRobotConnector
    __del__ = lambda self : None;
    def setupRobot(self, *args):
        """
        setupRobot(self) -> bool
        setupRobot(self, ArRobot robot) -> bool
        """
        return _AriaPy.ArRobotConnector_setupRobot(self, *args)

    def connectRobot(self, *args):
        """
        connectRobot(self) -> bool
        connectRobot(self, ArRobot robot) -> bool
        """
        return _AriaPy.ArRobotConnector_connectRobot(self, *args)

    def parseArgs(self, *args):
        """
        parseArgs(self) -> bool
        parseArgs(self, ArArgumentParser parser) -> bool
        """
        return _AriaPy.ArRobotConnector_parseArgs(self, *args)

    def logOptions(self):
        """logOptions(self)"""
        return _AriaPy.ArRobotConnector_logOptions(self)

    def getRemoteHost(self):
        """getRemoteHost(self) -> char"""
        return _AriaPy.ArRobotConnector_getRemoteHost(self)

    def getRemoteIsSim(self):
        """getRemoteIsSim(self) -> bool"""
        return _AriaPy.ArRobotConnector_getRemoteIsSim(self)

    def setRemoteIsSim(self, *args):
        """setRemoteIsSim(self, bool remoteIsSim)"""
        return _AriaPy.ArRobotConnector_setRemoteIsSim(self, *args)

    def getRobot(self):
        """getRobot(self) -> ArRobot"""
        return _AriaPy.ArRobotConnector_getRobot(self)

    def disconnectAll(self):
        """disconnectAll(self) -> bool"""
        return _AriaPy.ArRobotConnector_disconnectAll(self)

ArRobotConnector_swigregister = _AriaPy.ArRobotConnector_swigregister
ArRobotConnector_swigregister(ArRobotConnector)

class ArRobotJoyHandler(object):
    """Proxy of C++ ArRobotJoyHandler class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot) -> ArRobotJoyHandler"""
        this = _AriaPy.new_ArRobotJoyHandler(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArRobotJoyHandler
    __del__ = lambda self : None;
    def getDoubles(self):
        """getDoubles(self)"""
        return _AriaPy.ArRobotJoyHandler_getDoubles(self)

    def getButton1(self):
        """getButton1(self) -> bool"""
        return _AriaPy.ArRobotJoyHandler_getButton1(self)

    def getButton2(self):
        """getButton2(self) -> bool"""
        return _AriaPy.ArRobotJoyHandler_getButton2(self)

    def getDataReceivedTime(self):
        """getDataReceivedTime(self) -> ArTime"""
        return _AriaPy.ArRobotJoyHandler_getDataReceivedTime(self)

    def gotData(self):
        """gotData(self) -> bool"""
        return _AriaPy.ArRobotJoyHandler_gotData(self)

    def addToConfig(self, *args):
        """addToConfig(self, ArConfig config, char section)"""
        return _AriaPy.ArRobotJoyHandler_addToConfig(self, *args)

    def getRawX(self):
        """getRawX(self) -> int"""
        return _AriaPy.ArRobotJoyHandler_getRawX(self)

    def getRawY(self):
        """getRawY(self) -> int"""
        return _AriaPy.ArRobotJoyHandler_getRawY(self)

    def getRawThrottle(self):
        """getRawThrottle(self) -> int"""
        return _AriaPy.ArRobotJoyHandler_getRawThrottle(self)

ArRobotJoyHandler_swigregister = _AriaPy.ArRobotJoyHandler_swigregister
ArRobotJoyHandler_swigregister(ArRobotJoyHandler)

class ArRobotPacket(ArBasePacket):
    """Proxy of C++ ArRobotPacket class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, sync1 = 0xfa, sync2 = 0xfb): 
        """
        __init__(self, unsigned char sync1 = 0xfa, unsigned char sync2 = 0xfb) -> ArRobotPacket
        __init__(self, unsigned char sync1 = 0xfa) -> ArRobotPacket
        __init__(self) -> ArRobotPacket
        """
        this = _AriaPy.new_ArRobotPacket(sync1, sync2)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArRobotPacket
    __del__ = lambda self : None;
    def verifyCheckSum(self):
        """verifyCheckSum(self) -> bool"""
        return _AriaPy.ArRobotPacket_verifyCheckSum(self)

    def getID(self):
        """getID(self) -> UByte"""
        return _AriaPy.ArRobotPacket_getID(self)

    def setID(self, *args):
        """setID(self, UByte id)"""
        return _AriaPy.ArRobotPacket_setID(self, *args)

    def calcCheckSum(self):
        """calcCheckSum(self) -> Byte2"""
        return _AriaPy.ArRobotPacket_calcCheckSum(self)

    def finalizePacket(self):
        """finalizePacket(self)"""
        return _AriaPy.ArRobotPacket_finalizePacket(self)

    def getTimeReceived(self):
        """getTimeReceived(self) -> ArTime"""
        return _AriaPy.ArRobotPacket_getTimeReceived(self)

    def setTimeReceived(self, *args):
        """setTimeReceived(self, ArTime timeReceived)"""
        return _AriaPy.ArRobotPacket_setTimeReceived(self, *args)

    def log(self):
        """log(self)"""
        return _AriaPy.ArRobotPacket_log(self)

ArRobotPacket_swigregister = _AriaPy.ArRobotPacket_swigregister
ArRobotPacket_swigregister(ArRobotPacket)

class ArRobotPacketReceiver(object):
    """Proxy of C++ ArRobotPacketReceiver class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, bool allocatePackets = False, unsigned char sync1 = 0xfa, 
            unsigned char sync2 = 0xfb) -> ArRobotPacketReceiver
        __init__(self, bool allocatePackets = False, unsigned char sync1 = 0xfa) -> ArRobotPacketReceiver
        __init__(self, bool allocatePackets = False) -> ArRobotPacketReceiver
        __init__(self) -> ArRobotPacketReceiver
        __init__(self, ArDeviceConnection deviceConnection, bool allocatePackets = False, 
            unsigned char sync1 = 0xfa, unsigned char sync2 = 0xfb) -> ArRobotPacketReceiver
        __init__(self, ArDeviceConnection deviceConnection, bool allocatePackets = False, 
            unsigned char sync1 = 0xfa) -> ArRobotPacketReceiver
        __init__(self, ArDeviceConnection deviceConnection, bool allocatePackets = False) -> ArRobotPacketReceiver
        __init__(self, ArDeviceConnection deviceConnection) -> ArRobotPacketReceiver
        __init__(self, ArDeviceConnection deviceConnection, bool allocatePackets, 
            unsigned char sync1, unsigned char sync2, 
            bool tracking, char trackingLogName) -> ArRobotPacketReceiver
        """
        this = _AriaPy.new_ArRobotPacketReceiver(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArRobotPacketReceiver
    __del__ = lambda self : None;
    def receivePacket(self, msWait = 0):
        """
        receivePacket(self, unsigned int msWait = 0) -> ArRobotPacket
        receivePacket(self) -> ArRobotPacket
        """
        return _AriaPy.ArRobotPacketReceiver_receivePacket(self, msWait)

    def setDeviceConnection(self, *args):
        """setDeviceConnection(self, ArDeviceConnection deviceConnection)"""
        return _AriaPy.ArRobotPacketReceiver_setDeviceConnection(self, *args)

    def getDeviceConnection(self):
        """getDeviceConnection(self) -> ArDeviceConnection"""
        return _AriaPy.ArRobotPacketReceiver_getDeviceConnection(self)

    def isAllocatingPackets(self):
        """isAllocatingPackets(self) -> bool"""
        return _AriaPy.ArRobotPacketReceiver_isAllocatingPackets(self)

    def setAllocatingPackets(self, *args):
        """setAllocatingPackets(self, bool allocatePackets)"""
        return _AriaPy.ArRobotPacketReceiver_setAllocatingPackets(self, *args)

    def setTracking(self, *args):
        """setTracking(self, bool tracking)"""
        return _AriaPy.ArRobotPacketReceiver_setTracking(self, *args)

    def setTrackingLogName(self, *args):
        """setTrackingLogName(self, char trackingLogName)"""
        return _AriaPy.ArRobotPacketReceiver_setTrackingLogName(self, *args)

    def setPacketReceivedCallback(self, *args):
        """setPacketReceivedCallback(self, ArFunctor1_ArRobotPacketP functor)"""
        return _AriaPy.ArRobotPacketReceiver_setPacketReceivedCallback(self, *args)

ArRobotPacketReceiver_swigregister = _AriaPy.ArRobotPacketReceiver_swigregister
ArRobotPacketReceiver_swigregister(ArRobotPacketReceiver)

class ArRobotPacketSender(object):
    """Proxy of C++ ArRobotPacketSender class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned char sync1 = 0xfa, unsigned char sync2 = 0xfb) -> ArRobotPacketSender
        __init__(self, unsigned char sync1 = 0xfa) -> ArRobotPacketSender
        __init__(self) -> ArRobotPacketSender
        __init__(self, ArDeviceConnection deviceConnection, unsigned char sync1 = 0xfa, 
            unsigned char sync2 = 0xfb) -> ArRobotPacketSender
        __init__(self, ArDeviceConnection deviceConnection, unsigned char sync1 = 0xfa) -> ArRobotPacketSender
        __init__(self, ArDeviceConnection deviceConnection) -> ArRobotPacketSender
        __init__(self, ArDeviceConnection deviceConnection, unsigned char sync1, 
            unsigned char sync2, bool tracking, char trackingLogName) -> ArRobotPacketSender
        """
        this = _AriaPy.new_ArRobotPacketSender(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArRobotPacketSender
    __del__ = lambda self : None;
    def com(self, *args):
        """com(self, unsigned char command) -> bool"""
        return _AriaPy.ArRobotPacketSender_com(self, *args)

    def comInt(self, *args):
        """comInt(self, unsigned char command, short argument) -> bool"""
        return _AriaPy.ArRobotPacketSender_comInt(self, *args)

    def com2Bytes(self, *args):
        """com2Bytes(self, unsigned char command, char high, char low) -> bool"""
        return _AriaPy.ArRobotPacketSender_com2Bytes(self, *args)

    def comStr(self, *args):
        """comStr(self, unsigned char command, char argument) -> bool"""
        return _AriaPy.ArRobotPacketSender_comStr(self, *args)

    def comStrN(self, *args):
        """comStrN(self, unsigned char command, char str, int size) -> bool"""
        return _AriaPy.ArRobotPacketSender_comStrN(self, *args)

    def comDataN(self, *args):
        """comDataN(self, unsigned char command, char data, int size) -> bool"""
        return _AriaPy.ArRobotPacketSender_comDataN(self, *args)

    def sendPacket(self, *args):
        """sendPacket(self, ArRobotPacket packet) -> bool"""
        return _AriaPy.ArRobotPacketSender_sendPacket(self, *args)

    def setDeviceConnection(self, *args):
        """setDeviceConnection(self, ArDeviceConnection deviceConnection)"""
        return _AriaPy.ArRobotPacketSender_setDeviceConnection(self, *args)

    def getDeviceConnection(self):
        """getDeviceConnection(self) -> ArDeviceConnection"""
        return _AriaPy.ArRobotPacketSender_getDeviceConnection(self)

    def setPacketSentCallback(self, *args):
        """setPacketSentCallback(self, ArFunctor1_ArRobotPacketP functor)"""
        return _AriaPy.ArRobotPacketSender_setPacketSentCallback(self, *args)

    def setTracking(self, v = True):
        """
        setTracking(self, bool v = True)
        setTracking(self)
        """
        return _AriaPy.ArRobotPacketSender_setTracking(self, v)

    def setTrackingLogName(self, *args):
        """setTrackingLogName(self, char n)"""
        return _AriaPy.ArRobotPacketSender_setTrackingLogName(self, *args)

ArRobotPacketSender_swigregister = _AriaPy.ArRobotPacketSender_swigregister
ArRobotPacketSender_swigregister(ArRobotPacketSender)

class ArRobotParams(ArConfig):
    """Proxy of C++ ArRobotParams class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ArRobotParams"""
        this = _AriaPy.new_ArRobotParams()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArRobotParams
    __del__ = lambda self : None;
    def getClassName(self):
        """getClassName(self) -> char"""
        return _AriaPy.ArRobotParams_getClassName(self)

    def getSubClassName(self):
        """getSubClassName(self) -> char"""
        return _AriaPy.ArRobotParams_getSubClassName(self)

    def getRobotRadius(self):
        """getRobotRadius(self) -> double"""
        return _AriaPy.ArRobotParams_getRobotRadius(self)

    def getRobotDiagonal(self):
        """getRobotDiagonal(self) -> double"""
        return _AriaPy.ArRobotParams_getRobotDiagonal(self)

    def getRobotWidth(self):
        """getRobotWidth(self) -> double"""
        return _AriaPy.ArRobotParams_getRobotWidth(self)

    def getRobotLength(self):
        """getRobotLength(self) -> double"""
        return _AriaPy.ArRobotParams_getRobotLength(self)

    def getRobotLengthFront(self):
        """getRobotLengthFront(self) -> double"""
        return _AriaPy.ArRobotParams_getRobotLengthFront(self)

    def getRobotLengthRear(self):
        """getRobotLengthRear(self) -> double"""
        return _AriaPy.ArRobotParams_getRobotLengthRear(self)

    def isHolonomic(self):
        """isHolonomic(self) -> bool"""
        return _AriaPy.ArRobotParams_isHolonomic(self)

    def hasMoveCommand(self):
        """hasMoveCommand(self) -> bool"""
        return _AriaPy.ArRobotParams_hasMoveCommand(self)

    def getAbsoluteMaxVelocity(self):
        """getAbsoluteMaxVelocity(self) -> int"""
        return _AriaPy.ArRobotParams_getAbsoluteMaxVelocity(self)

    def getAbsoluteMaxRotVelocity(self):
        """getAbsoluteMaxRotVelocity(self) -> int"""
        return _AriaPy.ArRobotParams_getAbsoluteMaxRotVelocity(self)

    def getAbsoluteMaxLatVelocity(self):
        """getAbsoluteMaxLatVelocity(self) -> int"""
        return _AriaPy.ArRobotParams_getAbsoluteMaxLatVelocity(self)

    def getRequestIOPackets(self):
        """getRequestIOPackets(self) -> bool"""
        return _AriaPy.ArRobotParams_getRequestIOPackets(self)

    def getRequestEncoderPackets(self):
        """getRequestEncoderPackets(self) -> bool"""
        return _AriaPy.ArRobotParams_getRequestEncoderPackets(self)

    def getSwitchToBaudRate(self):
        """getSwitchToBaudRate(self) -> int"""
        return _AriaPy.ArRobotParams_getSwitchToBaudRate(self)

    def getAngleConvFactor(self):
        """getAngleConvFactor(self) -> double"""
        return _AriaPy.ArRobotParams_getAngleConvFactor(self)

    def getDistConvFactor(self):
        """getDistConvFactor(self) -> double"""
        return _AriaPy.ArRobotParams_getDistConvFactor(self)

    def getVelConvFactor(self):
        """getVelConvFactor(self) -> double"""
        return _AriaPy.ArRobotParams_getVelConvFactor(self)

    def getRangeConvFactor(self):
        """getRangeConvFactor(self) -> double"""
        return _AriaPy.ArRobotParams_getRangeConvFactor(self)

    def getDiffConvFactor(self):
        """getDiffConvFactor(self) -> double"""
        return _AriaPy.ArRobotParams_getDiffConvFactor(self)

    def getVel2Divisor(self):
        """getVel2Divisor(self) -> double"""
        return _AriaPy.ArRobotParams_getVel2Divisor(self)

    def getGyroScaler(self):
        """getGyroScaler(self) -> double"""
        return _AriaPy.ArRobotParams_getGyroScaler(self)

    def haveTableSensingIR(self):
        """haveTableSensingIR(self) -> bool"""
        return _AriaPy.ArRobotParams_haveTableSensingIR(self)

    def haveNewTableSensingIR(self):
        """haveNewTableSensingIR(self) -> bool"""
        return _AriaPy.ArRobotParams_haveNewTableSensingIR(self)

    def haveFrontBumpers(self):
        """haveFrontBumpers(self) -> bool"""
        return _AriaPy.ArRobotParams_haveFrontBumpers(self)

    def numFrontBumpers(self):
        """numFrontBumpers(self) -> int"""
        return _AriaPy.ArRobotParams_numFrontBumpers(self)

    def haveRearBumpers(self):
        """haveRearBumpers(self) -> bool"""
        return _AriaPy.ArRobotParams_haveRearBumpers(self)

    def numRearBumpers(self):
        """numRearBumpers(self) -> int"""
        return _AriaPy.ArRobotParams_numRearBumpers(self)

    def getNumIR(self):
        """getNumIR(self) -> int"""
        return _AriaPy.ArRobotParams_getNumIR(self)

    def haveIR(self, *args):
        """haveIR(self, int number) -> bool"""
        return _AriaPy.ArRobotParams_haveIR(self, *args)

    def getIRX(self, *args):
        """getIRX(self, int number) -> int"""
        return _AriaPy.ArRobotParams_getIRX(self, *args)

    def getIRY(self, *args):
        """getIRY(self, int number) -> int"""
        return _AriaPy.ArRobotParams_getIRY(self, *args)

    def getIRType(self, *args):
        """getIRType(self, int number) -> int"""
        return _AriaPy.ArRobotParams_getIRType(self, *args)

    def getIRCycles(self, *args):
        """getIRCycles(self, int number) -> int"""
        return _AriaPy.ArRobotParams_getIRCycles(self, *args)

    def getNumSonar(self):
        """getNumSonar(self) -> int"""
        return _AriaPy.ArRobotParams_getNumSonar(self)

    def getLaserPossessed(self):
        """getLaserPossessed(self) -> bool"""
        return _AriaPy.ArRobotParams_getLaserPossessed(self)

    def getLaserType(self, laserNumber = 1):
        """
        getLaserType(self, int laserNumber = 1) -> char
        getLaserType(self) -> char
        """
        return _AriaPy.ArRobotParams_getLaserType(self, laserNumber)

    def getLaserPortType(self, laserNumber = 1):
        """
        getLaserPortType(self, int laserNumber = 1) -> char
        getLaserPortType(self) -> char
        """
        return _AriaPy.ArRobotParams_getLaserPortType(self, laserNumber)

    def getLaserPort(self, laserNumber = 1):
        """
        getLaserPort(self, int laserNumber = 1) -> char
        getLaserPort(self) -> char
        """
        return _AriaPy.ArRobotParams_getLaserPort(self, laserNumber)

    def getConnectLaser(self, laserNumber = 1):
        """
        getConnectLaser(self, int laserNumber = 1) -> bool
        getConnectLaser(self) -> bool
        """
        return _AriaPy.ArRobotParams_getConnectLaser(self, laserNumber)

    def getLaserFlipped(self, laserNumber = 1):
        """
        getLaserFlipped(self, int laserNumber = 1) -> bool
        getLaserFlipped(self) -> bool
        """
        return _AriaPy.ArRobotParams_getLaserFlipped(self, laserNumber)

    def getLaserPowerControlled(self, laserNumber = 1):
        """
        getLaserPowerControlled(self, int laserNumber = 1) -> bool
        getLaserPowerControlled(self) -> bool
        """
        return _AriaPy.ArRobotParams_getLaserPowerControlled(self, laserNumber)

    def getLaserMaxRange(self, laserNumber = 1):
        """
        getLaserMaxRange(self, int laserNumber = 1) -> int
        getLaserMaxRange(self) -> int
        """
        return _AriaPy.ArRobotParams_getLaserMaxRange(self, laserNumber)

    def getLaserCumulativeBufferSize(self, laserNumber = 1):
        """
        getLaserCumulativeBufferSize(self, int laserNumber = 1) -> int
        getLaserCumulativeBufferSize(self) -> int
        """
        return _AriaPy.ArRobotParams_getLaserCumulativeBufferSize(self, laserNumber)

    def getLaserX(self, laserNumber = 1):
        """
        getLaserX(self, int laserNumber = 1) -> int
        getLaserX(self) -> int
        """
        return _AriaPy.ArRobotParams_getLaserX(self, laserNumber)

    def getLaserY(self, laserNumber = 1):
        """
        getLaserY(self, int laserNumber = 1) -> int
        getLaserY(self) -> int
        """
        return _AriaPy.ArRobotParams_getLaserY(self, laserNumber)

    def getLaserTh(self, laserNumber = 1):
        """
        getLaserTh(self, int laserNumber = 1) -> double
        getLaserTh(self) -> double
        """
        return _AriaPy.ArRobotParams_getLaserTh(self, laserNumber)

    def getLaserZ(self, laserNumber = 1):
        """
        getLaserZ(self, int laserNumber = 1) -> int
        getLaserZ(self) -> int
        """
        return _AriaPy.ArRobotParams_getLaserZ(self, laserNumber)

    def getLaserIgnore(self, laserNumber = 1):
        """
        getLaserIgnore(self, int laserNumber = 1) -> char
        getLaserIgnore(self) -> char
        """
        return _AriaPy.ArRobotParams_getLaserIgnore(self, laserNumber)

    def getLaserStartDegrees(self, laserNumber = 1):
        """
        getLaserStartDegrees(self, int laserNumber = 1) -> char
        getLaserStartDegrees(self) -> char
        """
        return _AriaPy.ArRobotParams_getLaserStartDegrees(self, laserNumber)

    def getLaserEndDegrees(self, laserNumber = 1):
        """
        getLaserEndDegrees(self, int laserNumber = 1) -> char
        getLaserEndDegrees(self) -> char
        """
        return _AriaPy.ArRobotParams_getLaserEndDegrees(self, laserNumber)

    def getLaserDegreesChoice(self, laserNumber = 1):
        """
        getLaserDegreesChoice(self, int laserNumber = 1) -> char
        getLaserDegreesChoice(self) -> char
        """
        return _AriaPy.ArRobotParams_getLaserDegreesChoice(self, laserNumber)

    def getLaserIncrement(self, laserNumber = 1):
        """
        getLaserIncrement(self, int laserNumber = 1) -> char
        getLaserIncrement(self) -> char
        """
        return _AriaPy.ArRobotParams_getLaserIncrement(self, laserNumber)

    def getLaserIncrementChoice(self, laserNumber = 1):
        """
        getLaserIncrementChoice(self, int laserNumber = 1) -> char
        getLaserIncrementChoice(self) -> char
        """
        return _AriaPy.ArRobotParams_getLaserIncrementChoice(self, laserNumber)

    def getLaserUnitsChoice(self, laserNumber = 1):
        """
        getLaserUnitsChoice(self, int laserNumber = 1) -> char
        getLaserUnitsChoice(self) -> char
        """
        return _AriaPy.ArRobotParams_getLaserUnitsChoice(self, laserNumber)

    def getLaserReflectorBitsChoice(self, laserNumber = 1):
        """
        getLaserReflectorBitsChoice(self, int laserNumber = 1) -> char
        getLaserReflectorBitsChoice(self) -> char
        """
        return _AriaPy.ArRobotParams_getLaserReflectorBitsChoice(self, laserNumber)

    def getLaserStartingBaudChoice(self, laserNumber = 1):
        """
        getLaserStartingBaudChoice(self, int laserNumber = 1) -> char
        getLaserStartingBaudChoice(self) -> char
        """
        return _AriaPy.ArRobotParams_getLaserStartingBaudChoice(self, laserNumber)

    def getLaserAutoBaudChoice(self, laserNumber = 1):
        """
        getLaserAutoBaudChoice(self, int laserNumber = 1) -> char
        getLaserAutoBaudChoice(self) -> char
        """
        return _AriaPy.ArRobotParams_getLaserAutoBaudChoice(self, laserNumber)

    def getLaserSection(self, laserNumber = 1):
        """
        getLaserSection(self, int laserNumber = 1) -> char
        getLaserSection(self) -> char
        """
        return _AriaPy.ArRobotParams_getLaserSection(self, laserNumber)

    def getLaserPowerOutput(self, laserNumber = 1):
        """
        getLaserPowerOutput(self, int laserNumber = 1) -> char
        getLaserPowerOutput(self) -> char
        """
        return _AriaPy.ArRobotParams_getLaserPowerOutput(self, laserNumber)

    def getBatteryMTXBoardType(self, batteryNumber = 1):
        """
        getBatteryMTXBoardType(self, int batteryNumber = 1) -> char
        getBatteryMTXBoardType(self) -> char
        """
        return _AriaPy.ArRobotParams_getBatteryMTXBoardType(self, batteryNumber)

    def getBatteryMTXBoardPortType(self, batteryNumber = 1):
        """
        getBatteryMTXBoardPortType(self, int batteryNumber = 1) -> char
        getBatteryMTXBoardPortType(self) -> char
        """
        return _AriaPy.ArRobotParams_getBatteryMTXBoardPortType(self, batteryNumber)

    def getBatteryMTXBoardPort(self, batteryNumber = 1):
        """
        getBatteryMTXBoardPort(self, int batteryNumber = 1) -> char
        getBatteryMTXBoardPort(self) -> char
        """
        return _AriaPy.ArRobotParams_getBatteryMTXBoardPort(self, batteryNumber)

    def getBatteryMTXBoardBaud(self, batteryNumber = 1):
        """
        getBatteryMTXBoardBaud(self, int batteryNumber = 1) -> int
        getBatteryMTXBoardBaud(self) -> int
        """
        return _AriaPy.ArRobotParams_getBatteryMTXBoardBaud(self, batteryNumber)

    def getBatteryMTXBoardAutoConn(self, batteryNumber = 1):
        """
        getBatteryMTXBoardAutoConn(self, int batteryNumber = 1) -> bool
        getBatteryMTXBoardAutoConn(self) -> bool
        """
        return _AriaPy.ArRobotParams_getBatteryMTXBoardAutoConn(self, batteryNumber)

    def getLCDMTXBoardType(self, lcdNumber = 1):
        """
        getLCDMTXBoardType(self, int lcdNumber = 1) -> char
        getLCDMTXBoardType(self) -> char
        """
        return _AriaPy.ArRobotParams_getLCDMTXBoardType(self, lcdNumber)

    def getLCDMTXBoardPortType(self, lcdNumber = 1):
        """
        getLCDMTXBoardPortType(self, int lcdNumber = 1) -> char
        getLCDMTXBoardPortType(self) -> char
        """
        return _AriaPy.ArRobotParams_getLCDMTXBoardPortType(self, lcdNumber)

    def getLCDMTXBoardPort(self, lcdNumber = 1):
        """
        getLCDMTXBoardPort(self, int lcdNumber = 1) -> char
        getLCDMTXBoardPort(self) -> char
        """
        return _AriaPy.ArRobotParams_getLCDMTXBoardPort(self, lcdNumber)

    def getLCDMTXBoardBaud(self, lcdNumber = 1):
        """
        getLCDMTXBoardBaud(self, int lcdNumber = 1) -> int
        getLCDMTXBoardBaud(self) -> int
        """
        return _AriaPy.ArRobotParams_getLCDMTXBoardBaud(self, lcdNumber)

    def getLCDMTXBoardAutoConn(self, lcdNumber = 1):
        """
        getLCDMTXBoardAutoConn(self, int lcdNumber = 1) -> bool
        getLCDMTXBoardAutoConn(self) -> bool
        """
        return _AriaPy.ArRobotParams_getLCDMTXBoardAutoConn(self, lcdNumber)

    def getLCDMTXBoardConnFailOption(self, lcdNumber = 1):
        """
        getLCDMTXBoardConnFailOption(self, int lcdNumber = 1) -> bool
        getLCDMTXBoardConnFailOption(self) -> bool
        """
        return _AriaPy.ArRobotParams_getLCDMTXBoardConnFailOption(self, lcdNumber)

    def getLCDMTXBoardPowerOutput(self, lcdNumber = 1):
        """
        getLCDMTXBoardPowerOutput(self, int lcdNumber = 1) -> char
        getLCDMTXBoardPowerOutput(self) -> char
        """
        return _AriaPy.ArRobotParams_getLCDMTXBoardPowerOutput(self, lcdNumber)

    def getSonarMTXBoardType(self, sonarNumber = 1):
        """
        getSonarMTXBoardType(self, int sonarNumber = 1) -> char
        getSonarMTXBoardType(self) -> char
        """
        return _AriaPy.ArRobotParams_getSonarMTXBoardType(self, sonarNumber)

    def getSonarMTXBoardPortType(self, sonarNumber = 1):
        """
        getSonarMTXBoardPortType(self, int sonarNumber = 1) -> char
        getSonarMTXBoardPortType(self) -> char
        """
        return _AriaPy.ArRobotParams_getSonarMTXBoardPortType(self, sonarNumber)

    def getSonarMTXBoardPort(self, sonarNumber = 1):
        """
        getSonarMTXBoardPort(self, int sonarNumber = 1) -> char
        getSonarMTXBoardPort(self) -> char
        """
        return _AriaPy.ArRobotParams_getSonarMTXBoardPort(self, sonarNumber)

    def getSonarMTXBoardBaud(self, sonarNumber = 1):
        """
        getSonarMTXBoardBaud(self, int sonarNumber = 1) -> int
        getSonarMTXBoardBaud(self) -> int
        """
        return _AriaPy.ArRobotParams_getSonarMTXBoardBaud(self, sonarNumber)

    def getSonarMTXBoardAutoConn(self, sonarNumber = 1):
        """
        getSonarMTXBoardAutoConn(self, int sonarNumber = 1) -> bool
        getSonarMTXBoardAutoConn(self) -> bool
        """
        return _AriaPy.ArRobotParams_getSonarMTXBoardAutoConn(self, sonarNumber)

    def getSonarMTXBoardDelay(self, sonarBoardNum = 1):
        """
        getSonarMTXBoardDelay(self, int sonarBoardNum = 1) -> int
        getSonarMTXBoardDelay(self) -> int
        """
        return _AriaPy.ArRobotParams_getSonarMTXBoardDelay(self, sonarBoardNum)

    def getSonarMTXBoardGain(self, sonarBoardNum = 1):
        """
        getSonarMTXBoardGain(self, int sonarBoardNum = 1) -> int
        getSonarMTXBoardGain(self) -> int
        """
        return _AriaPy.ArRobotParams_getSonarMTXBoardGain(self, sonarBoardNum)

    def getSonarMTXBoardDetectionThreshold(self, sonarBoardNum = 1):
        """
        getSonarMTXBoardDetectionThreshold(self, int sonarBoardNum = 1) -> int
        getSonarMTXBoardDetectionThreshold(self) -> int
        """
        return _AriaPy.ArRobotParams_getSonarMTXBoardDetectionThreshold(self, sonarBoardNum)

    def getSonarMTXBoardMaxRange(self, sonarBoardNum = 1):
        """
        getSonarMTXBoardMaxRange(self, int sonarBoardNum = 1) -> int
        getSonarMTXBoardMaxRange(self) -> int
        """
        return _AriaPy.ArRobotParams_getSonarMTXBoardMaxRange(self, sonarBoardNum)

    def getSonarMTXBoardUseForAutonomousDriving(self, sonarBoardNum = 1):
        """
        getSonarMTXBoardUseForAutonomousDriving(self, int sonarBoardNum = 1) -> int
        getSonarMTXBoardUseForAutonomousDriving(self) -> int
        """
        return _AriaPy.ArRobotParams_getSonarMTXBoardUseForAutonomousDriving(self, sonarBoardNum)

    def getSonarMTXBoardPowerOutput(self, sonarBoardNum = 1):
        """
        getSonarMTXBoardPowerOutput(self, int sonarBoardNum = 1) -> char
        getSonarMTXBoardPowerOutput(self) -> char
        """
        return _AriaPy.ArRobotParams_getSonarMTXBoardPowerOutput(self, sonarBoardNum)

    def getNumSonarOnMTXBoard(self, sonarBoardNum = 1):
        """
        getNumSonarOnMTXBoard(self, int sonarBoardNum = 1) -> int
        getNumSonarOnMTXBoard(self) -> int
        """
        return _AriaPy.ArRobotParams_getNumSonarOnMTXBoard(self, sonarBoardNum)

    def getNumSonarUnits(self):
        """getNumSonarUnits(self) -> int"""
        return _AriaPy.ArRobotParams_getNumSonarUnits(self)

    def haveSonar(self, *args):
        """haveSonar(self, int boardNum) -> bool"""
        return _AriaPy.ArRobotParams_haveSonar(self, *args)

    def getSonarX(self, *args):
        """getSonarX(self, int number) -> int"""
        return _AriaPy.ArRobotParams_getSonarX(self, *args)

    def getSonarY(self, *args):
        """getSonarY(self, int number) -> int"""
        return _AriaPy.ArRobotParams_getSonarY(self, *args)

    def getSonarTh(self, *args):
        """getSonarTh(self, int number) -> int"""
        return _AriaPy.ArRobotParams_getSonarTh(self, *args)

    def getSonarGain(self, *args):
        """getSonarGain(self, int number) -> int"""
        return _AriaPy.ArRobotParams_getSonarGain(self, *args)

    def getSonarDetectionThreshold(self, *args):
        """getSonarDetectionThreshold(self, int number) -> int"""
        return _AriaPy.ArRobotParams_getSonarDetectionThreshold(self, *args)

    def getSonarMaxRange(self, *args):
        """getSonarMaxRange(self, int number) -> int"""
        return _AriaPy.ArRobotParams_getSonarMaxRange(self, *args)

    def getSonarUseForAutonomousDriving(self, *args):
        """getSonarUseForAutonomousDriving(self, int number) -> int"""
        return _AriaPy.ArRobotParams_getSonarUseForAutonomousDriving(self, *args)

    def getSonarMTXBoard(self, *args):
        """getSonarMTXBoard(self, int number) -> int"""
        return _AriaPy.ArRobotParams_getSonarMTXBoard(self, *args)

    def getSonarMTXBoardUnitPosition(self, *args):
        """getSonarMTXBoardUnitPosition(self, int number) -> int"""
        return _AriaPy.ArRobotParams_getSonarMTXBoardUnitPosition(self, *args)

    def hasSettableVelMaxes(self):
        """hasSettableVelMaxes(self) -> bool"""
        return _AriaPy.ArRobotParams_hasSettableVelMaxes(self)

    def getTransVelMax(self):
        """getTransVelMax(self) -> int"""
        return _AriaPy.ArRobotParams_getTransVelMax(self)

    def getRotVelMax(self):
        """getRotVelMax(self) -> int"""
        return _AriaPy.ArRobotParams_getRotVelMax(self)

    def hasSettableAccsDecs(self):
        """hasSettableAccsDecs(self) -> bool"""
        return _AriaPy.ArRobotParams_hasSettableAccsDecs(self)

    def getTransAccel(self):
        """getTransAccel(self) -> int"""
        return _AriaPy.ArRobotParams_getTransAccel(self)

    def getTransDecel(self):
        """getTransDecel(self) -> int"""
        return _AriaPy.ArRobotParams_getTransDecel(self)

    def getRotAccel(self):
        """getRotAccel(self) -> int"""
        return _AriaPy.ArRobotParams_getRotAccel(self)

    def getRotDecel(self):
        """getRotDecel(self) -> int"""
        return _AriaPy.ArRobotParams_getRotDecel(self)

    def hasLatVel(self):
        """hasLatVel(self) -> bool"""
        return _AriaPy.ArRobotParams_hasLatVel(self)

    def getLatVelMax(self):
        """getLatVelMax(self) -> int"""
        return _AriaPy.ArRobotParams_getLatVelMax(self)

    def getLatAccel(self):
        """getLatAccel(self) -> int"""
        return _AriaPy.ArRobotParams_getLatAccel(self)

    def getLatDecel(self):
        """getLatDecel(self) -> int"""
        return _AriaPy.ArRobotParams_getLatDecel(self)

    def save(self):
        """save(self) -> bool"""
        return _AriaPy.ArRobotParams_save(self)

    def getGPSX(self):
        """getGPSX(self) -> int"""
        return _AriaPy.ArRobotParams_getGPSX(self)

    def getGPSY(self):
        """getGPSY(self) -> int"""
        return _AriaPy.ArRobotParams_getGPSY(self)

    def getGPSBaud(self):
        """getGPSBaud(self) -> int"""
        return _AriaPy.ArRobotParams_getGPSBaud(self)

    def getGPSPort(self):
        """getGPSPort(self) -> char"""
        return _AriaPy.ArRobotParams_getGPSPort(self)

    def getGPSType(self):
        """getGPSType(self) -> char"""
        return _AriaPy.ArRobotParams_getGPSType(self)

    def getCompassType(self):
        """getCompassType(self) -> char"""
        return _AriaPy.ArRobotParams_getCompassType(self)

    def getCompassPort(self):
        """getCompassPort(self) -> char"""
        return _AriaPy.ArRobotParams_getCompassPort(self)

    def getVideoParams(self):
        """getVideoParams(self) -> std::vector<(ArVideoParams,std::allocator<(ArVideoParams)>)>"""
        return _AriaPy.ArRobotParams_getVideoParams(self)

    def getPTZParams(self):
        """getPTZParams(self) -> std::vector<(ArPTZParams,std::allocator<(ArPTZParams)>)>"""
        return _AriaPy.ArRobotParams_getPTZParams(self)

ArRobotParams_swigregister = _AriaPy.ArRobotParams_swigregister
ArRobotParams_swigregister(ArRobotParams)

class ArRVisionPacket(ArBasePacket):
    """Proxy of C++ ArRVisionPacket class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, bufferSize = 15): 
        """
        __init__(self, UByte2 bufferSize = 15) -> ArRVisionPacket
        __init__(self) -> ArRVisionPacket
        """
        this = _AriaPy.new_ArRVisionPacket(bufferSize)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArRVisionPacket
    __del__ = lambda self : None;
    def uByteToBuf(self, *args):
        """uByteToBuf(self, UByte val)"""
        return _AriaPy.ArRVisionPacket_uByteToBuf(self, *args)

    def byte2ToBuf(self, *args):
        """byte2ToBuf(self, Byte2 val)"""
        return _AriaPy.ArRVisionPacket_byte2ToBuf(self, *args)

    def byte2ToBufAtPos(self, *args):
        """byte2ToBufAtPos(self, Byte2 val, UByte2 pose)"""
        return _AriaPy.ArRVisionPacket_byte2ToBufAtPos(self, *args)

ArRVisionPacket_swigregister = _AriaPy.ArRVisionPacket_swigregister
ArRVisionPacket_swigregister(ArRVisionPacket)

class ArRVisionPTZ(ArPTZ):
    """Proxy of C++ ArRVisionPTZ class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot) -> ArRVisionPTZ"""
        this = _AriaPy.new_ArRVisionPTZ(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArRVisionPTZ
    __del__ = lambda self : None;
    def init(self):
        """init(self) -> bool"""
        return _AriaPy.ArRVisionPTZ_init(self)

    def getTypeName(self):
        """getTypeName(self) -> char"""
        return _AriaPy.ArRVisionPTZ_getTypeName(self)

    def setPort(self, *args):
        """setPort(self, char port)"""
        return _AriaPy.ArRVisionPTZ_setPort(self, *args)

    def canZoom(self):
        """canZoom(self) -> bool"""
        return _AriaPy.ArRVisionPTZ_canZoom(self)

    def zoom(self, *args):
        """zoom(self, int zoomValue) -> bool"""
        return _AriaPy.ArRVisionPTZ_zoom(self, *args)

    def zoomRel(self, *args):
        """zoomRel(self, int zoomValue) -> bool"""
        return _AriaPy.ArRVisionPTZ_zoomRel(self, *args)

    def getZoom(self):
        """getZoom(self) -> int"""
        return _AriaPy.ArRVisionPTZ_getZoom(self)

    def canGetRealPanTilt(self):
        """canGetRealPanTilt(self) -> bool"""
        return _AriaPy.ArRVisionPTZ_canGetRealPanTilt(self)

    def canGetRealZoom(self):
        """canGetRealZoom(self) -> bool"""
        return _AriaPy.ArRVisionPTZ_canGetRealZoom(self)

    def canGetFOV(self):
        """canGetFOV(self) -> bool"""
        return _AriaPy.ArRVisionPTZ_canGetFOV(self)

    def getFOVAtMaxZoom(self):
        """getFOVAtMaxZoom(self) -> double"""
        return _AriaPy.ArRVisionPTZ_getFOVAtMaxZoom(self)

    def getFOVAtMinZoom(self):
        """getFOVAtMinZoom(self) -> double"""
        return _AriaPy.ArRVisionPTZ_getFOVAtMinZoom(self)

    def readPacket(self):
        """readPacket(self) -> ArBasePacket"""
        return _AriaPy.ArRVisionPTZ_readPacket(self)

    MAX_PAN = _AriaPy.ArRVisionPTZ_MAX_PAN
    MIN_PAN = _AriaPy.ArRVisionPTZ_MIN_PAN
    MIN_TILT = _AriaPy.ArRVisionPTZ_MIN_TILT
    MAX_TILT = _AriaPy.ArRVisionPTZ_MAX_TILT
    MIN_ZOOM = _AriaPy.ArRVisionPTZ_MIN_ZOOM
    MAX_ZOOM = _AriaPy.ArRVisionPTZ_MAX_ZOOM
    TILT_OFFSET_IN_DEGREES = _AriaPy.ArRVisionPTZ_TILT_OFFSET_IN_DEGREES
    PAN_OFFSET_IN_DEGREES = _AriaPy.ArRVisionPTZ_PAN_OFFSET_IN_DEGREES
ArRVisionPTZ_swigregister = _AriaPy.ArRVisionPTZ_swigregister
ArRVisionPTZ_swigregister(ArRVisionPTZ)

class ArSensorReading(object):
    """Proxy of C++ ArSensorReading class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, double xPos = 0.0, double yPos = 0.0, double thPos = 0.0) -> ArSensorReading
        __init__(self, double xPos = 0.0, double yPos = 0.0) -> ArSensorReading
        __init__(self, double xPos = 0.0) -> ArSensorReading
        __init__(self) -> ArSensorReading
        __init__(self, ArSensorReading reading) -> ArSensorReading
        """
        this = _AriaPy.new_ArSensorReading(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArSensorReading
    __del__ = lambda self : None;
    def getRange(self):
        """getRange(self) -> unsigned int"""
        return _AriaPy.ArSensorReading_getRange(self)

    def isNew(self, *args):
        """isNew(self, unsigned int counter) -> bool"""
        return _AriaPy.ArSensorReading_isNew(self, *args)

    def getX(self):
        """getX(self) -> double"""
        return _AriaPy.ArSensorReading_getX(self)

    def getY(self):
        """getY(self) -> double"""
        return _AriaPy.ArSensorReading_getY(self)

    def getPose(self):
        """getPose(self) -> ArPose"""
        return _AriaPy.ArSensorReading_getPose(self)

    def getLocalX(self):
        """getLocalX(self) -> double"""
        return _AriaPy.ArSensorReading_getLocalX(self)

    def getLocalY(self):
        """getLocalY(self) -> double"""
        return _AriaPy.ArSensorReading_getLocalY(self)

    def getLocalPose(self):
        """getLocalPose(self) -> ArPose"""
        return _AriaPy.ArSensorReading_getLocalPose(self)

    def getPoseTaken(self):
        """getPoseTaken(self) -> ArPose"""
        return _AriaPy.ArSensorReading_getPoseTaken(self)

    def getEncoderPoseTaken(self):
        """getEncoderPoseTaken(self) -> ArPose"""
        return _AriaPy.ArSensorReading_getEncoderPoseTaken(self)

    def getSensorX(self):
        """getSensorX(self) -> double"""
        return _AriaPy.ArSensorReading_getSensorX(self)

    def getSensorY(self):
        """getSensorY(self) -> double"""
        return _AriaPy.ArSensorReading_getSensorY(self)

    def getSensorTh(self):
        """getSensorTh(self) -> double"""
        return _AriaPy.ArSensorReading_getSensorTh(self)

    def getIgnoreThisReading(self):
        """getIgnoreThisReading(self) -> bool"""
        return _AriaPy.ArSensorReading_getIgnoreThisReading(self)

    def getExtraInt(self):
        """getExtraInt(self) -> int"""
        return _AriaPy.ArSensorReading_getExtraInt(self)

    def getSensorPosition(self):
        """getSensorPosition(self) -> ArPose"""
        return _AriaPy.ArSensorReading_getSensorPosition(self)

    def getSensorDX(self):
        """getSensorDX(self) -> double"""
        return _AriaPy.ArSensorReading_getSensorDX(self)

    def getSensorDY(self):
        """getSensorDY(self) -> double"""
        return _AriaPy.ArSensorReading_getSensorDY(self)

    def getXTaken(self):
        """getXTaken(self) -> double"""
        return _AriaPy.ArSensorReading_getXTaken(self)

    def getYTaken(self):
        """getYTaken(self) -> double"""
        return _AriaPy.ArSensorReading_getYTaken(self)

    def getThTaken(self):
        """getThTaken(self) -> double"""
        return _AriaPy.ArSensorReading_getThTaken(self)

    def getCounterTaken(self):
        """getCounterTaken(self) -> unsigned int"""
        return _AriaPy.ArSensorReading_getCounterTaken(self)

    def getTimeTaken(self):
        """getTimeTaken(self) -> ArTime"""
        return _AriaPy.ArSensorReading_getTimeTaken(self)

    def newData(self, *args):
        """
        newData(self, int range, ArPose robotPose, ArPose encoderPose, ArTransform trans, 
            unsigned int counter, ArTime timeTaken, 
            bool ignoreThisReading = False, int extraInt = 0)
        newData(self, int range, ArPose robotPose, ArPose encoderPose, ArTransform trans, 
            unsigned int counter, ArTime timeTaken, 
            bool ignoreThisReading = False)
        newData(self, int range, ArPose robotPose, ArPose encoderPose, ArTransform trans, 
            unsigned int counter, ArTime timeTaken)
        newData(self, int sx, int sy, ArPose robotPose, ArPose encoderPose, 
            ArTransform trans, unsigned int counter, ArTime timeTaken, 
            bool ignoreThisReading = False, 
            int extraInt = 0)
        newData(self, int sx, int sy, ArPose robotPose, ArPose encoderPose, 
            ArTransform trans, unsigned int counter, ArTime timeTaken, 
            bool ignoreThisReading = False)
        newData(self, int sx, int sy, ArPose robotPose, ArPose encoderPose, 
            ArTransform trans, unsigned int counter, ArTime timeTaken)
        """
        return _AriaPy.ArSensorReading_newData(self, *args)

    def resetSensorPosition(self, *args):
        """
        resetSensorPosition(self, double xPos, double yPos, double thPos, bool forceComputation = False)
        resetSensorPosition(self, double xPos, double yPos, double thPos)
        """
        return _AriaPy.ArSensorReading_resetSensorPosition(self, *args)

    def setIgnoreThisReading(self, *args):
        """setIgnoreThisReading(self, bool ignoreThisReading)"""
        return _AriaPy.ArSensorReading_setIgnoreThisReading(self, *args)

    def setExtraInt(self, *args):
        """setExtraInt(self, int extraInt)"""
        return _AriaPy.ArSensorReading_setExtraInt(self, *args)

    def applyTransform(self, *args):
        """applyTransform(self, ArTransform trans)"""
        return _AriaPy.ArSensorReading_applyTransform(self, *args)

    def applyEncoderTransform(self, *args):
        """applyEncoderTransform(self, ArTransform trans)"""
        return _AriaPy.ArSensorReading_applyEncoderTransform(self, *args)

    def getAdjusted(self):
        """getAdjusted(self) -> bool"""
        return _AriaPy.ArSensorReading_getAdjusted(self)

    def setAdjusted(self, *args):
        """setAdjusted(self, bool adjusted)"""
        return _AriaPy.ArSensorReading_setAdjusted(self, *args)

ArSensorReading_swigregister = _AriaPy.ArSensorReading_swigregister
ArSensorReading_swigregister(ArSensorReading)

class ArSerialConnection(ArDeviceConnection):
    """Proxy of C++ ArSerialConnection class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, is422 = False): 
        """
        __init__(self, bool is422 = False) -> ArSerialConnection
        __init__(self) -> ArSerialConnection
        """
        this = _AriaPy.new_ArSerialConnection(is422)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArSerialConnection
    __del__ = lambda self : None;
    def open(self, port = None):
        """
        open(self, char port = None) -> int
        open(self) -> int
        """
        return _AriaPy.ArSerialConnection_open(self, port)

    def setPort(self, port = None):
        """
        setPort(self, char port = None)
        setPort(self)
        """
        return _AriaPy.ArSerialConnection_setPort(self, port)

    def getPort(self):
        """getPort(self) -> char"""
        return _AriaPy.ArSerialConnection_getPort(self)

    def openSimple(self):
        """openSimple(self) -> bool"""
        return _AriaPy.ArSerialConnection_openSimple(self)

    def getStatus(self):
        """getStatus(self) -> int"""
        return _AriaPy.ArSerialConnection_getStatus(self)

    def close(self):
        """close(self) -> bool"""
        return _AriaPy.ArSerialConnection_close(self)

    def read(self, *args):
        """
        read(self, char data, unsigned int size, unsigned int msWait = 0) -> int
        read(self, char data, unsigned int size) -> int
        """
        return _AriaPy.ArSerialConnection_read(self, *args)

    def write(self, *args):
        """write(self, char data, unsigned int size) -> int"""
        return _AriaPy.ArSerialConnection_write(self, *args)

    def getOpenMessage(self, *args):
        """getOpenMessage(self, int messageNumber) -> char"""
        return _AriaPy.ArSerialConnection_getOpenMessage(self, *args)

    def setBaud(self, *args):
        """setBaud(self, int baud) -> bool"""
        return _AriaPy.ArSerialConnection_setBaud(self, *args)

    def getBaud(self):
        """getBaud(self) -> int"""
        return _AriaPy.ArSerialConnection_getBaud(self)

    def setHardwareControl(self, *args):
        """setHardwareControl(self, bool hardwareControl) -> bool"""
        return _AriaPy.ArSerialConnection_setHardwareControl(self, *args)

    def getHardwareControl(self):
        """getHardwareControl(self) -> bool"""
        return _AriaPy.ArSerialConnection_getHardwareControl(self)

    def getCTS(self):
        """getCTS(self) -> bool"""
        return _AriaPy.ArSerialConnection_getCTS(self)

    def getDSR(self):
        """getDSR(self) -> bool"""
        return _AriaPy.ArSerialConnection_getDSR(self)

    def getDCD(self):
        """getDCD(self) -> bool"""
        return _AriaPy.ArSerialConnection_getDCD(self)

    def getRing(self):
        """getRing(self) -> bool"""
        return _AriaPy.ArSerialConnection_getRing(self)

    def internalOpen(self):
        """internalOpen(self) -> int"""
        return _AriaPy.ArSerialConnection_internalOpen(self)

    OPEN_COULD_NOT_OPEN_PORT = _AriaPy.ArSerialConnection_OPEN_COULD_NOT_OPEN_PORT
    OPEN_COULD_NOT_SET_UP_PORT = _AriaPy.ArSerialConnection_OPEN_COULD_NOT_SET_UP_PORT
    OPEN_INVALID_BAUD_RATE = _AriaPy.ArSerialConnection_OPEN_INVALID_BAUD_RATE
    OPEN_COULD_NOT_SET_BAUD = _AriaPy.ArSerialConnection_OPEN_COULD_NOT_SET_BAUD
    OPEN_ALREADY_OPEN = _AriaPy.ArSerialConnection_OPEN_ALREADY_OPEN
    def getTimeRead(self, *args):
        """getTimeRead(self, int index) -> ArTime"""
        return _AriaPy.ArSerialConnection_getTimeRead(self, *args)

    def isTimeStamping(self):
        """isTimeStamping(self) -> bool"""
        return _AriaPy.ArSerialConnection_isTimeStamping(self)

ArSerialConnection_swigregister = _AriaPy.ArSerialConnection_swigregister
ArSerialConnection_swigregister(ArSerialConnection)

class ArSignalHandler(ArASyncTask):
    """Proxy of C++ ArSignalHandler class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SigHUP = _AriaPy.ArSignalHandler_SigHUP
    SigINT = _AriaPy.ArSignalHandler_SigINT
    SigQUIT = _AriaPy.ArSignalHandler_SigQUIT
    SigILL = _AriaPy.ArSignalHandler_SigILL
    SigTRAP = _AriaPy.ArSignalHandler_SigTRAP
    SigABRT = _AriaPy.ArSignalHandler_SigABRT
    SigBUS = _AriaPy.ArSignalHandler_SigBUS
    SigFPE = _AriaPy.ArSignalHandler_SigFPE
    SigKILL = _AriaPy.ArSignalHandler_SigKILL
    SigUSR1 = _AriaPy.ArSignalHandler_SigUSR1
    SigSEGV = _AriaPy.ArSignalHandler_SigSEGV
    SigUSR2 = _AriaPy.ArSignalHandler_SigUSR2
    SigPIPE = _AriaPy.ArSignalHandler_SigPIPE
    SigALRM = _AriaPy.ArSignalHandler_SigALRM
    SigTERM = _AriaPy.ArSignalHandler_SigTERM
    SigSTKFLT = _AriaPy.ArSignalHandler_SigSTKFLT
    SigCHLD = _AriaPy.ArSignalHandler_SigCHLD
    SigCONT = _AriaPy.ArSignalHandler_SigCONT
    SigSTOP = _AriaPy.ArSignalHandler_SigSTOP
    SigTSTP = _AriaPy.ArSignalHandler_SigTSTP
    SigTTIN = _AriaPy.ArSignalHandler_SigTTIN
    SigTTOU = _AriaPy.ArSignalHandler_SigTTOU
    SigURG = _AriaPy.ArSignalHandler_SigURG
    SigXCPU = _AriaPy.ArSignalHandler_SigXCPU
    SigXFSZ = _AriaPy.ArSignalHandler_SigXFSZ
    SigVTALRM = _AriaPy.ArSignalHandler_SigVTALRM
    SigPROF = _AriaPy.ArSignalHandler_SigPROF
    SigWINCH = _AriaPy.ArSignalHandler_SigWINCH
    SigIO = _AriaPy.ArSignalHandler_SigIO
    SigPWR = _AriaPy.ArSignalHandler_SigPWR
    def createHandlerNonThreaded():
        """createHandlerNonThreaded()"""
        return _AriaPy.ArSignalHandler_createHandlerNonThreaded()

    createHandlerNonThreaded = staticmethod(createHandlerNonThreaded)
    def createHandlerThreaded():
        """createHandlerThreaded()"""
        return _AriaPy.ArSignalHandler_createHandlerThreaded()

    createHandlerThreaded = staticmethod(createHandlerThreaded)
    def blockCommon():
        """blockCommon()"""
        return _AriaPy.ArSignalHandler_blockCommon()

    blockCommon = staticmethod(blockCommon)
    def unblockAll():
        """unblockAll()"""
        return _AriaPy.ArSignalHandler_unblockAll()

    unblockAll = staticmethod(unblockAll)
    def block(*args):
        """block(Signal sig)"""
        return _AriaPy.ArSignalHandler_block(*args)

    block = staticmethod(block)
    def unblock(*args):
        """unblock(Signal sig)"""
        return _AriaPy.ArSignalHandler_unblock(*args)

    unblock = staticmethod(unblock)
    def handle(*args):
        """handle(Signal sig)"""
        return _AriaPy.ArSignalHandler_handle(*args)

    handle = staticmethod(handle)
    def unhandle(*args):
        """unhandle(Signal sig)"""
        return _AriaPy.ArSignalHandler_unhandle(*args)

    unhandle = staticmethod(unhandle)
    def addHandlerCB(*args):
        """addHandlerCB(ArFunctor1_Int func, Pos position)"""
        return _AriaPy.ArSignalHandler_addHandlerCB(*args)

    addHandlerCB = staticmethod(addHandlerCB)
    def delHandlerCB(*args):
        """delHandlerCB(ArFunctor1_Int func)"""
        return _AriaPy.ArSignalHandler_delHandlerCB(*args)

    delHandlerCB = staticmethod(delHandlerCB)
    def delAllHandlerCBs():
        """delAllHandlerCBs()"""
        return _AriaPy.ArSignalHandler_delAllHandlerCBs()

    delAllHandlerCBs = staticmethod(delAllHandlerCBs)
    def getHandler():
        """getHandler() -> ArSignalHandler"""
        return _AriaPy.ArSignalHandler_getHandler()

    getHandler = staticmethod(getHandler)
    def nameSignal(*args):
        """nameSignal(int sig) -> char"""
        return _AriaPy.ArSignalHandler_nameSignal(*args)

    nameSignal = staticmethod(nameSignal)
    def blockCommonThisThread():
        """blockCommonThisThread()"""
        return _AriaPy.ArSignalHandler_blockCommonThisThread()

    blockCommonThisThread = staticmethod(blockCommonThisThread)
    def blockAllThisThread():
        """blockAllThisThread()"""
        return _AriaPy.ArSignalHandler_blockAllThisThread()

    blockAllThisThread = staticmethod(blockAllThisThread)
    __swig_destroy__ = _AriaPy.delete_ArSignalHandler
    __del__ = lambda self : None;
    def runThread(self, *args):
        """runThread(self, void arg) -> void"""
        return _AriaPy.ArSignalHandler_runThread(self, *args)

    def signalCB(*args):
        """signalCB(int sig)"""
        return _AriaPy.ArSignalHandler_signalCB(*args)

    signalCB = staticmethod(signalCB)
    def logThread():
        """logThread()"""
        return _AriaPy.ArSignalHandler_logThread()

    logThread = staticmethod(logThread)
ArSignalHandler_swigregister = _AriaPy.ArSignalHandler_swigregister
ArSignalHandler_swigregister(ArSignalHandler)

def ArSignalHandler_createHandlerNonThreaded():
  """ArSignalHandler_createHandlerNonThreaded()"""
  return _AriaPy.ArSignalHandler_createHandlerNonThreaded()

def ArSignalHandler_createHandlerThreaded():
  """ArSignalHandler_createHandlerThreaded()"""
  return _AriaPy.ArSignalHandler_createHandlerThreaded()

def ArSignalHandler_blockCommon():
  """ArSignalHandler_blockCommon()"""
  return _AriaPy.ArSignalHandler_blockCommon()

def ArSignalHandler_unblockAll():
  """ArSignalHandler_unblockAll()"""
  return _AriaPy.ArSignalHandler_unblockAll()

def ArSignalHandler_block(*args):
  """ArSignalHandler_block(Signal sig)"""
  return _AriaPy.ArSignalHandler_block(*args)

def ArSignalHandler_unblock(*args):
  """ArSignalHandler_unblock(Signal sig)"""
  return _AriaPy.ArSignalHandler_unblock(*args)

def ArSignalHandler_handle(*args):
  """ArSignalHandler_handle(Signal sig)"""
  return _AriaPy.ArSignalHandler_handle(*args)

def ArSignalHandler_unhandle(*args):
  """ArSignalHandler_unhandle(Signal sig)"""
  return _AriaPy.ArSignalHandler_unhandle(*args)

def ArSignalHandler_addHandlerCB(*args):
  """ArSignalHandler_addHandlerCB(ArFunctor1_Int func, Pos position)"""
  return _AriaPy.ArSignalHandler_addHandlerCB(*args)

def ArSignalHandler_delHandlerCB(*args):
  """ArSignalHandler_delHandlerCB(ArFunctor1_Int func)"""
  return _AriaPy.ArSignalHandler_delHandlerCB(*args)

def ArSignalHandler_delAllHandlerCBs():
  """ArSignalHandler_delAllHandlerCBs()"""
  return _AriaPy.ArSignalHandler_delAllHandlerCBs()

def ArSignalHandler_getHandler():
  """ArSignalHandler_getHandler() -> ArSignalHandler"""
  return _AriaPy.ArSignalHandler_getHandler()

def ArSignalHandler_nameSignal(*args):
  """ArSignalHandler_nameSignal(int sig) -> char"""
  return _AriaPy.ArSignalHandler_nameSignal(*args)

def ArSignalHandler_blockCommonThisThread():
  """ArSignalHandler_blockCommonThisThread()"""
  return _AriaPy.ArSignalHandler_blockCommonThisThread()

def ArSignalHandler_blockAllThisThread():
  """ArSignalHandler_blockAllThisThread()"""
  return _AriaPy.ArSignalHandler_blockAllThisThread()

def ArSignalHandler_signalCB(*args):
  """ArSignalHandler_signalCB(int sig)"""
  return _AriaPy.ArSignalHandler_signalCB(*args)

def ArSignalHandler_logThread():
  """ArSignalHandler_logThread()"""
  return _AriaPy.ArSignalHandler_logThread()

class ArSimpleConnector(object):
    """Proxy of C++ ArSimpleConnector class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, int argc) -> ArSimpleConnector
        __init__(self, ArArgumentBuilder arguments) -> ArSimpleConnector
        __init__(self, ArArgumentParser parser) -> ArSimpleConnector
        """
        this = _AriaPy.new_ArSimpleConnector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArSimpleConnector
    __del__ = lambda self : None;
    def setupRobot(self, *args):
        """setupRobot(self, ArRobot robot) -> bool"""
        return _AriaPy.ArSimpleConnector_setupRobot(self, *args)

    def connectRobot(self, *args):
        """connectRobot(self, ArRobot robot) -> bool"""
        return _AriaPy.ArSimpleConnector_connectRobot(self, *args)

    def setupLaser(self, *args):
        """setupLaser(self, ArSick laser) -> bool"""
        return _AriaPy.ArSimpleConnector_setupLaser(self, *args)

    def setupSecondLaser(self, *args):
        """setupSecondLaser(self, ArSick laser) -> bool"""
        return _AriaPy.ArSimpleConnector_setupSecondLaser(self, *args)

    def setupLaserArbitrary(self, *args):
        """setupLaserArbitrary(self, ArSick laser, int laserNumber) -> bool"""
        return _AriaPy.ArSimpleConnector_setupLaserArbitrary(self, *args)

    def connectLaser(self, *args):
        """connectLaser(self, ArSick laser) -> bool"""
        return _AriaPy.ArSimpleConnector_connectLaser(self, *args)

    def connectSecondLaser(self, *args):
        """connectSecondLaser(self, ArSick laser) -> bool"""
        return _AriaPy.ArSimpleConnector_connectSecondLaser(self, *args)

    def connectLaserArbitrary(self, *args):
        """connectLaserArbitrary(self, ArSick laser, int laserNumber) -> bool"""
        return _AriaPy.ArSimpleConnector_connectLaserArbitrary(self, *args)

    def parseArgs(self, *args):
        """
        parseArgs(self) -> bool
        parseArgs(self, ArArgumentParser parser) -> bool
        """
        return _AriaPy.ArSimpleConnector_parseArgs(self, *args)

    def logOptions(self):
        """logOptions(self)"""
        return _AriaPy.ArSimpleConnector_logOptions(self)

    def setMaxNumLasers(self, maxNumLasers = 1):
        """
        setMaxNumLasers(self, int maxNumLasers = 1)
        setMaxNumLasers(self)
        """
        return _AriaPy.ArSimpleConnector_setMaxNumLasers(self, maxNumLasers)

ArSimpleConnector_swigregister = _AriaPy.ArSimpleConnector_swigregister
ArSimpleConnector_swigregister(ArSimpleConnector)

class ArSimulatedLaser(ArLaser):
    """Proxy of C++ ArSimulatedLaser class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArLaser laser) -> ArSimulatedLaser"""
        this = _AriaPy.new_ArSimulatedLaser(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArSimulatedLaser
    __del__ = lambda self : None;
    def blockingConnect(self):
        """blockingConnect(self) -> bool"""
        return _AriaPy.ArSimulatedLaser_blockingConnect(self)

    def asyncConnect(self):
        """asyncConnect(self) -> bool"""
        return _AriaPy.ArSimulatedLaser_asyncConnect(self)

    def disconnect(self):
        """disconnect(self) -> bool"""
        return _AriaPy.ArSimulatedLaser_disconnect(self)

    def isConnected(self):
        """isConnected(self) -> bool"""
        return _AriaPy.ArSimulatedLaser_isConnected(self)

    def isTryingToConnect(self):
        """isTryingToConnect(self) -> bool"""
        return _AriaPy.ArSimulatedLaser_isTryingToConnect(self)

ArSimulatedLaser_swigregister = _AriaPy.ArSimulatedLaser_swigregister
ArSimulatedLaser_swigregister(ArSimulatedLaser)

class ArSocket(object):
    """Proxy of C++ ArSocket class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    UDP = _AriaPy.ArSocket_UDP
    TCP = _AriaPy.ArSocket_TCP
    Unknown = _AriaPy.ArSocket_Unknown
    NoErr = _AriaPy.ArSocket_NoErr
    NetFail = _AriaPy.ArSocket_NetFail
    ConBadHost = _AriaPy.ArSocket_ConBadHost
    ConNoRoute = _AriaPy.ArSocket_ConNoRoute
    ConRefused = _AriaPy.ArSocket_ConRefused
    NameLookup = _AriaPy.ArSocket_NameLookup
    def __init__(self, *args): 
        """
        __init__(self) -> ArSocket
        __init__(self, char host, int port, Type type) -> ArSocket
        __init__(self, int port, bool doClose, Type type) -> ArSocket
        """
        this = _AriaPy.new_ArSocket(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArSocket
    __del__ = lambda self : None;
    def init():
        """init() -> bool"""
        return _AriaPy.ArSocket_init()

    init = staticmethod(init)
    def shutdown():
        """shutdown()"""
        return _AriaPy.ArSocket_shutdown()

    shutdown = staticmethod(shutdown)
    def toString(*args):
        """toString(Type t) -> char"""
        return _AriaPy.ArSocket_toString(*args)

    toString = staticmethod(toString)
    ourInitialized = _swig_property(_AriaPy.ArSocket_ourInitialized_get, _AriaPy.ArSocket_ourInitialized_set)
    def copy(self, *args):
        """
        copy(self, int fd, bool doclose) -> bool
        copy(self, ArSocket s)
        """
        return _AriaPy.ArSocket_copy(self, *args)

    def transfer(self, *args):
        """transfer(self, ArSocket s)"""
        return _AriaPy.ArSocket_transfer(self, *args)

    def connect(self, *args):
        """
        connect(self, char host, int port, Type type = TCP, char openOnIP = None) -> bool
        connect(self, char host, int port, Type type = TCP) -> bool
        connect(self, char host, int port) -> bool
        """
        return _AriaPy.ArSocket_connect(self, *args)

    def open(self, *args):
        """
        open(self, int port, Type type, char openOnIP = None) -> bool
        open(self, int port, Type type) -> bool
        """
        return _AriaPy.ArSocket_open(self, *args)

    def create(self, *args):
        """create(self, Type type) -> bool"""
        return _AriaPy.ArSocket_create(self, *args)

    def findValidPort(self, *args):
        """
        findValidPort(self, int startPort, char openOnIP = None) -> bool
        findValidPort(self, int startPort) -> bool
        """
        return _AriaPy.ArSocket_findValidPort(self, *args)

    def connectTo(self, *args):
        """
        connectTo(self, char host, int port) -> bool
        connectTo(self, sockaddr_in sin) -> bool
        """
        return _AriaPy.ArSocket_connectTo(self, *args)

    def accept(self, *args):
        """accept(self, ArSocket sock) -> bool"""
        return _AriaPy.ArSocket_accept(self, *args)

    def close(self):
        """close(self) -> bool"""
        return _AriaPy.ArSocket_close(self)

    def sendTo(self, *args):
        """
        sendTo(self, void msg, int len) -> int
        sendTo(self, void msg, int len, sockaddr_in sin) -> int
        """
        return _AriaPy.ArSocket_sendTo(self, *args)

    def recvFrom(self, *args):
        """recvFrom(self, void msg, int len, sockaddr_in sin) -> int"""
        return _AriaPy.ArSocket_recvFrom(self, *args)

    def hostAddr(*args):
        """hostAddr(char host, in_addr addr) -> bool"""
        return _AriaPy.ArSocket_hostAddr(*args)

    hostAddr = staticmethod(hostAddr)
    def addrHost(*args):
        """addrHost(in_addr addr, char host) -> bool"""
        return _AriaPy.ArSocket_addrHost(*args)

    addrHost = staticmethod(addrHost)
    def getHostName():
        """getHostName() -> string"""
        return _AriaPy.ArSocket_getHostName()

    getHostName = staticmethod(getHostName)
    def getSockName(self):
        """getSockName(self) -> bool"""
        return _AriaPy.ArSocket_getSockName(self)

    def sockAddrIn(self):
        """sockAddrIn(self) -> sockaddr_in"""
        return _AriaPy.ArSocket_sockAddrIn(self)

    def inAddr(self):
        """inAddr(self) -> in_addr"""
        return _AriaPy.ArSocket_inAddr(self)

    def inPort(self):
        """inPort(self) -> unsigned short"""
        return _AriaPy.ArSocket_inPort(self)

    def inToA(*args):
        """inToA(in_addr addr, char buff)"""
        return _AriaPy.ArSocket_inToA(*args)

    inToA = staticmethod(inToA)
    def sockAddrLen():
        """sockAddrLen() -> size_t"""
        return _AriaPy.ArSocket_sockAddrLen()

    sockAddrLen = staticmethod(sockAddrLen)
    def maxHostNameLen():
        """maxHostNameLen() -> size_t"""
        return _AriaPy.ArSocket_maxHostNameLen()

    maxHostNameLen = staticmethod(maxHostNameLen)
    def hostToNetOrder(*args):
        """hostToNetOrder(int i) -> unsigned int"""
        return _AriaPy.ArSocket_hostToNetOrder(*args)

    hostToNetOrder = staticmethod(hostToNetOrder)
    def netToHostOrder(*args):
        """netToHostOrder(int i) -> unsigned int"""
        return _AriaPy.ArSocket_netToHostOrder(*args)

    netToHostOrder = staticmethod(netToHostOrder)
    def setLinger(self, *args):
        """setLinger(self, int time) -> bool"""
        return _AriaPy.ArSocket_setLinger(self, *args)

    def setBroadcast(self):
        """setBroadcast(self) -> bool"""
        return _AriaPy.ArSocket_setBroadcast(self)

    def setReuseAddress(self):
        """setReuseAddress(self) -> bool"""
        return _AriaPy.ArSocket_setReuseAddress(self)

    def setNonBlock(self):
        """setNonBlock(self) -> bool"""
        return _AriaPy.ArSocket_setNonBlock(self)

    def setDoClose(self, *args):
        """setDoClose(self, bool yesno)"""
        return _AriaPy.ArSocket_setDoClose(self, *args)

    def setFakeWrites(self, *args):
        """setFakeWrites(self, bool fakeWrites)"""
        return _AriaPy.ArSocket_setFakeWrites(self, *args)

    def getFD(self):
        """getFD(self) -> int"""
        return _AriaPy.ArSocket_getFD(self)

    def getType(self):
        """getType(self) -> Type"""
        return _AriaPy.ArSocket_getType(self)

    def getErrorStr(self):
        """getErrorStr(self) -> string"""
        return _AriaPy.ArSocket_getErrorStr(self)

    def getError(self):
        """getError(self) -> Error"""
        return _AriaPy.ArSocket_getError(self)

    def setErrorTracking(self, *args):
        """setErrorTracking(self, bool errorTracking)"""
        return _AriaPy.ArSocket_setErrorTracking(self, *args)

    def getErrorTracking(self):
        """getErrorTracking(self) -> bool"""
        return _AriaPy.ArSocket_getErrorTracking(self)

    def getBadWrite(self):
        """getBadWrite(self) -> bool"""
        return _AriaPy.ArSocket_getBadWrite(self)

    def getBadRead(self):
        """getBadRead(self) -> bool"""
        return _AriaPy.ArSocket_getBadRead(self)

    def writeStringPlain(self, *args):
        """writeStringPlain(self, char str) -> int"""
        return _AriaPy.ArSocket_writeStringPlain(self, *args)

    def readString(self, msWait = 0):
        """
        readString(self, unsigned int msWait = 0) -> char
        readString(self) -> char
        """
        return _AriaPy.ArSocket_readString(self, msWait)

    def setReadStringIgnoreReturn(self, *args):
        """setReadStringIgnoreReturn(self, bool ignore)"""
        return _AriaPy.ArSocket_setReadStringIgnoreReturn(self, *args)

    def clearPartialReadString(self):
        """clearPartialReadString(self)"""
        return _AriaPy.ArSocket_clearPartialReadString(self)

    def comparePartialReadString(self, *args):
        """comparePartialReadString(self, char partialString) -> int"""
        return _AriaPy.ArSocket_comparePartialReadString(self, *args)

    def getLastStringReadTime(self):
        """getLastStringReadTime(self) -> ArTime"""
        return _AriaPy.ArSocket_getLastStringReadTime(self)

    def setEcho(self, *args):
        """setEcho(self, bool echo)"""
        return _AriaPy.ArSocket_setEcho(self, *args)

    def getEcho(self):
        """getEcho(self) -> bool"""
        return _AriaPy.ArSocket_getEcho(self)

    def setLogWriteStrings(self, *args):
        """setLogWriteStrings(self, bool logWriteStrings)"""
        return _AriaPy.ArSocket_setLogWriteStrings(self, *args)

    def getLogWriteStrings(self):
        """getLogWriteStrings(self) -> bool"""
        return _AriaPy.ArSocket_getLogWriteStrings(self)

    def setStringUseWrongEndChars(self, *args):
        """setStringUseWrongEndChars(self, bool useWrongEndChars)"""
        return _AriaPy.ArSocket_setStringUseWrongEndChars(self, *args)

    def getStringUseWrongEndChars(self):
        """getStringUseWrongEndChars(self) -> bool"""
        return _AriaPy.ArSocket_getStringUseWrongEndChars(self)

    def getRawIPString(self):
        """getRawIPString(self) -> char"""
        return _AriaPy.ArSocket_getRawIPString(self)

    def getIPString(self):
        """getIPString(self) -> char"""
        return _AriaPy.ArSocket_getIPString(self)

    def setIPString(self, *args):
        """setIPString(self, char ipString)"""
        return _AriaPy.ArSocket_setIPString(self, *args)

    def setCloseCallback(self, *args):
        """setCloseCallback(self, ArFunctor functor)"""
        return _AriaPy.ArSocket_setCloseCallback(self, *args)

    def getCloseCallback(self):
        """getCloseCallback(self) -> ArFunctor"""
        return _AriaPy.ArSocket_getCloseCallback(self)

    def getSends(self):
        """getSends(self) -> long"""
        return _AriaPy.ArSocket_getSends(self)

    def getBytesSent(self):
        """getBytesSent(self) -> long"""
        return _AriaPy.ArSocket_getBytesSent(self)

    def getRecvs(self):
        """getRecvs(self) -> long"""
        return _AriaPy.ArSocket_getRecvs(self)

    def getBytesRecvd(self):
        """getBytesRecvd(self) -> long"""
        return _AriaPy.ArSocket_getBytesRecvd(self)

    def resetTracking(self):
        """resetTracking(self)"""
        return _AriaPy.ArSocket_resetTracking(self)

    def setNoDelay(self, *args):
        """setNoDelay(self, bool flag) -> bool"""
        return _AriaPy.ArSocket_setNoDelay(self, *args)

    def isOpen(self):
        """isOpen(self) -> bool"""
        return _AriaPy.ArSocket_isOpen(self)

    def read(self, *args):
        """
        read(self, void buff, size_t len, unsigned int msWait = 0) -> int
        read(self, void buff, size_t len) -> int
        read(self, size_t len, unsigned int msWait) -> string
        """
        return _AriaPy.ArSocket_read(self, *args)

    def write(self, *args):
        """
        write(self, void buff, size_t len) -> int
        write(self, string s) -> bool
        """
        return _AriaPy.ArSocket_write(self, *args)

ArSocket_swigregister = _AriaPy.ArSocket_swigregister
ArSocket_swigregister(ArSocket)

def ArSocket_init():
  """ArSocket_init() -> bool"""
  return _AriaPy.ArSocket_init()

def ArSocket_shutdown():
  """ArSocket_shutdown()"""
  return _AriaPy.ArSocket_shutdown()

def ArSocket_toString(*args):
  """ArSocket_toString(Type t) -> char"""
  return _AriaPy.ArSocket_toString(*args)

def ArSocket_hostAddr(*args):
  """ArSocket_hostAddr(char host, in_addr addr) -> bool"""
  return _AriaPy.ArSocket_hostAddr(*args)

def ArSocket_addrHost(*args):
  """ArSocket_addrHost(in_addr addr, char host) -> bool"""
  return _AriaPy.ArSocket_addrHost(*args)

def ArSocket_getHostName():
  """ArSocket_getHostName() -> string"""
  return _AriaPy.ArSocket_getHostName()

def ArSocket_inToA(*args):
  """ArSocket_inToA(in_addr addr, char buff)"""
  return _AriaPy.ArSocket_inToA(*args)

def ArSocket_sockAddrLen():
  """ArSocket_sockAddrLen() -> size_t"""
  return _AriaPy.ArSocket_sockAddrLen()

def ArSocket_maxHostNameLen():
  """ArSocket_maxHostNameLen() -> size_t"""
  return _AriaPy.ArSocket_maxHostNameLen()

def ArSocket_hostToNetOrder(*args):
  """ArSocket_hostToNetOrder(int i) -> unsigned int"""
  return _AriaPy.ArSocket_hostToNetOrder(*args)

def ArSocket_netToHostOrder(*args):
  """ArSocket_netToHostOrder(int i) -> unsigned int"""
  return _AriaPy.ArSocket_netToHostOrder(*args)

class ArSonarAutoDisabler(object):
    """Proxy of C++ ArSonarAutoDisabler class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot) -> ArSonarAutoDisabler"""
        this = _AriaPy.new_ArSonarAutoDisabler(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArSonarAutoDisabler
    __del__ = lambda self : None;
    def supress(self):
        """supress(self)"""
        return _AriaPy.ArSonarAutoDisabler_supress(self)

    def getSupressCallback(self):
        """getSupressCallback(self) -> ArFunctor"""
        return _AriaPy.ArSonarAutoDisabler_getSupressCallback(self)

    def unsupress(self):
        """unsupress(self)"""
        return _AriaPy.ArSonarAutoDisabler_unsupress(self)

    def getUnsupressCallback(self):
        """getUnsupressCallback(self) -> ArFunctor"""
        return _AriaPy.ArSonarAutoDisabler_getUnsupressCallback(self)

    def setAutonomousDriving(self):
        """setAutonomousDriving(self)"""
        return _AriaPy.ArSonarAutoDisabler_setAutonomousDriving(self)

    def getSetAutonomousDrivingCallback(self):
        """getSetAutonomousDrivingCallback(self) -> ArFunctor"""
        return _AriaPy.ArSonarAutoDisabler_getSetAutonomousDrivingCallback(self)

    def clearAutonomousDriving(self):
        """clearAutonomousDriving(self)"""
        return _AriaPy.ArSonarAutoDisabler_clearAutonomousDriving(self)

    def getClearAutonomousDrivingCallback(self):
        """getClearAutonomousDrivingCallback(self) -> ArFunctor"""
        return _AriaPy.ArSonarAutoDisabler_getClearAutonomousDrivingCallback(self)

ArSonarAutoDisabler_swigregister = _AriaPy.ArSonarAutoDisabler_swigregister
ArSonarAutoDisabler_swigregister(ArSonarAutoDisabler)

class ArSonarDevice(ArRangeDevice):
    """Proxy of C++ ArSonarDevice class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, currentBufferSize = 24, cumulativeBufferSize = 64, 
    name = "sonar"): 
        """
        __init__(self, size_t currentBufferSize = 24, size_t cumulativeBufferSize = 64, 
            char name = "sonar") -> ArSonarDevice
        __init__(self, size_t currentBufferSize = 24, size_t cumulativeBufferSize = 64) -> ArSonarDevice
        __init__(self, size_t currentBufferSize = 24) -> ArSonarDevice
        __init__(self) -> ArSonarDevice
        """
        this = _AriaPy.new_ArSonarDevice(currentBufferSize, cumulativeBufferSize, name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArSonarDevice
    __del__ = lambda self : None;
    def processReadings(self):
        """processReadings(self)"""
        return _AriaPy.ArSonarDevice_processReadings(self)

    def setRobot(self, *args):
        """setRobot(self, ArRobot robot)"""
        return _AriaPy.ArSonarDevice_setRobot(self, *args)

    def addReading(self, *args):
        """addReading(self, double x, double y)"""
        return _AriaPy.ArSonarDevice_addReading(self, *args)

    def setIgnoreReadingCB(self, *args):
        """setIgnoreReadingCB(self, ArRetFunctor1<(bool,ArPose)> ignoreReadingCB)"""
        return _AriaPy.ArSonarDevice_setIgnoreReadingCB(self, *args)

    def getIgnoreReadingCB(self):
        """getIgnoreReadingCB(self) -> ArRetFunctor1<(bool,ArPose)>"""
        return _AriaPy.ArSonarDevice_getIgnoreReadingCB(self)

    def setCumulativeMaxRange(self, *args):
        """setCumulativeMaxRange(self, double range)"""
        return _AriaPy.ArSonarDevice_setCumulativeMaxRange(self, *args)

ArSonarDevice_swigregister = _AriaPy.ArSonarDevice_swigregister
ArSonarDevice_swigregister(ArSonarDevice)

class ArSonyPacket(ArBasePacket):
    """Proxy of C++ ArSonyPacket class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, bufferSize = 15): 
        """
        __init__(self, UByte2 bufferSize = 15) -> ArSonyPacket
        __init__(self) -> ArSonyPacket
        """
        this = _AriaPy.new_ArSonyPacket(bufferSize)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArSonyPacket
    __del__ = lambda self : None;
    def uByteToBuf(self, *args):
        """uByteToBuf(self, UByte val)"""
        return _AriaPy.ArSonyPacket_uByteToBuf(self, *args)

    def byte2ToBuf(self, *args):
        """byte2ToBuf(self, Byte2 val)"""
        return _AriaPy.ArSonyPacket_byte2ToBuf(self, *args)

    def byte2ToBufAtPos(self, *args):
        """byte2ToBufAtPos(self, Byte2 val, UByte2 pose)"""
        return _AriaPy.ArSonyPacket_byte2ToBufAtPos(self, *args)

ArSonyPacket_swigregister = _AriaPy.ArSonyPacket_swigregister
ArSonyPacket_swigregister(ArSonyPacket)

class ArSonyPTZ(ArPTZ):
    """Proxy of C++ ArSonyPTZ class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot) -> ArSonyPTZ"""
        this = _AriaPy.new_ArSonyPTZ(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArSonyPTZ
    __del__ = lambda self : None;
    def init(self):
        """init(self) -> bool"""
        return _AriaPy.ArSonyPTZ_init(self)

    def getTypeName(self):
        """getTypeName(self) -> char"""
        return _AriaPy.ArSonyPTZ_getTypeName(self)

    def canZoom(self):
        """canZoom(self) -> bool"""
        return _AriaPy.ArSonyPTZ_canZoom(self)

    def zoom(self, *args):
        """zoom(self, int zoomValue) -> bool"""
        return _AriaPy.ArSonyPTZ_zoom(self, *args)

    def zoomRel(self, *args):
        """zoomRel(self, int zoomValue) -> bool"""
        return _AriaPy.ArSonyPTZ_zoomRel(self, *args)

    def getZoom(self):
        """getZoom(self) -> int"""
        return _AriaPy.ArSonyPTZ_getZoom(self)

    def canGetFOV(self):
        """canGetFOV(self) -> bool"""
        return _AriaPy.ArSonyPTZ_canGetFOV(self)

    def getFOVAtMaxZoom(self):
        """getFOVAtMaxZoom(self) -> double"""
        return _AriaPy.ArSonyPTZ_getFOVAtMaxZoom(self)

    def getFOVAtMinZoom(self):
        """getFOVAtMinZoom(self) -> double"""
        return _AriaPy.ArSonyPTZ_getFOVAtMinZoom(self)

    def backLightingOn(self):
        """backLightingOn(self) -> bool"""
        return _AriaPy.ArSonyPTZ_backLightingOn(self)

    def backLightingOff(self):
        """backLightingOff(self) -> bool"""
        return _AriaPy.ArSonyPTZ_backLightingOff(self)

ArSonyPTZ_swigregister = _AriaPy.ArSonyPTZ_swigregister
ArSonyPTZ_swigregister(ArSonyPTZ)

class ArSoundPlayer(object):
    """Proxy of C++ ArSoundPlayer class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def playWavFile(*args):
        """
        playWavFile(char filename, char params) -> bool
        playWavFile(char filename) -> bool
        """
        return _AriaPy.ArSoundPlayer_playWavFile(*args)

    playWavFile = staticmethod(playWavFile)
    def playNativeFile(*args):
        """playNativeFile(char filename, char params) -> bool"""
        return _AriaPy.ArSoundPlayer_playNativeFile(*args)

    playNativeFile = staticmethod(playNativeFile)
    def stopPlaying():
        """stopPlaying()"""
        return _AriaPy.ArSoundPlayer_stopPlaying()

    stopPlaying = staticmethod(stopPlaying)
    def getPlayWavFileCallback():
        """getPlayWavFileCallback() -> ArRetFunctor2<(bool,p.q(const).char,p.q(const).char)>"""
        return _AriaPy.ArSoundPlayer_getPlayWavFileCallback()

    getPlayWavFileCallback = staticmethod(getPlayWavFileCallback)
    def getStopPlayingCallback():
        """getStopPlayingCallback() -> ArFunctor"""
        return _AriaPy.ArSoundPlayer_getStopPlayingCallback()

    getStopPlayingCallback = staticmethod(getStopPlayingCallback)
    def playSoundPCM16(*args):
        """playSoundPCM16(char data, int numSamples) -> bool"""
        return _AriaPy.ArSoundPlayer_playSoundPCM16(*args)

    playSoundPCM16 = staticmethod(playSoundPCM16)
    def setVolume(*args):
        """setVolume(double v)"""
        return _AriaPy.ArSoundPlayer_setVolume(*args)

    setVolume = staticmethod(setVolume)
    def setVolumePercent(*args):
        """setVolumePercent(double pct)"""
        return _AriaPy.ArSoundPlayer_setVolumePercent(*args)

    setVolumePercent = staticmethod(setVolumePercent)
    def __init__(self): 
        """__init__(self) -> ArSoundPlayer"""
        this = _AriaPy.new_ArSoundPlayer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArSoundPlayer
    __del__ = lambda self : None;
ArSoundPlayer_swigregister = _AriaPy.ArSoundPlayer_swigregister
ArSoundPlayer_swigregister(ArSoundPlayer)

def ArSoundPlayer_playWavFile(*args):
  """
    playWavFile(char filename, char params) -> bool
    ArSoundPlayer_playWavFile(char filename) -> bool
    """
  return _AriaPy.ArSoundPlayer_playWavFile(*args)

def ArSoundPlayer_playNativeFile(*args):
  """ArSoundPlayer_playNativeFile(char filename, char params) -> bool"""
  return _AriaPy.ArSoundPlayer_playNativeFile(*args)

def ArSoundPlayer_stopPlaying():
  """ArSoundPlayer_stopPlaying()"""
  return _AriaPy.ArSoundPlayer_stopPlaying()

def ArSoundPlayer_getPlayWavFileCallback():
  """ArSoundPlayer_getPlayWavFileCallback() -> ArRetFunctor2<(bool,p.q(const).char,p.q(const).char)>"""
  return _AriaPy.ArSoundPlayer_getPlayWavFileCallback()

def ArSoundPlayer_getStopPlayingCallback():
  """ArSoundPlayer_getStopPlayingCallback() -> ArFunctor"""
  return _AriaPy.ArSoundPlayer_getStopPlayingCallback()

def ArSoundPlayer_playSoundPCM16(*args):
  """ArSoundPlayer_playSoundPCM16(char data, int numSamples) -> bool"""
  return _AriaPy.ArSoundPlayer_playSoundPCM16(*args)

def ArSoundPlayer_setVolume(*args):
  """ArSoundPlayer_setVolume(double v)"""
  return _AriaPy.ArSoundPlayer_setVolume(*args)

def ArSoundPlayer_setVolumePercent(*args):
  """ArSoundPlayer_setVolumePercent(double pct)"""
  return _AriaPy.ArSoundPlayer_setVolumePercent(*args)

class ArSoundsQueue(ArASyncTask):
    """Proxy of C++ ArSoundsQueue class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    SPEECH = _AriaPy.ArSoundsQueue_SPEECH
    SOUND_FILE = _AriaPy.ArSoundsQueue_SOUND_FILE
    SOUND_DATA = _AriaPy.ArSoundsQueue_SOUND_DATA
    OTHER = _AriaPy.ArSoundsQueue_OTHER
    def __init__(self, *args): 
        """
        __init__(self) -> ArSoundsQueue
        __init__(self, ArRetFunctor_Bool speakInitCB, PlayItemFunctor speakCB = None, 
            InterruptItemFunctor interruptSpeechCB = None, 
            ArRetFunctor_Bool playInitCB = None, 
            PlayItemFunctor playFileCB = None, InterruptItemFunctor interruptFileCB = None) -> ArSoundsQueue
        __init__(self, ArRetFunctor_Bool speakInitCB, PlayItemFunctor speakCB = None, 
            InterruptItemFunctor interruptSpeechCB = None, 
            ArRetFunctor_Bool playInitCB = None, 
            PlayItemFunctor playFileCB = None) -> ArSoundsQueue
        __init__(self, ArRetFunctor_Bool speakInitCB, PlayItemFunctor speakCB = None, 
            InterruptItemFunctor interruptSpeechCB = None, 
            ArRetFunctor_Bool playInitCB = None) -> ArSoundsQueue
        __init__(self, ArRetFunctor_Bool speakInitCB, PlayItemFunctor speakCB = None, 
            InterruptItemFunctor interruptSpeechCB = None) -> ArSoundsQueue
        __init__(self, ArRetFunctor_Bool speakInitCB, PlayItemFunctor speakCB = None) -> ArSoundsQueue
        __init__(self, ArRetFunctor_Bool speakInitCB) -> ArSoundsQueue
        __init__(self, ArSpeechSynth speechSynthesizer, ArRetFunctor_Bool playInitCB = None, 
            PlayItemFunctor playFileCB = None, 
            InterruptItemFunctor interruptFileCB = None) -> ArSoundsQueue
        __init__(self, ArSpeechSynth speechSynthesizer, ArRetFunctor_Bool playInitCB = None, 
            PlayItemFunctor playFileCB = None) -> ArSoundsQueue
        __init__(self, ArSpeechSynth speechSynthesizer, ArRetFunctor_Bool playInitCB = None) -> ArSoundsQueue
        __init__(self, ArSpeechSynth speechSynthesizer) -> ArSoundsQueue
        """
        this = _AriaPy.new_ArSoundsQueue(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArSoundsQueue
    __del__ = lambda self : None;
    def addInitCallback(self, *args):
        """addInitCallback(self, ArRetFunctor_Bool cb)"""
        return _AriaPy.ArSoundsQueue_addInitCallback(self, *args)

    def setSpeakInitCallback(self, *args):
        """setSpeakInitCallback(self, ArRetFunctor_Bool cb)"""
        return _AriaPy.ArSoundsQueue_setSpeakInitCallback(self, *args)

    def addItem(self, *args):
        """
        addItem(self, Item item)
        addItem(self, ItemType type, char data, std::list<(p.ArSoundsQueue::PlayItemFunctor,std::allocator<(p.ArSoundsQueue::PlayItemFunctor)>)> callbacks, 
            int priority = 0, 
            char params = None)
        addItem(self, ItemType type, char data, std::list<(p.ArSoundsQueue::PlayItemFunctor,std::allocator<(p.ArSoundsQueue::PlayItemFunctor)>)> callbacks, 
            int priority = 0)
        addItem(self, ItemType type, char data, std::list<(p.ArSoundsQueue::PlayItemFunctor,std::allocator<(p.ArSoundsQueue::PlayItemFunctor)>)> callbacks)
        """
        return _AriaPy.ArSoundsQueue_addItem(self, *args)

    def isInitialized(self):
        """isInitialized(self) -> bool"""
        return _AriaPy.ArSoundsQueue_isInitialized(self)

    def isSpeakingOrPlaying(self):
        """isSpeakingOrPlaying(self) -> bool"""
        return _AriaPy.ArSoundsQueue_isSpeakingOrPlaying(self)

    def isPlaying(self):
        """isPlaying(self) -> bool"""
        return _AriaPy.ArSoundsQueue_isPlaying(self)

    def isSpeaking(self):
        """isSpeaking(self) -> bool"""
        return _AriaPy.ArSoundsQueue_isSpeaking(self)

    def run(self):
        """run(self)"""
        return _AriaPy.ArSoundsQueue_run(self)

    def runAsync(self):
        """runAsync(self)"""
        return _AriaPy.ArSoundsQueue_runAsync(self)

    def pause(self):
        """pause(self)"""
        return _AriaPy.ArSoundsQueue_pause(self)

    def resume(self):
        """resume(self)"""
        return _AriaPy.ArSoundsQueue_resume(self)

    def isPaused(self):
        """isPaused(self) -> bool"""
        return _AriaPy.ArSoundsQueue_isPaused(self)

    def interrupt(self):
        """interrupt(self)"""
        return _AriaPy.ArSoundsQueue_interrupt(self)

    def clearQueue(self):
        """clearQueue(self)"""
        return _AriaPy.ArSoundsQueue_clearQueue(self)

    def stop(self):
        """stop(self)"""
        return _AriaPy.ArSoundsQueue_stop(self)

    def getPauseCallback(self):
        """getPauseCallback(self) -> ArFunctor"""
        return _AriaPy.ArSoundsQueue_getPauseCallback(self)

    def getResumeCallback(self):
        """getResumeCallback(self) -> ArFunctor"""
        return _AriaPy.ArSoundsQueue_getResumeCallback(self)

    def getCurrentQueueSize(self):
        """getCurrentQueueSize(self) -> size_t"""
        return _AriaPy.ArSoundsQueue_getCurrentQueueSize(self)

    def addSoundStartedCallback(self, *args):
        """addSoundStartedCallback(self, ArFunctor f)"""
        return _AriaPy.ArSoundsQueue_addSoundStartedCallback(self, *args)

    def remSoundStartedCallback(self, *args):
        """remSoundStartedCallback(self, ArFunctor f)"""
        return _AriaPy.ArSoundsQueue_remSoundStartedCallback(self, *args)

    def addSoundFinishedCallback(self, *args):
        """addSoundFinishedCallback(self, ArFunctor f)"""
        return _AriaPy.ArSoundsQueue_addSoundFinishedCallback(self, *args)

    def remSoundFinishedCallback(self, *args):
        """remSoundFinishedCallback(self, ArFunctor f)"""
        return _AriaPy.ArSoundsQueue_remSoundFinishedCallback(self, *args)

    def addSoundItemStartedCallback(self, *args):
        """addSoundItemStartedCallback(self, ArFunctor1<(ArSoundsQueue::Item)> f)"""
        return _AriaPy.ArSoundsQueue_addSoundItemStartedCallback(self, *args)

    def remSoundItemStartedCallback(self, *args):
        """remSoundItemStartedCallback(self, ArFunctor1<(ArSoundsQueue::Item)> f)"""
        return _AriaPy.ArSoundsQueue_remSoundItemStartedCallback(self, *args)

    def addSoundItemFinishedCallback(self, *args):
        """addSoundItemFinishedCallback(self, ArFunctor1<(ArSoundsQueue::Item)> f)"""
        return _AriaPy.ArSoundsQueue_addSoundItemFinishedCallback(self, *args)

    def remSoundItemFinishedCallback(self, *args):
        """remSoundItemFinishedCallback(self, ArFunctor1<(ArSoundsQueue::Item)> f)"""
        return _AriaPy.ArSoundsQueue_remSoundItemFinishedCallback(self, *args)

    def addQueueNonemptyCallback(self, *args):
        """addQueueNonemptyCallback(self, ArFunctor f)"""
        return _AriaPy.ArSoundsQueue_addQueueNonemptyCallback(self, *args)

    def remQueueNonemptyCallback(self, *args):
        """remQueueNonemptyCallback(self, ArFunctor f)"""
        return _AriaPy.ArSoundsQueue_remQueueNonemptyCallback(self, *args)

    def addQueueEmptyCallback(self, *args):
        """addQueueEmptyCallback(self, ArFunctor f)"""
        return _AriaPy.ArSoundsQueue_addQueueEmptyCallback(self, *args)

    def remQueueEmptyCallback(self, *args):
        """remQueueEmptyCallback(self, ArFunctor f)"""
        return _AriaPy.ArSoundsQueue_remQueueEmptyCallback(self, *args)

    def findPendingItems(self, *args):
        """findPendingItems(self, char item) -> IntSet"""
        return _AriaPy.ArSoundsQueue_findPendingItems(self, *args)

    def removePendingItems(self, *args):
        """
        removePendingItems(self, char item, ItemType type)
        removePendingItems(self, char data)
        """
        return _AriaPy.ArSoundsQueue_removePendingItems(self, *args)

    def removePendingItemsByPriority(self, *args):
        """removePendingItemsByPriority(self, int priority)"""
        return _AriaPy.ArSoundsQueue_removePendingItemsByPriority(self, *args)

    def removePendingItemsByPriorityWithType(self, *args):
        """removePendingItemsByPriorityWithType(self, int priority, ItemType type)"""
        return _AriaPy.ArSoundsQueue_removePendingItemsByPriorityWithType(self, *args)

    def removePendingItemsByType(self, *args):
        """removePendingItemsByType(self, ItemType type)"""
        return _AriaPy.ArSoundsQueue_removePendingItemsByType(self, *args)

    def removeItems(self, *args):
        """
        removeItems(self, int priority)
        removeItems(self, Item item)
        """
        return _AriaPy.ArSoundsQueue_removeItems(self, *args)

    def nextItemByType(self, *args):
        """nextItemByType(self, ItemType type) -> string"""
        return _AriaPy.ArSoundsQueue_nextItemByType(self, *args)

    def nextItemByPriority(self, *args):
        """nextItemByPriority(self, int priority) -> string"""
        return _AriaPy.ArSoundsQueue_nextItemByPriority(self, *args)

    def nextItemByTypeAndPriority(self, *args):
        """nextItemByTypeAndPriority(self, ItemType type, int priority) -> string"""
        return _AriaPy.ArSoundsQueue_nextItemByTypeAndPriority(self, *args)

    def setSpeakCallback(self, *args):
        """setSpeakCallback(self, PlayItemFunctor cb)"""
        return _AriaPy.ArSoundsQueue_setSpeakCallback(self, *args)

    def setInterruptSpeechCallback(self, *args):
        """setInterruptSpeechCallback(self, InterruptItemFunctor cb)"""
        return _AriaPy.ArSoundsQueue_setInterruptSpeechCallback(self, *args)

    def setPlayFileCallback(self, *args):
        """setPlayFileCallback(self, PlayItemFunctor cb)"""
        return _AriaPy.ArSoundsQueue_setPlayFileCallback(self, *args)

    def setPlayWavFileCallback(self, *args):
        """setPlayWavFileCallback(self, PlayItemFunctor cb)"""
        return _AriaPy.ArSoundsQueue_setPlayWavFileCallback(self, *args)

    def setInterruptFileCallback(self, *args):
        """setInterruptFileCallback(self, InterruptItemFunctor cb)"""
        return _AriaPy.ArSoundsQueue_setInterruptFileCallback(self, *args)

    def setInterruptWavFileCallback(self, *args):
        """setInterruptWavFileCallback(self, InterruptItemFunctor cb)"""
        return _AriaPy.ArSoundsQueue_setInterruptWavFileCallback(self, *args)

    def speak(self, *args):
        """speak(self, char str)"""
        return _AriaPy.ArSoundsQueue_speak(self, *args)

    def play(self, *args):
        """play(self, char filename)"""
        return _AriaPy.ArSoundsQueue_play(self, *args)

    def createDefaultSpeechItem(self, speech = None):
        """
        createDefaultSpeechItem(self, char speech = None) -> Item
        createDefaultSpeechItem(self) -> Item
        """
        return _AriaPy.ArSoundsQueue_createDefaultSpeechItem(self, speech)

    def createDefaultFileItem(self, filename = None):
        """
        createDefaultFileItem(self, char filename = None) -> Item
        createDefaultFileItem(self) -> Item
        """
        return _AriaPy.ArSoundsQueue_createDefaultFileItem(self, filename)

    def setDefaultPlayConditionCB(self, *args):
        """setDefaultPlayConditionCB(self, PlaybackConditionFunctor f)"""
        return _AriaPy.ArSoundsQueue_setDefaultPlayConditionCB(self, *args)

    def runThread(self, *args):
        """runThread(self, void arg) -> void"""
        return _AriaPy.ArSoundsQueue_runThread(self, *args)

ArSoundsQueue_swigregister = _AriaPy.ArSoundsQueue_swigregister
ArSoundsQueue_swigregister(ArSoundsQueue)

class ArSpeechSynth(object):
    """Proxy of C++ ArSpeechSynth class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArSpeechSynth
    __del__ = lambda self : None;
    def init(self):
        """init(self) -> bool"""
        return _AriaPy.ArSpeechSynth_init(self)

    def addToConfig(self, *args):
        """addToConfig(self, ArConfig config)"""
        return _AriaPy.ArSpeechSynth_addToConfig(self, *args)

    def speak(self, *args):
        """
        speak(self, char str, char voiceParams, ArRetFunctor2<(bool,p.ArTypes::Byte2,int)> audioOutputCB, 
            unsigned short sampleRate = 0) -> bool
        speak(self, char str, char voiceParams, ArRetFunctor2<(bool,p.ArTypes::Byte2,int)> audioOutputCB) -> bool
        speak(self, char str, char voiceParams = None) -> bool
        speak(self, char str) -> bool
        """
        return _AriaPy.ArSpeechSynth_speak(self, *args)

    def speakf(self, *args):
        """speakf(self, char fmt, v(...) *args) -> bool"""
        return _AriaPy.ArSpeechSynth_speakf(self, *args)

    def interrupt(self):
        """interrupt(self)"""
        return _AriaPy.ArSpeechSynth_interrupt(self)

    def getInitCallback(self):
        """getInitCallback(self) -> ArRetFunctorC<(bool,ArSpeechSynth)>"""
        return _AriaPy.ArSpeechSynth_getInitCallback(self)

    def getSpeakCallback(self):
        """getSpeakCallback(self) -> ArRetFunctor2C<(bool,ArSpeechSynth,p.q(const).char,p.q(const).char)>"""
        return _AriaPy.ArSpeechSynth_getSpeakCallback(self)

    def getInterruptCallback(self):
        """getInterruptCallback(self) -> ArFunctorC<(ArSpeechSynth)>"""
        return _AriaPy.ArSpeechSynth_getInterruptCallback(self)

    def setAudioCallback(self, *args):
        """setAudioCallback(self, ArRetFunctor2<(bool,p.ArTypes::Byte2,int)> cb)"""
        return _AriaPy.ArSpeechSynth_setAudioCallback(self, *args)

    def setAudioSampleRate(self, *args):
        """setAudioSampleRate(self, int rate)"""
        return _AriaPy.ArSpeechSynth_setAudioSampleRate(self, *args)

    def getAudioSampleRate(self):
        """getAudioSampleRate(self) -> int"""
        return _AriaPy.ArSpeechSynth_getAudioSampleRate(self)

    def lock(self):
        """lock(self)"""
        return _AriaPy.ArSpeechSynth_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _AriaPy.ArSpeechSynth_unlock(self)

    def setVoice(self, *args):
        """setVoice(self, char name) -> bool"""
        return _AriaPy.ArSpeechSynth_setVoice(self, *args)

    def getCurrentVoiceName(self):
        """getCurrentVoiceName(self) -> char"""
        return _AriaPy.ArSpeechSynth_getCurrentVoiceName(self)

    def getVoiceNames(self):
        """getVoiceNames(self) -> std::list<(std::string,std::allocator<(std::string)>)>"""
        return _AriaPy.ArSpeechSynth_getVoiceNames(self)

ArSpeechSynth_swigregister = _AriaPy.ArSpeechSynth_swigregister
ArSpeechSynth_swigregister(ArSpeechSynth)

class ArStringInfoGroup(object):
    """Proxy of C++ ArStringInfoGroup class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ArStringInfoGroup"""
        this = _AriaPy.new_ArStringInfoGroup()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArStringInfoGroup
    __del__ = lambda self : None;
    def addString(self, *args):
        """addString(self, char name, UByte2 maxLen, ArFunctor2<(p.char,ArTypes::UByte2)> functor) -> bool"""
        return _AriaPy.ArStringInfoGroup_addString(self, *args)

    def addStringInt(self, *args):
        """
        addStringInt(self, char name, UByte2 maxLen, ArRetFunctor_Int functor, 
            char format = "%d") -> bool
        addStringInt(self, char name, UByte2 maxLen, ArRetFunctor_Int functor) -> bool
        """
        return _AriaPy.ArStringInfoGroup_addStringInt(self, *args)

    def addStringDouble(self, *args):
        """
        addStringDouble(self, char name, UByte2 maxLen, ArRetFunctor_Double functor, 
            char format = "%g") -> bool
        addStringDouble(self, char name, UByte2 maxLen, ArRetFunctor_Double functor) -> bool
        """
        return _AriaPy.ArStringInfoGroup_addStringDouble(self, *args)

    def addStringBool(self, *args):
        """
        addStringBool(self, char name, UByte2 maxLen, ArRetFunctor_Bool functor, 
            char format = "%s") -> bool
        addStringBool(self, char name, UByte2 maxLen, ArRetFunctor_Bool functor) -> bool
        """
        return _AriaPy.ArStringInfoGroup_addStringBool(self, *args)

    def addStringString(self, *args):
        """
        addStringString(self, char name, UByte2 maxLen, ArRetFunctor<(p.q(const).char)> functor, 
            char format = "%s") -> bool
        addStringString(self, char name, UByte2 maxLen, ArRetFunctor<(p.q(const).char)> functor) -> bool
        """
        return _AriaPy.ArStringInfoGroup_addStringString(self, *args)

    def addStringUnsignedLong(self, *args):
        """
        addStringUnsignedLong(self, char name, UByte2 maxLen, ArRetFunctor<(unsigned long)> functor, 
            char format = "%lu") -> bool
        addStringUnsignedLong(self, char name, UByte2 maxLen, ArRetFunctor<(unsigned long)> functor) -> bool
        """
        return _AriaPy.ArStringInfoGroup_addStringUnsignedLong(self, *args)

    def addStringLong(self, *args):
        """
        addStringLong(self, char name, UByte2 maxLen, ArRetFunctor<(long)> functor, 
            char format = "%ld") -> bool
        addStringLong(self, char name, UByte2 maxLen, ArRetFunctor<(long)> functor) -> bool
        """
        return _AriaPy.ArStringInfoGroup_addStringLong(self, *args)

    def addAddStringCallback(self, *args):
        """
        addAddStringCallback(self, ArFunctor3<(p.q(const).char,ArTypes::UByte2,p.ArFunctor2<(p.char,ArTypes::UByte2)>)> functor, 
            Pos position = LAST)
        addAddStringCallback(self, ArFunctor3<(p.q(const).char,ArTypes::UByte2,p.ArFunctor2<(p.char,ArTypes::UByte2)>)> functor)
        """
        return _AriaPy.ArStringInfoGroup_addAddStringCallback(self, *args)

ArStringInfoGroup_swigregister = _AriaPy.ArStringInfoGroup_swigregister
ArStringInfoGroup_swigregister(ArStringInfoGroup)

class ArSyncLoop(ArASyncTask):
    """Proxy of C++ ArSyncLoop class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ArSyncLoop"""
        this = _AriaPy.new_ArSyncLoop()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArSyncLoop
    __del__ = lambda self : None;
    def setRobot(self, *args):
        """setRobot(self, ArRobot robot)"""
        return _AriaPy.ArSyncLoop_setRobot(self, *args)

    def stopRunIfNotConnected(self, *args):
        """stopRunIfNotConnected(self, bool stopRun)"""
        return _AriaPy.ArSyncLoop_stopRunIfNotConnected(self, *args)

    def runThread(self, *args):
        """runThread(self, void arg) -> void"""
        return _AriaPy.ArSyncLoop_runThread(self, *args)

    def getThreadActivity(self):
        """getThreadActivity(self) -> char"""
        return _AriaPy.ArSyncLoop_getThreadActivity(self)

ArSyncLoop_swigregister = _AriaPy.ArSyncLoop_swigregister
ArSyncLoop_swigregister(ArSyncLoop)

class ArSyncTask(object):
    """Proxy of C++ ArSyncTask class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, char name, ArFunctor functor = None, State state = None, 
            ArSyncTask parent = None) -> ArSyncTask
        __init__(self, char name, ArFunctor functor = None, State state = None) -> ArSyncTask
        __init__(self, char name, ArFunctor functor = None) -> ArSyncTask
        __init__(self, char name) -> ArSyncTask
        """
        this = _AriaPy.new_ArSyncTask(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArSyncTask
    __del__ = lambda self : None;
    def run(self):
        """run(self)"""
        return _AriaPy.ArSyncTask_run(self)

    def log(self, depth = 0):
        """
        log(self, int depth = 0)
        log(self)
        """
        return _AriaPy.ArSyncTask_log(self, depth)

    def getState(self):
        """getState(self) -> State"""
        return _AriaPy.ArSyncTask_getState(self)

    def setState(self, *args):
        """setState(self, State state)"""
        return _AriaPy.ArSyncTask_setState(self, *args)

    def findNonRecursive(self, *args):
        """
        findNonRecursive(self, char name) -> ArSyncTask
        findNonRecursive(self, ArFunctor functor) -> ArSyncTask
        """
        return _AriaPy.ArSyncTask_findNonRecursive(self, *args)

    def find(self, *args):
        """
        find(self, char name) -> ArSyncTask
        find(self, ArFunctor functor) -> ArSyncTask
        """
        return _AriaPy.ArSyncTask_find(self, *args)

    def getRunning(self):
        """getRunning(self) -> ArSyncTask"""
        return _AriaPy.ArSyncTask_getRunning(self)

    def addNewBranch(self, *args):
        """
        addNewBranch(self, char nameOfNew, int position, State state = None)
        addNewBranch(self, char nameOfNew, int position)
        """
        return _AriaPy.ArSyncTask_addNewBranch(self, *args)

    def addNewLeaf(self, *args):
        """
        addNewLeaf(self, char nameOfNew, int position, ArFunctor functor, State state = None)
        addNewLeaf(self, char nameOfNew, int position, ArFunctor functor)
        """
        return _AriaPy.ArSyncTask_addNewLeaf(self, *args)

    def getName(self):
        """getName(self) -> string"""
        return _AriaPy.ArSyncTask_getName(self)

    def getFunctor(self):
        """getFunctor(self) -> ArFunctor"""
        return _AriaPy.ArSyncTask_getFunctor(self)

    def setWarningTimeCB(self, *args):
        """setWarningTimeCB(self, ArRetFunctor_UnsignedInt functor)"""
        return _AriaPy.ArSyncTask_setWarningTimeCB(self, *args)

    def getWarningTimeCB(self):
        """getWarningTimeCB(self) -> ArRetFunctor_UnsignedInt"""
        return _AriaPy.ArSyncTask_getWarningTimeCB(self)

    def setNoTimeWarningCB(self, *args):
        """setNoTimeWarningCB(self, ArRetFunctor_Bool functor)"""
        return _AriaPy.ArSyncTask_setNoTimeWarningCB(self, *args)

    def getNoTimeWarningCB(self):
        """getNoTimeWarningCB(self) -> ArRetFunctor_Bool"""
        return _AriaPy.ArSyncTask_getNoTimeWarningCB(self)

    def remove(self, *args):
        """remove(self, ArSyncTask proc)"""
        return _AriaPy.ArSyncTask_remove(self, *args)

    def isDeleting(self):
        """isDeleting(self) -> bool"""
        return _AriaPy.ArSyncTask_isDeleting(self)

ArSyncTask_swigregister = _AriaPy.ArSyncTask_swigregister
ArSyncTask_swigregister(ArSyncTask)

class ArSystemStatus(object):
    """Proxy of C++ ArSystemStatus class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def startPeriodicUpdate(*args):
        """
        startPeriodicUpdate(int refreshFrequency = 5000, LogLevel logLevel = Verbose)
        startPeriodicUpdate(int refreshFrequency = 5000)
        startPeriodicUpdate()
        """
        return _AriaPy.ArSystemStatus_startPeriodicUpdate(*args)

    startPeriodicUpdate = staticmethod(startPeriodicUpdate)
    def stopPeriodicUpdate():
        """stopPeriodicUpdate()"""
        return _AriaPy.ArSystemStatus_stopPeriodicUpdate()

    stopPeriodicUpdate = staticmethod(stopPeriodicUpdate)
    def runRefreshThread(refreshFrequency = 5000):
        """
        runRefreshThread(int refreshFrequency = 5000)
        runRefreshThread()
        """
        return _AriaPy.ArSystemStatus_runRefreshThread(refreshFrequency)

    runRefreshThread = staticmethod(runRefreshThread)
    def getCPU():
        """getCPU() -> double"""
        return _AriaPy.ArSystemStatus_getCPU()

    getCPU = staticmethod(getCPU)
    def getCPUPercent():
        """getCPUPercent() -> double"""
        return _AriaPy.ArSystemStatus_getCPUPercent()

    getCPUPercent = staticmethod(getCPUPercent)
    def getCPUPercentAsString():
        """getCPUPercentAsString() -> string"""
        return _AriaPy.ArSystemStatus_getCPUPercentAsString()

    getCPUPercentAsString = staticmethod(getCPUPercentAsString)
    def getUptime():
        """getUptime() -> unsigned long"""
        return _AriaPy.ArSystemStatus_getUptime()

    getUptime = staticmethod(getUptime)
    def getProgramUptime():
        """getProgramUptime() -> unsigned long"""
        return _AriaPy.ArSystemStatus_getProgramUptime()

    getProgramUptime = staticmethod(getProgramUptime)
    def getUptimeHours():
        """getUptimeHours() -> double"""
        return _AriaPy.ArSystemStatus_getUptimeHours()

    getUptimeHours = staticmethod(getUptimeHours)
    def getUptimeHoursAsString():
        """getUptimeHoursAsString() -> string"""
        return _AriaPy.ArSystemStatus_getUptimeHoursAsString()

    getUptimeHoursAsString = staticmethod(getUptimeHoursAsString)
    def getCPUPercentFunctor():
        """getCPUPercentFunctor() -> ArRetFunctor_Double"""
        return _AriaPy.ArSystemStatus_getCPUPercentFunctor()

    getCPUPercentFunctor = staticmethod(getCPUPercentFunctor)
    def getUptimeHoursFunctor():
        """getUptimeHoursFunctor() -> ArRetFunctor_Double"""
        return _AriaPy.ArSystemStatus_getUptimeHoursFunctor()

    getUptimeHoursFunctor = staticmethod(getUptimeHoursFunctor)
    def getUptimeFunctor():
        """getUptimeFunctor() -> ArRetFunctor<(unsigned long)>"""
        return _AriaPy.ArSystemStatus_getUptimeFunctor()

    getUptimeFunctor = staticmethod(getUptimeFunctor)
    def getProgramUptimeFunctor():
        """getProgramUptimeFunctor() -> ArRetFunctor<(unsigned long)>"""
        return _AriaPy.ArSystemStatus_getProgramUptimeFunctor()

    getProgramUptimeFunctor = staticmethod(getProgramUptimeFunctor)
    def getWirelessLinkQuality():
        """getWirelessLinkQuality() -> int"""
        return _AriaPy.ArSystemStatus_getWirelessLinkQuality()

    getWirelessLinkQuality = staticmethod(getWirelessLinkQuality)
    def getWirelessLinkSignal():
        """getWirelessLinkSignal() -> int"""
        return _AriaPy.ArSystemStatus_getWirelessLinkSignal()

    getWirelessLinkSignal = staticmethod(getWirelessLinkSignal)
    def getWirelessLinkNoise():
        """getWirelessLinkNoise() -> int"""
        return _AriaPy.ArSystemStatus_getWirelessLinkNoise()

    getWirelessLinkNoise = staticmethod(getWirelessLinkNoise)
    def getWirelessDiscardedPackets():
        """getWirelessDiscardedPackets() -> int"""
        return _AriaPy.ArSystemStatus_getWirelessDiscardedPackets()

    getWirelessDiscardedPackets = staticmethod(getWirelessDiscardedPackets)
    def getWirelessDiscardedPacketsBecauseNetConflict():
        """getWirelessDiscardedPacketsBecauseNetConflict() -> int"""
        return _AriaPy.ArSystemStatus_getWirelessDiscardedPacketsBecauseNetConflict()

    getWirelessDiscardedPacketsBecauseNetConflict = staticmethod(getWirelessDiscardedPacketsBecauseNetConflict)
    def getMTXWirelessLink():
        """getMTXWirelessLink() -> int"""
        return _AriaPy.ArSystemStatus_getMTXWirelessLink()

    getMTXWirelessLink = staticmethod(getMTXWirelessLink)
    def getMTXWirelessQuality():
        """getMTXWirelessQuality() -> int"""
        return _AriaPy.ArSystemStatus_getMTXWirelessQuality()

    getMTXWirelessQuality = staticmethod(getMTXWirelessQuality)
    def getMTXWirelessIpAddress1():
        """getMTXWirelessIpAddress1() -> int"""
        return _AriaPy.ArSystemStatus_getMTXWirelessIpAddress1()

    getMTXWirelessIpAddress1 = staticmethod(getMTXWirelessIpAddress1)
    def getMTXWirelessIpAddress2():
        """getMTXWirelessIpAddress2() -> int"""
        return _AriaPy.ArSystemStatus_getMTXWirelessIpAddress2()

    getMTXWirelessIpAddress2 = staticmethod(getMTXWirelessIpAddress2)
    def getMTXWirelessIpAddress3():
        """getMTXWirelessIpAddress3() -> int"""
        return _AriaPy.ArSystemStatus_getMTXWirelessIpAddress3()

    getMTXWirelessIpAddress3 = staticmethod(getMTXWirelessIpAddress3)
    def getMTXWirelessIpAddress4():
        """getMTXWirelessIpAddress4() -> int"""
        return _AriaPy.ArSystemStatus_getMTXWirelessIpAddress4()

    getMTXWirelessIpAddress4 = staticmethod(getMTXWirelessIpAddress4)
    def getMTXWirelessIpAddressString():
        """getMTXWirelessIpAddressString() -> char"""
        return _AriaPy.ArSystemStatus_getMTXWirelessIpAddressString()

    getMTXWirelessIpAddressString = staticmethod(getMTXWirelessIpAddressString)
    def getWirelessLinkQualityFunctor():
        """getWirelessLinkQualityFunctor() -> ArRetFunctor_Int"""
        return _AriaPy.ArSystemStatus_getWirelessLinkQualityFunctor()

    getWirelessLinkQualityFunctor = staticmethod(getWirelessLinkQualityFunctor)
    def getWirelessLinkNoiseFunctor():
        """getWirelessLinkNoiseFunctor() -> ArRetFunctor_Int"""
        return _AriaPy.ArSystemStatus_getWirelessLinkNoiseFunctor()

    getWirelessLinkNoiseFunctor = staticmethod(getWirelessLinkNoiseFunctor)
    def getWirelessLinkSignalFunctor():
        """getWirelessLinkSignalFunctor() -> ArRetFunctor_Int"""
        return _AriaPy.ArSystemStatus_getWirelessLinkSignalFunctor()

    getWirelessLinkSignalFunctor = staticmethod(getWirelessLinkSignalFunctor)
    def getMTXWirelessLinkFunctor():
        """getMTXWirelessLinkFunctor() -> ArRetFunctor_Int"""
        return _AriaPy.ArSystemStatus_getMTXWirelessLinkFunctor()

    getMTXWirelessLinkFunctor = staticmethod(getMTXWirelessLinkFunctor)
    def getMTXWirelessQualityFunctor():
        """getMTXWirelessQualityFunctor() -> ArRetFunctor_Int"""
        return _AriaPy.ArSystemStatus_getMTXWirelessQualityFunctor()

    getMTXWirelessQualityFunctor = staticmethod(getMTXWirelessQualityFunctor)
    def invalidate():
        """invalidate()"""
        return _AriaPy.ArSystemStatus_invalidate()

    invalidate = staticmethod(invalidate)
    def refresh():
        """refresh()"""
        return _AriaPy.ArSystemStatus_refresh()

    refresh = staticmethod(refresh)
    def __init__(self): 
        """__init__(self) -> ArSystemStatus"""
        this = _AriaPy.new_ArSystemStatus()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArSystemStatus
    __del__ = lambda self : None;
ArSystemStatus_swigregister = _AriaPy.ArSystemStatus_swigregister
ArSystemStatus_swigregister(ArSystemStatus)

def ArSystemStatus_startPeriodicUpdate(*args):
  """
    startPeriodicUpdate(int refreshFrequency = 5000, LogLevel logLevel = Verbose)
    startPeriodicUpdate(int refreshFrequency = 5000)
    ArSystemStatus_startPeriodicUpdate()
    """
  return _AriaPy.ArSystemStatus_startPeriodicUpdate(*args)

def ArSystemStatus_stopPeriodicUpdate():
  """ArSystemStatus_stopPeriodicUpdate()"""
  return _AriaPy.ArSystemStatus_stopPeriodicUpdate()

def ArSystemStatus_runRefreshThread(refreshFrequency = 5000):
  """
    runRefreshThread(int refreshFrequency = 5000)
    ArSystemStatus_runRefreshThread()
    """
  return _AriaPy.ArSystemStatus_runRefreshThread(refreshFrequency)

def ArSystemStatus_getCPU():
  """ArSystemStatus_getCPU() -> double"""
  return _AriaPy.ArSystemStatus_getCPU()

def ArSystemStatus_getCPUPercent():
  """ArSystemStatus_getCPUPercent() -> double"""
  return _AriaPy.ArSystemStatus_getCPUPercent()

def ArSystemStatus_getCPUPercentAsString():
  """ArSystemStatus_getCPUPercentAsString() -> string"""
  return _AriaPy.ArSystemStatus_getCPUPercentAsString()

def ArSystemStatus_getUptime():
  """ArSystemStatus_getUptime() -> unsigned long"""
  return _AriaPy.ArSystemStatus_getUptime()

def ArSystemStatus_getProgramUptime():
  """ArSystemStatus_getProgramUptime() -> unsigned long"""
  return _AriaPy.ArSystemStatus_getProgramUptime()

def ArSystemStatus_getUptimeHours():
  """ArSystemStatus_getUptimeHours() -> double"""
  return _AriaPy.ArSystemStatus_getUptimeHours()

def ArSystemStatus_getUptimeHoursAsString():
  """ArSystemStatus_getUptimeHoursAsString() -> string"""
  return _AriaPy.ArSystemStatus_getUptimeHoursAsString()

def ArSystemStatus_getCPUPercentFunctor():
  """ArSystemStatus_getCPUPercentFunctor() -> ArRetFunctor_Double"""
  return _AriaPy.ArSystemStatus_getCPUPercentFunctor()

def ArSystemStatus_getUptimeHoursFunctor():
  """ArSystemStatus_getUptimeHoursFunctor() -> ArRetFunctor_Double"""
  return _AriaPy.ArSystemStatus_getUptimeHoursFunctor()

def ArSystemStatus_getUptimeFunctor():
  """ArSystemStatus_getUptimeFunctor() -> ArRetFunctor<(unsigned long)>"""
  return _AriaPy.ArSystemStatus_getUptimeFunctor()

def ArSystemStatus_getProgramUptimeFunctor():
  """ArSystemStatus_getProgramUptimeFunctor() -> ArRetFunctor<(unsigned long)>"""
  return _AriaPy.ArSystemStatus_getProgramUptimeFunctor()

def ArSystemStatus_getWirelessLinkQuality():
  """ArSystemStatus_getWirelessLinkQuality() -> int"""
  return _AriaPy.ArSystemStatus_getWirelessLinkQuality()

def ArSystemStatus_getWirelessLinkSignal():
  """ArSystemStatus_getWirelessLinkSignal() -> int"""
  return _AriaPy.ArSystemStatus_getWirelessLinkSignal()

def ArSystemStatus_getWirelessLinkNoise():
  """ArSystemStatus_getWirelessLinkNoise() -> int"""
  return _AriaPy.ArSystemStatus_getWirelessLinkNoise()

def ArSystemStatus_getWirelessDiscardedPackets():
  """ArSystemStatus_getWirelessDiscardedPackets() -> int"""
  return _AriaPy.ArSystemStatus_getWirelessDiscardedPackets()

def ArSystemStatus_getWirelessDiscardedPacketsBecauseNetConflict():
  """ArSystemStatus_getWirelessDiscardedPacketsBecauseNetConflict() -> int"""
  return _AriaPy.ArSystemStatus_getWirelessDiscardedPacketsBecauseNetConflict()

def ArSystemStatus_getMTXWirelessLink():
  """ArSystemStatus_getMTXWirelessLink() -> int"""
  return _AriaPy.ArSystemStatus_getMTXWirelessLink()

def ArSystemStatus_getMTXWirelessQuality():
  """ArSystemStatus_getMTXWirelessQuality() -> int"""
  return _AriaPy.ArSystemStatus_getMTXWirelessQuality()

def ArSystemStatus_getMTXWirelessIpAddress1():
  """ArSystemStatus_getMTXWirelessIpAddress1() -> int"""
  return _AriaPy.ArSystemStatus_getMTXWirelessIpAddress1()

def ArSystemStatus_getMTXWirelessIpAddress2():
  """ArSystemStatus_getMTXWirelessIpAddress2() -> int"""
  return _AriaPy.ArSystemStatus_getMTXWirelessIpAddress2()

def ArSystemStatus_getMTXWirelessIpAddress3():
  """ArSystemStatus_getMTXWirelessIpAddress3() -> int"""
  return _AriaPy.ArSystemStatus_getMTXWirelessIpAddress3()

def ArSystemStatus_getMTXWirelessIpAddress4():
  """ArSystemStatus_getMTXWirelessIpAddress4() -> int"""
  return _AriaPy.ArSystemStatus_getMTXWirelessIpAddress4()

def ArSystemStatus_getMTXWirelessIpAddressString():
  """ArSystemStatus_getMTXWirelessIpAddressString() -> char"""
  return _AriaPy.ArSystemStatus_getMTXWirelessIpAddressString()

def ArSystemStatus_getWirelessLinkQualityFunctor():
  """ArSystemStatus_getWirelessLinkQualityFunctor() -> ArRetFunctor_Int"""
  return _AriaPy.ArSystemStatus_getWirelessLinkQualityFunctor()

def ArSystemStatus_getWirelessLinkNoiseFunctor():
  """ArSystemStatus_getWirelessLinkNoiseFunctor() -> ArRetFunctor_Int"""
  return _AriaPy.ArSystemStatus_getWirelessLinkNoiseFunctor()

def ArSystemStatus_getWirelessLinkSignalFunctor():
  """ArSystemStatus_getWirelessLinkSignalFunctor() -> ArRetFunctor_Int"""
  return _AriaPy.ArSystemStatus_getWirelessLinkSignalFunctor()

def ArSystemStatus_getMTXWirelessLinkFunctor():
  """ArSystemStatus_getMTXWirelessLinkFunctor() -> ArRetFunctor_Int"""
  return _AriaPy.ArSystemStatus_getMTXWirelessLinkFunctor()

def ArSystemStatus_getMTXWirelessQualityFunctor():
  """ArSystemStatus_getMTXWirelessQualityFunctor() -> ArRetFunctor_Int"""
  return _AriaPy.ArSystemStatus_getMTXWirelessQualityFunctor()

def ArSystemStatus_invalidate():
  """ArSystemStatus_invalidate()"""
  return _AriaPy.ArSystemStatus_invalidate()

def ArSystemStatus_refresh():
  """ArSystemStatus_refresh()"""
  return _AriaPy.ArSystemStatus_refresh()

ARTCM2_DEFAULT_SERIAL_PORT = _AriaPy.ARTCM2_DEFAULT_SERIAL_PORT
class ArTCM2(object):
    """Proxy of C++ ArTCM2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AriaPy.delete_ArTCM2
    __del__ = lambda self : None;
    def connect(self):
        """connect(self) -> bool"""
        return _AriaPy.ArTCM2_connect(self)

    def blockingConnect(self, connectTimeout = 5000):
        """
        blockingConnect(self, unsigned long connectTimeout = 5000) -> bool
        blockingConnect(self) -> bool
        """
        return _AriaPy.ArTCM2_blockingConnect(self, connectTimeout)

    def getHeading(self):
        """getHeading(self) -> double"""
        return _AriaPy.ArTCM2_getHeading(self)

    def haveHeading(self):
        """haveHeading(self) -> bool"""
        return _AriaPy.ArTCM2_haveHeading(self)

    def getCompass(self):
        """getCompass(self) -> double"""
        return _AriaPy.ArTCM2_getCompass(self)

    def getPitch(self):
        """getPitch(self) -> double"""
        return _AriaPy.ArTCM2_getPitch(self)

    def havePitch(self):
        """havePitch(self) -> bool"""
        return _AriaPy.ArTCM2_havePitch(self)

    def getRoll(self):
        """getRoll(self) -> double"""
        return _AriaPy.ArTCM2_getRoll(self)

    def haveRoll(self):
        """haveRoll(self) -> bool"""
        return _AriaPy.ArTCM2_haveRoll(self)

    def getXMagnetic(self):
        """getXMagnetic(self) -> double"""
        return _AriaPy.ArTCM2_getXMagnetic(self)

    def haveXMagnetic(self):
        """haveXMagnetic(self) -> bool"""
        return _AriaPy.ArTCM2_haveXMagnetic(self)

    def getYMagnetic(self):
        """getYMagnetic(self) -> double"""
        return _AriaPy.ArTCM2_getYMagnetic(self)

    def haveYMagnetic(self):
        """haveYMagnetic(self) -> bool"""
        return _AriaPy.ArTCM2_haveYMagnetic(self)

    def getZMagnetic(self):
        """getZMagnetic(self) -> double"""
        return _AriaPy.ArTCM2_getZMagnetic(self)

    def haveZMagnetic(self):
        """haveZMagnetic(self) -> bool"""
        return _AriaPy.ArTCM2_haveZMagnetic(self)

    def getTemperature(self):
        """getTemperature(self) -> double"""
        return _AriaPy.ArTCM2_getTemperature(self)

    def haveTemperature(self):
        """haveTemperature(self) -> bool"""
        return _AriaPy.ArTCM2_haveTemperature(self)

    def getError(self):
        """getError(self) -> int"""
        return _AriaPy.ArTCM2_getError(self)

    def getCalibrationH(self):
        """getCalibrationH(self) -> double"""
        return _AriaPy.ArTCM2_getCalibrationH(self)

    def haveCalibrationH(self):
        """haveCalibrationH(self) -> bool"""
        return _AriaPy.ArTCM2_haveCalibrationH(self)

    def getCalibrationV(self):
        """getCalibrationV(self) -> double"""
        return _AriaPy.ArTCM2_getCalibrationV(self)

    def haveCalibrationV(self):
        """haveCalibrationV(self) -> bool"""
        return _AriaPy.ArTCM2_haveCalibrationV(self)

    def getCalibrationM(self):
        """getCalibrationM(self) -> double"""
        return _AriaPy.ArTCM2_getCalibrationM(self)

    def haveCalibrationM(self):
        """haveCalibrationM(self) -> bool"""
        return _AriaPy.ArTCM2_haveCalibrationM(self)

    def commandOff(self):
        """commandOff(self)"""
        return _AriaPy.ArTCM2_commandOff(self)

    def commandOnePacket(self):
        """commandOnePacket(self)"""
        return _AriaPy.ArTCM2_commandOnePacket(self)

    def commandContinuousPackets(self):
        """commandContinuousPackets(self)"""
        return _AriaPy.ArTCM2_commandContinuousPackets(self)

    def commandUserCalibration(self):
        """commandUserCalibration(self)"""
        return _AriaPy.ArTCM2_commandUserCalibration(self)

    def commandAutoCalibration(self):
        """commandAutoCalibration(self)"""
        return _AriaPy.ArTCM2_commandAutoCalibration(self)

    def commandStopCalibration(self):
        """commandStopCalibration(self)"""
        return _AriaPy.ArTCM2_commandStopCalibration(self)

    def commandSoftReset(self):
        """commandSoftReset(self)"""
        return _AriaPy.ArTCM2_commandSoftReset(self)

    def commandJustCompass(self):
        """commandJustCompass(self)"""
        return _AriaPy.ArTCM2_commandJustCompass(self)

    def getPacCount(self):
        """getPacCount(self) -> int"""
        return _AriaPy.ArTCM2_getPacCount(self)

    def addHeadingDataCallback(self, *args):
        """addHeadingDataCallback(self, ArFunctor1<(double)> f)"""
        return _AriaPy.ArTCM2_addHeadingDataCallback(self, *args)

ArTCM2_swigregister = _AriaPy.ArTCM2_swigregister
ArTCM2_swigregister(ArTCM2)

class ArCompassConnector(object):
    """Proxy of C++ ArCompassConnector class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArArgumentParser argParser) -> ArCompassConnector"""
        this = _AriaPy.new_ArCompassConnector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArCompassConnector
    __del__ = lambda self : None;
    def create(self, *args):
        """create(self, ArRobot robot) -> ArTCM2"""
        return _AriaPy.ArCompassConnector_create(self, *args)

    def connect(self, *args):
        """connect(self, ArTCM2 arg0) -> bool"""
        return _AriaPy.ArCompassConnector_connect(self, *args)

ArCompassConnector_swigregister = _AriaPy.ArCompassConnector_swigregister
ArCompassConnector_swigregister(ArCompassConnector)

class ArTCMCompassDirect(ArTCM2):
    """Proxy of C++ ArTCMCompassDirect class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ArDeviceConnection devCon) -> ArTCMCompassDirect
        __init__(self, char serialPortName = "/dev/ttyS3") -> ArTCMCompassDirect
        __init__(self) -> ArTCMCompassDirect
        """
        this = _AriaPy.new_ArTCMCompassDirect(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArTCMCompassDirect
    __del__ = lambda self : None;
    def connect(self):
        """connect(self) -> bool"""
        return _AriaPy.ArTCMCompassDirect_connect(self)

    def blockingConnect(self, connectTimeout = 5000):
        """
        blockingConnect(self, unsigned long connectTimeout = 5000) -> bool
        blockingConnect(self) -> bool
        """
        return _AriaPy.ArTCMCompassDirect_blockingConnect(self, connectTimeout)

    def commandAutoCalibration(self):
        """commandAutoCalibration(self)"""
        return _AriaPy.ArTCMCompassDirect_commandAutoCalibration(self)

    def commandUserCalibration(self):
        """commandUserCalibration(self)"""
        return _AriaPy.ArTCMCompassDirect_commandUserCalibration(self)

    def commandStopCalibration(self):
        """commandStopCalibration(self)"""
        return _AriaPy.ArTCMCompassDirect_commandStopCalibration(self)

    def commandContinuousPackets(self):
        """commandContinuousPackets(self)"""
        return _AriaPy.ArTCMCompassDirect_commandContinuousPackets(self)

    def commandOnePacket(self):
        """commandOnePacket(self)"""
        return _AriaPy.ArTCMCompassDirect_commandOnePacket(self)

    def commandOff(self):
        """commandOff(self)"""
        return _AriaPy.ArTCMCompassDirect_commandOff(self)

    def commandSoftReset(self):
        """commandSoftReset(self)"""
        return _AriaPy.ArTCMCompassDirect_commandSoftReset(self)

    def commandJustCompass(self):
        """commandJustCompass(self)"""
        return _AriaPy.ArTCMCompassDirect_commandJustCompass(self)

    def read(self, msWait = 1):
        """
        read(self, unsigned int msWait = 1) -> int
        read(self) -> int
        """
        return _AriaPy.ArTCMCompassDirect_read(self, msWait)

    def setDeviceConnection(self, *args):
        """setDeviceConnection(self, ArDeviceConnection devCon)"""
        return _AriaPy.ArTCMCompassDirect_setDeviceConnection(self, *args)

    def getDeviceConnetion(self):
        """getDeviceConnetion(self) -> ArDeviceConnection"""
        return _AriaPy.ArTCMCompassDirect_getDeviceConnetion(self)

ArTCMCompassDirect_swigregister = _AriaPy.ArTCMCompassDirect_swigregister
ArTCMCompassDirect_swigregister(ArTCMCompassDirect)

class ArTCMCompassRobot(ArTCM2):
    """Proxy of C++ ArTCMCompassRobot class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, ArRobot robot) -> ArTCMCompassRobot"""
        this = _AriaPy.new_ArTCMCompassRobot(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArTCMCompassRobot
    __del__ = lambda self : None;
    def commandOff(self):
        """commandOff(self)"""
        return _AriaPy.ArTCMCompassRobot_commandOff(self)

    def commandJustCompass(self):
        """commandJustCompass(self)"""
        return _AriaPy.ArTCMCompassRobot_commandJustCompass(self)

    def commandOnePacket(self):
        """commandOnePacket(self)"""
        return _AriaPy.ArTCMCompassRobot_commandOnePacket(self)

    def commandContinuousPackets(self):
        """commandContinuousPackets(self)"""
        return _AriaPy.ArTCMCompassRobot_commandContinuousPackets(self)

    def commandUserCalibration(self):
        """commandUserCalibration(self)"""
        return _AriaPy.ArTCMCompassRobot_commandUserCalibration(self)

    def commandAutoCalibration(self):
        """commandAutoCalibration(self)"""
        return _AriaPy.ArTCMCompassRobot_commandAutoCalibration(self)

    def commandStopCalibration(self):
        """commandStopCalibration(self)"""
        return _AriaPy.ArTCMCompassRobot_commandStopCalibration(self)

    def commandSoftReset(self):
        """commandSoftReset(self)"""
        return _AriaPy.ArTCMCompassRobot_commandSoftReset(self)

ArTCMCompassRobot_swigregister = _AriaPy.ArTCMCompassRobot_swigregister
ArTCMCompassRobot_swigregister(ArTCMCompassRobot)

class ArTaskState(object):
    """Proxy of C++ ArTaskState class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    INIT = _AriaPy.ArTaskState_INIT
    RESUME = _AriaPy.ArTaskState_RESUME
    ACTIVE = _AriaPy.ArTaskState_ACTIVE
    SUSPEND = _AriaPy.ArTaskState_SUSPEND
    SUCCESS = _AriaPy.ArTaskState_SUCCESS
    FAILURE = _AriaPy.ArTaskState_FAILURE
    USER_START = _AriaPy.ArTaskState_USER_START
    def __init__(self): 
        """__init__(self) -> ArTaskState"""
        this = _AriaPy.new_ArTaskState()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArTaskState
    __del__ = lambda self : None;
ArTaskState_swigregister = _AriaPy.ArTaskState_swigregister
ArTaskState_swigregister(ArTaskState)

class ArTcpConnection(ArDeviceConnection):
    """Proxy of C++ ArTcpConnection class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ArTcpConnection"""
        this = _AriaPy.new_ArTcpConnection()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArTcpConnection
    __del__ = lambda self : None;
    def open(self, host = None, port = 8101):
        """
        open(self, char host = None, int port = 8101) -> int
        open(self, char host = None) -> int
        open(self) -> int
        """
        return _AriaPy.ArTcpConnection_open(self, host, port)

    def setPort(self, host = None, port = 8101):
        """
        setPort(self, char host = None, int port = 8101)
        setPort(self, char host = None)
        setPort(self)
        """
        return _AriaPy.ArTcpConnection_setPort(self, host, port)

    def openSimple(self):
        """openSimple(self) -> bool"""
        return _AriaPy.ArTcpConnection_openSimple(self)

    def getStatus(self):
        """getStatus(self) -> int"""
        return _AriaPy.ArTcpConnection_getStatus(self)

    def close(self):
        """close(self) -> bool"""
        return _AriaPy.ArTcpConnection_close(self)

    def read(self, *args):
        """
        read(self, char data, unsigned int size, unsigned int msWait = 0) -> int
        read(self, char data, unsigned int size) -> int
        """
        return _AriaPy.ArTcpConnection_read(self, *args)

    def write(self, *args):
        """write(self, char data, unsigned int size) -> int"""
        return _AriaPy.ArTcpConnection_write(self, *args)

    def getOpenMessage(self, *args):
        """getOpenMessage(self, int messageNumber) -> char"""
        return _AriaPy.ArTcpConnection_getOpenMessage(self, *args)

    def getTimeRead(self, *args):
        """getTimeRead(self, int index) -> ArTime"""
        return _AriaPy.ArTcpConnection_getTimeRead(self, *args)

    def isTimeStamping(self):
        """isTimeStamping(self) -> bool"""
        return _AriaPy.ArTcpConnection_isTimeStamping(self)

    def getHost(self):
        """getHost(self) -> string"""
        return _AriaPy.ArTcpConnection_getHost(self)

    def getPort(self):
        """getPort(self) -> int"""
        return _AriaPy.ArTcpConnection_getPort(self)

    def internalOpen(self):
        """internalOpen(self) -> int"""
        return _AriaPy.ArTcpConnection_internalOpen(self)

    def setSocket(self, *args):
        """setSocket(self, ArSocket socket)"""
        return _AriaPy.ArTcpConnection_setSocket(self, *args)

    def getSocket(self):
        """getSocket(self) -> ArSocket"""
        return _AriaPy.ArTcpConnection_getSocket(self)

    def setStatus(self, *args):
        """setStatus(self, int status)"""
        return _AriaPy.ArTcpConnection_setStatus(self, *args)

    OPEN_NET_FAIL = _AriaPy.ArTcpConnection_OPEN_NET_FAIL
    OPEN_BAD_HOST = _AriaPy.ArTcpConnection_OPEN_BAD_HOST
    OPEN_NO_ROUTE = _AriaPy.ArTcpConnection_OPEN_NO_ROUTE
    OPEN_CON_REFUSED = _AriaPy.ArTcpConnection_OPEN_CON_REFUSED
ArTcpConnection_swigregister = _AriaPy.ArTcpConnection_swigregister
ArTcpConnection_swigregister(ArTcpConnection)

class ArTransform(object):
    """Proxy of C++ ArTransform class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ArTransform
        __init__(self, ArPose pose) -> ArTransform
        __init__(self, ArPose pose1, ArPose pose2) -> ArTransform
        """
        this = _AriaPy.new_ArTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArTransform
    __del__ = lambda self : None;
    def doInvTransform(self, *args):
        """
        doInvTransform(self, ArPose source) -> ArPose
        doInvTransform(self, ArPoseWithTime source) -> ArPoseWithTime
        """
        return _AriaPy.ArTransform_doInvTransform(self, *args)

    def doTransform(self, *args):
        """
        doTransform(self, ArPose source) -> ArPose
        doTransform(self, ArPoseWithTime source) -> ArPoseWithTime
        doTransform(self, ArPosePtrList poseList)
        doTransform(self, ArPoseWithTimePtrList poseList)
        """
        return _AriaPy.ArTransform_doTransform(self, *args)

    def setTransform(self, *args):
        """
        setTransform(self, ArPose pose)
        setTransform(self, ArPose pose1, ArPose pose2)
        """
        return _AriaPy.ArTransform_setTransform(self, *args)

    def getX(self):
        """getX(self) -> double"""
        return _AriaPy.ArTransform_getX(self)

    def getY(self):
        """getY(self) -> double"""
        return _AriaPy.ArTransform_getY(self)

    def getTh(self):
        """getTh(self) -> double"""
        return _AriaPy.ArTransform_getTh(self)

    def setTransformLowLevel(self, *args):
        """setTransformLowLevel(self, double x, double y, double th)"""
        return _AriaPy.ArTransform_setTransformLowLevel(self, *args)

ArTransform_swigregister = _AriaPy.ArTransform_swigregister
ArTransform_swigregister(ArTransform)

class ArTrimbleGPS(ArGPS):
    """Proxy of C++ ArTrimbleGPS class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ArTrimbleGPS"""
        this = _AriaPy.new_ArTrimbleGPS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArTrimbleGPS
    __del__ = lambda self : None;
    def sendTSIPCommand(self, *args):
        """sendTSIPCommand(self, char command, char data, size_t dataLen) -> bool"""
        return _AriaPy.ArTrimbleGPS_sendTSIPCommand(self, *args)

ArTrimbleGPS_swigregister = _AriaPy.ArTrimbleGPS_swigregister
ArTrimbleGPS_swigregister(ArTrimbleGPS)

class ArUrg(ArLaser):
    """Proxy of C++ ArUrg class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, int laserNumber, char name = "urg") -> ArUrg
        __init__(self, int laserNumber) -> ArUrg
        """
        this = _AriaPy.new_ArUrg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArUrg
    __del__ = lambda self : None;
    def blockingConnect(self):
        """blockingConnect(self) -> bool"""
        return _AriaPy.ArUrg_blockingConnect(self)

    def asyncConnect(self):
        """asyncConnect(self) -> bool"""
        return _AriaPy.ArUrg_asyncConnect(self)

    def disconnect(self):
        """disconnect(self) -> bool"""
        return _AriaPy.ArUrg_disconnect(self)

    def isConnected(self):
        """isConnected(self) -> bool"""
        return _AriaPy.ArUrg_isConnected(self)

    def isTryingToConnect(self):
        """isTryingToConnect(self) -> bool"""
        return _AriaPy.ArUrg_isTryingToConnect(self)

    def log(self):
        """log(self)"""
        return _AriaPy.ArUrg_log(self)

ArUrg_swigregister = _AriaPy.ArUrg_swigregister
ArUrg_swigregister(ArUrg)

MAX_RESPONSE_BYTES = _AriaPy.MAX_RESPONSE_BYTES
BIDIRECTIONAL_TIMEOUT = _AriaPy.BIDIRECTIONAL_TIMEOUT
UNIDIRECTIONAL_TIMEOUT = _AriaPy.UNIDIRECTIONAL_TIMEOUT
AUTO_UPDATE_TIME = _AriaPy.AUTO_UPDATE_TIME
TOLERANCE = _AriaPy.TOLERANCE
class ArVCC4Commands(object):
    """Proxy of C++ ArVCC4Commands class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DELIM = _AriaPy.ArVCC4Commands_DELIM
    DEVICEID = _AriaPy.ArVCC4Commands_DEVICEID
    PANSLEW = _AriaPy.ArVCC4Commands_PANSLEW
    TILTSLEW = _AriaPy.ArVCC4Commands_TILTSLEW
    STOP = _AriaPy.ArVCC4Commands_STOP
    INIT = _AriaPy.ArVCC4Commands_INIT
    SLEWREQ = _AriaPy.ArVCC4Commands_SLEWREQ
    ANGLEREQ = _AriaPy.ArVCC4Commands_ANGLEREQ
    PANTILT = _AriaPy.ArVCC4Commands_PANTILT
    SETRANGE = _AriaPy.ArVCC4Commands_SETRANGE
    PANTILTREQ = _AriaPy.ArVCC4Commands_PANTILTREQ
    INFRARED = _AriaPy.ArVCC4Commands_INFRARED
    PRODUCTNAME = _AriaPy.ArVCC4Commands_PRODUCTNAME
    LEDCONTROL = _AriaPy.ArVCC4Commands_LEDCONTROL
    CONTROL = _AriaPy.ArVCC4Commands_CONTROL
    POWER = _AriaPy.ArVCC4Commands_POWER
    AUTOFOCUS = _AriaPy.ArVCC4Commands_AUTOFOCUS
    ZOOMSTOP = _AriaPy.ArVCC4Commands_ZOOMSTOP
    GAIN = _AriaPy.ArVCC4Commands_GAIN
    FOCUS = _AriaPy.ArVCC4Commands_FOCUS
    ZOOM = _AriaPy.ArVCC4Commands_ZOOM
    ZOOMREQ = _AriaPy.ArVCC4Commands_ZOOMREQ
    IRCUTFILTER = _AriaPy.ArVCC4Commands_IRCUTFILTER
    DIGITALZOOM = _AriaPy.ArVCC4Commands_DIGITALZOOM
    FOOTER = _AriaPy.ArVCC4Commands_FOOTER
    RESPONSE = _AriaPy.ArVCC4Commands_RESPONSE
    HEADER = _AriaPy.ArVCC4Commands_HEADER
    def __init__(self): 
        """__init__(self) -> ArVCC4Commands"""
        this = _AriaPy.new_ArVCC4Commands()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArVCC4Commands
    __del__ = lambda self : None;
ArVCC4Commands_swigregister = _AriaPy.ArVCC4Commands_swigregister
ArVCC4Commands_swigregister(ArVCC4Commands)

class ArVCC4Packet(ArBasePacket):
    """Proxy of C++ ArVCC4Packet class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, bufferSize = 30): 
        """
        __init__(self, UByte2 bufferSize = 30) -> ArVCC4Packet
        __init__(self) -> ArVCC4Packet
        """
        this = _AriaPy.new_ArVCC4Packet(bufferSize)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArVCC4Packet
    __del__ = lambda self : None;
    def byte2ToBuf(self, *args):
        """byte2ToBuf(self, Byte4 val)"""
        return _AriaPy.ArVCC4Packet_byte2ToBuf(self, *args)

    def finalizePacket(self):
        """finalizePacket(self)"""
        return _AriaPy.ArVCC4Packet_finalizePacket(self)

ArVCC4Packet_swigregister = _AriaPy.ArVCC4Packet_swigregister
ArVCC4Packet_swigregister(ArVCC4Packet)

class ArVCC4(ArPTZ):
    """Proxy of C++ ArVCC4 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    COMM_UNKNOWN = _AriaPy.ArVCC4_COMM_UNKNOWN
    COMM_BIDIRECTIONAL = _AriaPy.ArVCC4_COMM_BIDIRECTIONAL
    COMM_UNIDIRECTIONAL = _AriaPy.ArVCC4_COMM_UNIDIRECTIONAL
    CAMERA_VCC4 = _AriaPy.ArVCC4_CAMERA_VCC4
    CAMERA_C50I = _AriaPy.ArVCC4_CAMERA_C50I
    def __init__(self, *args): 
        """
        __init__(self, ArRobot robot, bool inverted = False, CommState commDirection = COMM_UNKNOWN, 
            bool autoUpdate = True, 
            bool disableLED = False, CameraType cameraType = CAMERA_VCC4) -> ArVCC4
        __init__(self, ArRobot robot, bool inverted = False, CommState commDirection = COMM_UNKNOWN, 
            bool autoUpdate = True, 
            bool disableLED = False) -> ArVCC4
        __init__(self, ArRobot robot, bool inverted = False, CommState commDirection = COMM_UNKNOWN, 
            bool autoUpdate = True) -> ArVCC4
        __init__(self, ArRobot robot, bool inverted = False, CommState commDirection = COMM_UNKNOWN) -> ArVCC4
        __init__(self, ArRobot robot, bool inverted = False) -> ArVCC4
        __init__(self, ArRobot robot) -> ArVCC4
        """
        this = _AriaPy.new_ArVCC4(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArVCC4
    __del__ = lambda self : None;
    def power(self, *args):
        """power(self, bool state) -> bool"""
        return _AriaPy.ArVCC4_power(self, *args)

    def getPower(self):
        """getPower(self) -> bool"""
        return _AriaPy.ArVCC4_getPower(self)

    def init(self):
        """init(self) -> bool"""
        return _AriaPy.ArVCC4_init(self)

    def reset(self):
        """reset(self)"""
        return _AriaPy.ArVCC4_reset(self)

    def getTypeName(self):
        """getTypeName(self) -> char"""
        return _AriaPy.ArVCC4_getTypeName(self)

    def isInitted(self):
        """isInitted(self) -> bool"""
        return _AriaPy.ArVCC4_isInitted(self)

    def connectHandler(self):
        """connectHandler(self)"""
        return _AriaPy.ArVCC4_connectHandler(self)

    def packetHandler(self, *args):
        """packetHandler(self, ArBasePacket packet) -> bool"""
        return _AriaPy.ArVCC4_packetHandler(self, *args)

    def getRealPanTilt(self):
        """getRealPanTilt(self)"""
        return _AriaPy.ArVCC4_getRealPanTilt(self)

    def getRealZoomPos(self):
        """getRealZoomPos(self)"""
        return _AriaPy.ArVCC4_getRealZoomPos(self)

    def canZoom(self):
        """canZoom(self) -> bool"""
        return _AriaPy.ArVCC4_canZoom(self)

    def zoom(self, *args):
        """zoom(self, int deg) -> bool"""
        return _AriaPy.ArVCC4_zoom(self, *args)

    def digitalZoom(self, *args):
        """digitalZoom(self, int deg) -> bool"""
        return _AriaPy.ArVCC4_digitalZoom(self, *args)

    def addErrorCB(self, *args):
        """addErrorCB(self, ArFunctor functor, Pos position)"""
        return _AriaPy.ArVCC4_addErrorCB(self, *args)

    def remErrorCB(self, *args):
        """remErrorCB(self, ArFunctor functor)"""
        return _AriaPy.ArVCC4_remErrorCB(self, *args)

    def haltPanTilt(self):
        """haltPanTilt(self) -> bool"""
        return _AriaPy.ArVCC4_haltPanTilt(self)

    def haltZoom(self):
        """haltZoom(self) -> bool"""
        return _AriaPy.ArVCC4_haltZoom(self)

    def panSlew(self, *args):
        """panSlew(self, double deg) -> bool"""
        return _AriaPy.ArVCC4_panSlew(self, *args)

    def tiltSlew(self, *args):
        """tiltSlew(self, double deg) -> bool"""
        return _AriaPy.ArVCC4_tiltSlew(self, *args)

    def canSetPanTiltSlew(self):
        """canSetPanTiltSlew(self) -> bool"""
        return _AriaPy.ArVCC4_canSetPanTiltSlew(self)

    def preparePacket(self, *args):
        """preparePacket(self, ArVCC4Packet packet)"""
        return _AriaPy.ArVCC4_preparePacket(self, *args)

    def getZoom(self):
        """getZoom(self) -> int"""
        return _AriaPy.ArVCC4_getZoom(self)

    def getDigitalZoom(self):
        """getDigitalZoom(self) -> double"""
        return _AriaPy.ArVCC4_getDigitalZoom(self)

    def canGetRealPanTilt(self):
        """canGetRealPanTilt(self) -> bool"""
        return _AriaPy.ArVCC4_canGetRealPanTilt(self)

    def canGetRealZoom(self):
        """canGetRealZoom(self) -> bool"""
        return _AriaPy.ArVCC4_canGetRealZoom(self)

    def canSetFocus(self):
        """canSetFocus(self) -> bool"""
        return _AriaPy.ArVCC4_canSetFocus(self)

    def autoFocus(self):
        """autoFocus(self) -> bool"""
        return _AriaPy.ArVCC4_autoFocus(self)

    def manualFocus(self):
        """manualFocus(self) -> bool"""
        return _AriaPy.ArVCC4_manualFocus(self)

    def focusNear(self):
        """focusNear(self) -> bool"""
        return _AriaPy.ArVCC4_focusNear(self)

    def focusFar(self):
        """focusFar(self) -> bool"""
        return _AriaPy.ArVCC4_focusFar(self)

    def setAutoFocus(self, af = True):
        """
        setAutoFocus(self, bool af = True) -> bool
        setAutoFocus(self) -> bool
        """
        return _AriaPy.ArVCC4_setAutoFocus(self, af)

    def getPanSlew(self):
        """getPanSlew(self) -> double"""
        return _AriaPy.ArVCC4_getPanSlew(self)

    def getMaxPanSlew(self):
        """getMaxPanSlew(self) -> double"""
        return _AriaPy.ArVCC4_getMaxPanSlew(self)

    def getMinPanSlew(self):
        """getMinPanSlew(self) -> double"""
        return _AriaPy.ArVCC4_getMinPanSlew(self)

    def getTiltSlew(self):
        """getTiltSlew(self) -> double"""
        return _AriaPy.ArVCC4_getTiltSlew(self)

    def getMaxTiltSlew(self):
        """getMaxTiltSlew(self) -> double"""
        return _AriaPy.ArVCC4_getMaxTiltSlew(self)

    def getMinTiltSlew(self):
        """getMinTiltSlew(self) -> double"""
        return _AriaPy.ArVCC4_getMinTiltSlew(self)

    def getMaxZoom(self):
        """getMaxZoom(self) -> int"""
        return _AriaPy.ArVCC4_getMaxZoom(self)

    def getMinZoom(self):
        """getMinZoom(self) -> int"""
        return _AriaPy.ArVCC4_getMinZoom(self)

    def canGetFOV(self):
        """canGetFOV(self) -> bool"""
        return _AriaPy.ArVCC4_canGetFOV(self)

    def getFOVAtMaxZoom(self):
        """getFOVAtMaxZoom(self) -> double"""
        return _AriaPy.ArVCC4_getFOVAtMaxZoom(self)

    def getFOVAtMinZoom(self):
        """getFOVAtMinZoom(self) -> double"""
        return _AriaPy.ArVCC4_getFOVAtMinZoom(self)

    def wasError(self):
        """wasError(self) -> bool"""
        return _AriaPy.ArVCC4_wasError(self)

    def enableAutoUpdate(self):
        """enableAutoUpdate(self)"""
        return _AriaPy.ArVCC4_enableAutoUpdate(self)

    def disableAutoUpdate(self):
        """disableAutoUpdate(self)"""
        return _AriaPy.ArVCC4_disableAutoUpdate(self)

    def getAutoUpdate(self):
        """getAutoUpdate(self) -> bool"""
        return _AriaPy.ArVCC4_getAutoUpdate(self)

    def setLEDControlMode(self, *args):
        """setLEDControlMode(self, int controlMode)"""
        return _AriaPy.ArVCC4_setLEDControlMode(self, *args)

    def enableIRLEDs(self):
        """enableIRLEDs(self)"""
        return _AriaPy.ArVCC4_enableIRLEDs(self)

    def disableIRLEDs(self):
        """disableIRLEDs(self)"""
        return _AriaPy.ArVCC4_disableIRLEDs(self)

    def getIRLEDsEnabled(self):
        """getIRLEDsEnabled(self) -> bool"""
        return _AriaPy.ArVCC4_getIRLEDsEnabled(self)

    def enableIRFilterMode(self):
        """enableIRFilterMode(self)"""
        return _AriaPy.ArVCC4_enableIRFilterMode(self)

    def disableIRFilterMode(self):
        """disableIRFilterMode(self)"""
        return _AriaPy.ArVCC4_disableIRFilterMode(self)

    def getIRFilterModeEnabled(self):
        """getIRFilterModeEnabled(self) -> bool"""
        return _AriaPy.ArVCC4_getIRFilterModeEnabled(self)

ArVCC4_swigregister = _AriaPy.ArVCC4_swigregister
ArVCC4_swigregister(ArVCC4)

class ArVersalogicIO(object):
    """Proxy of C++ ArVersalogicIO class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DIGITAL_INPUT = _AriaPy.ArVersalogicIO_DIGITAL_INPUT
    DIGITAL_OUTPUT = _AriaPy.ArVersalogicIO_DIGITAL_OUTPUT
    def __init__(self, dev = "/dev/amrio"): 
        """
        __init__(self, char dev = "/dev/amrio") -> ArVersalogicIO
        __init__(self) -> ArVersalogicIO
        """
        this = _AriaPy.new_ArVersalogicIO(dev)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArVersalogicIO
    __del__ = lambda self : None;
    def closeIO(self):
        """closeIO(self) -> bool"""
        return _AriaPy.ArVersalogicIO_closeIO(self)

    def isEnabled(self):
        """isEnabled(self) -> bool"""
        return _AriaPy.ArVersalogicIO_isEnabled(self)

    def isAnalogSupported(self):
        """isAnalogSupported(self) -> bool"""
        return _AriaPy.ArVersalogicIO_isAnalogSupported(self)

    def getAnalogValue(self, *args):
        """getAnalogValue(self, int port, double val) -> bool"""
        return _AriaPy.ArVersalogicIO_getAnalogValue(self, *args)

    def getAnalogValueRaw(self, *args):
        """getAnalogValueRaw(self, int port, int val) -> bool"""
        return _AriaPy.ArVersalogicIO_getAnalogValueRaw(self, *args)

    def getDigitalBankDirection(self, *args):
        """getDigitalBankDirection(self, int bank) -> Direction"""
        return _AriaPy.ArVersalogicIO_getDigitalBankDirection(self, *args)

    def setDigitalBankDirection(self, *args):
        """setDigitalBankDirection(self, int bank, Direction dir) -> bool"""
        return _AriaPy.ArVersalogicIO_setDigitalBankDirection(self, *args)

    def getDigitalBankInputs(self, *args):
        """getDigitalBankInputs(self, int bank, unsigned char val) -> bool"""
        return _AriaPy.ArVersalogicIO_getDigitalBankInputs(self, *args)

    def getDigitalBankOutputs(self, *args):
        """getDigitalBankOutputs(self, int bank, unsigned char val) -> bool"""
        return _AriaPy.ArVersalogicIO_getDigitalBankOutputs(self, *args)

    def setDigitalBankOutputs(self, *args):
        """setDigitalBankOutputs(self, int bank, unsigned char val) -> bool"""
        return _AriaPy.ArVersalogicIO_setDigitalBankOutputs(self, *args)

    def getSpecialControlRegister(self, *args):
        """getSpecialControlRegister(self, unsigned char val) -> bool"""
        return _AriaPy.ArVersalogicIO_getSpecialControlRegister(self, *args)

    def lock(self):
        """lock(self) -> int"""
        return _AriaPy.ArVersalogicIO_lock(self)

    def unlock(self):
        """unlock(self) -> int"""
        return _AriaPy.ArVersalogicIO_unlock(self)

    def tryLock(self):
        """tryLock(self) -> int"""
        return _AriaPy.ArVersalogicIO_tryLock(self)

ArVersalogicIO_swigregister = _AriaPy.ArVersalogicIO_swigregister
ArVersalogicIO_swigregister(ArVersalogicIO)

class ArMTXIO(object):
    """Proxy of C++ ArMTXIO class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DIGITAL_INPUT = _AriaPy.ArMTXIO_DIGITAL_INPUT
    DIGITAL_OUTPUT = _AriaPy.ArMTXIO_DIGITAL_OUTPUT
    INVALID = _AriaPy.ArMTXIO_INVALID
    def __init__(self, dev = "/dev/mtx"): 
        """
        __init__(self, char dev = "/dev/mtx") -> ArMTXIO
        __init__(self) -> ArMTXIO
        """
        this = _AriaPy.new_ArMTXIO(dev)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArMTXIO
    __del__ = lambda self : None;
    def closeIO(self):
        """closeIO(self) -> bool"""
        return _AriaPy.ArMTXIO_closeIO(self)

    def isEnabled(self):
        """isEnabled(self) -> bool"""
        return _AriaPy.ArMTXIO_isEnabled(self)

    def isAnalogSupported(self):
        """isAnalogSupported(self) -> bool"""
        return _AriaPy.ArMTXIO_isAnalogSupported(self)

    def getDigitalBankDirection(self, *args):
        """getDigitalBankDirection(self, int bank) -> Direction"""
        return _AriaPy.ArMTXIO_getDigitalBankDirection(self, *args)

    def setDigitalBankOutputs(self, *args):
        """setDigitalBankOutputs(self, int bank, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_setDigitalBankOutputs(self, *args)

    def getDigitalBankInputs(self, *args):
        """getDigitalBankInputs(self, int bank, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getDigitalBankInputs(self, *args)

    def getDigitalBankOutputs(self, *args):
        """getDigitalBankOutputs(self, int bank, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getDigitalBankOutputs(self, *args)

    def setDigitalOutputBit(self, *args):
        """setDigitalOutputBit(self, int bank, int bit) -> bool"""
        return _AriaPy.ArMTXIO_setDigitalOutputBit(self, *args)

    def getDigitalInputBit(self, *args):
        """getDigitalInputBit(self, int bank, int bit) -> bool"""
        return _AriaPy.ArMTXIO_getDigitalInputBit(self, *args)

    def setPeripheralPowerBankOutputs(self, *args):
        """setPeripheralPowerBankOutputs(self, int bank, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_setPeripheralPowerBankOutputs(self, *args)

    def getPeripheralPowerBankOutputs(self, *args):
        """getPeripheralPowerBankOutputs(self, int bank, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getPeripheralPowerBankOutputs(self, *args)

    def setPowerOutput(self, *args):
        """setPowerOutput(self, int bank, int bit, bool on) -> bool"""
        return _AriaPy.ArMTXIO_setPowerOutput(self, *args)

    def lock(self):
        """lock(self) -> int"""
        return _AriaPy.ArMTXIO_lock(self)

    def unlock(self):
        """unlock(self) -> int"""
        return _AriaPy.ArMTXIO_unlock(self)

    def tryLock(self):
        """tryLock(self) -> int"""
        return _AriaPy.ArMTXIO_tryLock(self)

    def getFirmwareRevision(self):
        """getFirmwareRevision(self) -> unsigned char"""
        return _AriaPy.ArMTXIO_getFirmwareRevision(self)

    def getFirmwareVersion(self):
        """getFirmwareVersion(self) -> unsigned char"""
        return _AriaPy.ArMTXIO_getFirmwareVersion(self)

    def getCompatibilityCode(self):
        """getCompatibilityCode(self) -> unsigned char"""
        return _AriaPy.ArMTXIO_getCompatibilityCode(self)

    def getFPGAType(self):
        """getFPGAType(self) -> unsigned char"""
        return _AriaPy.ArMTXIO_getFPGAType(self)

    def getDigitalIOInputMon1(self, *args):
        """getDigitalIOInputMon1(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getDigitalIOInputMon1(self, *args)

    def getDigitalIOInputMon2(self, *args):
        """getDigitalIOInputMon2(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getDigitalIOInputMon2(self, *args)

    def getDigitalIOOutputMon1(self, *args):
        """getDigitalIOOutputMon1(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getDigitalIOOutputMon1(self, *args)

    def getDigitalIOOutputMon2(self, *args):
        """getDigitalIOOutputMon2(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getDigitalIOOutputMon2(self, *args)

    def getLightPole(self, *args):
        """getLightPole(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getLightPole(self, *args)

    def setLightPole(self, *args):
        """setLightPole(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_setLightPole(self, *args)

    def getLPCTimeUSec(self, *args):
        """getLPCTimeUSec(self, UByte4 timeUSec) -> bool"""
        return _AriaPy.ArMTXIO_getLPCTimeUSec(self, *args)

    def getLPCTimeUSecCB(self):
        """getLPCTimeUSecCB(self) -> ArRetFunctor1<(bool,p.ArTypes::UByte4)>"""
        return _AriaPy.ArMTXIO_getLPCTimeUSecCB(self)

    def setSemaphore1(self, *args):
        """setSemaphore1(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_setSemaphore1(self, *args)

    def getSemaphore1(self, *args):
        """getSemaphore1(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getSemaphore1(self, *args)

    def setSemaphore2(self, *args):
        """setSemaphore2(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_setSemaphore2(self, *args)

    def getSemaphore2(self, *args):
        """getSemaphore2(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getSemaphore2(self, *args)

    def setSemaphore3(self, *args):
        """setSemaphore3(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_setSemaphore3(self, *args)

    def getSemaphore3(self, *args):
        """getSemaphore3(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getSemaphore3(self, *args)

    def setSemaphore4(self, *args):
        """setSemaphore4(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_setSemaphore4(self, *args)

    def getSemaphore4(self, *args):
        """getSemaphore4(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getSemaphore4(self, *args)

    def getBumperInput(self, *args):
        """getBumperInput(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getBumperInput(self, *args)

    def getPowerStatus1(self, *args):
        """getPowerStatus1(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getPowerStatus1(self, *args)

    def getPowerStatus2(self, *args):
        """getPowerStatus2(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getPowerStatus2(self, *args)

    def getLIDARSafety(self, *args):
        """getLIDARSafety(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getLIDARSafety(self, *args)

    def getESTOPStatus1(self, *args):
        """getESTOPStatus1(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getESTOPStatus1(self, *args)

    def getESTOPStatus2(self, *args):
        """getESTOPStatus2(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getESTOPStatus2(self, *args)

    def getESTOPStatus3(self, *args):
        """getESTOPStatus3(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getESTOPStatus3(self, *args)

    def getESTOPStatus4(self, *args):
        """getESTOPStatus4(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getESTOPStatus4(self, *args)

    def compareESTOPStatus4HighNibbleAgainst(self, *args):
        """compareESTOPStatus4HighNibbleAgainst(self, int val) -> bool"""
        return _AriaPy.ArMTXIO_compareESTOPStatus4HighNibbleAgainst(self, *args)

    def getDigitalOutputControl1(self, *args):
        """getDigitalOutputControl1(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getDigitalOutputControl1(self, *args)

    def setDigitalOutputControl1(self, *args):
        """setDigitalOutputControl1(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_setDigitalOutputControl1(self, *args)

    def getDigitalOutputControl2(self, *args):
        """getDigitalOutputControl2(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getDigitalOutputControl2(self, *args)

    def setDigitalOutputControl2(self, *args):
        """setDigitalOutputControl2(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_setDigitalOutputControl2(self, *args)

    def getPeripheralPower1(self, *args):
        """getPeripheralPower1(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getPeripheralPower1(self, *args)

    def setPeripheralPower1(self, *args):
        """setPeripheralPower1(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_setPeripheralPower1(self, *args)

    def getPeripheralPower2(self, *args):
        """getPeripheralPower2(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getPeripheralPower2(self, *args)

    def setPeripheralPower2(self, *args):
        """setPeripheralPower2(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_setPeripheralPower2(self, *args)

    def getPeripheralPower3(self, *args):
        """getPeripheralPower3(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getPeripheralPower3(self, *args)

    def setPeripheralPower3(self, *args):
        """setPeripheralPower3(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_setPeripheralPower3(self, *args)

    def getMotionPowerStatus(self, *args):
        """getMotionPowerStatus(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getMotionPowerStatus(self, *args)

    def getLIDARControl(self, *args):
        """getLIDARControl(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_getLIDARControl(self, *args)

    def setLIDARControl(self, *args):
        """setLIDARControl(self, unsigned char val) -> bool"""
        return _AriaPy.ArMTXIO_setLIDARControl(self, *args)

    def getAnalogIOBlock1(self, *args):
        """getAnalogIOBlock1(self, int analog, unsigned short val) -> bool"""
        return _AriaPy.ArMTXIO_getAnalogIOBlock1(self, *args)

    def getAnalogIOBlock2(self, *args):
        """getAnalogIOBlock2(self, int analog, unsigned short val) -> bool"""
        return _AriaPy.ArMTXIO_getAnalogIOBlock2(self, *args)

    def setAnalogIOBlock2(self, *args):
        """setAnalogIOBlock2(self, int analog, unsigned short val) -> bool"""
        return _AriaPy.ArMTXIO_setAnalogIOBlock2(self, *args)

    def getAnalogValue(self, *args):
        """
        getAnalogValue(self, int port, double val) -> bool
        getAnalogValue(self, double val) -> bool
        """
        return _AriaPy.ArMTXIO_getAnalogValue(self, *args)

    def getAnalogValueRaw(self, *args):
        """
        getAnalogValueRaw(self, int port, int val) -> bool
        getAnalogValueRaw(self, int val) -> bool
        """
        return _AriaPy.ArMTXIO_getAnalogValueRaw(self, *args)

ArMTXIO_swigregister = _AriaPy.ArMTXIO_swigregister
ArMTXIO_swigregister(ArMTXIO)

class Aria(object):
    """Proxy of C++ Aria class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    SIGHANDLE_SINGLE = _AriaPy.Aria_SIGHANDLE_SINGLE
    SIGHANDLE_THREAD = _AriaPy.Aria_SIGHANDLE_THREAD
    SIGHANDLE_NONE = _AriaPy.Aria_SIGHANDLE_NONE
    def init(*args):
        """
        init(SigHandleMethod method = SIGHANDLE_THREAD, bool initSockets = True, 
            bool sigHandleExitNotShutdown = True)
        init(SigHandleMethod method = SIGHANDLE_THREAD, bool initSockets = True)
        init(SigHandleMethod method = SIGHANDLE_THREAD)
        init()
        """
        return _AriaPy.Aria_init(*args)

    init = staticmethod(init)
    def uninit():
        """uninit()"""
        return _AriaPy.Aria_uninit()

    uninit = staticmethod(uninit)
    def addInitCallBack(*args):
        """addInitCallBack(ArFunctor cb, Pos position)"""
        return _AriaPy.Aria_addInitCallBack(*args)

    addInitCallBack = staticmethod(addInitCallBack)
    def addUninitCallBack(*args):
        """addUninitCallBack(ArFunctor cb, Pos position)"""
        return _AriaPy.Aria_addUninitCallBack(*args)

    addUninitCallBack = staticmethod(addUninitCallBack)
    def shutdown():
        """shutdown()"""
        return _AriaPy.Aria_shutdown()

    shutdown = staticmethod(shutdown)
    def exit(exitCode = 0):
        """
        exit(int exitCode = 0)
        exit()
        """
        return _AriaPy.Aria_exit(exitCode)

    exit = staticmethod(exit)
    def getRunning():
        """getRunning() -> bool"""
        return _AriaPy.Aria_getRunning()

    getRunning = staticmethod(getRunning)
    def setDirectory(*args):
        """setDirectory(char directory)"""
        return _AriaPy.Aria_setDirectory(*args)

    setDirectory = staticmethod(setDirectory)
    def getDirectory():
        """getDirectory() -> char"""
        return _AriaPy.Aria_getDirectory()

    getDirectory = staticmethod(getDirectory)
    def parseArgs():
        """parseArgs() -> bool"""
        return _AriaPy.Aria_parseArgs()

    parseArgs = staticmethod(parseArgs)
    def logOptions():
        """logOptions()"""
        return _AriaPy.Aria_logOptions()

    logOptions = staticmethod(logOptions)
    def setKeyHandler(*args):
        """setKeyHandler(ArKeyHandler keyHandler)"""
        return _AriaPy.Aria_setKeyHandler(*args)

    setKeyHandler = staticmethod(setKeyHandler)
    def getKeyHandler():
        """getKeyHandler() -> ArKeyHandler"""
        return _AriaPy.Aria_getKeyHandler()

    getKeyHandler = staticmethod(getKeyHandler)
    def setJoyHandler(*args):
        """setJoyHandler(ArJoyHandler joyHandler)"""
        return _AriaPy.Aria_setJoyHandler(*args)

    setJoyHandler = staticmethod(setJoyHandler)
    def getJoyHandler():
        """getJoyHandler() -> ArJoyHandler"""
        return _AriaPy.Aria_getJoyHandler()

    getJoyHandler = staticmethod(getJoyHandler)
    def addExitCallback(*args):
        """
        addExitCallback(ArFunctor functor, int position = 50)
        addExitCallback(ArFunctor functor)
        """
        return _AriaPy.Aria_addExitCallback(*args)

    addExitCallback = staticmethod(addExitCallback)
    def remExitCallback(*args):
        """remExitCallback(ArFunctor functor)"""
        return _AriaPy.Aria_remExitCallback(*args)

    remExitCallback = staticmethod(remExitCallback)
    def setExitCallbacksLogLevel(*args):
        """setExitCallbacksLogLevel(LogLevel level)"""
        return _AriaPy.Aria_setExitCallbacksLogLevel(*args)

    setExitCallbacksLogLevel = staticmethod(setExitCallbacksLogLevel)
    def exitOld(exitCode = 0):
        """
        exitOld(int exitCode = 0)
        exitOld()
        """
        return _AriaPy.Aria_exitOld(exitCode)

    exitOld = staticmethod(exitOld)
    def signalHandlerCB(*args):
        """signalHandlerCB(int sig)"""
        return _AriaPy.Aria_signalHandlerCB(*args)

    signalHandlerCB = staticmethod(signalHandlerCB)
    def callExitCallbacks():
        """callExitCallbacks()"""
        return _AriaPy.Aria_callExitCallbacks()

    callExitCallbacks = staticmethod(callExitCallbacks)
    def addParseArgsCB(*args):
        """
        addParseArgsCB(ArRetFunctor_Bool functor, int position = 50)
        addParseArgsCB(ArRetFunctor_Bool functor)
        """
        return _AriaPy.Aria_addParseArgsCB(*args)

    addParseArgsCB = staticmethod(addParseArgsCB)
    def setParseArgLogLevel(*args):
        """setParseArgLogLevel(LogLevel level)"""
        return _AriaPy.Aria_setParseArgLogLevel(*args)

    setParseArgLogLevel = staticmethod(setParseArgLogLevel)
    def addLogOptionsCB(*args):
        """
        addLogOptionsCB(ArFunctor functor, int position = 50)
        addLogOptionsCB(ArFunctor functor)
        """
        return _AriaPy.Aria_addLogOptionsCB(*args)

    addLogOptionsCB = staticmethod(addLogOptionsCB)
    def deviceConnectionAddCreator(*args):
        """deviceConnectionAddCreator(char deviceConnectionType, ArRetFunctor3<(p.ArDeviceConnection,p.q(const).char,p.q(const).char,p.q(const).char)> creator) -> bool"""
        return _AriaPy.Aria_deviceConnectionAddCreator(*args)

    deviceConnectionAddCreator = staticmethod(deviceConnectionAddCreator)
    def deviceConnectionGetTypes():
        """deviceConnectionGetTypes() -> char"""
        return _AriaPy.Aria_deviceConnectionGetTypes()

    deviceConnectionGetTypes = staticmethod(deviceConnectionGetTypes)
    def deviceConnectionGetChoices():
        """deviceConnectionGetChoices() -> char"""
        return _AriaPy.Aria_deviceConnectionGetChoices()

    deviceConnectionGetChoices = staticmethod(deviceConnectionGetChoices)
    def deviceConnectionCreate(*args):
        """
        deviceConnectionCreate(char deviceConnectionType, char port, char defaultInfo, 
            char prefix = "Aria::deviceConnectionCreate") -> ArDeviceConnection
        deviceConnectionCreate(char deviceConnectionType, char port, char defaultInfo) -> ArDeviceConnection
        """
        return _AriaPy.Aria_deviceConnectionCreate(*args)

    deviceConnectionCreate = staticmethod(deviceConnectionCreate)
    def setRobotJoyHandler(*args):
        """setRobotJoyHandler(ArRobotJoyHandler robotJoyHandler)"""
        return _AriaPy.Aria_setRobotJoyHandler(*args)

    setRobotJoyHandler = staticmethod(setRobotJoyHandler)
    def getRobotJoyHandler():
        """getRobotJoyHandler() -> ArRobotJoyHandler"""
        return _AriaPy.Aria_getRobotJoyHandler()

    getRobotJoyHandler = staticmethod(getRobotJoyHandler)
    def getConfig():
        """getConfig() -> ArConfig"""
        return _AriaPy.Aria_getConfig()

    getConfig = staticmethod(getConfig)
    def getInfoGroup():
        """getInfoGroup() -> ArStringInfoGroup"""
        return _AriaPy.Aria_getInfoGroup()

    getInfoGroup = staticmethod(getInfoGroup)
    def addRobot(*args):
        """addRobot(ArRobot robot)"""
        return _AriaPy.Aria_addRobot(*args)

    addRobot = staticmethod(addRobot)
    def delRobot(*args):
        """delRobot(ArRobot robot)"""
        return _AriaPy.Aria_delRobot(*args)

    delRobot = staticmethod(delRobot)
    def findRobot(*args):
        """findRobot(char name) -> ArRobot"""
        return _AriaPy.Aria_findRobot(*args)

    findRobot = staticmethod(findRobot)
    def getRobotList():
        """getRobotList() -> std::list<(p.ArRobot,std::allocator<(p.ArRobot)>)>"""
        return _AriaPy.Aria_getRobotList()

    getRobotList = staticmethod(getRobotList)
    def getMaxNumLasers():
        """getMaxNumLasers() -> int"""
        return _AriaPy.Aria_getMaxNumLasers()

    getMaxNumLasers = staticmethod(getMaxNumLasers)
    def setMaxNumLasers(*args):
        """setMaxNumLasers(int maxNumLasers)"""
        return _AriaPy.Aria_setMaxNumLasers(*args)

    setMaxNumLasers = staticmethod(setMaxNumLasers)
    def getMaxNumSonarBoards():
        """getMaxNumSonarBoards() -> int"""
        return _AriaPy.Aria_getMaxNumSonarBoards()

    getMaxNumSonarBoards = staticmethod(getMaxNumSonarBoards)
    def setMaxNumSonarBoards(*args):
        """setMaxNumSonarBoards(int maxNumSonarBoards)"""
        return _AriaPy.Aria_setMaxNumSonarBoards(*args)

    setMaxNumSonarBoards = staticmethod(setMaxNumSonarBoards)
    def getMaxNumBatteries():
        """getMaxNumBatteries() -> int"""
        return _AriaPy.Aria_getMaxNumBatteries()

    getMaxNumBatteries = staticmethod(getMaxNumBatteries)
    def setMaxNumBatteries(*args):
        """setMaxNumBatteries(int maxNumBatteries)"""
        return _AriaPy.Aria_setMaxNumBatteries(*args)

    setMaxNumBatteries = staticmethod(setMaxNumBatteries)
    def getMaxNumLCDs():
        """getMaxNumLCDs() -> int"""
        return _AriaPy.Aria_getMaxNumLCDs()

    getMaxNumLCDs = staticmethod(getMaxNumLCDs)
    def setMaxNumLCDs(*args):
        """setMaxNumLCDs(int maxNumLCDs)"""
        return _AriaPy.Aria_setMaxNumLCDs(*args)

    setMaxNumLCDs = staticmethod(setMaxNumLCDs)
    def laserCreate(*args):
        """
        laserCreate(char laserType, int laserNumber, char prefix = "Aria::laserCreate") -> ArLaser
        laserCreate(char laserType, int laserNumber) -> ArLaser
        """
        return _AriaPy.Aria_laserCreate(*args)

    laserCreate = staticmethod(laserCreate)
    def laserAddCreator(*args):
        """laserAddCreator(char laserType, ArRetFunctor2<(p.ArLaser,int,p.q(const).char)> creator) -> bool"""
        return _AriaPy.Aria_laserAddCreator(*args)

    laserAddCreator = staticmethod(laserAddCreator)
    def laserGetTypes():
        """laserGetTypes() -> char"""
        return _AriaPy.Aria_laserGetTypes()

    laserGetTypes = staticmethod(laserGetTypes)
    def laserGetChoices():
        """laserGetChoices() -> char"""
        return _AriaPy.Aria_laserGetChoices()

    laserGetChoices = staticmethod(laserGetChoices)
    def batteryCreate(*args):
        """
        batteryCreate(char batteryType, int batteryNumber, char prefix = "Aria::batteryCreate") -> ArBatteryMTX
        batteryCreate(char batteryType, int batteryNumber) -> ArBatteryMTX
        """
        return _AriaPy.Aria_batteryCreate(*args)

    batteryCreate = staticmethod(batteryCreate)
    def batteryAddCreator(*args):
        """batteryAddCreator(char batteryType, ArRetFunctor2<(p.ArBatteryMTX,int,p.q(const).char)> creator) -> bool"""
        return _AriaPy.Aria_batteryAddCreator(*args)

    batteryAddCreator = staticmethod(batteryAddCreator)
    def batteryGetTypes():
        """batteryGetTypes() -> char"""
        return _AriaPy.Aria_batteryGetTypes()

    batteryGetTypes = staticmethod(batteryGetTypes)
    def batteryGetChoices():
        """batteryGetChoices() -> char"""
        return _AriaPy.Aria_batteryGetChoices()

    batteryGetChoices = staticmethod(batteryGetChoices)
    def lcdCreate(*args):
        """
        lcdCreate(char lcdType, int lcdNumber, char prefix = "Aria::lcdCreate") -> ArLCDMTX
        lcdCreate(char lcdType, int lcdNumber) -> ArLCDMTX
        """
        return _AriaPy.Aria_lcdCreate(*args)

    lcdCreate = staticmethod(lcdCreate)
    def lcdAddCreator(*args):
        """lcdAddCreator(char lcdType, ArRetFunctor2<(p.ArLCDMTX,int,p.q(const).char)> creator) -> bool"""
        return _AriaPy.Aria_lcdAddCreator(*args)

    lcdAddCreator = staticmethod(lcdAddCreator)
    def lcdGetTypes():
        """lcdGetTypes() -> char"""
        return _AriaPy.Aria_lcdGetTypes()

    lcdGetTypes = staticmethod(lcdGetTypes)
    def lcdGetChoices():
        """lcdGetChoices() -> char"""
        return _AriaPy.Aria_lcdGetChoices()

    lcdGetChoices = staticmethod(lcdGetChoices)
    def sonarCreate(*args):
        """
        sonarCreate(char sonarType, int sonarNumber, char prefix = "Aria::sonarCreate") -> ArSonarMTX
        sonarCreate(char sonarType, int sonarNumber) -> ArSonarMTX
        """
        return _AriaPy.Aria_sonarCreate(*args)

    sonarCreate = staticmethod(sonarCreate)
    def sonarAddCreator(*args):
        """sonarAddCreator(char sonarType, ArRetFunctor2<(p.ArSonarMTX,int,p.q(const).char)> creator) -> bool"""
        return _AriaPy.Aria_sonarAddCreator(*args)

    sonarAddCreator = staticmethod(sonarAddCreator)
    def sonarGetTypes():
        """sonarGetTypes() -> char"""
        return _AriaPy.Aria_sonarGetTypes()

    sonarGetTypes = staticmethod(sonarGetTypes)
    def sonarGetChoices():
        """sonarGetChoices() -> char"""
        return _AriaPy.Aria_sonarGetChoices()

    sonarGetChoices = staticmethod(sonarGetChoices)
    def setMaxNumVideoDevices(*args):
        """setMaxNumVideoDevices(size_t n)"""
        return _AriaPy.Aria_setMaxNumVideoDevices(*args)

    setMaxNumVideoDevices = staticmethod(setMaxNumVideoDevices)
    def getMaxNumVideoDevices():
        """getMaxNumVideoDevices() -> size_t"""
        return _AriaPy.Aria_getMaxNumVideoDevices()

    getMaxNumVideoDevices = staticmethod(getMaxNumVideoDevices)
    def setMaxNumPTZs(*args):
        """setMaxNumPTZs(size_t n)"""
        return _AriaPy.Aria_setMaxNumPTZs(*args)

    setMaxNumPTZs = staticmethod(setMaxNumPTZs)
    def getMaxNumPTZs():
        """getMaxNumPTZs() -> size_t"""
        return _AriaPy.Aria_getMaxNumPTZs()

    getMaxNumPTZs = staticmethod(getMaxNumPTZs)
    def getIdentifier():
        """getIdentifier() -> char"""
        return _AriaPy.Aria_getIdentifier()

    getIdentifier = staticmethod(getIdentifier)
    def setIdentifier(*args):
        """setIdentifier(char identifier)"""
        return _AriaPy.Aria_setIdentifier(*args)

    setIdentifier = staticmethod(setIdentifier)
    def __init__(self): 
        """__init__(self) -> Aria"""
        this = _AriaPy.new_Aria()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_Aria
    __del__ = lambda self : None;
Aria_swigregister = _AriaPy.Aria_swigregister
Aria_swigregister(Aria)

def Aria_init(*args):
  """
    init(SigHandleMethod method = SIGHANDLE_THREAD, bool initSockets = True, 
        bool sigHandleExitNotShutdown = True)
    init(SigHandleMethod method = SIGHANDLE_THREAD, bool initSockets = True)
    init(SigHandleMethod method = SIGHANDLE_THREAD)
    Aria_init()
    """
  return _AriaPy.Aria_init(*args)

def Aria_uninit():
  """Aria_uninit()"""
  return _AriaPy.Aria_uninit()

def Aria_addInitCallBack(*args):
  """Aria_addInitCallBack(ArFunctor cb, Pos position)"""
  return _AriaPy.Aria_addInitCallBack(*args)

def Aria_addUninitCallBack(*args):
  """Aria_addUninitCallBack(ArFunctor cb, Pos position)"""
  return _AriaPy.Aria_addUninitCallBack(*args)

def Aria_shutdown():
  """Aria_shutdown()"""
  return _AriaPy.Aria_shutdown()

def Aria_exit(exitCode = 0):
  """
    exit(int exitCode = 0)
    Aria_exit()
    """
  return _AriaPy.Aria_exit(exitCode)

def Aria_getRunning():
  """Aria_getRunning() -> bool"""
  return _AriaPy.Aria_getRunning()

def Aria_setDirectory(*args):
  """Aria_setDirectory(char directory)"""
  return _AriaPy.Aria_setDirectory(*args)

def Aria_getDirectory():
  """Aria_getDirectory() -> char"""
  return _AriaPy.Aria_getDirectory()

def Aria_parseArgs():
  """Aria_parseArgs() -> bool"""
  return _AriaPy.Aria_parseArgs()

def Aria_logOptions():
  """Aria_logOptions()"""
  return _AriaPy.Aria_logOptions()

def Aria_setKeyHandler(*args):
  """Aria_setKeyHandler(ArKeyHandler keyHandler)"""
  return _AriaPy.Aria_setKeyHandler(*args)

def Aria_getKeyHandler():
  """Aria_getKeyHandler() -> ArKeyHandler"""
  return _AriaPy.Aria_getKeyHandler()

def Aria_setJoyHandler(*args):
  """Aria_setJoyHandler(ArJoyHandler joyHandler)"""
  return _AriaPy.Aria_setJoyHandler(*args)

def Aria_getJoyHandler():
  """Aria_getJoyHandler() -> ArJoyHandler"""
  return _AriaPy.Aria_getJoyHandler()

def Aria_addExitCallback(*args):
  """
    addExitCallback(ArFunctor functor, int position = 50)
    Aria_addExitCallback(ArFunctor functor)
    """
  return _AriaPy.Aria_addExitCallback(*args)

def Aria_remExitCallback(*args):
  """Aria_remExitCallback(ArFunctor functor)"""
  return _AriaPy.Aria_remExitCallback(*args)

def Aria_setExitCallbacksLogLevel(*args):
  """Aria_setExitCallbacksLogLevel(LogLevel level)"""
  return _AriaPy.Aria_setExitCallbacksLogLevel(*args)

def Aria_exitOld(exitCode = 0):
  """
    exitOld(int exitCode = 0)
    Aria_exitOld()
    """
  return _AriaPy.Aria_exitOld(exitCode)

def Aria_signalHandlerCB(*args):
  """Aria_signalHandlerCB(int sig)"""
  return _AriaPy.Aria_signalHandlerCB(*args)

def Aria_callExitCallbacks():
  """Aria_callExitCallbacks()"""
  return _AriaPy.Aria_callExitCallbacks()

def Aria_addParseArgsCB(*args):
  """
    addParseArgsCB(ArRetFunctor_Bool functor, int position = 50)
    Aria_addParseArgsCB(ArRetFunctor_Bool functor)
    """
  return _AriaPy.Aria_addParseArgsCB(*args)

def Aria_setParseArgLogLevel(*args):
  """Aria_setParseArgLogLevel(LogLevel level)"""
  return _AriaPy.Aria_setParseArgLogLevel(*args)

def Aria_addLogOptionsCB(*args):
  """
    addLogOptionsCB(ArFunctor functor, int position = 50)
    Aria_addLogOptionsCB(ArFunctor functor)
    """
  return _AriaPy.Aria_addLogOptionsCB(*args)

def Aria_deviceConnectionAddCreator(*args):
  """Aria_deviceConnectionAddCreator(char deviceConnectionType, ArRetFunctor3<(p.ArDeviceConnection,p.q(const).char,p.q(const).char,p.q(const).char)> creator) -> bool"""
  return _AriaPy.Aria_deviceConnectionAddCreator(*args)

def Aria_deviceConnectionGetTypes():
  """Aria_deviceConnectionGetTypes() -> char"""
  return _AriaPy.Aria_deviceConnectionGetTypes()

def Aria_deviceConnectionGetChoices():
  """Aria_deviceConnectionGetChoices() -> char"""
  return _AriaPy.Aria_deviceConnectionGetChoices()

def Aria_deviceConnectionCreate(*args):
  """
    deviceConnectionCreate(char deviceConnectionType, char port, char defaultInfo, 
        char prefix = "Aria::deviceConnectionCreate") -> ArDeviceConnection
    Aria_deviceConnectionCreate(char deviceConnectionType, char port, char defaultInfo) -> ArDeviceConnection
    """
  return _AriaPy.Aria_deviceConnectionCreate(*args)

def Aria_setRobotJoyHandler(*args):
  """Aria_setRobotJoyHandler(ArRobotJoyHandler robotJoyHandler)"""
  return _AriaPy.Aria_setRobotJoyHandler(*args)

def Aria_getRobotJoyHandler():
  """Aria_getRobotJoyHandler() -> ArRobotJoyHandler"""
  return _AriaPy.Aria_getRobotJoyHandler()

def Aria_getConfig():
  """Aria_getConfig() -> ArConfig"""
  return _AriaPy.Aria_getConfig()

def Aria_getInfoGroup():
  """Aria_getInfoGroup() -> ArStringInfoGroup"""
  return _AriaPy.Aria_getInfoGroup()

def Aria_addRobot(*args):
  """Aria_addRobot(ArRobot robot)"""
  return _AriaPy.Aria_addRobot(*args)

def Aria_delRobot(*args):
  """Aria_delRobot(ArRobot robot)"""
  return _AriaPy.Aria_delRobot(*args)

def Aria_findRobot(*args):
  """Aria_findRobot(char name) -> ArRobot"""
  return _AriaPy.Aria_findRobot(*args)

def Aria_getRobotList():
  """Aria_getRobotList() -> std::list<(p.ArRobot,std::allocator<(p.ArRobot)>)>"""
  return _AriaPy.Aria_getRobotList()

def Aria_getMaxNumLasers():
  """Aria_getMaxNumLasers() -> int"""
  return _AriaPy.Aria_getMaxNumLasers()

def Aria_setMaxNumLasers(*args):
  """Aria_setMaxNumLasers(int maxNumLasers)"""
  return _AriaPy.Aria_setMaxNumLasers(*args)

def Aria_getMaxNumSonarBoards():
  """Aria_getMaxNumSonarBoards() -> int"""
  return _AriaPy.Aria_getMaxNumSonarBoards()

def Aria_setMaxNumSonarBoards(*args):
  """Aria_setMaxNumSonarBoards(int maxNumSonarBoards)"""
  return _AriaPy.Aria_setMaxNumSonarBoards(*args)

def Aria_getMaxNumBatteries():
  """Aria_getMaxNumBatteries() -> int"""
  return _AriaPy.Aria_getMaxNumBatteries()

def Aria_setMaxNumBatteries(*args):
  """Aria_setMaxNumBatteries(int maxNumBatteries)"""
  return _AriaPy.Aria_setMaxNumBatteries(*args)

def Aria_getMaxNumLCDs():
  """Aria_getMaxNumLCDs() -> int"""
  return _AriaPy.Aria_getMaxNumLCDs()

def Aria_setMaxNumLCDs(*args):
  """Aria_setMaxNumLCDs(int maxNumLCDs)"""
  return _AriaPy.Aria_setMaxNumLCDs(*args)

def Aria_laserCreate(*args):
  """
    laserCreate(char laserType, int laserNumber, char prefix = "Aria::laserCreate") -> ArLaser
    Aria_laserCreate(char laserType, int laserNumber) -> ArLaser
    """
  return _AriaPy.Aria_laserCreate(*args)

def Aria_laserAddCreator(*args):
  """Aria_laserAddCreator(char laserType, ArRetFunctor2<(p.ArLaser,int,p.q(const).char)> creator) -> bool"""
  return _AriaPy.Aria_laserAddCreator(*args)

def Aria_laserGetTypes():
  """Aria_laserGetTypes() -> char"""
  return _AriaPy.Aria_laserGetTypes()

def Aria_laserGetChoices():
  """Aria_laserGetChoices() -> char"""
  return _AriaPy.Aria_laserGetChoices()

def Aria_batteryCreate(*args):
  """
    batteryCreate(char batteryType, int batteryNumber, char prefix = "Aria::batteryCreate") -> ArBatteryMTX
    Aria_batteryCreate(char batteryType, int batteryNumber) -> ArBatteryMTX
    """
  return _AriaPy.Aria_batteryCreate(*args)

def Aria_batteryAddCreator(*args):
  """Aria_batteryAddCreator(char batteryType, ArRetFunctor2<(p.ArBatteryMTX,int,p.q(const).char)> creator) -> bool"""
  return _AriaPy.Aria_batteryAddCreator(*args)

def Aria_batteryGetTypes():
  """Aria_batteryGetTypes() -> char"""
  return _AriaPy.Aria_batteryGetTypes()

def Aria_batteryGetChoices():
  """Aria_batteryGetChoices() -> char"""
  return _AriaPy.Aria_batteryGetChoices()

def Aria_lcdCreate(*args):
  """
    lcdCreate(char lcdType, int lcdNumber, char prefix = "Aria::lcdCreate") -> ArLCDMTX
    Aria_lcdCreate(char lcdType, int lcdNumber) -> ArLCDMTX
    """
  return _AriaPy.Aria_lcdCreate(*args)

def Aria_lcdAddCreator(*args):
  """Aria_lcdAddCreator(char lcdType, ArRetFunctor2<(p.ArLCDMTX,int,p.q(const).char)> creator) -> bool"""
  return _AriaPy.Aria_lcdAddCreator(*args)

def Aria_lcdGetTypes():
  """Aria_lcdGetTypes() -> char"""
  return _AriaPy.Aria_lcdGetTypes()

def Aria_lcdGetChoices():
  """Aria_lcdGetChoices() -> char"""
  return _AriaPy.Aria_lcdGetChoices()

def Aria_sonarCreate(*args):
  """
    sonarCreate(char sonarType, int sonarNumber, char prefix = "Aria::sonarCreate") -> ArSonarMTX
    Aria_sonarCreate(char sonarType, int sonarNumber) -> ArSonarMTX
    """
  return _AriaPy.Aria_sonarCreate(*args)

def Aria_sonarAddCreator(*args):
  """Aria_sonarAddCreator(char sonarType, ArRetFunctor2<(p.ArSonarMTX,int,p.q(const).char)> creator) -> bool"""
  return _AriaPy.Aria_sonarAddCreator(*args)

def Aria_sonarGetTypes():
  """Aria_sonarGetTypes() -> char"""
  return _AriaPy.Aria_sonarGetTypes()

def Aria_sonarGetChoices():
  """Aria_sonarGetChoices() -> char"""
  return _AriaPy.Aria_sonarGetChoices()

def Aria_setMaxNumVideoDevices(*args):
  """Aria_setMaxNumVideoDevices(size_t n)"""
  return _AriaPy.Aria_setMaxNumVideoDevices(*args)

def Aria_getMaxNumVideoDevices():
  """Aria_getMaxNumVideoDevices() -> size_t"""
  return _AriaPy.Aria_getMaxNumVideoDevices()

def Aria_setMaxNumPTZs(*args):
  """Aria_setMaxNumPTZs(size_t n)"""
  return _AriaPy.Aria_setMaxNumPTZs(*args)

def Aria_getMaxNumPTZs():
  """Aria_getMaxNumPTZs() -> size_t"""
  return _AriaPy.Aria_getMaxNumPTZs()

def Aria_getIdentifier():
  """Aria_getIdentifier() -> char"""
  return _AriaPy.Aria_getIdentifier()

def Aria_setIdentifier(*args):
  """Aria_setIdentifier(char identifier)"""
  return _AriaPy.Aria_setIdentifier(*args)

class ArPyFunctor(ArFunctor):
    """Proxy of C++ ArPyFunctor class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, PyObject _m) -> ArPyFunctor"""
        this = _AriaPy.new_ArPyFunctor(*args)
        try: self.this.append(this)
        except: self.this = this
    def invoke(self):
        """invoke(self)"""
        return _AriaPy.ArPyFunctor_invoke(self)

    __swig_destroy__ = _AriaPy.delete_ArPyFunctor
    __del__ = lambda self : None;
    def getName(self):
        """getName(self) -> char"""
        return _AriaPy.ArPyFunctor_getName(self)

ArPyFunctor_swigregister = _AriaPy.ArPyFunctor_swigregister
ArPyFunctor_swigregister(ArPyFunctor)

class ArPyRetFunctor_Bool(ArRetFunctor_Bool,ArPyFunctor):
    """Proxy of C++ ArPyRetFunctor_Bool class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, PyObject _m) -> ArPyRetFunctor_Bool"""
        this = _AriaPy.new_ArPyRetFunctor_Bool(*args)
        try: self.this.append(this)
        except: self.this = this
    def invokeR(self):
        """invokeR(self) -> bool"""
        return _AriaPy.ArPyRetFunctor_Bool_invokeR(self)

    def getName(self):
        """getName(self) -> char"""
        return _AriaPy.ArPyRetFunctor_Bool_getName(self)

    __swig_destroy__ = _AriaPy.delete_ArPyRetFunctor_Bool
    __del__ = lambda self : None;
ArPyRetFunctor_Bool_swigregister = _AriaPy.ArPyRetFunctor_Bool_swigregister
ArPyRetFunctor_Bool_swigregister(ArPyRetFunctor_Bool)

class ArConfigArg_Bool(ArConfigArg):
    """Proxy of C++ ArConfigArg_Bool class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, char name, bool b, char desc = "") -> ArConfigArg_Bool
        __init__(self, char name, bool b) -> ArConfigArg_Bool
        """
        this = _AriaPy.new_ArConfigArg_Bool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArConfigArg_Bool
    __del__ = lambda self : None;
ArConfigArg_Bool_swigregister = _AriaPy.ArConfigArg_Bool_swigregister
ArConfigArg_Bool_swigregister(ArConfigArg_Bool)

class ArConfigArg_Int(ArConfigArg):
    """Proxy of C++ ArConfigArg_Int class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, char name, int i, char desc = "", int min = INT_MIN, 
            int max = INT_MAX) -> ArConfigArg_Int
        __init__(self, char name, int i, char desc = "", int min = INT_MIN) -> ArConfigArg_Int
        __init__(self, char name, int i, char desc = "") -> ArConfigArg_Int
        __init__(self, char name, int i) -> ArConfigArg_Int
        """
        this = _AriaPy.new_ArConfigArg_Int(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArConfigArg_Int
    __del__ = lambda self : None;
ArConfigArg_Int_swigregister = _AriaPy.ArConfigArg_Int_swigregister
ArConfigArg_Int_swigregister(ArConfigArg_Int)

class ArConfigArg_Double(ArConfigArg):
    """Proxy of C++ ArConfigArg_Double class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, char name, double d, char desc = "", double min = -HUGE_VAL, 
            double max = HUGE_VAL) -> ArConfigArg_Double
        __init__(self, char name, double d, char desc = "", double min = -HUGE_VAL) -> ArConfigArg_Double
        __init__(self, char name, double d, char desc = "") -> ArConfigArg_Double
        __init__(self, char name, double d) -> ArConfigArg_Double
        """
        this = _AriaPy.new_ArConfigArg_Double(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArConfigArg_Double
    __del__ = lambda self : None;
ArConfigArg_Double_swigregister = _AriaPy.ArConfigArg_Double_swigregister
ArConfigArg_Double_swigregister(ArConfigArg_Double)

class ArConfigArg_String(ArConfigArg):
    """Proxy of C++ ArConfigArg_String class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, char name, char str, char desc) -> ArConfigArg_String"""
        this = _AriaPy.new_ArConfigArg_String(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AriaPy.delete_ArConfigArg_String
    __del__ = lambda self : None;
ArConfigArg_String_swigregister = _AriaPy.ArConfigArg_String_swigregister
ArConfigArg_String_swigregister(ArConfigArg_String)



